{"projectName": "spring-projects/spring-batch", "bugLabels": ["pr-for: bug", "type: bug"], "captureTime": "Fri Jul  3 21:38:32 2020", "issues": [{"title": "After upgrade to spring batch 4.2.4 the application fails to getJobExecution", "body": "As part of cve-2020-5411 that found for spring batch 4.0.3 we need to upgrade spring batch to 4.2.4. our environment contains Spring boot 2.0.9 with springframework 5.0.13 and now upgraded spring-batch to 4.2.4 (java version 1.8.0_202).\r\n\r\nI have created new environment based on this setup that create workflow. In some point the code is trying to \"getJobExecution\" and fails with the following error:\r\n\r\n`java.lang.IllegalArgumentException: The class with com.emc.cloud_dr.cdr.commons.common_models.restore_service.VmFilesDescriptor and name of com.emc.cloud_dr.cdr.commons.common_models.restore_service.VmFilesDescriptor is not trusted. If you believe this class is safe to deserialize, please provide an explicit mapping using Jackson annotations or a custom ObjectMapper. If the serialization is only done by a trusted source, you can also enable default typing.\r\n        at org.springframework.batch.core.repository.dao.Jackson2ExecutionContextStringSerializer$TrustedTypeIdResolver.typeFromId(Jackson2ExecutionContextStringSerializer.java:329)\r\n        at com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._findDeserializer(TypeDeserializerBase.java:156)\r\n        at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:113)\r\n        at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:97)\r\n        at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromAny(AsPropertyTypeDeserializer.java:193)\r\n        at com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserializeWithType(UntypedObjectDeserializer.java:712)\r\n        at com.fasterxml.jackson.databind.deser.std.MapDeserializer._readAndBindStringKeyMap(MapDeserializer.java:529)\r\n        ... 127 common frames omitted\r\nWrapped by: com.fasterxml.jackson.databind.JsonMappingException: The class with com.emc.cloud_dr.cdr.commons.common_models.restore_service.VmFilesDescriptor and name of com.emc.cloud_dr.cdr.commons.common_models.restore_service.VmFilesDescriptor is not trusted. If you believe this class is safe to deserialize, please provide an explicit mapping using Jackson annotations or a custom ObjectMapper. If the serialization is only done by a trusted source, you can also enable default typing. (through reference chain: java.util.HashMap[\"vmFilesDescriptor\"])\r\n        at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:397)\r\n        at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:356)\r\n        at com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase.wrapAndThrow(ContainerDeserializerBase.java:181)\r\n        at com.fasterxml.jackson.databind.deser.std.MapDeserializer._readAndBindStringKeyMap(MapDeserializer.java:539)\r\n        at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:364)\r\n        at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:29)\r\n        at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:130)\r\n        at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:97)\r\n        at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserializeWithType(MapDeserializer.java:400)\r\n        at com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:68)\r\n        at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4218)\r\n        at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3259)\r\n        at org.springframework.batch.core.repository.dao.Jackson2ExecutionContextStringSerializer.deserialize(Jackson2ExecutionContextStringSerializer.java:123)\r\n        at org.springframework.batch.core.repository.dao.Jackson2ExecutionContextStringSerializer.deserialize(Jackson2ExecutionContextStringSerializer.java:102)\r\n        at org.springframework.batch.core.repository.dao.JdbcExecutionContextDao$ExecutionContextRowMapper.mapRow(JdbcExecutionContextDao.java:325)\r\n        ... 116 common frames omitted\r\nWrapped by: java.lang.IllegalArgumentException: Unable to deserialize the execution context\r\n        at org.springframework.batch.core.repository.dao.JdbcExecutionContextDao$ExecutionContextRowMapper.mapRow(JdbcExecutionContextDao.java:328)\r\n        at org.springframework.batch.core.repository.dao.JdbcExecutionContextDao$ExecutionContextRowMapper.mapRow(JdbcExecutionContextDao.java:312)\r\n        at org.springframework.jdbc.core.RowMapperResultSetExtractor.extractData(RowMapperResultSetExtractor.java:93)\r\n        at org.springframework.jdbc.core.RowMapperResultSetExtractor.extractData(RowMapperResultSetExtractor.java:60)\r\n        at org.springframework.jdbc.core.JdbcTemplate$1.doInPreparedStatement(JdbcTemplate.java:666)\r\n        at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:604)\r\n        at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:656)\r\n        at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:687)\r\n        at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:699)\r\n        at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:755)\r\n        at org.springframework.batch.core.repository.dao.JdbcExecutionContextDao.getExecutionContext(JdbcExecutionContextDao.java:114)\r\n        at org.springframework.batch.core.explore.support.SimpleJobExplorer.getJobExecutionDependencies(SimpleJobExplorer.java:232)\r\n        at org.springframework.batch.core.explore.support.SimpleJobExplorer.getJobExecution(SimpleJobExplorer.java:141)\r\n        at com.emc.cloud_dr.infra.workflow.utils.JobExecutionUtil.getJobExecutionOptional(JobExecutionUtil.java:118)`\r\n\r\nI have tried to activate default typing with PolymorphicTypeValidator but it failed to solve the issue.\r\nI tried to downgrade to 4.2.3 but similar issue happend.\r\n\r\n`PolymorphicTypeValidator ptv = BasicPolymorphicTypeValidator\r\n                .builder()\r\n                .allowIfBaseType(\"com.emc.cloud_dr.\")\r\n                .allowIfBaseType(\"java.util.\")\r\n                .build();\r\n        objectMapper.activateDefaultTyping(ptv, ObjectMapper.DefaultTyping.NON_FINAL);`\r\n\r\n**Bug description**\r\ncreate a workflow that persist several jobParameters\r\nin some stage getJobExecution\r\nfailure occur\r\n\r\n**Environment**\r\nPlease provide as many details as possible: Spring Batch version, Java version, which database you use if any, etc\r\n\r\nspring batch  4.2.4. Spring boot 2.0.9 with springframework 5.0.13 .java version 1.8.0_202. H2 DB.\r\n\r\n**Steps to reproduce**\r\ncreate a workflow that persist several jobParameters\r\nin some stage getJobExecution\r\nfailure occur\r\n\r\n**Expected behavior**\r\nget the job execution and continue as before.", "url": "https://github.com/spring-projects/spring-batch/issues/3733", "user": "oferfg4a", "labels": ["status: waiting-for-triage", "type: bug"], "created": "2020-06-23 14:38:11", "closed": "2020-06-23 14:51:32", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Jackson configuration in 4.2.4 broke deserialization", "body": "**Bug description**\r\nhttps://github.com/spring-projects/spring-batch/issues/3729 ported to 4.2.4 and pulled in springboot 2.3.1 broke old jobs context. \r\n\r\n**Environment**\r\nSpring Batch 2.3.1, jdk 11, PostgreSQL\r\n\r\n**Steps to reproduce**\r\n\r\n1. Configure and run a job with springboot 2.3.0. \r\n2. call `jobExplorer.getJobExecution(executionId)` using execution id of a job ran in a previous step\r\n3. Bump springboot to 2.3.1\r\n4. call `jobExplorer.getJobExecution(executionId)` using execution id of a job ran in a previous step\r\n5. Expect a stacktrace\r\n\r\n```\r\njava.lang.IllegalArgumentException: Unable to deserialize the execution context\r\n  at org.springframework.batch.core.repository.dao.JdbcExecutionContextDao$ExecutionContextRowMapper.mapRow(JdbcExecutionContextDao.java:328) ~[spring-batch-core-4.2.4.RELEASE.jar:4.2.4.RELEASE]\r\n  at org.springframework.batch.core.repository.dao.JdbcExecutionContextDao$ExecutionContextRowMapper.mapRow(JdbcExecutionContextDao.java:312) ~[spring-batch-core-4.2.4.RELEASE.jar:4.2.4.RELEASE]\r\n  at org.springframework.jdbc.core.RowMapperResultSetExtractor.extractData(RowMapperResultSetExtractor.java:94) ~[spring-jdbc-5.2.7.RELEASE.jar:5.2.7.RELEASE]\r\n  at org.springframework.jdbc.core.RowMapperResultSetExtractor.extractData(RowMapperResultSetExtractor.java:61) ~[spring-jdbc-5.2.7.RELEASE.jar:5.2.7.RELEASE]\r\n  at org.springframework.jdbc.core.JdbcTemplate$1.doInPreparedStatement(JdbcTemplate.java:679) ~[spring-jdbc-5.2.7.RELEASE.jar:5.2.7.RELEASE]\r\n  at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:617) ~[spring-jdbc-5.2.7.RELEASE.jar:5.2.7.RELEASE]\r\n  at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:669) ~[spring-jdbc-5.2.7.RELEASE.jar:5.2.7.RELEASE]\r\n  at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:700) ~[spring-jdbc-5.2.7.RELEASE.jar:5.2.7.RELEASE]\r\n  at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:712) ~[spring-jdbc-5.2.7.RELEASE.jar:5.2.7.RELEASE]\r\n  at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:768) ~[spring-jdbc-5.2.7.RELEASE.jar:5.2.7.RELEASE]\r\n  at org.springframework.batch.core.repository.dao.JdbcExecutionContextDao.getExecutionContext(JdbcExecutionContextDao.java:114) ~[spring-batch-core-4.2.4.RELEASE.jar:4.2.4.RELEASE]\r\n  at org.springframework.batch.core.explore.support.SimpleJobExplorer.getJobExecutionDependencies(SimpleJobExplorer.java:232) ~[spring-batch-core-4.2.4.RELEASE.jar:4.2.4.RELEASE]\r\n  at org.springframework.batch.core.explore.support.SimpleJobExplorer.getJobExecution(SimpleJobExplorer.java:141) ~[spring-batch-core-4.2.4.RELEASE.jar:4.2.4.RELEASE]\r\n  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]\r\n  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]\r\n  at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]\r\n  at java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\r\n  at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.7.RELEASE.jar:5.2.7.RELEASE]\r\n  at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.7.RELEASE.jar:5.2.7.RELEASE]\r\n  at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.7.RELEASE.jar:5.2.7.RELEASE]\r\n  at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127) ~[spring-batch-core-4.2.4.RELEASE.jar:4.2.4.RELEASE]\r\n  at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.7.RELEASE.jar:5.2.7.RELEASE]\r\n  at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.7.RELEASE.jar:5.2.7.RELEASE]\r\n  at com.sun.proxy.$Proxy123.getJobExecution(Unknown Source) ~[na:na]\r\n```\r\nSKIPPED trace\r\n```\r\nCaused by: com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Missing type id when trying to resolve subtype of [map type; class java.util.HashMap, [simple type, class java.lang.String] -> [simple type, class java.lang.Object]]: missing type id property '@class'\r\n at [Source: (ByteArrayInputStream); line: 1, column: 2]\r\n  at com.fasterxml.jackson.databind.exc.InvalidTypeIdException.from(InvalidTypeIdException.java:43) ~[jackson-databind-2.11.0.jar:2.11.0]\r\n  at com.fasterxml.jackson.databind.DeserializationContext.missingTypeIdException(DeserializationContext.java:1790) ~[jackson-databind-2.11.0.jar:2.11.0]\r\n  at com.fasterxml.jackson.databind.DeserializationContext.handleMissingTypeId(DeserializationContext.java:1319) ~[jackson-databind-2.11.0.jar:2.11.0]\r\n  at com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._handleMissingTypeId(TypeDeserializerBase.java:303) ~[jackson-databind-2.11.0.jar:2.11.0]\r\n  at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedUsingDefaultImpl(AsPropertyTypeDeserializer.java:166) ~[jackson-databind-2.11.0.jar:2.11.0]\r\n  at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:107) ~[jackson-databind-2.11.0.jar:2.11.0]\r\n  at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserializeWithType(MapDeserializer.java:400) ~[jackson-databind-2.11.0.jar:2.11.0]\r\n  at com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:68) ~[jackson-databind-2.11.0.jar:2.11.0]\r\n  at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4482) ~[jackson-databind-2.11.0.jar:2.11.0]\r\n  at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3479) ~[jackson-databind-2.11.0.jar:2.11.0]\r\n  at org.springframework.batch.core.repository.dao.Jackson2ExecutionContextStringSerializer.deserialize(Jackson2ExecutionContextStringSerializer.java:123) ~[spring-batch-core-4.2.4.RELEASE.jar:4.2.4.RELEASE]\r\n  at org.springframework.batch.core.repository.dao.Jackson2ExecutionContextStringSerializer.deserialize(Jackson2ExecutionContextStringSerializer.java:102) ~[spring-batch-core-4.2.4.RELEASE.jar:4.2.4.RELEASE]\r\n  at org.springframework.batch.core.repository.dao.JdbcExecutionContextDao$ExecutionContextRowMapper.mapRow(JdbcExecutionContextDao.java:325) ~[spring-batch-core-4.2.4.RELEASE.jar:4.2.4.RELEASE]\r\n  ... 128 common frames omitted\r\n```\r\n\r\n`batch_job_execution_context` table values change. All job executions before 886 blow up with above.\r\n![image](https://user-images.githubusercontent.com/5395732/85323651-64f39300-b496-11ea-972c-00b6aae8b76b.png)\r\n\r\n**Expected behavior**\r\nNo exception occurs in deserialization", "url": "https://github.com/spring-projects/spring-batch/issues/3732", "user": "Z-EMB", "labels": ["status: waiting-for-triage", "type: bug"], "created": "2020-06-22 18:42:55", "closed": "2020-06-22 19:37:08", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Issue during using memory based storage in integration tests of code which is using JobScope", "body": "Hello team,\r\n\r\nI've faced some troubles with testing the code with JobScope, but only in case if I have many integration tests (basically one by one works fine, but not batch of tests).\r\n\r\nI've found the the problem is, the problem in \r\norg.springframework.batch.core.repository.dao.MapJobInstanceDao line 59\r\n\r\n`JobInstance jobInstance = new JobInstance(currentId.getAndIncrement(), jobName);`\r\n\r\nDuring the tests the instance of MapJobInstanceDao recreating for every test (at least) because of current implementation.\r\n\r\nBut the instance of JobSynchronizationManager.manager remain the same (for all tests, and because it static, it's not part of the spring and can't be recreated, like MapJobInstanceDao) because if's static method and as you know **manager** (SynchronizationManagerSupport)  has \r\n`private final ThreadLocal<Stack<E>> executionHolder = new ThreadLocal<Stack<E>>();`\r\nWhich also remain the same for all tests.\r\n\r\nSo because of constantly recreating of MapJobInstanceDao we have all the time job instance id = 0 (in tests).\r\n\r\nIn SynchronizationManagerSupport in order to get context using whole object of JobExecution, but as you know ThreadLocal using map, so to get item the equals+hashCode is using, but JobExecution extends Entity and as result we have same id = 0 for all contexts. I want to remain what ThreadLocal contain all execution contexts. So as the result I have in ThreadLocal completed job (with job instance 0) and during the test It's trying to get instance of new Job (with same job instance 0) and I found it in the context.\r\n\r\nProbably I'm doing something wrong.\r\n\r\nCould you give me a hit is it a bug or expected behaviour? \r\n\r\nVersion:\r\norg.springframework.boot:spring-boot-starter-batch:2.1.12.RELEASE\r\n", "url": "https://github.com/spring-projects/spring-batch/issues/3730", "user": "ebezdomnikov", "labels": ["status: waiting-for-triage", "type: bug"], "created": "2020-06-18 06:27:36", "closed": "2020-06-18 08:49:35", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Incorrect Jackson configuration", "body": "Jackson configuration should be updated to disable default typing.\r\n", "url": "https://github.com/spring-projects/spring-batch/issues/3729", "user": "benas", "labels": ["has: backports", "in: core", "type: bug"], "created": "2020-06-10 19:34:37", "closed": "2020-06-11 16:02:49", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "if throttle-limit = 1  , it gets stuck sometimes.", "body": "**Bug description**\r\nwhen throttle-limit = 1  , it gets stuck sometimes.\r\n\r\n**Environment**\r\n Spring Batch 4.1.2.RELEASE\r\n\r\n\r\n", "url": "https://github.com/spring-projects/spring-batch/issues/3728", "user": "wy-coder", "labels": ["status: waiting-for-triage", "type: bug"], "created": "2020-06-09 06:29:30", "closed": "2020-06-10 01:01:29", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "JdbcBatchItemWriter chunck contains 20 items of the same object while 20 diffrent items have been read. ", "body": "**Bug description**\r\nI have created a simple JdbcCursorItemReader that reads a 20 items or so from a db table.\r\nthen i have the JdbcBatchItemWriter that writes the data to a diffrent database.\r\n\r\nThe itemReaderListener lets me see that i read the items correctly into the chunk.\r\nand the itemwriter shows that the chunck that i am about te write contains the size of the chunk but all items are the same:\r\n2020-06-05 16:22:57,360 | INFO  | 22636 | o.s.batch.core.job.SimpleStepHandler     | TaskExecutor-11 | Executing step: [migrate.document]\r\n***AFTER READ : DataPumpObj [properties=DACTIONDATE: 2020-06-05 08:50:00.0, DACTIONMILLIS: 104043, ID: 1, column1: 1, user: sysadmin]\r\n***AFTER READ : DataPumpObj [properties=DACTIONDATE: 2020-06-05 08:50:00.0, DACTIONMILLIS: 164339, ID: 2, column1: 2, user: sysadmin]\r\n***AFTER READ : DataPumpObj [properties=DACTIONDATE: 2020-06-05 08:50:00.0, DACTIONMILLIS: 224425, ID: 3, column1: 3, user: sysadmin]\r\n***AFTER READ : DataPumpObj [properties=DACTIONDATE: 2020-06-05 08:50:00.0, DACTIONMILLIS: 284467, ID: 4, column1: 4, user: sysadmin]\r\n***AFTER READ : DataPumpObj [properties=DACTIONDATE: 2020-06-05 08:50:00.0, DACTIONMILLIS: 344509, ID: 5, column1: 5, user: sysadmin]\r\n***AFTER READ : DataPumpObj [properties=DACTIONDATE: 2020-06-05 08:50:00.0, DACTIONMILLIS: 404540, ID: 6, column1: 6, user: sysadmin]\r\n***AFTER READ : DataPumpObj [properties=DACTIONDATE: 2020-06-05 08:50:00.0, DACTIONMILLIS: 464574, ID: 7, column1: 7, user: sysadmin]\r\n***AFTER READ : DataPumpObj [properties=DACTIONDATE: 2020-06-05 08:50:00.0, DACTIONMILLIS: 524604, ID: 8, column1: 8, user: sysadmin]\r\n***AFTER READ : DataPumpObj [properties=DACTIONDATE: 2020-06-05 08:50:00.0, DACTIONMILLIS: 584680, ID: 9, column1: 9, user: sysadmin]\r\n***AFTER READ : DataPumpObj [properties=DACTIONDATE: 2020-06-05 08:50:00.0, DACTIONMILLIS: 644738, ID: 10, column1: 10, user: sysadmin]\r\n***AFTER READ : DataPumpObj [properties=DACTIONDATE: 2020-06-05 08:50:00.0, DACTIONMILLIS: 704774, ID: 11, column1: 11, user: sysadmin]\r\n***AFTER READ : DataPumpObj [properties=DACTIONDATE: 2020-06-05 08:50:00.0, DACTIONMILLIS: 764811, ID: 12, column1: 12, user: sysadmin]\r\n***AFTER READ : DataPumpObj [properties=DACTIONDATE: 2020-06-05 08:50:00.0, DACTIONMILLIS: 824837, ID: 13, column1: 13, user: sysadmin]\r\n***AFTER READ : DataPumpObj [properties=DACTIONDATE: 2020-06-05 08:50:00.0, DACTIONMILLIS: 884877, ID: 14, column1: 14, user: sysadmin]\r\n***AFTER READ : DataPumpObj [properties=DACTIONDATE: 2020-06-05 08:50:00.0, DACTIONMILLIS: 944905, ID: 15, column1: 15, user: sysadmin]\r\n***AFTER READ : DataPumpObj [properties=DACTIONDATE: 2020-06-05 08:50:00.0, DACTIONMILLIS: 1004944, ID: 16, column1: 16, user: sysadmin]\r\n***AFTER READ : DataPumpObj [properties=DACTIONDATE: 2020-06-05 08:50:00.0, DACTIONMILLIS: 1064979, ID: 17, column1: 17, user: sysadmin]\r\n***AFTER READ : DataPumpObj [properties=DACTIONDATE: 2020-06-05 08:50:00.0, DACTIONMILLIS: 1125016, ID: 18, column1: 18, user: sysadmin]\r\n***AFTER READ : DataPumpObj [properties=DACTIONDATE: 2020-06-05 08:52:00.0, DACTIONMILLIS: 1164389, ID: 19, column1: 37, user: weblogic]\r\n***AFTER READ : DataPumpObj [properties=DACTIONDATE: 2020-06-05 08:52:00.0, DACTIONMILLIS: 1233974, ID: 20, column1: 38, user: weblogic]\r\n***BEFORE WRITE **************************************\r\nsize of batch:20\r\nDataPumpObj [properties=DACTIONDATE: 2020-06-05 08:52:00.0, DACTIONMILLIS: 1233974, ID: 20, column1: 38, user: weblogic]\r\nDataPumpObj [properties=DACTIONDATE: 2020-06-05 08:52:00.0, DACTIONMILLIS: 1233974, ID: 20, column1: 38, user: weblogic]\r\nDataPumpObj [properties=DACTIONDATE: 2020-06-05 08:52:00.0, DACTIONMILLIS: 1233974, ID: 20, column1: 38, user: weblogic]\r\nDataPumpObj [properties=DACTIONDATE: 2020-06-05 08:52:00.0, DACTIONMILLIS: 1233974, ID: 20, column1: 38, user: weblogic]\r\nDataPumpObj [properties=DACTIONDATE: 2020-06-05 08:52:00.0, DACTIONMILLIS: 1233974, ID: 20, column1: 38, user: weblogic]\r\nDataPumpObj [properties=DACTIONDATE: 2020-06-05 08:52:00.0, DACTIONMILLIS: 1233974, ID: 20, column1: 38, user: weblogic]\r\nDataPumpObj [properties=DACTIONDATE: 2020-06-05 08:52:00.0, DACTIONMILLIS: 1233974, ID: 20, column1: 38, user: weblogic]\r\nDataPumpObj [properties=DACTIONDATE: 2020-06-05 08:52:00.0, DACTIONMILLIS: 1233974, ID: 20, column1: 38, user: weblogic]\r\nDataPumpObj [properties=DACTIONDATE: 2020-06-05 08:52:00.0, DACTIONMILLIS: 1233974, ID: 20, column1: 38, user: weblogic]\r\nDataPumpObj [properties=DACTIONDATE: 2020-06-05 08:52:00.0, DACTIONMILLIS: 1233974, ID: 20, column1: 38, user: weblogic]\r\nDataPumpObj [properties=DACTIONDATE: 2020-06-05 08:52:00.0, DACTIONMILLIS: 1233974, ID: 20, column1: 38, user: weblogic]\r\nDataPumpObj [properties=DACTIONDATE: 2020-06-05 08:52:00.0, DACTIONMILLIS: 1233974, ID: 20, column1: 38, user: weblogic]\r\nDataPumpObj [properties=DACTIONDATE: 2020-06-05 08:52:00.0, DACTIONMILLIS: 1233974, ID: 20, column1: 38, user: weblogic]\r\nDataPumpObj [properties=DACTIONDATE: 2020-06-05 08:52:00.0, DACTIONMILLIS: 1233974, ID: 20, column1: 38, user: weblogic]\r\nDataPumpObj [properties=DACTIONDATE: 2020-06-05 08:52:00.0, DACTIONMILLIS: 1233974, ID: 20, column1: 38, user: weblogic]\r\nDataPumpObj [properties=DACTIONDATE: 2020-06-05 08:52:00.0, DACTIONMILLIS: 1233974, ID: 20, column1: 38, user: weblogic]\r\nDataPumpObj [properties=DACTIONDATE: 2020-06-05 08:52:00.0, DACTIONMILLIS: 1233974, ID: 20, column1: 38, user: weblogic]\r\nDataPumpObj [properties=DACTIONDATE: 2020-06-05 08:52:00.0, DACTIONMILLIS: 1233974, ID: 20, column1: 38, user: weblogic]\r\nDataPumpObj [properties=DACTIONDATE: 2020-06-05 08:52:00.0, DACTIONMILLIS: 1233974, ID: 20, column1: 38, user: weblogic]\r\nDataPumpObj [properties=DACTIONDATE: 2020-06-05 08:52:00.0, DACTIONMILLIS: 1233974, ID: 20, column1: 38, user: weblogic]\r\n\r\n\r\n**Environment**\r\nRunning with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE\r\n        <parent>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t\t<version>2.2.6.RELEASE</version>\r\n\t\t<relativePath/> <!-- lookup parent from repository -->\r\n\t</parent>\r\n\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-batch</artifactId>\r\n\t\t</dependency>\r\n\r\nI am using an Oracle database  version 12c\r\nAnd i am using java 8.\r\n\r\n**Steps to reproduce**\r\ncreate a database reader and a JdbcBatchItemWriter in a step.\r\nand have the itemWriter listener do a print of the chunck in the console.\r\n\r\n**Expected behavior**\r\nthe chunk(10) for the item writer to contain 10 different objects in its list\r\nin order to not get insert errors with unique constraint errors.", "url": "https://github.com/spring-projects/spring-batch/issues/3727", "user": "ElienDe", "labels": ["status: waiting-for-triage", "type: bug"], "created": "2020-06-05 14:31:52", "closed": "2020-06-12 10:21:01", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "Spring Boot batch job does not shut down automatically after completion when using JPA", "body": "**Bug description**\r\nI notice that  a spring boot batch application does not shut down automatically after completing a job when using Spring data JPA. The job completes successfully but the spring boot application remains running and has to be stopped manually (e.g. by pressing `Ctrl + C`).\r\n\r\n**Environment**\r\nSpring boot version: **2.3.0.RELEASE**\r\nJava version: **1.8**\r\nOS: **Windows**\r\n\r\n**Steps to reproduce**\r\n1. Create a new spring boot project from https://start.spring.io/\r\n2. Add the following dependencies:\r\n- `spring-boot-starter-batch`\r\n- `spring-boot-starter-data-jpa`\r\n- `h2`\r\n3. Create a tasklet step\r\n4. Configure a spring batch job referencing the tasklet step\r\n\r\n**Expected behavior**\r\nThe job should execute successfully, and shut down automatically.\r\n\r\n**Minimal Complete Reproducible example**\r\n\r\nDependencies in pom.xml\r\n```xml\r\n<dependency>\r\n\t<groupId>org.springframework.boot</groupId>\r\n\t<artifactId>spring-boot-starter-batch</artifactId>\r\n</dependency>\r\n<dependency>\r\n\t<groupId>org.springframework.boot</groupId>\r\n\t<artifactId>spring-boot-starter-data-jpa</artifactId>\r\n</dependency>\r\n<dependency>\r\n\t<groupId>com.h2database</groupId>\r\n\t<artifactId>h2</artifactId>\r\n\t<scope>runtime</scope>\r\n</dependency>\r\n```\r\n\r\nBatch configuration class\r\n\r\n```java\r\n@Configuration\r\npublic class BatchConfiguration {\r\n\r\n    @Bean\r\n    public Job sampleJob(JobBuilderFactory jobBuilderFactory, Step step1) {\r\n        return jobBuilderFactory.get(\"sampleJob\").incrementer(new RunIdIncrementer()).flow(step1).end().build();\r\n    }\r\n\r\n    @Bean\r\n    public Step step1(StepBuilderFactory stepBuilderFactory, StepTasklet tasklet) {\r\n        return stepBuilderFactory.get(\"step1\").tasklet(tasklet).build();\r\n    }\r\n\r\n}\r\n```\r\n\r\nTasklet step class\r\n\r\n```java\r\npublic class StepTasklet implements Tasklet {\r\n\r\n    @Override\r\n    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {\r\n        System.out.println(\"Executing tasklet step...\");\r\n        return RepeatStatus.FINISHED;\r\n    }\r\n    \r\n}\r\n```\r\n", "url": "https://github.com/spring-projects/spring-batch/issues/3725", "user": "martinmogusu", "labels": ["status: waiting-for-triage", "type: bug"], "created": "2020-06-05 00:54:08", "closed": "2020-06-23 15:33:04", "commits": {}, "ttf": 18.00027777777778, "commitsDetails": []}, {"title": "Unable to set \"connectionAutoCommit\" parameter with JdbcCursorItemReaderBuilder", "body": "**Bug description**\r\nAbstractCursorItemReader has parameter \"connectionAutoCommit\" that is not configurable with JdbcCursorItemReaderBuilder\r\n\r\n**Expected behavior**\r\n\"connectionAutoCommit\" can be configured with JdbcCursorItemReaderBuilder\r\n\r\n**Additional info**\r\nThe parameter \"connectionAutoCommit\"  was added in https://github.com/spring-projects/spring-batch/pull/446\r\n", "url": "https://github.com/spring-projects/spring-batch/issues/3717", "user": "qwazer", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2020-05-25 08:46:11", "closed": "2020-06-03 09:22:39", "commits": {"bbabe0263ac60777f65a6ba7ea1fbf323e7d8f81": {"commitGHEventType": "referenced", "commitUser": "benas"}, "6052852db6f3e7b6f1606d57fd5a90f0b0acc74e": {"commitGHEventType": "referenced", "commitUser": "benas"}}, "ttf": 9.000277777777777, "commitsDetails": [{"commitHash": "bbabe0263ac60777f65a6ba7ea1fbf323e7d8f81", "commitGHEventType": "referenced", "commitUser": "benas", "commitParents": ["8a6a2bd19a0ab8a39d356520d84a3e2575ad3591"], "nameRev": "bbabe0263ac60777f65a6ba7ea1fbf323e7d8f81 tags/4.3.0-M1~8", "commitMessage": "Add connectionAutoCommit property in JdbcCursorItemReaderBuilder\n\nIssue #3717\n", "commitDateTime": "2020-06-02 21:13:28", "authoredDateTime": "2020-05-26 18:43:20", "commitGitStats": [{"filePath": "spring-batch-infrastructure/src/main/java/org/springframework/batch/item/database/builder/JdbcCursorItemReaderBuilder.java", "insertions": 19, "deletions": 1, "lines": 20}, {"filePath": "spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JdbcCursorItemReaderBuilderTests.java", "insertions": 4, "deletions": 1, "lines": 5}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JdbcCursorItemReaderBuilder.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.item.database.builder.JdbcCursorItemReaderBuilder", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.batch.item.database.builder.JdbcCursorItemReaderBuilder.connectionAutoCommit(boolean)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.batch.item.database.builder.JdbcCursorItemReaderBuilder.build()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JdbcCursorItemReaderBuilderTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.item.database.builder.JdbcCursorItemReaderBuilderTests.testOtherProperties()", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "6052852db6f3e7b6f1606d57fd5a90f0b0acc74e", "commitGHEventType": "referenced", "commitUser": "benas", "commitParents": ["fe222d323e5f958fa503b6cd74e993c10318ecf8"], "nameRev": "6052852db6f3e7b6f1606d57fd5a90f0b0acc74e tags/4.2.3.RELEASE~3", "commitMessage": "Add connectionAutoCommit property in JdbcCursorItemReaderBuilder\n\nIssue #3717\n", "commitDateTime": "2020-06-03 11:12:57", "authoredDateTime": "2020-05-26 18:43:20", "commitGitStats": [{"filePath": "spring-batch-infrastructure/src/main/java/org/springframework/batch/item/database/builder/JdbcCursorItemReaderBuilder.java", "insertions": 19, "deletions": 1, "lines": 20}, {"filePath": "spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JdbcCursorItemReaderBuilderTests.java", "insertions": 4, "deletions": 1, "lines": 5}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JdbcCursorItemReaderBuilder.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.item.database.builder.JdbcCursorItemReaderBuilder", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.batch.item.database.builder.JdbcCursorItemReaderBuilder.connectionAutoCommit(boolean)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.batch.item.database.builder.JdbcCursorItemReaderBuilder.build()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JdbcCursorItemReaderBuilderTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.item.database.builder.JdbcCursorItemReaderBuilderTests.testOtherProperties()", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["bbabe0263ac60777f65a6ba7ea1fbf323e7d8f81"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 19, "deletions": 1, "lines": 20, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-batch-infrastructure/src/main/java/org/springframework/batch/item/database/builder"], "changesInPackagesSPOON": ["org.springframework.batch.item.database.builder.JdbcCursorItemReaderBuilder.connectionAutoCommit(boolean)", "org.springframework.batch.item.database.builder.JdbcCursorItemReaderBuilder", "org.springframework.batch.item.database.builder.JdbcCursorItemReaderBuilder.build()"]}, {"title": "Spring batch Step after JMS Reader/Processor/Writer step is not getting triggered", "body": "Our spring batch needs to have 2 steps\r\n\r\nStep1 : Deque's a message from JMS and process the message and write output data to a file. Step 2 : Partitioned step that contain 2 slave steps .Each salve step applies a different algortihm on step1 output data.\r\n\r\nIssue: Step 2 is never invoked . Tried to attach a Step listener to step 1 (and also to writer) and it was never executed. It looks like step1 is always in continued state and hence step2 (Partitioned step) is never getting executed.\r\n\r\nObservation : When replaced JMSReader in step 1 with Normal (File/DB) Reader, control goes to Step2\r\n\r\npublic TransactionAwareConnectionFactoryProxy activeMQConnectionFactory() {\r\n        ActiveMQConnectionFactory amqConnectionFactory = new ActiveMQConnectionFactory(ActiveMQConnection.DEFAULT_BROKER_URL);\r\n        TransactionAwareConnectionFactoryProxy activeMQConnectionFactory = new TransactionAwareConnectionFactoryProxy(amqConnectionFactory);\r\n        return activeMQConnectionFactory;\r\n    }\r\n\r\n    @Bean\r\n    public ActiveMQQueue defaultQueue() {\r\n        return new ActiveMQQueue(\"batch-test\");\r\n    }\r\n\r\n    @Bean\r\n    @DependsOn(value = { \"activeMQConnectionFactory\", \"defaultQueue\" })\r\n    public JmsTemplate firstQueueTemplate(ActiveMQQueue defaultQueue, TransactionAwareConnectionFactoryProxy activeMQConnectionFactory) {\r\n        JmsTemplate firstQueueTemplate = new JmsTemplate(activeMQConnectionFactory);\r\n        firstQueueTemplate.setDefaultDestination(defaultQueue);\r\n        firstQueueTemplate.setSessionTransacted(true);\r\n        firstQueueTemplate.setReceiveTimeout(Long.MAX_VALUE);\r\n        return firstQueueTemplate;\r\n    }\r\n\r\n    @Bean(name = \"partitionerJob\")\r\n    public Job partitionerJob() throws UnexpectedInputException, MalformedURLException, ParseException {\r\n        return jobs.get(\"partitionerJob\")\r\n          .start(ingestionstep())\r\n          .next(partitionStep())\r\n          .build();\r\n    }\r\n\r\n\r\n\r\n\r\n    @Bean\r\n    public Step ingestionstep() throws UnexpectedInputException, MalformedURLException, ParseException {\r\n        System.out.println(\"ingestionstep forming\");\r\n        return steps.get(\"ingsetionstep\")\r\n                .<SPDRIngestScanBO, SPDRIngestScanBO>chunk(1)\r\n                  .reader(jmsItemReader())\r\n                  .processor(ingestionProcessor())\r\n                  .writer(ingestionwriter() )\r\n                  .listener(new StepExecutionListener() {\r\n\r\n                                @Override\r\n                                public void beforeStep(StepExecution stepExecution) {\r\n                                    // TODO Auto-generated method stub\r\n\r\n                                }\r\n\r\n                                @Override\r\n                                public ExitStatus afterStep(StepExecution stepExecution) {\r\n                                    System.out.println(\"step exit status :\"+stepExecution.getExitStatus());\r\n                                    return null;\r\n                                }\r\n                })\r\n                 // .listener(promotionListener())\r\n\r\n                  .build();\r\n    }\r\n\r\n\r\n\r\n\r\n   @Bean\r\n    @StepScope\r\n    public Step partitionStep() throws UnexpectedInputException, MalformedURLException, ParseException {\r\n        System.out.println(\" Inside partitionStep method \");\r\n        return steps.get(\"partitionStep\")\r\n                 .partitioner(\"partitionscans\", partitioner(null))\r\n                 .gridSize(2)\r\n                 .step(scanStep())\r\n                 .taskExecutor(taskExecutor())\r\n                 .build();\r\n    }\r\n\r\n    @Bean\r\n    public JmsItemReader<SPDRIngestScanBO> jmsItemReader() {\r\n        JmsItemReader<SPDRIngestScanBO> jmsItemReader = new JmsItemReader<>();\r\n        jmsItemReader.setJmsTemplate(jmsTemplate);\r\n        jmsItemReader.setItemType(SPDRIngestScanBO.class);\r\n\r\n        return jmsItemReader;\r\n    }\r\n\r\n    @Bean\r\n    public  SPDRIngestionStepProcessor  ingestionProcessor() {\r\n        return new SPDRIngestionStepProcessor();\r\n    }\r\n\r\n    @Bean\r\n    public  SPDRIngestionStepWriter  ingestionwriter() {\r\n        return new SPDRIngestionStepWriter();\r\n    }\r\n\r\n\r\n    @Bean\r\n    @StepScope\r\n    public ModelsPartitioner partitioner(@Value(\"#{jobExecutionContext[models]}\")  List<SPDRScanModelBO> models) {\r\n\r\n        ModelsPartitioner partitioner = new ModelsPartitioner();\r\n        partitioner.setModels(models);\r\n       System.out.println(\"----partitioner----\");\r\n        return partitioner;\r\n    }\r\n\r\n\r\n    @Bean\r\n    @StepScope\r\n    public Step scanStep() throws UnexpectedInputException, MalformedURLException, ParseException {\r\n        return steps.get(\"scanstep\")\r\n          .<SPDRScanModelBO, SPDRScanResultBO>chunk(1)\r\n          .reader(scanStepReader(null))\r\n          .processor(scanStepProcessor())\r\n          .writer(scanStepWriter())\r\n          .build();\r\n    }\r\n\r\n\r\n  @Bean\r\n  @StepScope\r\n  public SPDRScanStepReader scanStepReader(@Value(\"#{stepExecutionContext[model]}\") SPDRScanModelBO scanModelBO){\r\n      System.out.println(\"----scanStepReader----\"); \r\n      SPDRScanStepReader scanStepReader = new SPDRScanStepReader();\r\n      scanStepReader.setScanModelBO(scanModelBO);\r\n      return scanStepReader;\r\n\r\n  }\r\n\r\n  @Bean\r\n  @StepScope\r\n  public SPDRScanStepProcessor scanStepProcessor(){\r\n\r\n      SPDRScanStepProcessor scanStepProcessor = new SPDRScanStepProcessor();\r\n      return scanStepProcessor;\r\n\r\n  }\r\n\r\n  @Bean\r\n  @StepScope\r\n  public SPDRScanStepWriter scanStepWriter(){\r\n\r\n      SPDRScanStepWriter scanStepWriter = new SPDRScanStepWriter();\r\n      return scanStepWriter;\r\n\r\n  }\r\n\r\n    @Bean\r\n    @StepScope\r\n    public TaskExecutor taskExecutor() {\r\n        ThreadPoolTaskExecutor taskExecutor = new ThreadPoolTaskExecutor();\r\n        taskExecutor.setMaxPoolSize(2);\r\n        taskExecutor.setCorePoolSize(2);\r\n        taskExecutor.setQueueCapacity(2);\r\n        taskExecutor.afterPropertiesSet();\r\n        return taskExecutor;\r\n    }\r\n", "url": "https://github.com/spring-projects/spring-batch/issues/3716", "user": "rushikesavareddy", "labels": ["status: waiting-for-triage", "type: bug"], "created": "2020-05-23 06:20:37", "closed": "2020-05-26 08:17:16", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "Misleading code example in reference documentation", "body": "In the Spring official docs, [here](https://docs.spring.io/spring-batch/docs/current-SNAPSHOT/reference/html/spring-batch-integration.html#spring-batch-integration-configuration), in the Java configuration code under **Spring Batch Integration Configuration**, there is a typo that is misleading. The `handle()` should be `transform()` in the `integrationFlow` method. \r\n\r\nArtem Bilan asked me to raise this issue when I asked him about it on a [question](https://stackoverflow.com/questions/61100608/why-do-i-get-the-exception-found-ambiguous-parameter-type-spring-batch-integr) in StackOverflow.", "url": "https://github.com/spring-projects/spring-batch/issues/3692", "user": "JacksonPhoong", "labels": ["has: backports", "in: documentation", "status: first-timers-only", "type: bug"], "created": "2020-04-09 05:28:10", "closed": "2020-05-25 21:02:31", "commits": {"7a775cf2d583fa01b4922fabc5ebf9183ac90246": {"commitGHEventType": "referenced", "commitUser": "benas"}}, "ttf": 46.000277777777775, "commitsDetails": [{"commitHash": "7a775cf2d583fa01b4922fabc5ebf9183ac90246", "commitGHEventType": "referenced", "commitUser": "benas", "commitParents": ["91aa17b22ff7dbca683f1af3ef66e63562e8267d"], "nameRev": "7a775cf2d583fa01b4922fabc5ebf9183ac90246 tags/4.3.0-M1~15", "commitMessage": "Fix misleading Java Code in documentation\n\nResolves #3692", "commitDateTime": "2020-05-25 23:02:30", "authoredDateTime": "2020-05-26 02:20:30", "commitGitStats": [{"filePath": "spring-batch-docs/asciidoc/spring-batch-integration.adoc", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["7a775cf2d583fa01b4922fabc5ebf9183ac90246"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-batch-docs/asciidoc/spring-batch-integration.adoc"]}, {"title": "`FlatFileItemReaderBuilder` reports error \"Only one LineTokenizer option may be configured\" when none are.", "body": "At line [472](https://github.com/spring-projects/spring-batch/blob/master/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemReaderBuilder.java#L472) of the `FlatFileItemReaderBuilder` it validates that not multiple `LineTokenizers` implementations have been configured.  However, if the user has not configured one (`validatorValue == 0` on that line), they get the same message implying that multiple have been configured.  This error message should not be thrown if `validatorValue == 0`.  The case of no `LineTokenizer` being configured is already handled at line [487](https://github.com/spring-projects/spring-batch/blob/master/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemReaderBuilder.java#L487) of that class anyways.", "url": "https://github.com/spring-projects/spring-batch/issues/3688", "user": "mminella", "labels": ["has: backports", "in: infrastructure", "status: first-timers-only", "type: bug"], "created": "2020-03-31 15:37:17", "closed": "2020-03-31 21:16:04", "commits": {"fb21b30d7d68306b5ab400694502ccd7b2eb8269": {"commitGHEventType": "closed", "commitUser": "mminella"}, "70063d39963875792fb54ac48b1035fe49fe732d": {"commitGHEventType": "referenced", "commitUser": "mminella"}, "46ff95f12d61c81d4a97dc91ab12e91307716b3a": {"commitGHEventType": "referenced", "commitUser": "mminella"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "fb21b30d7d68306b5ab400694502ccd7b2eb8269", "commitGHEventType": "closed", "commitUser": "mminella", "commitParents": ["a7450d51087f4838c0f5121596e4d0b1a4222a5f"], "nameRev": "fb21b30d7d68306b5ab400694502ccd7b2eb8269 tags/4.3.0-M1~44", "commitMessage": "Fixed FlatFileItemReaderBuilder LineTokenizer validation\n\nFixed validation for the FlatFileItemReaderBuilder where no\nLineTokenizer had been provided.\n\nResolves: #3688\n", "commitDateTime": "2020-03-31 16:14:02", "authoredDateTime": "2020-03-31 14:46:49", "commitGitStats": [{"filePath": "spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemReaderBuilder.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/builder/FlatFileItemReaderBuilderTests.java", "insertions": 12, "deletions": 0, "lines": 12}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FlatFileItemReaderBuilder.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.item.file.builder.FlatFileItemReaderBuilder.build()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "FlatFileItemReaderBuilderTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.item.file.builder.FlatFileItemReaderBuilderTests.testErrorMessageWhenNoLineTokenizerWasProvided()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "70063d39963875792fb54ac48b1035fe49fe732d", "commitGHEventType": "referenced", "commitUser": "mminella", "commitParents": ["efe30c62ea51e23fbeddd583bbec0fe0ecd60a28"], "nameRev": "70063d39963875792fb54ac48b1035fe49fe732d tags/4.2.2.RELEASE~1", "commitMessage": "Fixed FlatFileItemReaderBuilder LineTokenizer validation\n\nFixed validation for the FlatFileItemReaderBuilder where no\nLineTokenizer had been provided.\n\nResolves: #3688\n", "commitDateTime": "2020-03-31 16:18:18", "authoredDateTime": "2020-03-31 14:46:49", "commitGitStats": [{"filePath": "spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemReaderBuilder.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/builder/FlatFileItemReaderBuilderTests.java", "insertions": 12, "deletions": 0, "lines": 12}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FlatFileItemReaderBuilder.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.item.file.builder.FlatFileItemReaderBuilder.build()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "FlatFileItemReaderBuilderTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.item.file.builder.FlatFileItemReaderBuilderTests.testErrorMessageWhenNoLineTokenizerWasProvided()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "46ff95f12d61c81d4a97dc91ab12e91307716b3a", "commitGHEventType": "referenced", "commitUser": "mminella", "commitParents": ["c165d5f17373afe46c22fb0e0b421a14a3fee394"], "nameRev": "46ff95f12d61c81d4a97dc91ab12e91307716b3a tags/4.1.4.RELEASE~2", "commitMessage": "Fixed FlatFileItemReaderBuilder LineTokenizer validation\n\nFixed validation for the FlatFileItemReaderBuilder where no\nLineTokenizer had been provided.\n\nResolves: #3688\n", "commitDateTime": "2020-03-31 16:26:31", "authoredDateTime": "2020-03-31 14:46:49", "commitGitStats": [{"filePath": "spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemReaderBuilder.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/builder/FlatFileItemReaderBuilderTests.java", "insertions": 12, "deletions": 0, "lines": 12}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FlatFileItemReaderBuilder.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.item.file.builder.FlatFileItemReaderBuilder.build()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "FlatFileItemReaderBuilderTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.item.file.builder.FlatFileItemReaderBuilderTests.testErrorMessageWhenNoLineTokenizerWasProvided()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["fb21b30d7d68306b5ab400694502ccd7b2eb8269"], "filteredCommitsReason": {"duplicated": 2, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder"], "changesInPackagesSPOON": ["org.springframework.batch.item.file.builder.FlatFileItemReaderBuilder.build()"]}, {"title": "The constructor of JsonItemReader should call setExecutionContextName()", "body": "When the constructor of JsonItemReader is called directly and  `open(ExectionConext)` is called, it makes exceptions at `ExecutionContextUserSupport.getKey(..)`\r\n\r\n```java\r\n    JsonItemReader<AccessLog> reader = new JsonItemReader<AccessLog>(resource, jsonObjectReader);\r\n    reader.open(new ExecutionContext());\r\n    AccessLog item = reader.read();\r\n    reader.close();\r\n```\r\n\r\n```\r\njava.lang.IllegalArgumentException: Name must be assigned for the sake of defining the execution context keys prefix.\r\n\r\n\tat org.springframework.util.Assert.hasText(Assert.java:284)\r\n\tat org.springframework.batch.item.util.ExecutionContextUserSupport.getKey(ExecutionContextUserSupport.java:62)\r\n\tat org.springframework.batch.item.ItemStreamSupport.getExecutionContextKey(ItemStreamSupport.java:71)\r\n\tat org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:159)\r\n```\r\nThe constructor of JsonItemReader should call `setExecutionContextName(String)` similar to [JsonFileItemWriter.java#L71](https://github.com/spring-projects/spring-batch/blob/master/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/json/JsonFileItemWriter.java#L71)\r\n", "url": "https://github.com/spring-projects/spring-batch/issues/3681", "user": "benelog", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2020-03-18 20:56:13", "closed": "2020-03-24 17:36:57", "commits": {"b9fa9c37867829762e61e499c1d16a20b1c9e9c9": {"commitGHEventType": "referenced", "commitUser": "benas"}}, "ttf": 5.000277777777778, "commitsDetails": [{"commitHash": "b9fa9c37867829762e61e499c1d16a20b1c9e9c9", "commitGHEventType": "referenced", "commitUser": "benas", "commitParents": ["0ecc0521908a9892e4e18e09cee20dfd20580871"], "nameRev": "b9fa9c37867829762e61e499c1d16a20b1c9e9c9 tags/4.3.0-M1~48", "commitMessage": "Fix constructor of JsonItemReader to call setExecutionContextName()\n\nResolves #3681\n", "commitDateTime": "2020-03-24 18:36:56", "authoredDateTime": "2020-03-19 05:58:54", "commitGitStats": [{"filePath": "spring-batch-infrastructure/src/main/java/org/springframework/batch/item/json/JsonItemReader.java", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "spring-batch-infrastructure/src/test/java/org/springframework/batch/item/json/JsonItemReaderTests.java", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JsonItemReader.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.item.json.JsonItemReader", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JsonItemReaderTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.item.json.JsonItemReaderTests.testReadItem()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["b9fa9c37867829762e61e499c1d16a20b1c9e9c9"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 1, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-batch-infrastructure/src/main/java/org/springframework/batch/item/json"], "changesInPackagesSPOON": ["org.springframework.batch.item.json.JsonItemReader"]}, {"title": "MongoItemReaderBuilder shouldn't be throwing an error related to the limit in query when pageSize is provided", "body": "https://github.com/spring-projects/spring-batch/blob/8e8f9c8101b52b64050d8e92363de2d28319e3b0/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/data/builder/MongoItemReaderBuilder.java#L290\r\n\r\nFor example: \r\n```\r\nnew MongoItemReaderBuilder<Document>()\r\n            .collection(\"test\")\r\n            .template(mongoTemplate)\r\n            .targetType(Document.class)\r\n            .query(Query.query(Criteria.where(\"active\").is(false))\r\n            .sorts(ImmutableMap.of(\"_id\", Sort.Direction.ASC))\r\n            .pageSize(100)\r\n            .build();\r\n```\r\n\r\nThe line throw an error in MongoItemReaderBuilder:\r\nAssert.state(this.query.getLimit() != 0, \"PageSize in Query object was ignored.\")\r\n\r\nThis has been just a warning in MongoItemReader:\r\nlog.warn(\"PageSize in Query object was ignored. Please set it by MongoItemReader.setPageSize().\");", "url": "https://github.com/spring-projects/spring-batch/issues/3673", "user": "kexsteve", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2020-02-26 18:44:45", "closed": "2020-04-23 10:33:35", "commits": {}, "ttf": 56.000277777777775, "commitsDetails": []}, {"title": "FaultTolerantChunkProcessor does not collect metrics like SimpleChunkProcessor", "body": "@benas @mminella \r\nWhen we enabled the faultTolerant() StepBuilder we noticed that the spring_batch_chunk_write_seconds_count stopped  showing in Grafana.\r\nLooking at the source code, we saw that FaultTolerantChunkProcessor indeed don collect this metrics.\r\n\r\nSimpleChunkProcessor.java\r\n```java\r\n\tprotected void write(StepContribution contribution, Chunk<I> inputs, Chunk<O> outputs) throws Exception {\r\n\t\tTimer.Sample sample = BatchMetrics.createTimerSample();\r\n\t\tString status = BatchMetrics.STATUS_SUCCESS;\r\n\t\ttry {\r\n\t\t\tdoWrite(outputs.getItems());\r\n\t\t}\r\n\t\tcatch (Exception e) {\r\n\t\t\t/*\r\n\t\t\t * For a simple chunk processor (no fault tolerance) we are done\r\n\t\t\t * here, so prevent any more processing of these inputs.\r\n\t\t\t */\r\n\t\t\tinputs.clear();\r\n\t\t\tstatus = BatchMetrics.STATUS_FAILURE;\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tstopTimer(sample, contribution.getStepExecution(), \"chunk.write\", status, \"Chunk writing\");\r\n\t\t}\r\n\t\tcontribution.incrementWriteCount(outputs.size());\r\n\t}\r\n```\r\n\r\nFaultTolerantChunkProcessor.java\r\n```java\r\n\tprotected void write(final StepContribution contribution, final Chunk<I> inputs, final Chunk<O> outputs)\r\n\t\t\tthrows Exception {\r\n\t\t@SuppressWarnings(\"unchecked\")\r\n\t\tfinal UserData<O> data = (UserData<O>) inputs.getUserData();\r\n\t\tfinal AtomicReference<RetryContext> contextHolder = new AtomicReference<>();\r\n\r\n\t\tRetryCallback<Object, Exception> retryCallback = new RetryCallback<Object, Exception>() {\r\n\t\t\t@Override\r\n\t\t\tpublic Object doWithRetry(RetryContext context) throws Exception {\r\n\t\t\t\tcontextHolder.set(context);\r\n\r\n\t\t\t\tif (!data.scanning()) {\r\n\t\t\t\t\tchunkMonitor.setChunkSize(inputs.size());\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tdoWrite(outputs.getItems());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (Exception e) {\r\n\t\t\t\t\t\tif (rollbackClassifier.classify(e)) {\r\n\t\t\t\t\t\t\tthrow e;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t * If the exception is marked as no-rollback, we need to\r\n\t\t\t\t\t\t * override that, otherwise there's no way to write the\r\n\t\t\t\t\t\t * rest of the chunk or to honour the skip listener\r\n\t\t\t\t\t\t * contract.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tthrow new ForceRollbackForWriteSkipException(\r\n\t\t\t\t\t\t\t\t\"Force rollback on skippable exception so that skipped item can be located.\", e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcontribution.incrementWriteCount(outputs.size());\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tscan(contribution, inputs, outputs, chunkMonitor, false);\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif (!buffering) {\r\n\r\n\t\t\tRecoveryCallback<Object> batchRecoveryCallback = new RecoveryCallback<Object>() {\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object recover(RetryContext context) throws Exception {\r\n\r\n\t\t\t\t\tThrowable e = context.getLastThrowable();\r\n\t\t\t\t\tif (outputs.size() > 1 && !rollbackClassifier.classify(e)) {\r\n\t\t\t\t\t\tthrow new RetryException(\"Invalid retry state during write caused by \"\r\n\t\t\t\t\t\t\t\t+ \"exception that does not classify for rollback: \", e);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tChunk<I>.ChunkIterator inputIterator = inputs.iterator();\r\n\t\t\t\t\tfor (Chunk<O>.ChunkIterator outputIterator = outputs.iterator(); outputIterator.hasNext();) {\r\n\r\n\t\t\t\t\t\tinputIterator.next();\r\n\t\t\t\t\t\toutputIterator.next();\r\n\r\n\t\t\t\t\t\tcheckSkipPolicy(inputIterator, outputIterator, e, contribution, true);\r\n\t\t\t\t\t\tif (!rollbackClassifier.classify(e)) {\r\n\t\t\t\t\t\t\tthrow new RetryException(\r\n\t\t\t\t\t\t\t\t\t\"Invalid retry state during recovery caused by exception that does not classify for rollback: \",\r\n\t\t\t\t\t\t\t\t\te);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t\tbatchRetryTemplate.execute(retryCallback, batchRecoveryCallback,\r\n\t\t\t\t\tBatchRetryTemplate.createState(getInputKeys(inputs), rollbackClassifier));\r\n\r\n\t\t}\r\n\t\telse {\r\n\r\n\t\t\tRecoveryCallback<Object> recoveryCallback = new RecoveryCallback<Object>() {\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object recover(RetryContext context) throws Exception {\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t * If the last exception was not skippable we don't need to\r\n\t\t\t\t\t * do any scanning. We can just bomb out with a retry\r\n\t\t\t\t\t * exhausted.\r\n\t\t\t\t\t */\r\n\t\t\t\t\tif (!shouldSkip(itemWriteSkipPolicy, context.getLastThrowable(), -1)) {\r\n\t\t\t\t\t\tthrow new ExhaustedRetryException(\r\n\t\t\t\t\t\t\t\t\"Retry exhausted after last attempt in recovery path, but exception is not skippable.\",\r\n\t\t\t\t\t\t\t\tcontext.getLastThrowable());\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tinputs.setBusy(true);\r\n\t\t\t\t\tdata.scanning(true);\r\n\t\t\t\t\tscan(contribution, inputs, outputs, chunkMonitor, true);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t\tif (logger.isDebugEnabled()) {\r\n\t\t\t\tlogger.debug(\"Attempting to write: \" + inputs);\r\n\t\t\t}\r\n\t\t\ttry {\r\n\t\t\t\tbatchRetryTemplate.execute(retryCallback, recoveryCallback, new DefaultRetryState(inputs,\r\n\t\t\t\t\t\trollbackClassifier));\r\n\t\t\t}\r\n\t\t\tcatch (Exception e) {\r\n\t\t\t\tRetryContext context = contextHolder.get();\r\n\t\t\t\tif (!batchRetryTemplate.canRetry(context)) {\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t * BATCH-1761: we need advance warning of the scan about to\r\n\t\t\t\t\t * start in the next transaction, so we can change the\r\n\t\t\t\t\t * processing behaviour.\r\n\t\t\t\t\t */\r\n\t\t\t\t\tdata.scanning(true);\r\n\t\t\t\t}\r\n\t\t\t\tthrow e;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tcallSkipListeners(inputs, outputs);\r\n\r\n\t}\r\n```\r\n\r\n", "url": "https://github.com/spring-projects/spring-batch/issues/3664", "user": "fredgcosta", "labels": ["has: backports", "in: core", "type: bug"], "created": "2020-02-14 15:11:50", "closed": "2020-03-31 14:46:02", "commits": {"6cca32fde0542f7e16c68a051604e63c8bb4cda5": {"commitGHEventType": "closed", "commitUser": "benas"}, "274cad09f37cbb41ec0dd51ea1b48dba84ca3029": {"commitGHEventType": "referenced", "commitUser": "benas"}}, "ttf": 45.000277777777775, "commitsDetails": [{"commitHash": "6cca32fde0542f7e16c68a051604e63c8bb4cda5", "commitGHEventType": "closed", "commitUser": "benas", "commitParents": ["d933e4d7df62cb07badcb8263f96d9002300a1b1"], "nameRev": "6cca32fde0542f7e16c68a051604e63c8bb4cda5 tags/4.3.0-M1~46", "commitMessage": "Fix metrics collection in FaultTolerantChunkProcessor\n\nBefore this commit, metrics were not collected in a fault-tolerant step.\nThis commit updates the FaultTolerantChunkProcessor to collect metrics.\n\nFor the record, chunk scanning is not covered for two reasons:\n\n1. When scanning a chunk, there is a single item in each write operation,\nso it would be incorrect to report a metric called \"chunk.write\" for a\nsingle item. We could argue that it is a singleton chunk, but still..\nIf we want to time scanned (aka individual) items, we need a more fine\ngrained timer called \"scanned.item.write\" for example.\n\n2. The end result can be confusing and might distort the overall metrics\nview in case of errors (because of the noisy metrics of additional transactions\nfor individual items).\n\nAs a reminder, the goal of the \"chunk.write\" metric is to give an overview\nof the write operation time of the whole chunk and not to time each item\nindividually (this could be done using an `ItemWriteListener` if needed).\n\nResolves #3664\n", "commitDateTime": "2020-03-31 16:37:12", "authoredDateTime": "2020-02-17 14:10:02", "commitGitStats": [{"filePath": "spring-batch-core/src/main/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessor.java", "insertions": 17, "deletions": 1, "lines": 18}, {"filePath": "spring-batch-core/src/main/java/org/springframework/batch/core/step/item/SimpleChunkProcessor.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "spring-batch-samples/src/test/java/org/springframework/batch/sample/metrics/BatchMetricsTests.java", "insertions": 72, "deletions": 20, "lines": 92}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FaultTolerantChunkProcessor.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.core.step.item.FaultTolerantChunkProcessor.transform(org.springframework.batch.core.StepContribution,org.springframework.batch.core.step.item.Chunk).1.doWithRetry(org.springframework.retry.RetryContext)", "TOT": 4, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.batch.core.step.item.FaultTolerantChunkProcessor.write(org.springframework.batch.core.StepContribution,org.springframework.batch.core.step.item.Chunk,org.springframework.batch.core.step.item.Chunk).3.doWithRetry(org.springframework.retry.RetryContext)", "TOT": 4, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "SimpleChunkProcessor.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.core.step.item.SimpleChunkProcessor.stopTimer(io.micrometer.core.instrument.Timer$Sample,org.springframework.batch.core.StepExecution,java.lang.String,java.lang.String,java.lang.String)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "FaultTolerantChunkProcessorTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.core.step.item.FaultTolerantChunkProcessorTests", "TOT": 3, "UPD": 2, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "BatchMetricsTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.sample.metrics.BatchMetricsTests", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.batch.sample.metrics.BatchMetricsTests.MyJobConfiguration.step2()", "TOT": 12, "UPD": 5, "INS": 1, "MOV": 5, "DEL": 1}, {"spoonMethodName": "org.springframework.batch.sample.metrics.BatchMetricsTests.MyJobConfiguration.itemReader()", "TOT": 10, "UPD": 1, "INS": 0, "MOV": 3, "DEL": 6}, {"spoonMethodName": "org.springframework.batch.sample.metrics.BatchMetricsTests.MyJobConfiguration.job()", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.springframework.batch.sample.metrics.BatchMetricsTests.MyJobConfiguration.itemWriter()", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.springframework.batch.sample.metrics.BatchMetricsTests.testBatchMetrics()", "TOT": 4, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.batch.sample.metrics.BatchMetricsTests.MyJobConfiguration.step3()", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "274cad09f37cbb41ec0dd51ea1b48dba84ca3029", "commitGHEventType": "referenced", "commitUser": "benas", "commitParents": ["0a0a2ec8029dec954d1a67d6ed55292e943b66b3"], "nameRev": "274cad09f37cbb41ec0dd51ea1b48dba84ca3029 tags/4.2.2.RELEASE~4", "commitMessage": "Fix metrics collection in FaultTolerantChunkProcessor\n\nBefore this commit, metrics were not collected in a fault-tolerant step.\nThis commit updates the FaultTolerantChunkProcessor to collect metrics.\n\nFor the record, chunk scanning is not covered for two reasons:\n\n1. When scanning a chunk, there is a single item in each write operation,\nso it would be incorrect to report a metric called \"chunk.write\" for a\nsingle item. We could argue that it is a singleton chunk, but still..\nIf we want to time scanned (aka individual) items, we need a more fine\ngrained timer called \"scanned.item.write\" for example.\n\n2. The end result can be confusing and might distort the overall metrics\nview in case of errors (because of the noisy metrics of additional transactions\nfor individual items).\n\nAs a reminder, the goal of the \"chunk.write\" metric is to give an overview\nof the write operation time of the whole chunk and not to time each item\nindividually (this could be done using an `ItemWriteListener` if needed).\n\nResolves #3664\n", "commitDateTime": "2020-03-31 16:46:33", "authoredDateTime": "2020-02-17 14:10:02", "commitGitStats": [{"filePath": "spring-batch-core/src/main/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessor.java", "insertions": 17, "deletions": 1, "lines": 18}, {"filePath": "spring-batch-core/src/main/java/org/springframework/batch/core/step/item/SimpleChunkProcessor.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "spring-batch-samples/src/test/java/org/springframework/batch/sample/metrics/BatchMetricsTests.java", "insertions": 72, "deletions": 20, "lines": 92}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FaultTolerantChunkProcessor.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.core.step.item.FaultTolerantChunkProcessor.transform(org.springframework.batch.core.StepContribution,org.springframework.batch.core.step.item.Chunk).1.doWithRetry(org.springframework.retry.RetryContext)", "TOT": 4, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.batch.core.step.item.FaultTolerantChunkProcessor.write(org.springframework.batch.core.StepContribution,org.springframework.batch.core.step.item.Chunk,org.springframework.batch.core.step.item.Chunk).3.doWithRetry(org.springframework.retry.RetryContext)", "TOT": 4, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "SimpleChunkProcessor.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.core.step.item.SimpleChunkProcessor.stopTimer(io.micrometer.core.instrument.Timer$Sample,org.springframework.batch.core.StepExecution,java.lang.String,java.lang.String,java.lang.String)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "FaultTolerantChunkProcessorTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.core.step.item.FaultTolerantChunkProcessorTests", "TOT": 3, "UPD": 2, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "BatchMetricsTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.sample.metrics.BatchMetricsTests", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.batch.sample.metrics.BatchMetricsTests.MyJobConfiguration.step2()", "TOT": 12, "UPD": 5, "INS": 1, "MOV": 5, "DEL": 1}, {"spoonMethodName": "org.springframework.batch.sample.metrics.BatchMetricsTests.MyJobConfiguration.itemReader()", "TOT": 10, "UPD": 1, "INS": 0, "MOV": 3, "DEL": 6}, {"spoonMethodName": "org.springframework.batch.sample.metrics.BatchMetricsTests.MyJobConfiguration.job()", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.springframework.batch.sample.metrics.BatchMetricsTests.MyJobConfiguration.itemWriter()", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.springframework.batch.sample.metrics.BatchMetricsTests.testBatchMetrics()", "TOT": 4, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.batch.sample.metrics.BatchMetricsTests.MyJobConfiguration.step3()", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["6cca32fde0542f7e16c68a051604e63c8bb4cda5"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 18, "deletions": 2, "lines": 20, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 9, "UPD": 1, "INS": 8, "MOV": 0, "DEL": 0, "spoonFilesChanged": 2, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-batch-core/src/main/java/org/springframework/batch/core/step/item"], "changesInPackagesSPOON": ["org.springframework.batch.core.step.item.FaultTolerantChunkProcessor.write(org.springframework.batch.core.StepContribution,org.springframework.batch.core.step.item.Chunk,org.springframework.batch.core.step.item.Chunk).3.doWithRetry(org.springframework.retry.RetryContext)", "org.springframework.batch.core.step.item.SimpleChunkProcessor.stopTimer(io.micrometer.core.instrument.Timer$Sample,org.springframework.batch.core.StepExecution,java.lang.String,java.lang.String,java.lang.String)", "org.springframework.batch.core.step.item.FaultTolerantChunkProcessor.transform(org.springframework.batch.core.StepContribution,org.springframework.batch.core.step.item.Chunk).1.doWithRetry(org.springframework.retry.RetryContext)"]}, {"title": "Incorrect reference to `stop` method in documentation", "body": "The section [`Stopping a Job Manually for Business Reasons`](https://docs.spring.io/spring-batch/docs/current/reference/html/common-patterns.html#stoppingAJobManuallyForBusinessReasons) has an incorrect reference to a `stop` method in the `JobLauncher` interface:\r\n\r\n```\r\nSpring Batch provides a stop() method through the JobLauncher interface, but this is really for use by the operator rather than the application programmer.\r\n```\r\n\r\n`JobLauncher` has no `stop` method, the doc should rather say \"through the JobOperator interface\".", "url": "https://github.com/spring-projects/spring-batch/issues/3643", "user": "benas", "labels": ["in: documentation", "status: ideal-for-contribution", "type: bug"], "created": "2020-01-02 15:05:43", "closed": "2020-05-20 10:40:40", "commits": {"da2a5da79cc9d30ef31b96435a99d99398421144": {"commitGHEventType": "referenced", "commitUser": "benas"}}, "ttf": 138.00027777777777, "commitsDetails": [{"commitHash": "da2a5da79cc9d30ef31b96435a99d99398421144", "commitGHEventType": "referenced", "commitUser": "benas", "commitParents": ["2ef32cb06904b522e3fada09d51b703091a88d02"], "nameRev": "da2a5da79cc9d30ef31b96435a99d99398421144 tags/4.3.0-M1~18", "commitMessage": "Fix typo in documentation\n\nIssue #3643", "commitDateTime": "2020-05-20 12:38:10", "authoredDateTime": "2020-05-20 12:38:10", "commitGitStats": [{"filePath": "spring-batch-docs/asciidoc/common-patterns.adoc", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["da2a5da79cc9d30ef31b96435a99d99398421144"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-batch-docs/asciidoc/common-patterns.adoc"]}, {"title": "Order of Transition Elements Does Not Adhere to Documentation", "body": "In the documentation it provides this example:\r\n\r\n```\r\n@Bean\r\npublic Job job() {\r\nreturn this.jobBuilderFactory.get(\"job\")\r\n.start(stepA())\r\n.on(\"*\").to(stepB())\r\n.from(stepA()).on(\"FAILED\").to(stepC())\r\n.end()\r\n.build();\r\n}\r\n```\r\nAnd then states:\r\n\r\n> The framework automatically orders transitions from most specific to least specific.\r\n> This means that, even if the ordering were swapped for \"stepA\" in the example above, an ExitStatus of \"FAILED\" would still go to \"stepC\".\r\n\r\nI have noticed the ordering of the transition elements seems to matter.  An exception thrown in `stepA` still sends execution of the job to `StepB`.  If I reorder the transition elements to:\r\n\r\n```\r\n@Bean\r\npublic Job job() {\r\nreturn this.jobBuilderFactory.get(\"job\")\r\n.start(stepA())\r\n.on(\"FAILED\").to(stepC())\r\n.from(stepA()).on(\"*\").to(stepB())\r\n.end()\r\n.build();\r\n}\r\n```\r\nThe job routes correctly causing a failed `stepA` to direct the flow to `stepB`.  Either I'm interpreting the documentation incorrectly, there is an issue with my simple example or the framework is not behaving according to the documentation.\r\n\r\nAfter roughly an hour of testing, it seems to me the order of the transition elements must be specified from most specific to least specific.", "url": "https://github.com/spring-projects/spring-batch/issues/3638", "user": "kmb385", "labels": ["has: backports", "type: bug"], "created": "2019-12-28 11:56:14", "closed": "2020-02-07 15:34:09", "commits": {"8e8f9c8101b52b64050d8e92363de2d28319e3b0": {"commitGHEventType": "closed", "commitUser": "benas"}}, "ttf": 41.000277777777775, "commitsDetails": [{"commitHash": "8e8f9c8101b52b64050d8e92363de2d28319e3b0", "commitGHEventType": "closed", "commitUser": "benas", "commitParents": ["ff5578851fb33dedd57c5ccf5dd71e430040570d"], "nameRev": "8e8f9c8101b52b64050d8e92363de2d28319e3b0 tags/4.3.0-M1~60", "commitMessage": "Added comparitor for state transitions when using java config\n\nSpring Batch orders the transitions as it goes from state to state based\non specificity.  The XML configuration has always had this\nfunctionality.  However, when creating the JSR-352 implementation, the\nmechanism for which this occured was refactored.  That occured at about\nthe same time as the java builders were introduced.  Because of this\ncrossing of paths, the java configuration option for defining jobs has\nnever correctly sorted the transitions.  This PR applys the sorting\nalgorithm to the java configuration, making XML and java configuration\nbehave the same.\n\nResolves #3638\n", "commitDateTime": "2020-02-07 16:27:12", "authoredDateTime": "2020-01-14 09:36:47", "commitGitStats": [{"filePath": "spring-batch-core/src/main/java/org/springframework/batch/core/job/builder/FlowBuilder.java", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "spring-batch-core/src/test/java/org/springframework/batch/core/job/builder/FlowBuilderTests.java", "insertions": 48, "deletions": 1, "lines": 49}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FlowBuilder.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.core.job.builder.FlowBuilder.flow()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "FlowBuilderTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.core.job.builder.FlowBuilderTests.testTransitionOrdering()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["8e8f9c8101b52b64050d8e92363de2d28319e3b0"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 1, "lines": 5, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-batch-core/src/main/java/org/springframework/batch/core/job/builder"], "changesInPackagesSPOON": ["org.springframework.batch.core.job.builder.FlowBuilder.flow()"]}, {"title": "ResourceLineReader throws exception from close() [BATCH-10]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-10](https://jira.spring.io/browse/BATCH-10?redirect=false)** and commented\n\nThe ResourceLineReader class throws an exception from it's close() method.  Because StepLifecycle classes call module.close() (which in turn will likely end up calling close all the way down to the input template and it's reader) from a finally() block, this could cause serious issues.\n\n\n---\n\n**Affects:** 1.0-m1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3567", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: declined", "type: bug"], "created": "2007-05-31 13:41:09", "closed": "2007-06-25 22:52:42", "commits": {}, "ttf": 25.00027777777778, "commitsDetails": []}, {"title": "Remove SqlSelectStatement extension of Cloneable [BATCH-12]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-12](https://jira.spring.io/browse/BATCH-12?redirect=false)** and commented\n\nCurrently, the SqlSelectStatement interface extends cloneable.  This is bad practice.  It would be preferable for implementations to have a copy constructor.\n\n\n---\nNo further details from [BATCH-12](https://jira.spring.io/browse/BATCH-12?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/3565", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2007-06-07 17:12:57", "closed": "2007-09-25 13:23:09", "commits": {}, "ttf": 109.00027777777778, "commitsDetails": []}, {"title": "Lazy open of input source resources is not matched by corresponding close [BATCH-20]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-20](https://jira.spring.io/browse/BATCH-20?redirect=false)** and commented\n\nXML output from sample application is invalid.  Does not contain closing element (starts with \\<purchaseOrders> and ends with \\</order>).\n\n\n---\n\n**Affects:** 1.0-m1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3555", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-06-13 23:54:52", "closed": "2008-08-07 02:06:23", "commits": {}, "ttf": 420.0002777777778, "commitsDetails": []}, {"title": "Use of read ahead limit on ResourceLineReader is flawed or at least worrying [BATCH-26]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-26](https://jira.spring.io/browse/BATCH-26?redirect=false)** and commented\n\nThe read ahead limit in ResourceLineReader is worrying.  There is no guarantee that a) it will be large enough to hold the whole  transaction, b) if set very large won't cause performance issues with long transactions / large records.\n\nYou actually have to catch IOException on a reset() and look at the message to work out if the read ahead limit was breached.  Yuck. It's sort of irrelevant anyway because even if we could determine that the read-ahead limit was breached, we would have no choice but to terminate the batch - effectively it is a failed rollback.  The rollback may not have been caused by bad input data (generally that is not fatal for the transaction), but that doesn't rule out a deterministic problem that causes the same failure to happen on the next restart, ad infinitum.\n\n\n---\n\n**Affects:** 1.0-m1\n\n**Issue Links:**\n- [BATCH-7](https://jira.spring.io/browse/BATCH-7) Remove transaction synchronization and state management from input/output sources (formerly buffering)\n (_**\"depends on\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/3549", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2007-06-25 00:14:59", "closed": "2007-11-29 03:06:26", "commits": {}, "ttf": 157.00027777777777, "commitsDetails": []}, {"title": "JMS Integration Tests 'hang' periodically when run from maven [BATCH-30]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-30](https://jira.spring.io/browse/BATCH-30?redirect=false)** and commented\n\nThe JMS integration tests in the integration project periodically 'hang' when run from maven.  Killing the process and rerunning the tests will usually clear up the error, but it happens often enough to warrant being looked into.  A trace is included below:\n\n------------------------------------------------------- \n\nT E S T S\n---------\n\nRunning org.springframework.retry.jms.SynchronousTests.....\n2007-07-03 13:10:58,781 INFO [org.springframework.retry.jms.SynchronousTests] - <Loadin\ng context for locations: /org/springframework/batch/jms/jms-context.xml>\n2007-07-03 13:10:58,890 INFO [org.springframework.beans.factory.xml.XmlBeanDefinitionRe \nader] - <Loading XML bean definitions from class path resource [org/springframework/bat \nch/jms/jms-context.xml]>\n2007-07-03 13:10:59,218 INFO [org.springframework.context.support.GenericApplicationCon \ntext] - <Refreshing org.springframework.context.support.GenericApplicationContext@601bb\n1: display name [org.springframework.context.support.GenericApplicationContext@601bb1];\nstartup date [Tue Jul 03 13:10:59 CDT 2007]; root of context hierarchy>\n2007-07-03 13:10:59,218 INFO [org.springframework.context.support.GenericApplicationCon \ntext] - <Bean factory for application context [org.springframework.context.support.Gene \nricApplicationContext@601bb1]: org.springframework.beans.factory.support.DefaultListabl\neBeanFactory@1479feb>\n\n\n---\nNo further details from [BATCH-30](https://jira.spring.io/browse/BATCH-30?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/3546", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2007-07-03 08:11:39", "closed": "2008-08-07 02:06:23", "commits": {}, "ttf": 400.0002777777778, "commitsDetails": []}, {"title": "StepExecution needs a reference to JobExecution (or vice versa) [BATCH-33]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-33](https://jira.spring.io/browse/BATCH-33?redirect=false)** and commented\n\nStepExecution needs a reference to JobExecution (or vice versa).  It's not possible to trace the execution of a step after it has finished because there is no link back from a StepExecution to the JobExecution it was part of.\n\n\n---\n\n**Affects:** 1.0-m2\n", "url": "https://github.com/spring-projects/spring-batch/issues/3543", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-07-07 02:38:27", "closed": "2008-08-07 02:06:24", "commits": {}, "ttf": 396.0002777777778, "commitsDetails": []}, {"title": "Create HBM mappings for version and handle with non-null value in Sql*Dao [BATCH-35]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-35](https://jira.spring.io/browse/BATCH-35?redirect=false)** and commented\n\nCreate HBM mappings for version and handle with non-null value in Sql**Dao.  For auditability it makes sense for the Job/Step entities, and also for the others - if Hibernate**Dao is used it will be automatic.  The Sql*Dao just needs to make sure that the version is not null - otherwise if Hibernate is ever used it will have problems.\n\n\n---\n\n**Affects:** 1.0-m2\n", "url": "https://github.com/spring-projects/spring-batch/issues/3541", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-07-09 07:10:23", "closed": "2008-08-07 02:06:24", "commits": {}, "ttf": 394.0002777777778, "commitsDetails": []}, {"title": "Create HBM mappings for version and handle with non-null value in Sql*Dao [BATCH-36]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-36](https://jira.spring.io/browse/BATCH-36?redirect=false)** and commented\n\nCreate HBM mappings for version and handle with non-null value in Sql**Dao.  For auditability it makes sense for the Job/Step entities, and also for the others - if Hibernate**Dao is used it will be automatic.  The Sql*Dao just needs to make sure that the version is not null - otherwise if Hibernate is ever used it will have problems.\n\n\n---\n\n**Affects:** 1.0-m2\n", "url": "https://github.com/spring-projects/spring-batch/issues/3540", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-07-09 07:11:02", "closed": "2008-08-07 02:06:24", "commits": {}, "ttf": 394.0002777777778, "commitsDetails": []}, {"title": "duplicate class in different packages [BATCH-41]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-41](https://jira.spring.io/browse/BATCH-41?redirect=false)** and commented\n\nDuplicated class:  TransactionValidException\n\norg.springframework.batch.io.exception\norg.springframework.batch.container.common.exception\n\n\n---\nNo further details from [BATCH-41](https://jira.spring.io/browse/BATCH-41?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/3535", "user": "spring-issuemaster", "labels": ["in: core", "in: infrastructure", "type: bug"], "created": "2007-07-11 08:22:48", "closed": "2008-08-07 02:06:24", "commits": {}, "ttf": 392.0002777777778, "commitsDetails": []}, {"title": "Maven compile fails due to ant plugin error and vpp [BATCH-54]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-54](https://jira.spring.io/browse/BATCH-54?redirect=false)** and commented\n\nWhen running any goal in maven that requires the compile goal, the following error is reported from maven:\n\n[INFO] [antrun:run {execution: hsqldb-sql}]\n[typedef] Could not load definitions from resource foundrylogic/vpp/typedef.properties. It could not be found.\n[taskdef] Could not load definitions from resource foundrylogic/vpp/taskdef.properties. It could not be found.\n[INFO] ------------------------------------------------------------------------\n[ERROR] FATAL ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Could not create task or type of type: vppcopy.\n\nAnt could not find the task or a class this task relies upon.\n\nThis is common and has a number of causes; the usual\nsolutions are to read the manual pages then download and\ninstall needed JAR files, or fix the build file:\n- You have misspelt 'vppcopy'.\n  Fix: check your spelling.\n- The task needs an external JAR file to execute\n  and this is not found at the right place in the classpath.\n  Fix: check the documentation for dependencies.\n  Fix: declare the task.\n- The task is an Ant optional task and the JAR file and/or libraries\n  implementing the functionality were not found at the time you\n  yourself built your installation of Ant from the Ant sources.\n  Fix: Look in the ANT_HOME/lib for the 'ant-' JAR corresponding to the\n  task and make sure it contains more than merely a META-INF/MANIFEST.MF.\n  If all it contains is the manifest, then rebuild Ant with the needed\n  libraries present in ${ant.home}/lib/optional/ , or alternatively,\n  download a pre-built release version from apache.org\n- The build file was written for a later version of Ant\n  Fix: upgrade to at least the latest release version of Ant\n- The task is not an Ant core or optional task\n  and needs to be declared using \\<taskdef>.\n- You are attempting to use a task defined using\n  \\<presetdef> or \\<macrodef> but have spelt wrong or not\n  defined it at the point of use\n\nRemember that for JAR files to be visible to Ant tasks implemented\nin ANT_HOME/lib, the files must be in the same directory or on the\nclasspath\n\n\n---\n\n**Affects:** 1.0-m1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3523", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-07-23 11:45:46", "closed": "2011-07-05 11:19:10", "commits": {}, "ttf": 1442.0002777777777, "commitsDetails": []}, {"title": "BatchContainer.start does not need a job config name - it should get it from the runtime info [BATCH-56]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-56](https://jira.spring.io/browse/BATCH-56?redirect=false)** and commented\n\nBatchContainer.start does not need a job config name - it should get it from the runtime info\n\n\n---\n\n**Affects:** 1.0-m2\n", "url": "https://github.com/spring-projects/spring-batch/issues/3521", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-07-24 23:09:51", "closed": "2008-08-07 02:06:26", "commits": {}, "ttf": 379.0002777777778, "commitsDetails": []}, {"title": "Sample jobs crash when they are configured to store restart data [BATCH-28]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-28](https://jira.spring.io/browse/BATCH-28?redirect=false)** and commented\n\nJobs crash when they are configured to store restart data. I have tried this in the samples module, by editing the simple-container-definition.xml (recoveryPolicy -> storeRestartData -> true). The result was a NullPointerException (restartData.getProperties() returns null).\n\nI believe the root of the problem lies in the SimpleStepExecutor#process(...) method:\n\nif (shouldPersistRestartData) {\nrestoreFromRestartData(module, step.getRestartData());\n}\n\nIt does not make sense to me that  restoreFromRestartData(...) is called based on whether restartData should be saved. I would expect a check whether we are doing restart and whether there is some restartData stored.\n\n\n---\n\n**Affects:** 1.0-m2\n", "url": "https://github.com/spring-projects/spring-batch/issues/3512", "user": "spring-issuemaster", "labels": ["in: core", "in: samples", "type: bug"], "created": "2007-06-27 18:53:15", "closed": "2007-07-09 02:53:25", "commits": {}, "ttf": 11.000277777777777, "commitsDetails": []}, {"title": "RepeatContext is null for TaskExecutorRepeatTemplate (in chunkOperations) [BATCH-66]", "body": "**[Andres Bernasconi](https://jira.spring.io/secure/ViewProfile.jspa?name=sotretus)** opened **[BATCH-66](https://jira.spring.io/browse/BATCH-66?redirect=false)** and commented\n\nWhen the TaskExecutorRepeatTemplate is assigned to the chunkOperations of the StepExecutor object, then a call to the class\n\n```\nRepeatContext context = RepeatSynchronizationManager.getContext();\n```\n\nreturns null.\n\nThis does not happen if the TaskExecutor is placed as a stepOperations.\n\nMy guess is that the RepeatSynchronizationManager is using ThreadLocal to store the context, but the context is set before creating the new threads, so they get a null value.\nInstead, in the stepOperations, the Thread spawned by the TaskExecutor itself creates the context so it is correctly assigned to the ThreadLocal.\n\n\n\n---\n\n**Affects:** 1.0-m2\n", "url": "https://github.com/spring-projects/spring-batch/issues/3511", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-07-27 06:31:26", "closed": "2008-08-07 02:06:26", "commits": {}, "ttf": 376.0002777777778, "commitsDetails": []}, {"title": "Website build problems [BATCH-70]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-70](https://jira.spring.io/browse/BATCH-70?redirect=false)** and commented\n\nWebsite build problems...  We are at the mercy of the Apache releases because of the use of the apache snapshots repo.  The deployed site has broken links in samples and container projects, dynamic editing of the reference docs doesn't work.  Need some plugin dependency management...\n\n\n---\n\n**Affects:** 1.0-m2\n", "url": "https://github.com/spring-projects/spring-batch/issues/3507", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-07-27 17:33:02", "closed": "2008-08-07 02:06:27", "commits": {}, "ttf": 376.0002777777778, "commitsDetails": []}, {"title": "Move BatchContainerLauncher and implementations out to samples? [BATCH-72]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-72](https://jira.spring.io/browse/BATCH-72?redirect=false)** and commented\n\nMove BatchContainerLauncher and implementations out to samples?  The name of the interface would have to change anyway, and I'm not convinced the API is stable enough for the main execution (=container) distro, so it might be better to park it in the samples for now.\n\n\n---\n\n**Affects:** 1.0-m2\n", "url": "https://github.com/spring-projects/spring-batch/issues/3505", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2007-07-30 20:14:53", "closed": "2008-08-07 02:06:27", "commits": {}, "ttf": 373.0002777777778, "commitsDetails": []}, {"title": "Statistics from Tasklet not available to caller / developer [BATCH-86]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-86](https://jira.spring.io/browse/BATCH-86?redirect=false)** and commented\n\nStatistics from Tasklet not bubbled up to StepInstance or JobExecutor, so it is difficult / impossible for the developer to add business reporting statistics.\n\n\n---\n\n**Affects:** 1.0-m2\n", "url": "https://github.com/spring-projects/spring-batch/issues/3490", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-08-07 17:45:41", "closed": "2008-08-07 02:06:28", "commits": {}, "ttf": 365.0002777777778, "commitsDetails": []}, {"title": "StepScope should be managed by StepExecutor not RepeatOperations. [BATCH-62]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-62](https://jira.spring.io/browse/BATCH-62?redirect=false)** and commented\n\nStepScope should be managed by StepExecutor not RepeatOperations.\n\n\n---\nNo further details from [BATCH-62](https://jira.spring.io/browse/BATCH-62?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/3489", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-07-26 01:49:01", "closed": "2008-08-07 02:06:26", "commits": {}, "ttf": 378.0002777777778, "commitsDetails": []}, {"title": "StatisticsProvider is a leaky abstraction [BATCH-88]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-88](https://jira.spring.io/browse/BATCH-88?redirect=false)** and commented\n\nStatisticsProvider is a leaky abstraction.  It has to propagate all the way up the call stack, and it is too easy to forget to pass it on.  It is also tricky to aggregate plain Properties objects.\n\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Issue Links:**\n- [BATCH-228](https://jira.spring.io/browse/BATCH-228) Autodetect listeners for tail events (for example)\n (_**\"depends on\"**_)\n- [BATCH-92](https://jira.spring.io/browse/BATCH-92) Make StepScopeContext an interface\n (_**\"depends on\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/3487", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-08-08 18:13:24", "closed": "2008-08-07 02:06:28", "commits": {}, "ttf": 364.0002777777778, "commitsDetails": []}, {"title": "restartSample.xml with commitInterval=2 gives unexpected results [BATCH-89]", "body": "**[Morten Andersen-Gott](https://jira.spring.io/secure/ViewProfile.jspa?name=magott)** opened **[BATCH-89](https://jira.spring.io/browse/BATCH-89?redirect=false)*** and commented\n\nI'm running the restartSample.xml (RestartFunctionalTests) with the following step configuration:\n\n    <bean id=\"step1\" parent=\"simpleStep\">\n         <constructor-arg>\n              <bean class=\"org.springframework.batch.sample.module.ExceptionRestartableModule\">\n                       <property name=\"itemProvider\">\n                                <bean\n                                         class=\"org.springframework.batch.container.common.module.process.support.DefaultFlatFileItemProvider\">\n                                         <property name=\"source\" ref=\"fileInputTemplate\" />\n                                         <property name=\"mapper\" ref=\"fieldSetMapper\" />\n                                         <property name=\"validator\" ref=\"fixedValidator\" />\n                                </bean>\n                       </property>\n                       <property name=\"itemProcessor\">\n                                <bean class=\"org.springframework.batch.sample.module.process.TradeProcessor\">\n                                         <property name=\"writer\" ref=\"tradeDao\" />\n                                </bean>\n                       </property>\n              </bean>\n         </constructor-arg>\n         <!-- Overrides default step configuration in parent bean -->\n         <property name=\"saveRestartData\" value=\"true\" />\n         <property name=\"commitInterval\" value=\"2\" />\n    </bean>\n\nAfter I have run the code I get the following result in the HSQL:\n\nBATCH_STEP_EXECUTION:\nstatus=failed, commit_count=1, task_count=3, exit_code=0\nstatus=completed, commit_count=2, task_count=3, exit_code=0\n\nTRADE:\nid=0, isin=UK21341EAH41, quantity=31.11, customer=customer1\nid=1, isin=UK21341EAH42, quantity=32.11, customer=customer2\nid=3, isin=UK21341EAH44, quantity=34.11, customer=customer4\nid=4, isin=UK21341EAH45, quantity=35.11, customer=customer5\n\nThe log says:\n11:58:37,890  INFO RestartFunctionalTests:177 - Loading context for locations: jobs/restartSample.xml\n11:58:48,312  INFO ProcessorLogAdvice:49 - Processed: Trade: [isin=UK21341EAH41,quantity=211,price=31.11,customer=customer1]\n11:58:48,312  INFO ProcessorLogAdvice:49 - Processed: Trade: [isin=UK21341EAH42,quantity=212,price=32.11,customer=customer2]\n11:58:48,359  INFO ProcessorLogAdvice:49 - Processed: Trade: [isin=UK21341EAH43,quantity=213,price=33.11,customer=customer3]\n11:58:48,515  INFO ProcessorLogAdvice:49 - Processed: Trade: [isin=UK21341EAH44,quantity=214,price=34.11,customer=customer4]\n11:58:48,531  INFO ProcessorLogAdvice:49 - Processed: Trade: [isin=UK21341EAH45,quantity=215,price=35.11,customer=customer5]\n\nI would have expected the third row (with customer3) to be in the database as well. I tried debugging the code, and it seems that the transactionComitted in DefaultFlatFileInputSource is only called once, and that transactionRolledback is never called. Actually ResourceLineReaderTransactionSynchronization.afterCompletion is only executed once, after the second row is processed.\n\nIn this case, I believe that it's the missing transactionRolledback-call that causes row three not being comitted to db, however I also find it strange that only one transactionCommited call is made as well. (It's obviously comitted more than once).\n\nIf I change the commitInterval to 1, all trade items (1 through 5) are committed to db, and there' still only one transactionCommited-call being made. This time after the first processed line.\n\n\n---\n\n**Affects:** 1.0-m2\n", "url": "https://github.com/spring-projects/spring-batch/issues/3486", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-08-09 21:21:11", "closed": "2008-08-07 02:06:28", "commits": {}, "ttf": 363.0002777777778, "commitsDetails": []}, {"title": "StepExecution and StepExecutionContext are parallel domains, and StepExecution is by comparison anaemic [BATCH-90]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-90](https://jira.spring.io/browse/BATCH-90?redirect=false)** and commented\n\nStepExecution and StepExecutionContext are parallel domains and it is unnecessary - all the features of the *Context could be put in the *Execution.   StepExecution and JobExecution are classic anaemic domain objects.\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Issue Links:**\n- [BATCH-124](https://jira.spring.io/browse/BATCH-124) Potential Bug in JobExecutionContext?\n (_**\"depends on\"**_)\n- [BATCH-124](https://jira.spring.io/browse/BATCH-124) Potential Bug in JobExecutionContext?\n (_**\"is depended on by\"**_)\n- [BATCH-102](https://jira.spring.io/browse/BATCH-102) Normalization of domain object dependencies\n (_**\"is depended on by\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/3485", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-08-10 22:05:22", "closed": "2008-08-07 02:06:28", "commits": {}, "ttf": 362.0002777777778, "commitsDetails": []}, {"title": "Sample jobs should not import \"simple-container-definition.xml\" [BATCH-94]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-94](https://jira.spring.io/browse/BATCH-94?redirect=false)** and commented\n\nWhen a sample job is executed, it imports the simple container definition. However, this should already be loaded by the batch launcher. Even with singleton scoped beans, this can cause spring to duplicate beans. This has no immediate consequence in the samples, but modeling my job after the samples caused my job to fail. Using an hsqldb-based in-memory datasource, I found that my job could not be initialized since it tried to load my schema definition twice and failed on the second time with SQLExceptions of the 'table already exists' variety.\n\n\n---\n\n**Affects:** 1.0-m2\n", "url": "https://github.com/spring-projects/spring-batch/issues/3481", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2007-08-13 06:29:31", "closed": "2008-08-07 02:06:29", "commits": {}, "ttf": 359.0002777777778, "commitsDetails": []}, {"title": "CustomEditorConfigurer bean created twice in simple-container-definition.xml [BATCH-95]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-95](https://jira.spring.io/browse/BATCH-95?redirect=false)** and commented\n\nThe following definitions of a CustomEditorConfigurer both occur in the simple-container-definition - one should be removed\n\n    <bean class=\"org.springframework.beans.factory.config.CustomEditorConfigurer\">\n    \t<property name=\"customEditors\">\n    \t\t<map>\n    \t\t\t<entry key=\"int[]\">\n    \t\t\t\t<bean class=\"org.springframework.batch.support.IntArrayPropertyEditor\" />\n    \t\t\t</entry>\n    \t\t</map>\n    \t</property>\n    </bean>\n    \n                     <bean class=\"org.springframework.beans.factory.config.CustomEditorConfigurer\">\n    \t<property name=\"customEditors\">\n    \t\t<map>\n    \t\t\t<entry key=\"int[]\">\n    \t\t\t\t<bean class=\"org.springframework.batch.support.IntArrayPropertyEditor\" />\n    \t\t\t</entry>\n    \t\t\t<entry key=\"java.util.Date\">\n    \t\t\t\t<bean class=\"org.springframework.beans.propertyeditors.CustomDateEditor\">\n    \t\t\t\t\t<constructor-arg>\n    \t\t\t\t\t\t<bean class=\"java.text.SimpleDateFormat\">\n    \t\t\t\t\t\t\t<constructor-arg value=\"yyyyMMdd\" />\n    \t\t\t\t\t\t</bean>\n    \t\t\t\t\t</constructor-arg>\n    \t\t\t\t\t<constructor-arg value=\"false\" />\n    \t\t\t\t</bean>\n    \t\t\t</entry>\n    \t\t</map>\n    \t</property>\n    </bean>\n\n\n\n---\n\n**Affects:** 1.0-m2\n", "url": "https://github.com/spring-projects/spring-batch/issues/3480", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2007-08-14 09:34:01", "closed": "2008-08-07 02:06:29", "commits": {}, "ttf": 358.0002777777778, "commitsDetails": []}, {"title": "simple-container-definition: old package \"container\" should be replaced in aop-config [BATCH-96]", "body": "**[Oliver B. Nelson](https://jira.spring.io/secure/ViewProfile.jspa?name=obn)** opened **[BATCH-96](https://jira.spring.io/browse/BATCH-96?redirect=false)** and commented\n\nThe file \"simple-container-definition\" has an aop-config still pointing to the container package, which was replaced by core and execution:\n\n    <aop:config>\n    \t<aop:advisor pointcut=\"execution(* org.springframework.batch.container..*Repository+.*(..))\"\n    \t\tadvice-ref=\"txAdvice\" />\n    </aop:config>\n\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/17f1059870056935c89ff9b0d46595d6d26dcb1d\n", "url": "https://github.com/spring-projects/spring-batch/issues/3479", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2007-08-15 22:05:11", "closed": "2008-08-07 02:06:29", "commits": {}, "ttf": 357.0002777777778, "commitsDetails": []}, {"title": "Fix integration tests on Bamboo server [BATCH-97]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-97](https://jira.spring.io/browse/BATCH-97?redirect=false)** and commented\n\nFix integration tests on Bamboo server.  Because it is VMWare it runs slower than a normal machine (according to Ben) so the asynchronous tests keep failing in random places.  Disabled them for short term.\n\n\n---\n\n**Affects:** 1.0-m2\n", "url": "https://github.com/spring-projects/spring-batch/issues/3478", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2007-08-16 17:41:50", "closed": "2008-08-07 02:06:29", "commits": {}, "ttf": 356.0002777777778, "commitsDetails": []}, {"title": "exception in tasklet always makes the job crash, exception handler from StepConfiguration is ignored [BATCH-99]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-99](https://jira.spring.io/browse/BATCH-99?redirect=false)** and commented\n\nexception thrown in tasklet's execute() method always makes the job crash, exception handler injected into StepConfiguration is ignored (never called).\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Attachments:**\n- [sb99.patch](https://jira.spring.io/secure/attachment/13090/sb99.patch) (_785 bytes_)\n\n2 votes, 1 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/3476", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-08-16 23:10:25", "closed": "2008-08-07 02:06:30", "commits": {}, "ttf": 356.0002777777778, "commitsDetails": []}, {"title": "Fix nightly build and work out how to publish snapshots [BATCH-100]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-100](https://jira.spring.io/browse/BATCH-100?redirect=false)** and commented\n\nFix nightly build and work out how to publish snapshots.  The failures right now are trivial Maven crap - we just need to modify the build goals to something that works on that server.  Would also be nice to get a URL for snapshot builds to publish on web site.\n\n\n---\nNo further details from [BATCH-100](https://jira.spring.io/browse/BATCH-100?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/3475", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-08-19 18:18:32", "closed": "2008-08-07 02:06:30", "commits": {}, "ttf": 353.0002777777778, "commitsDetails": []}, {"title": "The functionality in \"DefaultFlatFileItemProvider\" (validating and mapping) should be provided by the infrastructure layer (DefaultFlatFileInputSource). [BATCH-105]", "body": "**[tomi vanek](https://jira.spring.io/secure/ViewProfile.jspa?name=tomi.vanek)** opened **[BATCH-105](https://jira.spring.io/browse/BATCH-105?redirect=false)** and commented\n\nThe functionality in \"DefaultFlatFileItemProvider\" (validating and mapping) should be provided by the infrastructure layer (DefaultFlatFileInputSource). Adding support for a new type of input sources (i.e. web-service input source) should be transparent for the execution layer. That's why by my opinion no dedicated item providers have to be part of the execution layer. Suggestion: to remove the DefaultFlatFileItemProvider from the execution module.\n\n\n---\n\n**Issue Links:**\n- [BATCH-107](https://jira.spring.io/browse/BATCH-107) Relocate Java modules located in org.springframework.batch.execution.tasklet.support\n (_**\"duplicates\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/3470", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-08-20 00:06:59", "closed": "2008-08-07 02:06:30", "commits": {}, "ttf": 353.0002777777778, "commitsDetails": []}, {"title": "Mouldy xml class names still in infrastructure [BATCH-113]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-113](https://jira.spring.io/browse/BATCH-113?redirect=false)** and commented\n\nMouldy xml class names still in infrastructure (e.g. XmlInputSource2).  I thought we had settled on an implementation with Arjen?\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Issue Links:**\n- [BATCH-16](https://jira.spring.io/browse/BATCH-16) Factor out common file handling concerns of Xml and FlatFile output templates\n (_**\"is depended on by\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/3462", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-08-23 00:38:34", "closed": "2007-09-26 02:33:34", "commits": {}, "ttf": 34.000277777777775, "commitsDetails": []}, {"title": "(some) samples launched from command line don't work [BATCH-115]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-115](https://jira.spring.io/browse/BATCH-115?redirect=false)** and commented\n\nWhen samples are run from command line the application context is created differently from a test case inherited from AbstractDependencyInjectionSpringContextTests. There are different sets of property value converters registered:\n\n\\<property name=\"lengths\" value=\"12, 3, 5, 9\" /> is converted smoothly to an array of integers when run in a test case, but causes exception when run from command line using BatchCommandLineLauncher. This property declaration is found in simpleTaskletJob, fixedLengthImportJob, multilineJob, multilineOrderJob.\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Attachments:**\n- [samplesFix.patch](https://jira.spring.io/secure/attachment/12841/samplesFix.patch) (_4.24 kB_)\n- [simpleTaskletJob.launch](https://jira.spring.io/secure/attachment/12829/simpleTaskletJob.launch) (_1.15 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/3461", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2007-08-26 22:03:23", "closed": "2008-08-07 02:06:31", "commits": {}, "ttf": 346.0002777777778, "commitsDetails": []}, {"title": "EXIT_CODE causing exception [BATCH-117]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-117](https://jira.spring.io/browse/BATCH-117?redirect=false)** and commented\n\nUsing current SNAPSHOT (downloaded 8/28 ~14:30), it seems jobs don't update step execution properly --  EXIT_CODE conversion to Integer causes a NumberFormatException\n\nThe culprit seems to be the following location:\n\no.s.b.execution.repository.dao.SqlStepDao.java, update method\n\nWhere the value of exit code is passed to the update function as part of its parameters array. Looking in o.s.b.core.domain.StepExecution, it seems the default exit code value of blank String (\"\") is to blame -- the NumberFormatException occurs when this used at the above location (confirmed via runtime variable inspection) -- (Should the exitCode field be numeric in StepExecution?)\n\nI attempted to update my code and this still occurs. Please let me know if or if you cannot recreate it. Thanks!\n\nExcerpt from exception message appears below:\n\nException in thread \"main\" org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [UPDATE BATCH_STEP_EXECUTION set START_TIME = ?, END_TIME = ?, STATUS = ?, COMMIT_COUNT = ?, TASK_COUNT = ?, TASK_STATISTICS = ?, EXIT_CODE = ? where ID = ?]; nested exception is java.sql.SQLException: Wrong data type: java.lang.NumberFormatException: For input string: \"\"\nCaused by: java.sql.SQLException: Wrong data type: java.lang.NumberFormatException: For input string: \"\"\n\n\n\n---\n\n**Affects:** 1.0-m2\n", "url": "https://github.com/spring-projects/spring-batch/issues/3459", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-08-28 05:50:33", "closed": "2008-08-07 02:06:31", "commits": {}, "ttf": 344.0002777777778, "commitsDetails": []}, {"title": "provided oracle schema uses non-supported \"INT\" data type [BATCH-118]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-118](https://jira.spring.io/browse/BATCH-118?redirect=false)** and commented\n\nSchema should be modified and tested to use the NUMBER datatype. INTEGER datatype is supported in some versions (so I am told, but I am no expert), but is really an alias to NUMBER(38)\n\nRecommend changing schema to use NUMBER(38) instead of INT\n\n\n---\n\n**Affects:** 1.0-m2\n", "url": "https://github.com/spring-projects/spring-batch/issues/3458", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-08-28 07:30:28", "closed": "2008-08-07 02:06:31", "commits": {}, "ttf": 344.0002777777778, "commitsDetails": []}, {"title": "Samples broken when input/output sources have step scope [BATCH-114]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-114](https://jira.spring.io/browse/BATCH-114?redirect=false)** and commented\n\nI refactored the samples config files to declare all input and output sources with step scope. Some of the samples continued to work correctly while others started to fail with various errors usually including \"No context holder available for step scope\". I can't really see at the moment what makes the difference.\n\nFor convenience I attach a patch that adds the scope declarations.\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Attachments:**\n- [step_scope.patch](https://jira.spring.io/secure/attachment/12823/step_scope.patch) (_10.33 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/3457", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2007-08-23 23:25:50", "closed": "2008-08-07 02:06:31", "commits": {}, "ttf": 349.0002777777778, "commitsDetails": []}, {"title": "ExitStatus can't be used in JMX (or other remote interfaces). [BATCH-119]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-119](https://jira.spring.io/browse/BATCH-119?redirect=false)** and commented\n\nExitStatus is not Serializable, so it can't be used in JMX (or other remote interfaces).  The TaskExecutorLauncher in the samples shows this quite quickly (launch with  -Dcom.sun.management.jmxremote and look in the jconsole).\n\n\n---\n\n**Affects:** 1.0-m2\n", "url": "https://github.com/spring-projects/spring-batch/issues/3456", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2007-08-28 19:08:34", "closed": "2008-08-07 02:06:31", "commits": {}, "ttf": 344.0002777777778, "commitsDetails": []}, {"title": "Re-wording of documentation -  Batch Processing Strategy section [BATCH-122]", "body": "**[Paul Newport](https://jira.spring.io/secure/ViewProfile.jspa?name=paulnewport)** opened **[BATCH-122](https://jira.spring.io/browse/BATCH-122?redirect=false)** and commented\n\nIn the documentation for Spring Batch, section 5.1. Batch Processing Strategy, there is a line that reads:\n\n\"Also updates should be committed to the database at the end of every few transaction.\"\n\nI assume that this should read:\n\n\"Also updates should be committed to the database at the end of every few transactions.\"\n\nthough I would re-word the sentence as it is not clear what this means - I presume what we are talking about is keeping the number of database updates per commit down to minimize locking problems\n\n\n---\nNo further details from [BATCH-122](https://jira.spring.io/browse/BATCH-122?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/3453", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2007-09-02 23:57:00", "closed": "2007-10-04 02:05:40", "commits": {}, "ttf": 31.00027777777778, "commitsDetails": []}, {"title": "SimpleJobIdentifier does not implement equals / hashcode [BATCH-123]", "body": "**[Andres Bernasconi](https://jira.spring.io/secure/ViewProfile.jspa?name=sotretus)** opened **[BATCH-123](https://jira.spring.io/browse/BATCH-123?redirect=false)** and commented\n\nSince the JobIdentifier is not created / passed around in tests, it is really hard to test a class that uses a JobExecutorFacade with a framework like EasyMock (because it is comparing the JobIdentifier by address and not name).\n\n\n---\n\n**Affects:** 1.0-m1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3452", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-09-04 05:22:42", "closed": "2007-09-04 15:01:43", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Potential Bug in JobExecutionContext? [BATCH-124]", "body": "**[Andres Bernasconi](https://jira.spring.io/secure/ViewProfile.jspa?name=sotretus)** opened **[BATCH-124](https://jira.spring.io/browse/BATCH-124?redirect=false)** and commented\n\nJobExecutionContext it's receiving in its constructor both a JobInstance and a JobIdentifier, but the JobInstance already has a JobIdentifier as property. Is this ok?\n\nAlso the JobExecutionContext is not setting the received jobIdentifier to the jobInstance (which makes sense, but makes me wonder if they could really be different)\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Issue Links:**\n- [BATCH-90](https://jira.spring.io/browse/BATCH-90) StepExecution and StepExecutionContext are parallel domains, and StepExecution is by comparison anaemic\n (_**\"depends on\"**_)\n- [BATCH-90](https://jira.spring.io/browse/BATCH-90) StepExecution and StepExecutionContext are parallel domains, and StepExecution is by comparison anaemic\n (_**\"is depended on by\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/3451", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-09-04 06:09:50", "closed": "2008-08-07 02:06:32", "commits": {}, "ttf": 337.0002777777778, "commitsDetails": []}, {"title": "Step Execution Context not available on RepeatInterceptor's open method [BATCH-125]", "body": "**[Andres Bernasconi](https://jira.spring.io/secure/ViewProfile.jspa?name=sotretus)** opened **[BATCH-125](https://jira.spring.io/browse/BATCH-125?redirect=false)** and commented\n\nThe StepExecutionContext is not available to RepeatInterceptor's open method. I created a RepeatInterceptor in order to have a step initialization routine, but I need the step name (or other configuration) and it is not available. This is when setting the repeatInterceptor to the stepOperations RepeatTemplate of the SimpleStepExecutor.\n\nSince my Step only performs one cycle in the stepOperations iterator I thought to put the interceptor in the chunkOperations iterator of the Executor. The problem here is that the Context is emptied by the time it reaches the chunk operations.\n\n(Maybe a bug in CompositeCompletionPolicy.java:126?. It seems that the main context passed as parameter it is not being taken into account, but I am not sure). The fact is that I lose all the properties of the RepeatContext in the chunk operations, and the StepExecutionContext is lost because of that.\n\nLet me know if I there's the need for more info on this.\n\nRegards\nAB\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Attachments:**\n- [bug125.zip](https://jira.spring.io/secure/attachment/12914/bug125.zip) (_11.14 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/efc6247e90a1817588adf3910380b91645e96604\n", "url": "https://github.com/spring-projects/spring-batch/issues/3450", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-09-05 00:43:21", "closed": "2008-08-07 02:06:32", "commits": {}, "ttf": 337.0002777777778, "commitsDetails": []}, {"title": "SimpleJobRepository won't recognize a newly added step to an existing job [BATCH-126]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-126](https://jira.spring.io/browse/BATCH-126?redirect=false)** and commented\n\nIf a job has already run, and a new step is added to that same job instance (meaning with the same JobIdentifier), then the SimpleJobRepository won't load up the new step because the findStep method ignores that it's null:\n\n    \tStepInstance step = stepDao.findStep(job, stepConfiguration.getName());\n    \t\tif (step != null) {\n    \n    \t\t\tstep.setStepExecutionCount(stepDao.getStepExecutionCount(step.getId()));\n    \n    \t\t\tsteps.add(step);\n    \t\t}\n\nI'm not sure that the repository should create a blank step in the same instance.  If the configuration has been modified to add a new step, then a new instance should be created.  However, perhaps an exception should be thrown?  Either way, just not processing that step isn't the best solution.\n\n\n---\n\n**Affects:** 1.0-m1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3449", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-09-05 06:18:05", "closed": "2008-08-07 02:06:32", "commits": {}, "ttf": 336.0002777777778, "commitsDetails": []}, {"title": "table prefixes not being applied [BATCH-128]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-128](https://jira.spring.io/browse/BATCH-128?redirect=false)** and commented\n\nIt seems the table prefix isn't applied in all places. Please confirm.\n\nBelow is part of the exception I receive - please note the \"EXIT_CODE\" invalid identifier error is due to tables named in the default manner which are out of date.\n\nException in thread \"main\" org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [UPDATE BATCH_STEP_EXECUTION set START_TIME = ?, END_TIME = ?, STATUS = ?, COMMIT_COUNT = ?, TASK_COUNT = ?, TASK_STATISTICS = ?, EXIT_CODE = ? where ID = ?]; nested exception is java.sql.SQLException: ORA-00904: \"EXIT_CODE\": invalid identifier\n\n**SNIPPED**\n\n    at org.springframework.batch.execution.repository.dao.SqlStepDao.update(SqlStepDao.java:257)\n    at org.springframework.batch.execution.repository.SimpleJobRepository.saveOrUpdate(SimpleJobRepository.java:185)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:296)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:177)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144)\n    at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:107)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:166)\n    at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204)\n    at $Proxy0.saveOrUpdate(Unknown Source)\n    at org.springframework.batch.execution.step.simple.SimpleStepExecutor.process(SimpleStepExecutor.java:269)\n    at org.springframework.batch.execution.job.DefaultJobExecutor.run(DefaultJobExecutor.java:76)\n    at org.springframework.batch.execution.facade.SimpleJobExecutorFacade.start(SimpleJobExecutorFacade.java:137)\n    at org.springframework.batch.execution.bootstrap.SimpleJobLauncher.run(SimpleJobLauncher.java:101)\n    at org.springframework.batch.execution.bootstrap.SimpleJobLauncher.run(SimpleJobLauncher.java:118)\n    at org.springframework.batch.execution.bootstrap.BatchCommandLineLauncher.start(BatchCommandLineLauncher.java:80)\n    at org.springframework.batch.execution.bootstrap.BatchCommandLineLauncher.main(BatchCommandLineLauncher.java:117)\n\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Attachments:**\n- [mylyn-context.zip](https://jira.spring.io/secure/attachment/12901/mylyn-context.zip) (_3.83 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/3447", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-09-11 05:44:40", "closed": "2008-06-18 18:29:07", "commits": {}, "ttf": 281.0002777777778, "commitsDetails": []}, {"title": "restoreFromRestartData(Tasklet, RestartData) crashes if Properties are null [BATCH-136]", "body": "**[Oliver B. Nelson](https://jira.spring.io/secure/ViewProfile.jspa?name=obn)** opened **[BATCH-136](https://jira.spring.io/browse/BATCH-136?redirect=false)** and commented\n\nIf RestartData has no properties set, the restoreFromRestartData method crashes.\n\nRobert already posted the basic question in [BATCH-28](https://jira.spring.io/browse/BATCH-28), but there was no final solution to it.\nCurrently we have a workaround for SimpleStepExecutor:\n\n    private void restoreFromRestartData(Tasklet tasklet, RestartData restartData) {\n    \tif (tasklet instanceof Restartable && restartData != null & !restartData.getProperties().isEmpty()) {\n    \t\t((Restartable) tasklet).restoreFrom(restartData);\n    \t}\n    }\n\nI would appreciate a rule how to handle this issue...maybe our approach is not the right way\n\n\n---\n\n**Affects:** 1.0-m2\n", "url": "https://github.com/spring-projects/spring-batch/issues/3440", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-09-20 01:15:31", "closed": "2008-06-18 18:29:03", "commits": {}, "ttf": 272.0002777777778, "commitsDetails": []}, {"title": "Restarted Jobs will not throw exception if Tasklet is not Restartable. [BATCH-137]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-137](https://jira.spring.io/browse/BATCH-137?redirect=false)** and commented\n\nIf a Restartable job is restarted, and it should save restart data (StepConfiguration.saveRestartData == true) and the Tasklet does not implement Restartable, nothing will happen, no exception, or restore.  I added the following using test to DefaultStepExecutorTests that illustrates this:\n\n    public void testRestartJobOnNonRestartableTasklet(){\n    \tStepInstance step = new StepInstance(new Long(1));\n    \tstep.setStepExecutionCount(1);\n    \tstepConfiguration.setTasklet(new Tasklet(){\n    \t\tpublic ExitStatus execute() throws Exception {\n    \t\treturn ExitStatus.FINISHED;\n    \t}});\n    \tstepConfiguration.setSaveRestartData(true);\n    \tJobExecutionContext jobExecutionContext = new JobExecutionContext(new SimpleJobIdentifier(\"FOO\"), new JobInstance(new Long(3)));\n    \tStepExecutionContext stepExecutionContext = new StepExecutionContext(jobExecutionContext, step);\n    \n    \ttry{\n    \t\tstepExecutor.process(stepConfiguration, stepExecutionContext);\n    \t}catch(Throwable t){\n    \t\tfail();\n    \t}\n    }\n\nIt could be argued that it should not throw an error since it won't really affect execution.  However, if a job was designed to be restarted, and save restart data, and nothing happens because the Tasklet isn't Restartable, it could be argued that it is not executing as intended, and should therefore fail.  This could especially cause issues when files are involved.  Perhaps the StepExecutorFactory could check this before returning the executor?\n\nI'm not sure I feel really strongly one way or the other (although I'm heavily leaning towards throwing an exception), but I noticed it behaving this way while fixing [BATCH-136](https://jira.spring.io/browse/BATCH-136) and thought it should be raised.\n\n\n---\n\n**Affects:** 1.0-m1\n\n**Issue Links:**\n- [BATCH-127](https://jira.spring.io/browse/BATCH-127) Allow job configuration to control re-entrant behavior\n\n", "url": "https://github.com/spring-projects/spring-batch/issues/3439", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2007-09-20 16:56:36", "closed": "2008-06-18 18:29:09", "commits": {}, "ttf": 272.0002777777778, "commitsDetails": []}, {"title": "SqlCursorInputSource does not close connections after last dataset was read and mapped [BATCH-138]", "body": "**[Oliver B. Nelson](https://jira.spring.io/secure/ViewProfile.jspa?name=obn)** opened **[BATCH-138](https://jira.spring.io/browse/BATCH-138?redirect=false)** and commented\n\nWhen working with multiple instances and only a limited number of database connections offered by a connection pool, there is a problem in SqlCursorInputSource.\nSqlCursorInputSource does not close database connections after the last dataset was read and mapped.\n\nSuggestion: Whenever SqlCursorInputSource.read() is about to return null, call SqlCursorInputSource.close()\n\nMaybe a test in conjunction with  [BATCH-78](https://jira.spring.io/browse/BATCH-78) will verify the correct behaviour.\n\n\n---\n\n**Affects:** 1.0-m2\n", "url": "https://github.com/spring-projects/spring-batch/issues/3438", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: declined", "type: bug"], "created": "2007-09-24 19:17:19", "closed": "2008-10-01 00:33:09", "commits": {}, "ttf": 372.0002777777778, "commitsDetails": []}, {"title": "DefaultStepExecutorFactory as the stepExecutorFactory for the DefaultJobExecutor [BATCH-142]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-142](https://jira.spring.io/browse/BATCH-142?redirect=false)** and commented\n\n(From Joris): We should define something like a\nDefaultStepExecutorFactory as the stepExecutorFactory for the\nDefaultJobExecutor, since that one uses a SimpleStepExecutorFactory by\ndefault which only supports SimpleStepConfigurations (Default* isn't as\ndefault as you might guess...)\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/0b52801e3577bcff0982bd1b147b50f690086081\n", "url": "https://github.com/spring-projects/spring-batch/issues/3434", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-09-26 03:03:26", "closed": "2008-08-07 02:06:33", "commits": {}, "ttf": 315.0002777777778, "commitsDetails": []}, {"title": "Unclear error message and possible inappropriate exception type in SimpleJobRepository [BATCH-146]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-146](https://jira.spring.io/browse/BATCH-146?redirect=false)** and commented\n\norg.springframework.batch.execution.repository.SimpleJobRepository\n\n116:\t\telse {\n117:\t\t\t// More than one job found, throw exception\n118:\t\t\tthrow new NoSuchBatchDomainObjectException(\"Error obtaining\" + \"previous job run: \"\n119:\t\t\t\t\t+ jobConfiguration.toString());\n120:\t\t}\n\nThree issues:\n1. This error message seems unclear\n2. If this message is really what you mean to say, it's missing a whitespace between \"obtaining\" and \"previous\"\n3. Is this really the appropriate type of exception to throw in this case? This feels more like it should be either a \"BatchRestartException\" or its own exception type.\n\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/7b1be4fc32c2388f3025237c36461871cfb6c398, https://github.com/spring-projects/spring-batch/commit/735603c59e910f8773196a1990d62e970c2ec264\n", "url": "https://github.com/spring-projects/spring-batch/issues/3430", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-09-27 06:54:11", "closed": "2008-06-18 18:29:09", "commits": {}, "ttf": 265.0002777777778, "commitsDetails": []}, {"title": "JobInstanceFilter has no unit test. [BATCH-148]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-148](https://jira.spring.io/browse/BATCH-148?redirect=false)** and commented\n\nJobInstanceFilter has no unit tests.  It also appears to not be used anywhere.\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/5cafc9dfded1175cf2eac1caa8862bf4e24de5d0\n", "url": "https://github.com/spring-projects/spring-batch/issues/3428", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-09-28 03:09:17", "closed": "2008-08-07 02:06:33", "commits": {}, "ttf": 313.0002777777778, "commitsDetails": []}, {"title": "ClobUserType is the wrong base type for BatchStatus [BATCH-149]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-149](https://jira.spring.io/browse/BATCH-149?redirect=false)** and commented\n\nClobUserType is the wrong base type for BatchStatus - it doesn't need to be a large object\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/4dc2467a12f11db7b2a92e92e7c148df121acb72\n", "url": "https://github.com/spring-projects/spring-batch/issues/3427", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-09-30 04:46:50", "closed": "2008-08-07 02:06:33", "commits": {}, "ttf": 311.0002777777778, "commitsDetails": []}, {"title": "skipLimit property of AbstractStepConfiguration seems to be unused [BATCH-153]", "body": "**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[BATCH-153](https://jira.spring.io/browse/BATCH-153?redirect=false)** and commented\n\nAbstractStepConfiguration (and therefore its subclasses) offer a property called skipLimit. However, it appears that the getSkipLimit() method isn't called anywhere in the Batch framework. Since I suspect that users aren't expected to check this property themselves, it seems like an unused property to me. It's quite confusing when you're configuring a SimpleStepConfiguration, for example, since the property suggests to have impact on the way items are skipped.\n\nIf I'm right, then either the property should be removed or there should be some other code that actually uses this property to add some behaviour to it. If I'm wrong, then I would really like some JavaDoc for the setSkipLimit method that explains what its use is ;)\n\n\n---\n\n**Affects:** 1.0-m2\n", "url": "https://github.com/spring-projects/spring-batch/issues/3423", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-10-02 01:07:38", "closed": "2008-08-07 02:06:34", "commits": {}, "ttf": 310.0002777777778, "commitsDetails": []}, {"title": "*Source does not need to extend ResourceLifecycle [BATCH-157]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-157](https://jira.spring.io/browse/BATCH-157?redirect=false)** and commented\n\n*Source does not need to extend ResourceLifecycle.  It doesn't really add anything - there's no reason why implementations of the *Source interfaces couldn't also implement ResourceLifecycle, but equally, there is no reason why a *Source has to be a ResourceLifecycle.\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Issue Links:**\n- [BATCH-155](https://jira.spring.io/browse/BATCH-155) InputSources and FieldsetInputSources are not being initialized ( call the open() method)\n (_**\"is depended on by\"**_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/3b2662a16b5b64a2483fbca897c3eab673043185\n", "url": "https://github.com/spring-projects/spring-batch/issues/3419", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2007-10-03 18:23:33", "closed": "2008-08-07 02:06:34", "commits": {}, "ttf": 308.0002777777778, "commitsDetails": []}, {"title": "Dependency cycle between execution.step and execution.step.simple [BATCH-158]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-158](https://jira.spring.io/browse/BATCH-158?redirect=false)** and commented\n\nDependency cycle between execution.step and execution.step.simple\n\n\n---\n\n**Affects:** 1.0-m3\n", "url": "https://github.com/spring-projects/spring-batch/issues/3418", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-10-04 19:28:58", "closed": "2008-08-07 02:06:34", "commits": {}, "ttf": 307.0002777777778, "commitsDetails": []}, {"title": "football sample job has too much data [BATCH-162]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-162](https://jira.spring.io/browse/BATCH-162?redirect=false)** and commented\n\nThe footballjob.xml contains some outdated class names, but the main problem is that the ItemProvider class is missing. The footballjob.xml is not in the set of spring configurations managed by SpringIDE, so that's probably why it went out of synch.\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Attachments:**\n- [football.patch](https://jira.spring.io/secure/attachment/13263/football.patch) (_11.87 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/3414", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2007-10-08 23:01:50", "closed": "2008-08-07 02:06:34", "commits": {}, "ttf": 303.0002777777778, "commitsDetails": []}, {"title": "removed saveRestartData property of SimpleStepConfiguration still used in xml files [BATCH-163]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-163](https://jira.spring.io/browse/BATCH-163?redirect=false)** and commented\n\nthe saveRestartData property of SimpleStepConfiguration has been removed from the class, but not from spring configuration files.\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Attachments:**\n- [saveRestartDataProperty.patch](https://jira.spring.io/secure/attachment/13011/saveRestartDataProperty.patch) (_3.04 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/3413", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-10-10 01:07:53", "closed": "2008-09-30 22:48:06", "commits": {}, "ttf": 356.0002777777778, "commitsDetails": []}, {"title": "Active MQ snapshots are unreliable [BATCH-129]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-129](https://jira.spring.io/browse/BATCH-129?redirect=false)** and commented\n\nCurrently, ActiveMQ snapshots are used as maven dependencies: http://people.apache.org/maven-snapshot-repository/org/apache/activemq/activemq-core/5.0-SNAPSHOT/\n\nHowever, they instituted a policy where a script blows out all snapshots, and their CI server drops new ones at night.  This can cause issues if their nightly build doesn't complete.  If anyone tries to do a mvn install during any period between when the script deletes the snapshots, and a new one is created and dropped, Spring Batch integration won't compile.  A non-snapshot version of ActiveMq should be used.  Also, maven won't let you create a release if any snapshot is listed as a dependency.\n\n\n---\n\n**Affects:** 1.0-m1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/48b377403de000b8b510772a951761ad216cdf81\n", "url": "https://github.com/spring-projects/spring-batch/issues/3411", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-09-13 07:56:38", "closed": "2008-08-07 02:06:32", "commits": {}, "ttf": 328.0002777777778, "commitsDetails": []}, {"title": "DefaultFragmentEventReader#markFragmentFinished [BATCH-169]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-169](https://jira.spring.io/browse/BATCH-169?redirect=false)** and commented\n\nThere's a subtle bug in DefaultFragmentEventReader causing it to read a record twice in case \"markFragmentFinished\" is called directly after \"markFragmentStart\" without reading any events in between.\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Attachments:**\n- [DefaultFragmentEventReader.patch](https://jira.spring.io/secure/attachment/13015/DefaultFragmentEventReader.patch) (_3.60 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/a844620c86953318e6c8172937763e992ccb2a30\n", "url": "https://github.com/spring-projects/spring-batch/issues/3406", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2007-10-15 00:29:28", "closed": "2007-10-15 14:09:33", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Concurrent modification of StepExecution when running an asynchrounous step operation [BATCH-170]", "body": "**[Mark Middleton](https://jira.spring.io/secure/ViewProfile.jspa?name=markymiddleton)** opened **[BATCH-170](https://jira.spring.io/browse/BATCH-170?redirect=false)** and commented\n\nUse of a hibernateJobDao eventually results in a StaleObjectStateException when running an asynchrounous step operation:\n\n\\<bean id=\"myStepExecutor\" class=\"org.springframework.batch.execution.step.simple.SimpleStepExecutor\" scope=\"prototype\">\n\\<property name=\"transactionManager\" ref=\"txManager\" />\n\\<property name=\"repository\" ref=\"simpleJobRepository\" />  \n\\<property name=\"stepOperations\">\n\\<bean class=\"org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate\">\n\\<property name=\"taskExecutor\" ref=\"threadPoolTaskExecutor\"/>        \n\\</bean>\n\\</property>    \n\\</bean>\nSee:\nhttp://forum.springframework.org/showthread.php?t=44884\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/37696b45f43f94ba0de468522977698934a5345d, https://github.com/spring-projects/spring-batch/commit/6ad57bcb69384fc43fb16bef4cf9cd875373e902, https://github.com/spring-projects/spring-batch/commit/17d339759464fd8967c898fc421f97409061869d\n", "url": "https://github.com/spring-projects/spring-batch/issues/3405", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-10-15 09:14:22", "closed": "2008-09-23 11:07:14", "commits": {}, "ttf": 344.0002777777778, "commitsDetails": []}, {"title": "HibernateDAO not persisting Identifier Details [BATCH-172]", "body": "**[Rajiv Kumar](https://jira.spring.io/secure/ViewProfile.jspa?name=rajiv)** opened **[BATCH-172](https://jira.spring.io/browse/BATCH-172?redirect=false)** and commented\n\nThe HibernateDAO does not seem to persist the JobIdentifer details (name, stream, schedule date) while creating the Job. Following is the query that is generated by hibernate.\n\n-------------------------\n\nHibernate:\n/* insert org.springframework.batch.core.domain.JobInstance\n*/ insert\ninto\nbatch_job\n(version)\nvalues\n(?)\n\n------------------\n\nJobinstance.hbm.xml\n-------------------\n\n\\<hibernate-mapping package=\"org.springframework.batch.core.domain\">\n\n    <class name=\"JobInstance\" table=\"BATCH_JOB\">\n    \n    \t<id name=\"id\" type=\"long\" column=\"ID\">\n    \t\t&job-generator;\n    \t</id>\n    \n    \t<discriminator\n    \t\tformula=\"case when SCHEDULE_DATE is NULL then 'Scheduled' else 'Simple' end\"\n    \t\ttype=\"string\" />\n    \n    \t<version name=\"version\" access=\"field\" />\n    \n    \t<property name=\"status\"\n    \t\ttype=\"org.springframework.batch.execution.repository.dao.BatchStatusUserType\"\n    \t\tinsert=\"false\" column=\"STATUS\" />\n    \n    \t<subclass entity-name=\"ScheduledJobInstance\" name=\"JobInstance\"\n    \t\tdiscriminator-value=\"Scheduled\">\n    \t\t<component name=\"identifier\"\n    \t\t\tclass=\"org.springframework.batch.execution.runtime.ScheduledJobIdentifier\">\n    \t\t\t<property name=\"name\" update=\"false\" column=\"JOB_NAME\" />\n    \t\t\t<property name=\"jobStream\" update=\"false\"\n    \t\t\t\tcolumn=\"JOB_STREAM\" />\n    \t\t\t<property name=\"scheduleDate\" update=\"false\"\n    \t\t\t\tcolumn=\"SCHEDULE_DATE\" />\n    \t\t\t<property name=\"jobRun\" update=\"false\" column=\"JOB_RUN\" />\n    \t\t</component>\n    \t</subclass>\n    \n    \t<subclass entity-name=\"SimpleJobInstance\" name=\"JobInstance\"\n    \t\tdiscriminator-value=\"Simple\">\n    \t\t<component name=\"identifier\"\n    \t\t\tclass=\"org.springframework.batch.core.runtime.SimpleJobIdentifier\">\n    \t\t\t<property name=\"name\" update=\"false\" column=\"JOB_NAME\" />\n    \t\t</component>\n    \t</subclass>\n    \n    </class>\n\n\\</hibernate-mapping>\n\n-----------------\n\nThanks,\nRajiv\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/2c5c74a4a62ed8b3cadba2652c0c1335900244e8, https://github.com/spring-projects/spring-batch/commit/0997e173d6477f68b437f226e9f8fae90b97362a\n", "url": "https://github.com/spring-projects/spring-batch/issues/3403", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2007-10-15 21:56:46", "closed": "2008-06-18 18:29:02", "commits": {}, "ttf": 246.00027777777777, "commitsDetails": []}, {"title": "Fix bugs according to FindBugs report [BATCH-173]", "body": "**[Peter Zozom](https://jira.spring.io/secure/ViewProfile.jspa?name=peter.zozom)** opened **[BATCH-173](https://jira.spring.io/browse/BATCH-173?redirect=false)** and commented\n\nFix bugs in all subprojects according to Findbug report\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Attachments:**\n- [findbugs_infrastructure_071016.patch](https://jira.spring.io/secure/attachment/13021/findbugs_infrastructure_071016.patch) (_18.72 kB_)\n- [findbugs_samples_071016.patch](https://jira.spring.io/secure/attachment/13022/findbugs_samples_071016.patch) (_4.10 kB_)\n- [TestClone.java](https://jira.spring.io/secure/attachment/13025/TestClone.java) (_3.87 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/63bd6a5e656f0af6376f4a0da33bd17319a6ee1e, https://github.com/spring-projects/spring-batch/commit/2c7d52a5aec013c4d5c6cff14e27238194fd1637\n", "url": "https://github.com/spring-projects/spring-batch/issues/3402", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-10-16 02:04:33", "closed": "2007-10-17 15:08:53", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "CountingCompletionPolicy causes the Step to go into infinite loop [BATCH-177]", "body": "**[Rajiv Kumar](https://jira.spring.io/secure/ViewProfile.jspa?name=rajiv)** opened **[BATCH-177](https://jira.spring.io/browse/BATCH-177?redirect=false)** and commented\n\nI am using CountingCompletionPolicy  with ItemProviderProcessTasklet. I set the maxCount in CountingCompletionPolicy  to 10. I am incrementing the context counter on every exception in the tasklet. The problem is that if the items exhaust before the exception count reaches 10, the RepeatTemplate goes into an infinite loop as the following will always return false.\n\n//CountingCompletionPolicy .java\nfinal public boolean isComplete(RepeatContext context) {\nint count = ((CountingBatchContext) context).getCounter().getCount();\nreturn count >= maxCount;\n}\n\nFor now, I have created my own CompletionPolicy where I check the result object (exit if result is ExitStatus.FINISHED)  as well as the counter. But I think there is a bug here so filing it.\n\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d182b36846177f4a6f06085ce1d18f8ec3ffd511\n", "url": "https://github.com/spring-projects/spring-batch/issues/3398", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2007-10-19 00:08:55", "closed": "2008-09-23 11:09:26", "commits": {}, "ttf": 340.0002777777778, "commitsDetails": []}, {"title": "Separate input and output in samples [BATCH-179]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-179](https://jira.spring.io/browse/BATCH-179?redirect=false)** and commented\n\nSeparate input and output in samples.  The output should go in target/ directory (e.g. under test-outputs).  If input is required to compare the results with known state (i.e. regression test) that should go in src/test/resources.\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Attachments:**\n- [samples-batch-179.patch](https://jira.spring.io/secure/attachment/13033/samples-batch-179.patch) (_17.45 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/497bd15a77b35f8bcece61263b89b29253eea646\n", "url": "https://github.com/spring-projects/spring-batch/issues/3396", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-10-21 01:34:26", "closed": "2008-08-07 02:06:35", "commits": {}, "ttf": 291.0002777777778, "commitsDetails": []}, {"title": "JobConfigurations do not get their names set if they are child beans [BATCH-180]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-180](https://jira.spring.io/browse/BATCH-180?redirect=false)** and commented\n\nJobConfigurations do not get their names set if they are child beans\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/089ac8f1710eac4e0478ff160672164e0ce59bd0, https://github.com/spring-projects/spring-batch/commit/95f089a63856fe72cc0f3a395a847fbd1d86f919\n", "url": "https://github.com/spring-projects/spring-batch/issues/3395", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-10-21 01:43:44", "closed": "2008-08-07 02:06:35", "commits": {}, "ttf": 291.0002777777778, "commitsDetails": []}, {"title": "When trying to re-run a Job that already executed successfully the JobExecutorFacade returns ExitStatus.FAILED [BATCH-181]", "body": "**[Andres Bernasconi](https://jira.spring.io/secure/ViewProfile.jspa?name=sotretus)** opened **[BATCH-181](https://jira.spring.io/browse/BATCH-181?redirect=false)** and commented\n\nThe DefaultJobExecutor sets the status to ExitStatus.FAILED when the run() method starts, but if the steps do not execute (i.e. they are all finished) then FAILED is returned, insted of FINISHED.\n\nNotice that some other odd (or rather unexpected) behaviours also occur when an exception is thrown (no exit status is returned but rather an exception) or if the Job is Stopped (again, an exception is thrown).\n\nI also can't check the status of a Job with the JobExecutorFacade so I can't really ask the status of the Job before executing.\n\nRegards\nAndres B.\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/dc9d04e705e3ca52d54054bc7b6d28bd35dacfee\n", "url": "https://github.com/spring-projects/spring-batch/issues/3394", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-10-22 11:21:12", "closed": "2008-08-07 02:06:35", "commits": {}, "ttf": 289.0002777777778, "commitsDetails": []}, {"title": "sample jobs don't work with hibernate repository [BATCH-184]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-184](https://jira.spring.io/browse/BATCH-184?redirect=false)** and commented\n\nI tried switching samples to use hibernate repository instead of the standard sql. This results in all jobs failing with error\n\norg.springframework.orm.hibernate3.HibernateSystemException: a different object with the same identifier value was already associated with the session: [org.springframework.batch.core.domain.JobExecution#1]; nested exception is org.hibernate.NonUniqueObjectException: a different object with the same identifier value was already associated with the session: [org.springframework.batch.core.domain.JobExecution#1]\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Attachments:**\n- [hibernate.patch](https://jira.spring.io/secure/attachment/13057/hibernate.patch) (_1.83 kB_)\n- [samples-hibernate-config.zip](https://jira.spring.io/secure/attachment/13039/samples-hibernate-config.zip) (_3.86 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d33065b15ce783f9af1c0d63f14ac0623dd7ee8f, https://github.com/spring-projects/spring-batch/commit/80f6c02e55ed18321e04a89609d15948f035b328, https://github.com/spring-projects/spring-batch/commit/e0977c3e48b86a5571eb604a359e0114f91a2193\n\n1 votes, 1 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/3391", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-10-25 00:54:17", "closed": "2008-08-07 02:06:35", "commits": {}, "ttf": 287.0002777777778, "commitsDetails": []}, {"title": "skipLimit property in SimpleStepConfiguration is ignored [BATCH-185]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-185](https://jira.spring.io/browse/BATCH-185?redirect=false)** and commented\n\nSimpleStepConfiguration declares skipLimit property which is not used anywhere. I think the value should be used in SimpleStepExecutorFactory to configure the CompletionPolicy used by returned SimpleStepExecutor.\n\n\n---\n\n**Affects:** 1.0-m2\n", "url": "https://github.com/spring-projects/spring-batch/issues/3390", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2007-10-29 02:41:33", "closed": "2008-06-18 18:29:03", "commits": {}, "ttf": 233.00027777777777, "commitsDetails": []}, {"title": "LogOrRethrowException handler swallows unclassified exceptions [BATCH-188]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-188](https://jira.spring.io/browse/BATCH-188?redirect=false)** and commented\n\nCopied from forum:\n\nQuestion:\nThe LogOrRethrowExceptionHandler doesn't do anything with an Exception that is not classified as DEBUG,WARN,ERROR or RETHROW. Is there a reason why this class doesn't rethrow exceptions by default?\n\nReply:\nLogOrRethrowExceptionHandler relies on ExceptionClassifier to classify the exception, so I think it is expected invariant that the exception always falls into one of the predefined categories. Adding an else clause that would throw an IllegalStateException if the exception has not been classified would make sense then.\n\nReply:\nAn IllegalStateException would indeed make sense.\nYesterday the LogOrRethrowExceptionHandler swallowed some ClassNotFoundExceptions that were being thrown. I would expect that any unexpected exception would stop the batch processing.\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/ef608de7ae187961cde091232989510fc92b5c5c\n", "url": "https://github.com/spring-projects/spring-batch/issues/3387", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2007-11-01 05:07:46", "closed": "2008-08-07 02:06:35", "commits": {}, "ttf": 279.0002777777778, "commitsDetails": []}, {"title": "Derby schema is wrong - drop table cannot work on empty database [BATCH-190]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-190](https://jira.spring.io/browse/BATCH-190?redirect=false)** and commented\n\nDerby schema is wrong - drop table cannot work on empty database\n\n\n---\n\n**Affects:** 1.0-m3\n", "url": "https://github.com/spring-projects/spring-batch/issues/3385", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-11-05 02:46:11", "closed": "2008-08-07 02:06:36", "commits": {}, "ttf": 275.0002777777778, "commitsDetails": []}, {"title": "The getProperties in FieldSet does not handle null values  [BATCH-191]", "body": "**[Rajiv Kumar](https://jira.spring.io/secure/ViewProfile.jspa?name=rajiv)** opened **[BATCH-191](https://jira.spring.io/browse/BATCH-191?redirect=false)** and commented\n\nWhen DelimitedFileTokenizer is used, the getProperties() fails when value of any of fields is blank as Hashtable does not allow null keys and null values.  Either we should treat the blank field values as blank strings instead of treating them as null or we need to  expose another method to return a map instead of properties???\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d4c2c8954c4d60f362c8f9308319657f6aa9d656, https://github.com/spring-projects/spring-batch/commit/de91cbe7285af726e170f749ae2d15792248382f\n", "url": "https://github.com/spring-projects/spring-batch/issues/3384", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2007-11-05 17:52:25", "closed": "2008-08-07 02:06:36", "commits": {}, "ttf": 275.0002777777778, "commitsDetails": []}, {"title": "ScheduledJobIdentifier.scheduleDate can cause issues because it is java.util.Date [BATCH-192]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-192](https://jira.spring.io/browse/BATCH-192?redirect=false)** and commented\n\nScheduledJobIdentifier.scheduleDate is a java.util.Date, rather than a java.sql.Date.  This makes sense from a domain perspective, since tying our domains objects to java.sql.* wouldn't be good.  However, older versions of DB2 may have issues converting from from util.Date to sql.Date.  So far I have only seen this in the sql daos, but I still need to do more testing with Hibernate.  I was able to create a work around by creating a custom factory that would create the schedule date as a java.sql.Date, since it extends util.Date, however, it might be worth while to just translate to sql.Date in the sql daos, to avoid any issues.\n\nIf it is decided that we should stay completely in java.util.Date, and out of java.sql.*, then Timestamps would also need to be modfied in the *Execution classes as well, and would definitely require some translation in sql, and some testing with Hibernate to see how it would handle the conversion.\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/3d5c2b44e3e9978881abd393475e6f2cc0468ce7\n", "url": "https://github.com/spring-projects/spring-batch/issues/3383", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-11-07 01:16:40", "closed": "2008-08-07 02:06:36", "commits": {}, "ttf": 274.0002777777778, "commitsDetails": []}, {"title": "Did BATCH-180 fix break something? [BATCH-193]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-193](https://jira.spring.io/browse/BATCH-193?redirect=false)** and commented\n\nThis is the output I get since I updated:\n\nnested exception is java.lang.NoSuchMethodError: org.springframework.batch.execution.step.simple.AbstractStepConfiguration.setName(Ljava/lang/String;)V\n\nIs something broken or am I missing part of the fix (maybe I updated when part of it was checked in but some other part was not)?\n\nFull error message below - Names were changed to protect the innocent:\n\nSEVERE: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jobConfiguration'defined in class path resource [job.xml]: Cannot create inner bean 'util:list#9505f' of type [org.springframework.beans.factory.config.ListFactoryBean] while setting bean property 'steps'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'util:list#9505f': Cannot create inner bean 'step1' of type [org.springframework.batch.execution.step.simple.SimpleStepConfiguration] while setting bean property 'sourceList' with key [0]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'step1' defined in class path resource [job.xml]: Initialization of bean failed;\nnested exception is java.lang.NoSuchMethodError: org.springframework.batch.execution.step.simple.AbstractStepConfiguration.setName(Ljava/lang/String;)V\n\n\n\n---\n\n**Affects:** 1.0-m3\n", "url": "https://github.com/spring-projects/spring-batch/issues/3382", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2007-11-08 12:14:30", "closed": "2008-10-01 00:28:15", "commits": {}, "ttf": 327.0002777777778, "commitsDetails": []}, {"title": "Incorrect exception handling when using Hibernate [BATCH-194]", "body": "**[Peter Zozom](https://jira.spring.io/secure/ViewProfile.jspa?name=peter.zozom)** opened **[BATCH-194](https://jira.spring.io/browse/BATCH-194?redirect=false)** and commented\n\nItemProcessor uses Hibernate for persitence. During processing of chunk the Database raises an exception (i.e. duplicate key - DataIntegrityViolationException).\n\nError description:\nHibernate caches all updates until commit point. This causes that the database exception is raised during database commit (in TransactionTemplate) not in ChunkOperations.iterate(). ExceptionHandler in ChunkOperatons (RepeatTemplate) cannot handle this exception because it occurs after chunk is finnished (this is not synchronous with processing of the bad record).\nThis way we are unable to handle bad records (to skip them) and the whole batch job fails.\n\nSee example in attached zip file (hibernate job).\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Attachments:**\n- [HibernateFlushAdvice.java](https://jira.spring.io/secure/attachment/13192/HibernateFlushAdvice.java) (_694 bytes_)\n- [hibernate-issue.patch](https://jira.spring.io/secure/attachment/13100/hibernate-issue.patch) (_6.58 kB_)\n- [samples.zip](https://jira.spring.io/secure/attachment/13091/samples.zip) (_1.54 MB_)\n\n**Issue Links:**\n- [BATCH-76](https://jira.spring.io/browse/BATCH-76) ItemWriter for SQL batch updates\n\n\n3 votes, 5 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/3381", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-11-08 20:56:57", "closed": "2008-08-07 02:06:36", "commits": {}, "ttf": 272.0002777777778, "commitsDetails": []}, {"title": "NullPointerException in ResourceLineReader if the last line is comment [BATCH-196]", "body": "**[Konstantin Shaposhnikov](https://jira.spring.io/secure/ViewProfile.jspa?name=k.shaposhnikov@gmail.com)** opened **[BATCH-196](https://jira.spring.io/browse/BATCH-196?redirect=false)** and commented\n\nIf the last line in the file is comment then NullPointerException is thrown by ResourceLineReader.\n\nAttached patch fixes this problem.\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Attachments:**\n- [fix-npe.patch](https://jira.spring.io/secure/attachment/13097/fix-npe.patch) (_1.46 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/28eede11ecf36895aa5ed209822312b373d41321\n", "url": "https://github.com/spring-projects/spring-batch/issues/3379", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2007-11-12 03:08:43", "closed": "2008-08-07 02:06:36", "commits": {}, "ttf": 268.0002777777778, "commitsDetails": []}, {"title": "Make backoff policy tests less sensitive to virtualisation [BATCH-198]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-198](https://jira.spring.io/browse/BATCH-198?redirect=false)** and commented\n\nMake backoff policy tests less sensitive to virtualisation - they keep failing because they run too slowly.\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/c2bb83ce739a96c3e5421c672ba362e5c4e9a797\n", "url": "https://github.com/spring-projects/spring-batch/issues/3377", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2007-11-12 17:58:21", "closed": "2008-08-07 02:06:36", "commits": {}, "ttf": 268.0002777777778, "commitsDetails": []}, {"title": "ExceptionHandler in SimpleStepConfiguration ignored by SimpleStepConfigurationFactory [BATCH-199]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-199](https://jira.spring.io/browse/BATCH-199?redirect=false)** and commented\n\nExceptionHandler in SimpleStepConfiguration ignored by SimpleStepConfigurationFactory\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/a541e280aacd5f7215a0a96f512e75c6188f0b56, https://github.com/spring-projects/spring-batch/commit/44463f393abdb2764223a5ae3f9d02fbc2ea7220, https://github.com/spring-projects/spring-batch/commit/120c9cc512f02df93b8f7ef56ae46fd040f5223d\n", "url": "https://github.com/spring-projects/spring-batch/issues/3376", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-11-13 01:30:54", "closed": "2008-08-07 02:06:36", "commits": {}, "ttf": 268.0002777777778, "commitsDetails": []}, {"title": "Move responsibility for deciding if an exception terminates a batch to ExceptionHandler [BATCH-201]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-201](https://jira.spring.io/browse/BATCH-201?redirect=false)** and commented\n\nMove responsibility for deciding if an exception terminates a batch to ExceptionHandler - it confuses everyone that the failure case is also handled by CompletionPolicy.\n\n\n---\n\n**Affects:** 1.0-m3\n\n1 votes, 1 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/3374", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2007-11-13 04:24:59", "closed": "2008-08-07 02:06:37", "commits": {}, "ttf": 267.0002777777778, "commitsDetails": []}, {"title": "HibernateDao incorrectly returns an existing job. [BATCH-203]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-203](https://jira.spring.io/browse/BATCH-203?redirect=false)** and commented\n\nIf a job is created with a ScheduledJobIdentifier, and another job with a ScheduledJobIdentifier with the same name, but with other modified attributes, such as the job key, findJobs will return the existing job, rather than an empty list, as it should.\n\n\n---\n\n**Affects:** 1.0-m2\n\n**Attachments:**\n- [hibernate-testcase](https://jira.spring.io/secure/attachment/13102/hibernate-testcase) (_1.37 kB_)\n- [hibernate-testcase.txt](https://jira.spring.io/secure/attachment/13103/hibernate-testcase.txt) (_1.37 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/1c95e5a62552fce5b8e06075cfe6a5c5856f2f1d\n", "url": "https://github.com/spring-projects/spring-batch/issues/3372", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-11-13 16:59:51", "closed": "2008-08-07 02:06:37", "commits": {}, "ttf": 267.0002777777778, "commitsDetails": []}, {"title": "exit_message too short for holding long exceptions [BATCH-207]", "body": "**[Rajiv Kumar](https://jira.spring.io/secure/ViewProfile.jspa?name=rajiv)** opened **[BATCH-207](https://jira.spring.io/browse/BATCH-207?redirect=false)** and commented\n\nGetting the following exception\n\nNov 16 20:10:42  util.JDBCExceptionReporter 78 - Data truncation: Data too long for column 'exit_message' at row 1  \nNov 16 20:10:43  def.AbstractFlushingEventListener 301 - Could not synchronize database state with session  \norg.hibernate.exception.DataException: could not update: [org.springframework.batch.core.domain.JobExecution#67]\nat org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:77)\nat org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:43)\nat org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:2425)\nat org.hibernate.persister.entity.AbstractEntityPersister.updateOrInsert(AbstractEntityPersister.java:2307)\nat org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:2607)\nat org.hibernate.action.EntityUpdateAction.execute(EntityUpdateAction.java:92)\nat org.hibernate.engine.ActionQueue.execute(ActionQueue.java:248)\nat org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:232)\nat org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:140)\nat org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:298)\nat org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:27)\nat org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1000)\nat org.springframework.orm.hibernate3.HibernateAccessor.flushIfNecessary(HibernateAccessor.java:390)\nat org.springframework.orm.hibernate3.HibernateTemplate.execute(HibernateTemplate.java:370)\nat org.springframework.orm.hibernate3.HibernateTemplate.update(HibernateTemplate.java:651)\nat org.springframework.orm.hibernate3.HibernateTemplate.update(HibernateTemplate.java:647)\nat org.springframework.batch.execution.repository.dao.HibernateJobDao.update(HibernateJobDao.java:156)\nat org.springframework.batch.execution.repository.SimpleJobRepository.saveOrUpdate(SimpleJobRepository.java:146)\nat org.springframework.batch.execution.job.DefaultJobExecutor.run(DefaultJobExecutor.java:123)\nat org.springframework.batch.execution.launch.SimpleJobExecutorFacade.start(SimpleJobExecutorFacade.java:197)\nat org.springframework.batch.execution.launch.SimpleJobLauncher.runInternal(SimpleJobLauncher.java:249)\nat org.springframework.batch.execution.launch.SimpleJobLauncher$1.run(SimpleJobLauncher.java:282)\nat org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)\nat org.springframework.batch.execution.launch.SimpleJobLauncher.run(SimpleJobLauncher.java:279)\nat org.springframework.batch.execution.launch.SimpleJobLauncher.run(SimpleJobLauncher.java:317)\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/761a89b3ebb38a04f00e44ec6b2bc3ce41ae465c, https://github.com/spring-projects/spring-batch/commit/edff6be9b38561c985d49b7bf88ad620826c17c4\n", "url": "https://github.com/spring-projects/spring-batch/issues/3368", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-11-16 00:45:15", "closed": "2008-08-07 02:06:37", "commits": {}, "ttf": 265.0002777777778, "commitsDetails": []}, {"title": "ItemStreams should use \"lastMarkedPosition\" as restart data [BATCH-215]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-215](https://jira.spring.io/browse/BATCH-215?redirect=false)** and commented\n\nLast marked position should be used as restart data instead of current position\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Issue Links:**\n- [BATCH-342](https://jira.spring.io/browse/BATCH-342) mark() works only for subclasses of AbstractTransactionalIoSource\n (_**\"depends on\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/3361", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: declined", "type: bug"], "created": "2007-11-21 22:43:25", "closed": "2008-02-07 17:41:49", "commits": {}, "ttf": 77.00027777777778, "commitsDetails": []}, {"title": "Merge InputSource with ItemProvider [BATCH-212]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-212](https://jira.spring.io/browse/BATCH-212?redirect=false)** and commented\n\nMerge InputSource with ItemProvider - there is no real need for two interfaces, and ItemProvider is probably fine to keep.  The only complication is recovery - it needs to be delegated to a new marker interface (maybe replacing Recoverable).\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Issue Links:**\n- [BATCH-222](https://jira.spring.io/browse/BATCH-222) StreamManager for reader/writer abstractions uses StreamContext to position at the right place for restart\n (_**\"depends on\"**_)\n- [BATCH-230](https://jira.spring.io/browse/BATCH-230) Recoverable and ItemProvider.recover() abstractions refactored into correct place in chunk-oriented framework\n (_**\"is depended on by\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/3359", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2007-11-20 18:53:05", "closed": "2008-08-07 02:06:37", "commits": {}, "ttf": 260.0002777777778, "commitsDetails": []}, {"title": "Zip packaging for non-maven users [BATCH-235]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-235](https://jira.spring.io/browse/BATCH-235?redirect=false)** and commented\n\nZip packaging for non-maven users - single download with dependency list but not the phyiscal jars (docs, samples, jars).\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d3b1a7abbe4c9a76b3da218970810953aa542530, https://github.com/spring-projects/spring-batch/commit/246e952dde1502703eb459df3fe6c1b81e9e1d6b, https://github.com/spring-projects/spring-batch/commit/116d6e741618fc8ddc47350563a61ac95e9c6b5f, https://github.com/spring-projects/spring-batch/commit/83864542d3f8104451daaa88b4606bc7b6901feb, https://github.com/spring-projects/spring-batch/commit/a55a7c5c43809c9d66c1a0d807072d982aca358b\n", "url": "https://github.com/spring-projects/spring-batch/issues/3341", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2007-11-29 00:12:17", "closed": "2008-08-07 02:06:40", "commits": {}, "ttf": 252.00027777777777, "commitsDetails": []}, {"title": "Document changes between m2 and m3 - deploy samples from m2 against m3 jars and list steps to change [BATCH-236]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-236](https://jira.spring.io/browse/BATCH-236?redirect=false)** and commented\n\nDocument changes between m2 and m3 - deploy samples from m2 against m3 jars and list steps to change.\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Attachments:**\n- [M2-to-M3-transition.txt](https://jira.spring.io/secure/attachment/13170/M2-to-M3-transition.txt) (_2.75 kB_)\n- [M2-to-M3-transition-final.txt](https://jira.spring.io/secure/attachment/13175/M2-to-M3-transition-final.txt) (_2.83 kB_)\n\n1 votes, 1 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/3340", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2007-11-29 00:17:04", "closed": "2008-08-07 02:06:40", "commits": {}, "ttf": 252.00027777777777, "commitsDetails": []}, {"title": "HibernateAwareItemWriter should clear session after flushing [BATCH-237]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-237](https://jira.spring.io/browse/BATCH-237?redirect=false)** and commented\n\nAfter changes have been flushed to database session cache should be cleared.\n\nThe code update itself is trivial, but tests need to be updated too. Adding the clear() call breaks current tests because they use a hacked test version of HibernateTemplate. Also the updated tests should check that the clear() method has been called as expected.\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/9688484ad5328c0716631e5e066b120f4a4dac03, https://github.com/spring-projects/spring-batch/commit/933b4750aa3e66111a7b9482878a23391b4e476a\n", "url": "https://github.com/spring-projects/spring-batch/issues/3339", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2007-11-29 01:52:12", "closed": "2008-08-07 02:06:40", "commits": {}, "ttf": 252.00027777777777, "commitsDetails": []}, {"title": "Use OracleSequenceMaxValueIncrementer and change DDL for Oracle in meta data tables [BATCH-240]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-240](https://jira.spring.io/browse/BATCH-240?redirect=false)** and commented\n\nUse OracleSequenceMaxValueIncrementer and change DDL for Oracle in meta data tables\n\n\n---\n\n**Affects:** 1.0-m3\n", "url": "https://github.com/spring-projects/spring-batch/issues/3338", "user": "spring-issuemaster", "labels": ["in: samples", "status: declined", "type: bug"], "created": "2007-11-29 04:51:40", "closed": "2007-12-08 23:24:14", "commits": {}, "ttf": 9.000277777777777, "commitsDetails": []}, {"title": "jar and source doesn't match [BATCH-242]", "body": "**[Hilda Lu](https://jira.spring.io/secure/ViewProfile.jspa?name=hlu)** opened **[BATCH-242](https://jira.spring.io/browse/BATCH-242?redirect=false)** and commented\n\nI am currently using build_66 that I got from the night build server (http://s3browse.com/explore/maven.springframework.org/snapshot/org/springframework/batch). I have downloaded JARs and JAR-sources. I am not sure how these jars get built, but they are out of sync. The Jar with the sources has:\n\n    org.springframework.batch.core.domain.JobInstance -> createNewJobExecution() method\n\nwhile the JAR with classes does not (spring-batch-core\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/cb1a02bb9f0b10a1985a8118168b040fd596d4ed, https://github.com/spring-projects/spring-batch/commit/ffa19bdd20239183d8e86ef565e7db2e46a62d75\n", "url": "https://github.com/spring-projects/spring-batch/issues/3336", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2007-11-30 00:04:44", "closed": "2007-12-11 01:38:44", "commits": {}, "ttf": 11.000277777777777, "commitsDetails": []}, {"title": "Register Job twice if beanName property is used to define a job name [BATCH-243]", "body": "**[Hilda Lu](https://jira.spring.io/secure/ViewProfile.jspa?name=hlu)** opened **[BATCH-243](https://jira.spring.io/browse/BATCH-243?redirect=false)** and commented\n\nWhen the \"jobConfiguration\" bean is defined:\n\n      \t<bean id=\"jobConfiguration\" parent=\"simpleJob\">\n    \t<property name=\"beanName\" value=\"ibSplit\"/>\n    \t<property name=\"steps\">\n                .... ... ...\n    \n      the framework (org.springframework.batch.execution.configuration.MapJobConfigurationRegistry) registers the job with the \"beanName\" value, and then re-registers it with the bean's \"id\" value due to the BeanAwareness:\n    \n    springframework/batch/core/configuration/JobConfiguration.java:\n    \n    /** \n     * The callback from {@link BeanNameAware} comes after the setters, so it\n     * will always overwrite the name with the bean id.\n     * \n     * @see org.springframework.beans.factory.BeanNameAware#setBeanName(java.lang.String)\n     */\n    public void setBeanName(String name) {\n        this.name = name;\n    } \n    \n    Hence I commented <!-- <property name=\"beanName\" value=\"ibSplit\"/> --> and changed the \"id\" to the actual jobname. I guess the way it works right now is the intended behavior, but that is not how it worked before according to the code I picked up.\n\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/22d769afdd06ae2caa273c46b5839f539bff1b98, https://github.com/spring-projects/spring-batch/commit/622e27de9c13e365da031c561086b40adcd5b1a2\n", "url": "https://github.com/spring-projects/spring-batch/issues/3335", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-11-30 00:12:40", "closed": "2008-06-18 18:29:04", "commits": {}, "ttf": 201.00027777777777, "commitsDetails": []}, {"title": "Repeated processing of items does not work if exception is in first chunk [BATCH-244]", "body": "**[Jens Eickmeyer](https://jira.spring.io/secure/ViewProfile.jspa?name=eickmeyer)** opened **[BATCH-244](https://jira.spring.io/browse/BATCH-244?redirect=false)** and commented\n\nIf an exception occurs during the processing of a chunk an ExceptionHandler in the StepOperations can be used to signal the framework to rollback the current chunk. It is assumed that the default behaviour of the DefaultStepExecutor used in all the examples has the ability to process all items again that could be handled successfully in the previous execution of the chunk. The item which caused the processing of the chunk to fail should be skipped. Unfortunately this does not work out of the box. An attached example which is based on tradeJob.xml should show this.\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Attachments:**\n- [rollbackJob.xml](https://jira.spring.io/secure/attachment/13172/rollbackJob.xml) (_4.13 kB_)\n- [RollbackJobFunctionalTests.java](https://jira.spring.io/secure/attachment/13173/RollbackJobFunctionalTests.java) (_361 bytes_)\n- [TradeProcessor.java](https://jira.spring.io/secure/attachment/13174/TradeProcessor.java) (_1.72 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/f4504b070e71433048cf80e7ab9ea4b6af5f2fae\n", "url": "https://github.com/spring-projects/spring-batch/issues/3334", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-12-02 19:42:17", "closed": "2008-08-07 02:06:41", "commits": {}, "ttf": 248.00027777777777, "commitsDetails": []}, {"title": "relative path to parent pom should be \"../parent\" [BATCH-246]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-246](https://jira.spring.io/browse/BATCH-246?redirect=false)** and commented\n\nThe relative path to parent pom has not been updated after the parent pom was moved to separate module - it should now be \"../parent\" instead of \"..\".\n\nThis does not cause trouble for command-line building, but makes difference within eclipse (with correct relative path changes in one module are immediately visible in other modules, without the need to install the updated modules to repository first).\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Attachments:**\n- [parent-pom.patch](https://jira.spring.io/secure/attachment/13178/parent-pom.patch) (_2.64 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/34b0ca7a23b8b73c2d5275e5bfd046f37277814f\n", "url": "https://github.com/spring-projects/spring-batch/issues/3332", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-12-03 19:05:57", "closed": "2008-08-07 02:06:41", "commits": {}, "ttf": 247.00027777777777, "commitsDetails": []}, {"title": "update samples job matrix [BATCH-247]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-247](https://jira.spring.io/browse/BATCH-247?redirect=false)** and commented\n\nThe matrix mapping sample jobs to features they present is out of date.\n\nAlso it would make sense to make the matrix available in HTML or other open format (not only excel).\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Attachments:**\n- [job_matrix.xls](https://jira.spring.io/secure/attachment/13179/job_matrix.xls) (_18.50 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d5b0b35175150e1713da4229e61df98994f10710\n\n1 votes, 1 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/3331", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2007-12-03 21:54:17", "closed": "2008-08-07 02:06:41", "commits": {}, "ttf": 247.00027777777777, "commitsDetails": []}, {"title": "Fix build so that profiles work again in reactor build [BATCH-249]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-249](https://jira.spring.io/browse/BATCH-249?redirect=false)** and commented\n\nFix build so that profiles work again in reactor build.  When the parent moved to a separate project it prevented modules from picking up profiles from their driver.  So \"mvn -P fast install\" doesn't prevent the tests from being run, for instance.\n\n\n---\n\n**Affects:** 1.0.0.m4\n", "url": "https://github.com/spring-projects/spring-batch/issues/3329", "user": "spring-issuemaster", "labels": ["in: core", "in: documentation", "in: infrastructure", "in: samples", "type: bug"], "created": "2007-12-07 21:02:57", "closed": "2008-08-07 02:06:41", "commits": {}, "ttf": 243.00027777777777, "commitsDetails": []}, {"title": "Wrong DB Schema for DB2 for z/OS [BATCH-250]", "body": "**[Jens Eickmeyer](https://jira.spring.io/secure/ViewProfile.jspa?name=eickmeyer)** opened **[BATCH-250](https://jira.spring.io/browse/BATCH-250?redirect=false)** and commented\n\nThe batch tables defnied in the schema definition for DB2 do not work out of the box with the framework DAOs when they are created on DB2 for z/OS. There's a problem with the SCHEDULE_DATE column.\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Attachments:**\n- [schema-db2.patch](https://jira.spring.io/secure/attachment/13188/schema-db2.patch) (_598 bytes_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/c7468195d03773a1a024005bf42a8c404ce012be\n", "url": "https://github.com/spring-projects/spring-batch/issues/3328", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-12-07 23:20:57", "closed": "2008-08-07 02:06:41", "commits": {}, "ttf": 243.00027777777777, "commitsDetails": []}, {"title": "broken hsql business schema [BATCH-251]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-251](https://jira.spring.io/browse/BATCH-251?redirect=false)** and commented\n\n\"position\" is a keyword in hsql so it can't be used as column name (causes all sample jobs to fail on schema creation)\n\n\n---\n\n**Affects:** 1.0-m3\n", "url": "https://github.com/spring-projects/spring-batch/issues/3327", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2007-12-09 19:02:50", "closed": "2008-08-07 02:06:41", "commits": {}, "ttf": 241.00027777777777, "commitsDetails": []}, {"title": "Miss jars in project milestone download site [BATCH-253]", "body": "**[Hilda Lu](https://jira.spring.io/secure/ViewProfile.jspa?name=hlu)** opened **[BATCH-253](https://jira.spring.io/browse/BATCH-253?redirect=false)** and commented\n\nFrom springframework.org, we can get milestone downloads at http://static.springframework.org/downloads/nightly/milestone-download.php?project=BATCH page.\nThe spring-batch-1.0.0-m3-no-dependencies.zip are missing batch-integration.jar and batch-sample.jar.\n\n\n---\n\n**Affects:** 1.0-m3\n", "url": "https://github.com/spring-projects/spring-batch/issues/3326", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2007-12-10 20:46:52", "closed": "2007-12-11 06:29:09", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Zip packaging bugs in m3 release [BATCH-254]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-254](https://jira.spring.io/browse/BATCH-254?redirect=false)** and commented\n\nZip packaging *-sources.jar files contain .class rather than .java files.  The -sources that are within the S3 repository all appear to be correct.\n\n\n---\n\n**Affects:** 1.0-m3\n\n1 votes, 0 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/3325", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-12-11 01:06:27", "closed": "2008-08-07 02:06:42", "commits": {}, "ttf": 240.00027777777777, "commitsDetails": []}, {"title": "JobKey not working? [BATCH-255]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-255](https://jira.spring.io/browse/BATCH-255?redirect=false)** and commented\n\nIt seems to me that despite any value I try to force into the jobKey property, the word \"key\" is written to the corresponding field in my database.\n\nCan we also get some clarification as to what the meaning of jobKey is? I understand it to be a combination of jobStream and jobRun, but to what end? I thought the idea of having a separate configurable jobStream field was, in addition to any internal purpose, a convenient way to classify related jobs for the purposes of reporting and management, so I'm confused as to what direction you're going with this feature.\n\nIf I'm mistaken, might we consider adding such a field?\n\neg. supposing we have three distinct \"groups\" of jobs - \"monthly\" \"nightly\" \"midday\" - we might want to query the tables as follows: SELECT * FROM JOB_EXECUTION WHERE JOB_GROUP = 'nightly' ----- equivalently we might want to classify jobs by purpose, eg. \"incoming\" \"internal\" and \"outgoing\" or to business concepts eg. \"fixedIncome\", \"equity\", \"contracts\", etc.\n\nDepending on the answer, this may move to a separate JIRA issue.\n\n\n---\n\n**Affects:** 1.0-m3\n", "url": "https://github.com/spring-projects/spring-batch/issues/3324", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2007-12-11 03:00:07", "closed": "2008-06-18 18:29:05", "commits": {}, "ttf": 190.00027777777777, "commitsDetails": []}, {"title": "Error in business-schema-postgresql [BATCH-256]", "body": "**[Peter Zozom](https://jira.spring.io/secure/ViewProfile.jspa?name=peter.zozom)** opened **[BATCH-256](https://jira.spring.io/browse/BATCH-256?redirect=false)** and commented\n\nSchema 'business-schema-postgresql.sql' cointains error: 'BLOB' is not valid keyword in PSQL. 'BYTEA' can be used instead.\n\n\n---\n\n**Affects:** 1.0.0.m4\n", "url": "https://github.com/spring-projects/spring-batch/issues/3323", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2007-12-12 20:31:10", "closed": "2008-08-07 02:06:42", "commits": {}, "ttf": 238.00027777777777, "commitsDetails": []}, {"title": "FixedLengthTokenizer by default maps zero padded numeric fields as octal. [BATCH-261]", "body": "**[Dominic Aitken](https://jira.spring.io/secure/ViewProfile.jspa?name=aitkend)** opened **[BATCH-261](https://jira.spring.io/browse/BATCH-261?redirect=false)** and commented\n\nA common formatting for numeric fields in simple flat batch input files is to pad the numeric data with leading zeros. e.g. the value 9 in a field of width 7 would be represented \"0000009\".  Using just the DefaultFlatFileInputSource and the FixedLengthTokenizer from Spring batch 1.0-m3 to parse the input record causes the following error, as, by default, the conversion is done using Long.decode and this assumes that leading zeros imply octal. This issue was raised with Lucas Ward at the  Spring Experience  2007 who said he considered this effect on batch input data  to be a bug, and requested that we raise this issue on the JIRA.\n\nException in thread \"main\" org.springframework.batch.io.exception.FlatFileParsingException: Parsing error\nat org.springframework.batch.io.file.support.SimpleFlatFileInputSource.read(SimpleFlatFileInputSource.java:198)\n\n\\<snip>\n\nCaused by: org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are:\nPropertyAccessException 1: org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to required type [java.lang.Long] for property 'recordSequenceNumber'; nested exception is java.lang.NumberFormatException: For input string: \"0000009\"\n\nHere is a cut down version of the relevant beans in the XML config. A simple POJO was created to receive the data with the type of RecordSequenceNumber being Long.\n\n    <bean id=\"InterchangeTokenizer\"\n    \tclass=\"org.springframework.batch.io.file.support.transform.FixedLengthTokenizer\">\n    \t<property name=\"names\"\n    \t\tvalue=\"RecordSequenceNumber\" />\n    \t<property name=\"columns\"\n    \t\tvalue=\"4-11\" />\n    </bean>\n    \n    <bean id=\"inputSource\"\n    \tclass=\"org.springframework.batch.io.file.support.DefaultFlatFileInputSource\">\n    \t<property name=\"resource\" value=\"file:input.txt\" />\n    \t<property name=\"fieldSetMapper\" ref=\"InterchangeMapper\" />\n    \t<property name=\"tokenizer\" ref=\"InterchangeTokenizer\" />\n    </bean>\n    \n    <bean id=\"InterchangeMapper\"\n    \tclass=\"org.springframework.batch.io.file.support.mapping.BeanWrapperFieldSetMapper\">\n    \t<property name=\"targetType\"\n    \t\tvalue=\"com.aciworldwide.backoffice.interchange.InterchangeIncomingTransaction\" />\n    </bean>\n\nIt would be better if the default for processing this type of field was to assume BA[SE-10](https://jira.spring.io/browse/SE-10), or, perhaps, alternatively if there was a way of specifiying the numeric base of the fields on the tokenizer.\n\n\n---\n\n**Affects:** 1.0-m3, 1.0.0.m4\n\n**Issue Links:**\n- [BATCH-154](https://jira.spring.io/browse/BATCH-154) Re-implement BeanWrapperFieldSetMapper using a DataBinder\n (_**\"depends on\"**_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/a41fef7eb67cfe8276bfc090d7491f92addd75f0\n", "url": "https://github.com/spring-projects/spring-batch/issues/3320", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2007-12-18 21:35:24", "closed": "2008-08-07 02:06:42", "commits": {}, "ttf": 232.00027777777777, "commitsDetails": []}, {"title": "Hibernate Job  blocks on flush [BATCH-262]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-262](https://jira.spring.io/browse/BATCH-262?redirect=false)** and commented\n\nHibernate Job  blocks on flush (using real database).  The driving query input source is putting a range lock on the Customer objects.\n\n\n---\n\n**Affects:** 1.0-m3\n", "url": "https://github.com/spring-projects/spring-batch/issues/3319", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2007-12-20 23:26:37", "closed": "2008-08-07 02:06:42", "commits": {}, "ttf": 230.00027777777777, "commitsDetails": []}, {"title": "Javadocs missing from website [BATCH-265]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-265](https://jira.spring.io/browse/BATCH-265?redirect=false)** and commented\n\nJavadocs missing from website - I can't see them anyway...\n\n\n---\n\n**Affects:** 1.0-m3\n", "url": "https://github.com/spring-projects/spring-batch/issues/3317", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2007-12-30 19:03:05", "closed": "2008-08-07 02:06:42", "commits": {}, "ttf": 220.00027777777777, "commitsDetails": []}, {"title": "retry configuration for ItemOrientedTasklet [BATCH-268]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-268](https://jira.spring.io/browse/BATCH-268?redirect=false)** and commented\n\nItemOrientedTasklet no longer has a setter for RetryOperations which allowed to configure retry behaviour. Now only RetryPolicy can be set, but tasklet wraps it by ItemReaderRetryPolicy which rethrows exceptions by default, so exception always causes immediate rollback no matter what RetryPolicy was injected into the tasklet.\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Attachments:**\n- [retrySample.patch](https://jira.spring.io/secure/attachment/13255/retrySample.patch) (_10.02 kB_)\n\n**Issue Links:**\n- [BATCH-334](https://jira.spring.io/browse/BATCH-334) Create TaskletStep implementation and retire ItemOrientedTasklet\n (_**\"depends on\"**_)\n- [BATCH-334](https://jira.spring.io/browse/BATCH-334) Create TaskletStep implementation and retire ItemOrientedTasklet\n\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/2ce3013ac1ea7638bad37964ba8fa5ea876bb46b\n", "url": "https://github.com/spring-projects/spring-batch/issues/3314", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-01-03 01:33:50", "closed": "2008-08-07 02:06:42", "commits": {}, "ttf": 217.00027777777777, "commitsDetails": []}, {"title": "JDK1.4 backward compatibility broken in infrastructure [BATCH-270]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-270](https://jira.spring.io/browse/BATCH-270?redirect=false)** and commented\n\nJDK1.4 backward compatibility broken in infrastructure;\n\nc:\\Dave\\Spring\\spring-batch\\build\\spring-batch-infrastructure\\src\\main\\java\\org\\springframework\\batch\\repeat\\exception\\handler\\LogOrRethrowExceptionHandler.java:[102,30] cannot resolve symbol\nsymbol  : constructor IllegalStateException (java.lang.String,java.lang.Throwable)\nlocation: class java.lang.IllegalStateException\n\nc:\\Dave\\Spring\\spring-batch\\build\\spring-batch-infrastructure\\src\\main\\java\\org\\springframework\\batch\\io\\file\\SimpleFlatFileItemReader.java:[197,30] cannot resolve symbol\nsymbol  : constructor IllegalStateException (java.lang.Exception)\nlocation: class java.lang.IllegalStateException\n\nc:\\Dave\\Spring\\spring-batch\\build\\spring-batch-infrastructure\\src\\main\\java\\org\\springframework\\batch\\repeat\\aop\\RepeatOperationsInterceptor.java:[83,59] cannot resolve symbol\nsymbol  : method getGenericReturnType ()\nlocation: class java.lang.reflect.Method\n\n\n---\n\n**Affects:** 1.0-m3\n", "url": "https://github.com/spring-projects/spring-batch/issues/3312", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-01-07 06:49:07", "closed": "2008-08-07 02:06:43", "commits": {}, "ttf": 212.00027777777777, "commitsDetails": []}, {"title": "BatchCommandLineLauncher default bean reference does not match the one in samples [BATCH-239]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-239](https://jira.spring.io/browse/BATCH-239?redirect=false)** and commented\n\nBatchCommandLineLauncher default bean reference does not match the one in samples\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/9de2e3e11dea13d3cd9ed9ca038094f9fd1f7b0f\n", "url": "https://github.com/spring-projects/spring-batch/issues/3301", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2007-11-29 04:37:46", "closed": "2008-08-07 02:06:40", "commits": {}, "ttf": 251.00027777777777, "commitsDetails": []}, {"title": "Null fields cause problems in Oracle and Derby [BATCH-281]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-281](https://jira.spring.io/browse/BATCH-281?redirect=false)** and commented\n\nNull fields cause problems in Oracle and Derby.  See forum (http://forum.springframework.org/showthread.php?t=46821) for more information.\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Attachments:**\n- [trace.txt](https://jira.spring.io/secure/attachment/13669/trace.txt) (_16.40 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/8ab7e1371aa27e9e95c626a4688b70d06187d79d\n", "url": "https://github.com/spring-projects/spring-batch/issues/3298", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-01-12 22:10:48", "closed": "2018-12-06 18:02:23", "commits": {}, "ttf": 3980.0002777777777, "commitsDetails": []}, {"title": "HibernateFailureJob does not fail as expected [BATCH-252]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-252](https://jira.spring.io/browse/BATCH-252?redirect=false)** and commented\n\nHibernateFailureJob testcase expects the job to end with exception, but does not check it really does. In fact the job doesn't fail and the assert in catch block is never executed (although it would have passed if it was).\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/17705f27ab50c93b1f566f6113eafc3bc50fe300\n", "url": "https://github.com/spring-projects/spring-batch/issues/3295", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2007-12-09 19:47:25", "closed": "2008-08-07 02:06:41", "commits": {}, "ttf": 241.00027777777777, "commitsDetails": []}, {"title": "Problem with DelimitedLineTokenizer and whitespace after quote [BATCH-285]", "body": "**[Philippe Laflamme](https://jira.spring.io/secure/ViewProfile.jspa?name=plaflamme)** opened **[BATCH-285](https://jira.spring.io/browse/BATCH-285?redirect=false)** and commented\n\nThe DelimitedLineTokenizer doesn't seem to gracefully handle lines that end with a quoted value that also has extra whitespaces after the closing quote. ie:\n\n(whitespace replaced by _)\n\na,b,\"c\"_\nreturns c\" as the string value at index 2.\n\na,b,\"c\"__\nreturns \"c\" as the string value at index 2.\n\nI'll attach a patch that adds both test cases to the DelimitedLineTokenizerTests class.\n\n\n---\n\n**Affects:** 1.0.0.m4\n\n**Attachments:**\n- [quotes-and-whitespace.patch](https://jira.spring.io/secure/attachment/13272/quotes-and-whitespace.patch) (_1.08 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/c0bf35b9594a3766c76bd45cde5d377130a10a5a\n", "url": "https://github.com/spring-projects/spring-batch/issues/3294", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-01-14 07:44:54", "closed": "2008-08-07 02:06:44", "commits": {}, "ttf": 205.00027777777777, "commitsDetails": []}, {"title": "is JobIdentifier a strategy? [BATCH-292]", "body": "**[Gregory Kick](https://jira.spring.io/secure/ViewProfile.jspa?name=gk5885)** opened **[BATCH-292](https://jira.spring.io/browse/BATCH-292?redirect=false)** and commented\n\nJob Identifier is documented as being a strategy (and as such, is an interface).  However, the interface really seems to define a value object that is used as a unique key.  Thus, the primary use for a JobInstance is .equals() and .hashCode().\n\nE.g.\n\nif (registry.containsKey(jobIdentifier)) {\nreturn ((JobExecutionHolder) registry.get(jobIdentifier)).getExecution();\n}\n\nThis requires that .equals() and .hashCode() are consistently implemented across all implementations of JobInterface.  I don't have my copy of \"Effective Java\" around, but it's pretty clear in how unlikely that is (especially with no documentation about the fact that it will be used that way).\n\nA more appropriate alternative would be to convert JobIdentifier to a value object and provide factories for conveniently populating different properties (e.g. JobIdentifier newScheduledJobIdentifier(String jobName, Date scheduleDate)).\n\n\n---\n\n**Affects:** 1.0.0.m4\n", "url": "https://github.com/spring-projects/spring-batch/issues/3285", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2008-01-15 02:57:41", "closed": "2008-01-15 20:02:44", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "ResourceLineReader eats newlines within a record's field [BATCH-293]", "body": "**[Philippe Laflamme](https://jira.spring.io/secure/ViewProfile.jspa?name=plaflamme)** opened **[BATCH-293](https://jira.spring.io/browse/BATCH-293?redirect=false)** and commented\n\nConsidering the lines:\n\n1,2,\"3\n4\"\n5,6,7\n\nThe expected return value of two consecutive calls to the read() method of ResourceLineReader are (without < and >):\n\ncall 1:\n<1,2,\"3\n4\">\n\ncall 2:\n<5,6,7>\n\nBut currently, call 1 returns\n<1,2,\"34\"\n\n> (notice that the newline is misplaced...)\n\n\n\n---\n\n**Affects:** 1.0.0.m4\n\n**Attachments:**\n- [resourceLineReaderTests.patch](https://jira.spring.io/secure/attachment/13280/resourceLineReaderTests.patch) (_1.96 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/5627d289451adfc82b53793260442b4e6079a842\n", "url": "https://github.com/spring-projects/spring-batch/issues/3284", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-01-15 07:08:00", "closed": "2008-08-07 02:06:44", "commits": {}, "ttf": 204.00027777777777, "commitsDetails": []}, {"title": "rollback of first chunk fails [BATCH-296]", "body": "**[Edwin Lukaweski](https://jira.spring.io/secure/ViewProfile.jspa?name=elukaweski)** opened **[BATCH-296](https://jira.spring.io/browse/BATCH-296?redirect=false)** and commented\n\nThe attached test (a modification of the current one) shows that a roll back that occurs in the first chunk, of a step, does not properly reset the input source to the first record. But, instead, continues with the next record after the rollback is executed.\n\nI believe the solution is to call the inputreader.mark() as part of the open() method in DefaultFlatFileInputSource.java\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Attachments:**\n- [DefaultFlatFileInputSourceTests.java](https://jira.spring.io/secure/attachment/13281/DefaultFlatFileInputSourceTests.java) (_7.51 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/ddac3e8e5e0b53acd678d2a7a491cf55254baae1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3282", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-01-16 00:56:15", "closed": "2008-08-07 02:06:44", "commits": {}, "ttf": 204.00027777777777, "commitsDetails": []}, {"title": "security namespage prevents using a user-service-ref that isn't in the same XML file [BATCH-302]", "body": "**[Cameron Braid](https://jira.spring.io/secure/ViewProfile.jspa?name=cameronbraid)** opened **[BATCH-302](https://jira.spring.io/browse/BATCH-302?redirect=false)** and commented\n\nI use spring2-5 annotation based configuration :\n`@Component`\npublic class UserDetailsService implements org.springframework.security.userdetails.UserDetailsService {\n..\n}\n\nand in my security.xml file I have :\n\n\\<authentication-provider user-service-ref=\"userDetailsService\"/>\n\nI get this error :\n\nCaused by: org.xml.sax.SAXParseException: cvc-id.1: There is no ID/IDREF binding for IDREF 'userDetailsService'.\nat org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)\nat org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)\nat org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)\nat org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)\nat org.apache.xerces.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(Unknown Source)\nat org.apache.xerces.impl.xs.XMLSchemaValidator.reportSchemaError(Unknown Source)\nat org.apache.xerces.impl.xs.XMLSchemaValidator.handleEndElement(Unknown Source)\nat org.apache.xerces.impl.xs.XMLSchemaValidator.endElement(Unknown Source)\nat org.apache.xerces.impl.XMLNSDocumentScannerImpl.scanEndElement(Unknown Source)\nat org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)\nat org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)\nat org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)\nat org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)\nat org.apache.xerces.parsers.XMLParser.parse(Unknown Source)\nat org.apache.xerces.parsers.DOMParser.parse(Unknown Source)\nat org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)\nat org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:78)\nat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:361)\n\nchanding the XSD file to from type=\"xs:IDREF\" to xs:string fixes this.\n\nThere are probably other type=\"xs:IDREF\" attributes that should also be changed\n\n\n---\nNo further details from [BATCH-302](https://jira.spring.io/browse/BATCH-302?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/3277", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2008-01-18 12:45:31", "closed": "2008-01-19 03:18:07", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "BatchCommandLineLauncher simplified and rename [BATCH-304]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-304](https://jira.spring.io/browse/BATCH-304?redirect=false)** and commented\n\nBatchCommandLineLauncher simplified and renamed.  There are simply too many ways to skin this cat, and we don't want to try and cover everyone's preferences in one main method.  Rename as SimpleCommandLineJobDispatcher (or something?), and make it work in the simple case that there is one application context (in XML) and a named Job (possibly one of many), with two optional runtime parameters (a key and a schedule date).  The JobLauncher is identified by type.\n\n\n---\n\n**Affects:** 1.0-m3\n", "url": "https://github.com/spring-projects/spring-batch/issues/3275", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2008-01-22 00:35:00", "closed": "2008-08-07 02:06:45", "commits": {}, "ttf": 198.00027777777777, "commitsDetails": []}, {"title": "ItemProvider still referenced in comments / variable naming in ItemOrientedTasklet [BATCH-305]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-305](https://jira.spring.io/browse/BATCH-305?redirect=false)** and commented\n\nIn ItemOrientedTasklet, parameter and member field are called itemProvider but method name and type are ItemReader - this is inconsistent. Additionally, ItemReader is still referred to as ItemProvider inconsistently throughout comments.\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/702213838e87aa58659b543a650c6d2e120cdf98\n", "url": "https://github.com/spring-projects/spring-batch/issues/3274", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-01-22 06:32:20", "closed": "2008-08-07 02:06:45", "commits": {}, "ttf": 197.00027777777777, "commitsDetails": []}, {"title": "m4 doesn't build because no repository referenced has org.apache.activemq:activemq-parent:5.0-SNAPSHOT [BATCH-291]", "body": "**[Gregory Kick](https://jira.spring.io/secure/ViewProfile.jspa?name=gk5885)** opened **[BATCH-291](https://jira.spring.io/browse/BATCH-291?redirect=false)** and commented\n\nBuilds are failing because spring-batch-integration references a snapshot version of activemq that is not available in any repository referenced by the project.\n\n5.0.0 is released and a version bump fixes the problem.\n\n\n---\n\n**Affects:** 1.0.0.m4\n\n**Attachments:**\n- [pom.patch](https://jira.spring.io/secure/attachment/13273/pom.patch) (_406 bytes_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/3272", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2008-01-15 01:33:25", "closed": "2008-09-23 06:38:43", "commits": {}, "ttf": 252.00027777777777, "commitsDetails": []}, {"title": "SqlJobDao, ScheduledJobIdentifier and Oracle JOB table : datatype mismatch for field SCHEDULE_DATE [BATCH-309]", "body": "**[Gaetan Pitteloud](https://jira.spring.io/secure/ViewProfile.jspa?name=gpitteloud)** opened **[BATCH-309](https://jira.spring.io/browse/BATCH-309?redirect=false)** and commented\n\nMaybe related to bug #192.\n\nSqlJobDao, configured with a DataSource pointing to an Oracle database, with the provided sql schema for table creation does not work properly, due to the datatype of SCHEDULE_DATE : passing a jobIdentifier with a java.util.Date containing non-0 milliseconds to dao.createJob() does create a record that cannot be requested using the dao.findJobs() with the same jobIdentifier.\n\nHere is a test case that shows this :\n\n    @Test\n    public void testSqlJobDao() throws Exception {\n        SqlJobDao dao = new SqlJobDao();\n        DriverManagerDataSource ds = new DriverManagerDataSource();\n        ds.setOracleDriver(\"oracle.jdbc.driver.OracleDriver\");\n        ds.setUrl(\"url\");\n        ds.setUsername(\"user\");\n        ds.setPassword(\"password\");\n        JdbcTemplate jdbc = new JdbcTemplate(ds);\n        dao.setJdbcTemplate(jdbc);\n        dao.setJobIncrementer(new OracleSequenceMaxValueIncrementer(ds, \"sequence_name\"));\n        ScheduledJobIdentifierFactory factory = new ScheduledJobIdentifierFactory();\n        JobIdentifier jobId = factory.getJobIdentifier(\"name\");\n    \n        JobInstance instance = dao.createJob(jobId);\n        try {\n            assertEquals(1, dao.findJobs(jobId).size());\n        } finally {\n            String sql = \"delete from job where id = ?\";\n            jdbc.update(sql, new Object[] { instance.getId() });\n        }\n    }\n\nThere are 2 affordable solutions to solve this :\n1. in SqlJobDao, both createJob() and findJob() (and maybe other methods) can specify the argTypes arguments to JdbcTemplate.query() and JdbcTemplate.update() and specify Types.DATE for scheduleDate argument\n2. in JOB table, specify the SCHEDULE_DATE as TIMESTAMP\n\nI personnally changed the JOB table schema, as it does not imply a java code change.\n\n\n---\n\n**Affects:** 1.0-m3\n", "url": "https://github.com/spring-projects/spring-batch/issues/3267", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2008-01-23 01:55:48", "closed": "2008-08-31 00:03:05", "commits": {}, "ttf": 220.00027777777777, "commitsDetails": []}, {"title": "Fix JMX demo now that JobIdentifier has been replaced with JobParameters [BATCH-312]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-312](https://jira.spring.io/browse/BATCH-312?redirect=false)** and commented\n\nFix JMX demo now that JobIdentifier has been replaced with JobParameters\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d8da44cc929dd2acfda6ac64b567c93ec6bfbc02\n", "url": "https://github.com/spring-projects/spring-batch/issues/3263", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2008-01-23 20:25:45", "closed": "2008-08-07 02:06:45", "commits": {}, "ttf": 196.00027777777777, "commitsDetails": []}, {"title": "SimpleJobRepository is not creating JobInstances correctly [BATCH-319]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-319](https://jira.spring.io/browse/BATCH-319?redirect=false)** and commented\n\nThe SimpleJobRepository is not creating JobInstance correctly, because it is not setting the job.  This should perhaps be moved into the JobDao by modifying the interface.\n\n\n---\n\n**Affects:** 1.0-m3\n", "url": "https://github.com/spring-projects/spring-batch/issues/3256", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-01-28 01:37:22", "closed": "2008-08-07 02:06:46", "commits": {}, "ttf": 192.00027777777777, "commitsDetails": []}, {"title": "Throw exception if attempt to create duplicate job instance occurs (based on job parameters) [BATCH-321]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-321](https://jira.spring.io/browse/BATCH-321?redirect=false)** and commented\n\nIf job is marked as non restartable but step is marked as allowRestartIfCompleted, a step can restart in a job that is otherwise not supposed to restart. This seems to be because a second instance of the same job can be created with the same job identifier/parameters. Throwing an exception at the repository/dao level should fix this. This means that if a non-restartable job fails, it will need to be reinvoked with new paramters (i.e. manually).\n\nSee forum thread: http://forum.springframework.org/showthread.php?p=162451\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/63496ee571519ea5c6c42c1baf52eba425575c0f\n", "url": "https://github.com/spring-projects/spring-batch/issues/3255", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-01-28 09:15:57", "closed": "2008-08-07 02:06:46", "commits": {}, "ttf": 191.00027777777777, "commitsDetails": []}, {"title": "Keyword  KEY is not allowed in the script mysql [BATCH-322]", "body": "**[GASP](https://jira.spring.io/secure/ViewProfile.jspa?name=pgasp)** opened **[BATCH-322](https://jira.spring.io/browse/BATCH-322?redirect=false)** and commented\n\nwhen you run spring batch with mysql, i have a sqlexception.\nafter analyse, i think that the keyword key in table BATCH_JOB_INSTANCE_PROPERTIES is not authorized in mysql. To fix this bug you must modify the name of this field, and modify the org.springframework.batch.execution.repository.dao.JdbcJobDao\n\nmy stack trace\n00:32:36,290  INFO main FootballJobFunctionalTests:210 - Loading context for locations: jobs/footballJob.xml\njava.sql.SQLException: Syntax error or access violation: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'VARCHAR(100) NOT NULL ,\nSTRING_VAL VARCHAR(250) ,\nDATE_VAL TIMESTAMP ,\nLONG' at line 4\nat org.gjt.mm.mysql.MysqlIO.sendCommand(MysqlIO.java:508)\nat org.gjt.mm.mysql.MysqlIO.sqlQueryDirect(MysqlIO.java:561)\nat org.gjt.mm.mysql.MysqlIO.sqlQuery(MysqlIO.java:646)\nat org.gjt.mm.mysql.Connection.execSQL(Connection.java:973)\nat org.gjt.mm.mysql.Connection.execSQL(Connection.java:897)\nat org.gjt.mm.mysql.Statement.execute(Statement.java:598)\nat org.gjt.mm.mysql.jdbc2.Statement.execute(Statement.java:116)\nat org.springframework.jdbc.core.JdbcTemplate$1ExecuteStatementCallback.doInStatement(JdbcTemplate.java:397)\nat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:371)\nat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:404)\nat test.jdbc.datasource.InitializingDataSourceFactoryBean$1.doInTransaction(InitializingDataSourceFactoryBean.java:119)\nat org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:128)\nat test.jdbc.datasource.InitializingDataSourceFactoryBean.doExecuteScript(InitializingDataSourceFactoryBean.java:103)\nat test.jdbc.datasource.InitializingDataSourceFactoryBean.createInstance(InitializingDataSourceFactoryBean.java:91)\nat org.springframework.beans.factory.config.AbstractFactoryBean.afterPropertiesSet(AbstractFactoryBean.java:120)\nat test.jdbc.datasource.InitializingDataSourceFactoryBean.afterPropertiesSet(InitializingDataSourceFactoryBean.java:76)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1390)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1359)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:540)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:485)\nat java.security.AccessController.doPrivileged(Native Method)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:455)\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251)\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:170)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:407)\nat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:735)\nat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:369)\nat org.springframework.context.support.ClassPathXmlApplicationContext.\\<init>(ClassPathXmlApplicationContext.java:122)\nat org.springframework.context.support.ClassPathXmlApplicationContext.\\<init>(ClassPathXmlApplicationContext.java:66)\nat org.springframework.batch.sample.AbstractBatchLauncherTests.createApplicationContext(AbstractBatchLauncherTests.java:53)\nat org.springframework.test.AbstractSingleSpringContextTests.loadContextLocations(AbstractSingleSpringContextTests.java:212)\nat org.springframework.test.AbstractSingleSpringContextTests.loadContext(AbstractSingleSpringContextTests.java:187)\nat org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:140)\nat org.springframework.test.AbstractSingleSpringContextTests.setUp(AbstractSingleSpringContextTests.java:100)\nat junit.framework.TestCase.runBare(TestCase.java:125)\nat org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:76)\nat junit.framework.TestResult$1.protect(TestResult.java:106)\nat junit.framework.TestResult.runProtected(TestResult.java:124)\nat junit.framework.TestResult.run(TestResult.java:109)\nat junit.framework.TestCase.run(TestCase.java:118)\nat junit.framework.TestSuite.runTest(TestSuite.java:208)\nat junit.framework.TestSuite.run(TestSuite.java:203)\nat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)\nat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\njava.sql.SQLException: Syntax error or access violation: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'VARCHAR(100) NOT NULL ,\nSTRING_VAL VARCHAR(250) ,\nDATE_VAL TIMESTAMP ,\nLONG' at line 4\nat org.gjt.mm.mysql.MysqlIO.sendCommand(MysqlIO.java:508)\nat org.gjt.mm.mysql.MysqlIO.sqlQueryDirect(MysqlIO.java:561)\nat org.gjt.mm.mysql.MysqlIO.sqlQuery(MysqlIO.java:646)\nat org.gjt.mm.mysql.Connection.execSQL(Connection.java:973)\nat org.gjt.mm.mysql.Connection.execSQL(Connection.java:897)\nat org.gjt.mm.mysql.Statement.execute(Statement.java:598)\nat org.gjt.mm.mysql.jdbc2.Statement.execute(Statement.java:116)\nat org.springframework.jdbc.core.JdbcTemplate$1ExecuteStatementCallback.doInStatement(JdbcTemplate.java:397)\nat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:371)\nat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:404)\nat test.jdbc.datasource.InitializingDataSourceFactoryBean$1.doInTransaction(InitializingDataSourceFactoryBean.java:119)\nat org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:128)\nat test.jdbc.datasource.InitializingDataSourceFactoryBean.doExecuteScript(InitializingDataSourceFactoryBean.java:103)\nat test.jdbc.datasource.InitializingDataSourceFactoryBean.createInstance(InitializingDataSourceFactoryBean.java:91)\nat org.springframework.beans.factory.config.AbstractFactoryBean.afterPropertiesSet(AbstractFactoryBean.java:120)\nat test.jdbc.datasource.InitializingDataSourceFactoryBean.afterPropertiesSet(InitializingDataSourceFactoryBean.java:76)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1390)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1359)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:540)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:485)\nat java.security.AccessController.doPrivileged(Native Method)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:455)\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251)\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:170)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:407)\nat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:735)\nat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:369)\nat org.springframework.context.support.ClassPathXmlApplicationContext.\\<init>(ClassPathXmlApplicationContext.java:122)\nat org.springframework.context.support.ClassPathXmlApplicationContext.\\<init>(ClassPathXmlApplicationContext.java:66)\nat org.springframework.batch.sample.AbstractBatchLauncherTests.createApplicationContext(AbstractBatchLauncherTests.java:53)\nat org.springframework.test.AbstractSingleSpringContextTests.loadContextLocations(AbstractSingleSpringContextTests.java:212)\nat org.springframework.test.AbstractSingleSpringContextTests.loadContext(AbstractSingleSpringContextTests.java:187)\nat org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:140)\nat org.springframework.test.AbstractSingleSpringContextTests.setUp(AbstractSingleSpringContextTests.java:100)\nat junit.framework.TestCase.runBare(TestCase.java:125)\nat org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:76)\nat junit.framework.TestResult$1.protect(TestResult.java:106)\nat junit.framework.TestResult.runProtected(TestResult.java:124)\nat junit.framework.TestResult.run(TestResult.java:109)\nat junit.framework.TestCase.run(TestCase.java:118)\nat junit.framework.TestSuite.runTest(TestSuite.java:208)\nat junit.framework.TestSuite.run(TestSuite.java:203)\nat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)\nat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\njava.sql.SQLException: Syntax error or access violation: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'VARCHAR(100) NOT NULL ,\nSTRING_VAL VARCHAR(250) ,\nDATE_VAL TIMESTAMP ,\nLONG' at line 4\nat org.gjt.mm.mysql.MysqlIO.sendCommand(MysqlIO.java:508)\nat org.gjt.mm.mysql.MysqlIO.sqlQueryDirect(MysqlIO.java:561)\nat org.gjt.mm.mysql.MysqlIO.sqlQuery(MysqlIO.java:646)\nat org.gjt.mm.mysql.Connection.execSQL(Connection.java:973)\nat org.gjt.mm.mysql.Connection.execSQL(Connection.java:897)\nat org.gjt.mm.mysql.Statement.execute(Statement.java:598)\nat org.gjt.mm.mysql.jdbc2.Statement.execute(Statement.java:116)\nat org.springframework.jdbc.core.JdbcTemplate$1ExecuteStatementCallback.doInStatement(JdbcTemplate.java:397)\nat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:371)\nat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:404)\nat test.jdbc.datasource.InitializingDataSourceFactoryBean$1.doInTransaction(InitializingDataSourceFactoryBean.java:119)\nat org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:128)\nat test.jdbc.datasource.InitializingDataSourceFactoryBean.doExecuteScript(InitializingDataSourceFactoryBean.java:103)\nat test.jdbc.datasource.InitializingDataSourceFactoryBean.createInstance(InitializingDataSourceFactoryBean.java:91)\nat org.springframework.beans.factory.config.AbstractFactoryBean.afterPropertiesSet(AbstractFactoryBean.java:120)\nat test.jdbc.datasource.InitializingDataSourceFactoryBean.afterPropertiesSet(InitializingDataSourceFactoryBean.java:76)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1390)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1359)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:540)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:485)\nat java.security.AccessController.doPrivileged(Native Method)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:455)\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251)\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:170)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:407)\nat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:735)\nat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:369)\nat org.springframework.context.support.ClassPathXmlApplicationContext.\\<init>(ClassPathXmlApplicationContext.java:122)\nat org.springframework.context.support.ClassPathXmlApplicationContext.\\<init>(ClassPathXmlApplicationContext.java:66)\nat org.springframework.batch.sample.AbstractBatchLauncherTests.createApplicationContext(AbstractBatchLauncherTests.java:53)\nat org.springframework.test.AbstractSingleSpringContextTests.loadContextLocations(AbstractSingleSpringContextTests.java:212)\nat org.springframework.test.AbstractSingleSpringContextTests.loadContext(AbstractSingleSpringContextTests.java:187)\nat org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:140)\nat org.springframework.test.AbstractSingleSpringContextTests.setUp(AbstractSingleSpringContextTests.java:100)\nat junit.framework.TestCase.runBare(TestCase.java:125)\nat org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:76)\nat junit.framework.TestResult$1.protect(TestResult.java:106)\nat junit.framework.TestResult.runProtected(TestResult.java:124)\nat junit.framework.TestResult.run(TestResult.java:109)\nat junit.framework.TestCase.run(TestCase.java:118)\nat junit.framework.TestSuite.runTest(TestSuite.java:208)\nat junit.framework.TestSuite.run(TestSuite.java:203)\nat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)\nat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\njava.sql.SQLException: Syntax error or access violation: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'VARCHAR(100) NOT NULL ,\nSTRING_VAL VARCHAR(250) ,\nDATE_VAL TIMESTAMP ,\nLONG' at line 4\nat org.gjt.mm.mysql.MysqlIO.sendCommand(MysqlIO.java:508)\nat org.gjt.mm.mysql.MysqlIO.sqlQueryDirect(MysqlIO.java:561)\nat org.gjt.mm.mysql.MysqlIO.sqlQuery(MysqlIO.java:646)\nat org.gjt.mm.mysql.Connection.execSQL(Connection.java:973)\nat org.gjt.mm.mysql.Connection.execSQL(Connection.java:897)\nat org.gjt.mm.mysql.Statement.execute(Statement.java:598)\nat org.gjt.mm.mysql.jdbc2.Statement.execute(Statement.java:116)\nat org.springframework.jdbc.core.JdbcTemplate$1ExecuteStatementCallback.doInStatement(JdbcTemplate.java:397)\nat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:371)\nat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:404)\nat test.jdbc.datasource.InitializingDataSourceFactoryBean$1.doInTransaction(InitializingDataSourceFactoryBean.java:119)\nat org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:128)\nat test.jdbc.datasource.InitializingDataSourceFactoryBean.doExecuteScript(InitializingDataSourceFactoryBean.java:103)\nat test.jdbc.datasource.InitializingDataSourceFactoryBean.createInstance(InitializingDataSourceFactoryBean.java:91)\nat org.springframework.beans.factory.config.AbstractFactoryBean.afterPropertiesSet(AbstractFactoryBean.java:120)\nat test.jdbc.datasource.InitializingDataSourceFactoryBean.afterPropertiesSet(InitializingDataSourceFactoryBean.java:76)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1390)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1359)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:540)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:485)\nat java.security.AccessController.doPrivileged(Native Method)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:455)\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251)\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:170)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:407)\nat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:735)\nat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:369)\nat org.springframework.context.support.ClassPathXmlApplicationContext.\\<init>(ClassPathXmlApplicationContext.java:122)\nat org.springframework.context.support.ClassPathXmlApplicationContext.\\<init>(ClassPathXmlApplicationContext.java:66)\nat org.springframework.batch.sample.AbstractBatchLauncherTests.createApplicationContext(AbstractBatchLauncherTests.java:53)\nat org.springframework.test.AbstractSingleSpringContextTests.loadContextLocations(AbstractSingleSpringContextTests.java:212)\nat org.springframework.test.AbstractSingleSpringContextTests.loadContext(AbstractSingleSpringContextTests.java:187)\nat org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:140)\nat org.springframework.test.AbstractSingleSpringContextTests.setUp(AbstractSingleSpringContextTests.java:100)\nat junit.framework.TestCase.runBare(TestCase.java:125)\nat org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:76)\nat junit.framework.TestResult$1.protect(TestResult.java:106)\nat junit.framework.TestResult.runProtected(TestResult.java:124)\nat junit.framework.TestResult.run(TestResult.java:109)\nat junit.framework.TestCase.run(TestCase.java:118)\nat junit.framework.TestSuite.runTest(TestSuite.java:208)\nat junit.framework.TestSuite.run(TestSuite.java:203)\nat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)\nat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n\n\n---\n\n**Affects:** 1.0.0.m4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/6319efdce6f1816e94a33c9c7b3bb3afba2b6d53\n", "url": "https://github.com/spring-projects/spring-batch/issues/3253", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-01-28 09:48:29", "closed": "2008-08-07 02:06:47", "commits": {}, "ttf": 191.00027777777777, "commitsDetails": []}, {"title": "ItemTransformerItemWriterr class name spelling [BATCH-323]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-323](https://jira.spring.io/browse/BATCH-323?redirect=false)** and commented\n\nItemTransformerItemWriterr got a double 'r' at the end during renaming\n\n\n---\n\n**Affects:** 1.0.0.m4\n", "url": "https://github.com/spring-projects/spring-batch/issues/3252", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-01-28 18:57:32", "closed": "2008-08-07 02:06:47", "commits": {}, "ttf": 191.00027777777777, "commitsDetails": []}, {"title": "Make \"VERSION\" meaningful? [BATCH-329]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-329](https://jira.spring.io/browse/BATCH-329?redirect=false)** and commented\n\nThe version field in Entity and the corresponding VERSION field in the database schema doesn't seem to have any meaning right now. Where are these values supposed to come from? I can't seem to track it down in the code.\n\nIt would make sense for job instance to have the version number of the job config as defined by the user, and likewise for step / step config\nI can't imagine what version would mean for the execution metadata... if it has the same meaning then it's redundant.\n\nOr am I misunderstanding what the version field is supposed to mean?\n\n\n---\n\n**Affects:** 1.0.0.m4\n", "url": "https://github.com/spring-projects/spring-batch/issues/3246", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-01-29 20:38:14", "closed": "2008-08-07 02:06:47", "commits": {}, "ttf": 190.00027777777777, "commitsDetails": []}, {"title": "Create TaskletStep implementation and retire ItemOrientedTasklet [BATCH-334]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-334](https://jira.spring.io/browse/BATCH-334?redirect=false)** and commented\n\nCreate TaskletStep implementation and retire ItemOrientedTasklet.  The SimpleStep then plays the role of ItemOrientedTasklet (injected ItemReader and ItemWriter).\n\n\n---\n\n**Affects:** 1.0-m3\n\n**Attachments:**\n- [mylyn-context.zip](https://jira.spring.io/secure/attachment/13629/mylyn-context.zip) (_3.57 kB_)\n\n**Issue Links:**\n- [BATCH-268](https://jira.spring.io/browse/BATCH-268) retry configuration for ItemOrientedTasklet\n (_**\"is depended on by\"**_)\n- [BATCH-268](https://jira.spring.io/browse/BATCH-268) retry configuration for ItemOrientedTasklet\n\n", "url": "https://github.com/spring-projects/spring-batch/issues/3241", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-02-03 03:15:57", "closed": "2008-08-07 02:06:48", "commits": {}, "ttf": 185.00027777777777, "commitsDetails": []}, {"title": "MultipleColumnJdbcKeyGenerator, various [BATCH-335]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-335](https://jira.spring.io/browse/BATCH-335?redirect=false)** and commented\n\nIn class: org.springframework.batch.io.driving.support.MultipleColumnJdbcKeyGenerator\n\n1) Method setRestartQuery is a duplicate method of setRestartSql\n2) The restart data key mapper (field keyMapper of type StreamContextRowMapper) should probably not be settable ...\n3) ... it should probably be renamed from keyMapper to something to the effect of restartKeyMapper...\n4) ... accordingly, a separate injectable keyMapper should be added (symmetrically with the SingleColumn version) --- it's useless for me to map my results to restart data, I need to map it to a business domain object\n\n\n\n---\n\n**Affects:** 1.0.0.m4\n", "url": "https://github.com/spring-projects/spring-batch/issues/3240", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-02-04 00:31:26", "closed": "2008-08-07 02:06:48", "commits": {}, "ttf": 185.00027777777777, "commitsDetails": []}, {"title": "close() is called twice on ItemReaders/ItemWriters [BATCH-343]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-343](https://jira.spring.io/browse/BATCH-343?redirect=false)** and commented\n\nItemReaders and ItemWriters implement both DisposableBean and ItemStream, which results in calling the close() method twice (e.g. in case of HibernateCursorItemReader the second calls result in error as hibernate session is already closed)\n\n\n---\n\n**Affects:** 1.0.0.m4\n", "url": "https://github.com/spring-projects/spring-batch/issues/3233", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-02-05 22:31:50", "closed": "2008-08-07 02:06:49", "commits": {}, "ttf": 183.00027777777777, "commitsDetails": []}, {"title": "A JobExecution does not need a start time until it actually starts [BATCH-344]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-344](https://jira.spring.io/browse/BATCH-344?redirect=false)** and commented\n\nA JobExecution does not need a start time until it actually starts.  Some logic in the Dao might need to change so that startTime can be null until the Job actually begins the execution.\n\n\n---\nNo further details from [BATCH-344](https://jira.spring.io/browse/BATCH-344?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/3232", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-02-07 05:10:47", "closed": "2008-08-07 02:06:49", "commits": {}, "ttf": 181.00027777777777, "commitsDetails": []}, {"title": "aop / template interceptor class names ambiguous [BATCH-347]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-347](https://jira.spring.io/browse/BATCH-347?redirect=false)** and commented\n\nRepeatInterceptor vs. RepeatOperationsInterceptor\nRetryInterceptor vs. RetryOperationsInterceptor\n\nEach of these pairs is badly named. Perhaps the aop ones might be renamed \"Advisor\" so as not to be as confusing?\n\ni.e.\n\nRepeatOperationsAdvisor\nRetryOperationsAdvisor\n\n\n---\n\n**Affects:** 1.0.0.m4\n", "url": "https://github.com/spring-projects/spring-batch/issues/3229", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-02-08 06:57:24", "closed": "2008-08-07 02:06:49", "commits": {}, "ttf": 180.00027777777777, "commitsDetails": []}, {"title": "Remove close method from AbstractItemReader [BATCH-348]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-348](https://jira.spring.io/browse/BATCH-348?redirect=false)** and commented\n\nAbstractItemReader is no longer needed - as AbstractItemProvider it had recover() and close() methods.\n\nrecovery is now handled by ItemRecoverer and close is handled by ItemStream -- recover was already removed with the rename, but the close method remains.\n\nSince the close method is a contract of ItemStream and not of ItemReader, it doesn't make sense for AbstractItemReader, which doesn't implement ItemStream, to have a default implementation. This leaves no functionality for this layer of abstraction, leading me to believe it should be removed entirely.\n\n\n---\n\n**Affects:** 1.0.0.m4\n", "url": "https://github.com/spring-projects/spring-batch/issues/3228", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-02-09 15:02:11", "closed": "2008-08-07 02:06:49", "commits": {}, "ttf": 179.00027777777777, "commitsDetails": []}, {"title": "ItemStreamAdapter isn't an Adapter [BATCH-349]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-349](https://jira.spring.io/browse/BATCH-349?redirect=false)** and commented\n\nPerhaps this should be called ItemStreamSupport? Thanks.\n\n\n---\n\n**Affects:** 1.0.0.m4\n\n**Attachments:**\n- [item-stream-adapter.jpg](https://jira.spring.io/secure/attachment/13668/item-stream-adapter.jpg) (_142.79 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/59f884b832776cbd22c1d4723b7efff48fe56c7c, https://github.com/spring-projects/spring-batch/commit/ad6511fb94674dc28a0efad78987a6bc1ed80286, https://github.com/spring-projects/spring-batch/commit/2d9a4fb570c42a3d85661e653b01ff998818ec6f\n", "url": "https://github.com/spring-projects/spring-batch/issues/3227", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-02-10 09:25:24", "closed": "2008-08-07 02:06:49", "commits": {}, "ttf": 178.00027777777777, "commitsDetails": []}, {"title": "Remove close() method from non ItemStreams [BATCH-350]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-350](https://jira.spring.io/browse/BATCH-350?redirect=false)** and commented\n\nThe following classes have a default close method implementation which does not belong and should be removed:\n\norg.springframework.batch.execution.launch.EmptyItemWriter\norg.springframework.batch.item.writer.ItemWriterAdapter\norg.springframework.batch.item.reader.ItemReaderAdapter\n\nHere's an interesting question -- how do you deal with something that needs to be both an ItemStream and a RepeatInterceptor?\n\nTake org.springframework.batch.io.support.HibernateAwareItemWriter for instance -- suppose you want this to be transaction managed as an ItemStream, how would you do that?\n\n\n---\n\n**Affects:** 1.0.0.m4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/7b26bc4f2e9ca14b08e7d813aca521fa8c14b992\n", "url": "https://github.com/spring-projects/spring-batch/issues/3226", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2008-02-10 09:44:22", "closed": "2008-08-07 02:06:50", "commits": {}, "ttf": 178.00027777777777, "commitsDetails": []}, {"title": "EmptyItemWriter is an orphan [BATCH-353]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-353](https://jira.spring.io/browse/BATCH-353?redirect=false)** and commented\n\nm4 was released with the class org.springframework.batch.execution.launch.EmptyItemWriter - the class does not seem to have a non-test-related function and is not referenced from anywhere within the code base\n\nSeems that it should be removed, or at least moved to the test area or samples package, depending on its intended purpose\n\n\n---\n\n**Affects:** 1.0.0.m4\n", "url": "https://github.com/spring-projects/spring-batch/issues/3224", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2008-02-10 16:16:29", "closed": "2008-06-18 18:28:59", "commits": {}, "ttf": 129.00027777777777, "commitsDetails": []}, {"title": "Restart is broken. [BATCH-357]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-357](https://jira.spring.io/browse/BATCH-357?redirect=false)** and commented\n\nI'm not sure how the restart job is working, but when looking at the simpleStepExecutor, the following code exists for restart:\n\n    \t\t\t\tresult = processChunk(step, contribution);\n    \n    \t\t\t\t\t// TODO: check that stepExecution can\n    \t\t\t\t\t// aggregate these contributions if they\n    \t\t\t\t\t// come in asynchronously.\n    \t\t\t\t\tExecutionAttributes statistics = stepContext.getExecutionAttributes();\n    \t\t\t\t\tcontribution.setExecutionAttributes(statistics);\n    \t\t\t\t\tcontribution.incrementCommitCount();\n    \n    \t\t\t\t\t// If the step operations are asynchronous then we need\n    \t\t\t\t\t// to synchronize changes to the step execution (at a\n    \t\t\t\t\t// minimum).\n    \t\t\t\t\tsynchronized (stepExecution) {\n    \n    \t\t\t\t\t\t// Apply the contribution to the step\n    \t\t\t\t\t\t// only if chunk was successful\n    \t\t\t\t\t\tstepExecution.apply(contribution);\n    \n    \t\t\t\t\t\tif (saveExecutionAttributes) {\n    \t\t\t\t\t\t\tstepExecution.setExecutionAttributes(stepContext.getExecutionAttributes());\n    \t\t\t\t\t\t}\n    \t\t\t\t\t\tjobRepository.saveOrUpdate(stepExecution);\n\nEssentially, only the execution attributes from the step context are being persisted.  However, the ItemReaders don't push to the context, they have ExecutionAttributes requested by the stream manager.  As you can see above, streamManager.getExecutionAttributes() is not called.\n\n\n---\n\n**Affects:** 1.0.0.m4\n", "url": "https://github.com/spring-projects/spring-batch/issues/3222", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2008-02-12 15:21:56", "closed": "2008-06-18 18:28:59", "commits": {}, "ttf": 127.00027777777778, "commitsDetails": []}, {"title": "Failed to create new StepExecution record in DB2 due to unsupported null value when calling JdbcTemplate.update [BATCH-360]", "body": "**[steven](https://jira.spring.io/secure/ViewProfile.jspa?name=xml2008)** opened **[BATCH-360](https://jira.spring.io/browse/BATCH-360?redirect=false)** and commented\n\nWhen the Job is launched, a StepExecution record is created with Spring JdbcTemplate.update method. Then\nthe following exception is thrown:\n\nCaused by: com.ibm.db2.jcc.b.SqlException: [jcc][10271][10295][3.50.152] Unrecognized JDBC type: 0. ERRORCODE=-4228, SQLSTATE=null\nat com.ibm.db2.jcc.b.wc.a(wc.java:55)\nat com.ibm.db2.jcc.b.wc.a(wc.java:102)\nat com.ibm.db2.jcc.b.cb.i(cb.java:1219)\nat com.ibm.db2.jcc.b.uk.b(uk.java:612)\nat com.ibm.db2.jcc.b.uk.setNull(uk.java:584)\nat org.springframework.jdbc.core.StatementCreatorUtil s.setParameterValueInternal(StatementCreatorUtils. java:173)\nat org.springframework.jdbc.core.StatementCreatorUtil s.setParameterValue(StatementCreatorUtils.java:88)\nat org.springframework.jdbc.core.ArgPreparedStatement Setter.setValues(ArgPreparedStatementSetter.java:5 1)\nat org.springframework.jdbc.core.JdbcTemplate$2.doInP reparedStatement(JdbcTemplate.java:771)\nat org.springframework.jdbc.core.JdbcTemplate.execute (JdbcTemplate.java:566)\n\nIt seems to be a problem with JdbcTemplate when working with db2 null value.\n\nThere is also a bug report in spring support forum:\n\nhttp://forum.springframework.org/showthread.php?p=165078\n\n\n---\n\n**Affects:** 1.0.0.m4\n", "url": "https://github.com/spring-projects/spring-batch/issues/3219", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-02-13 17:16:55", "closed": "2008-08-07 02:06:50", "commits": {}, "ttf": 175.00027777777777, "commitsDetails": []}, {"title": "Rename ExecutionAttributes to ExecutionContext [BATCH-362]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-362](https://jira.spring.io/browse/BATCH-362?redirect=false)** and commented\n\nRename ExecutionAttributes to ExecutionContext.  Arjen in particular thought that \"context\" was much more descriptive (he even suggested \"state\", but we all voted him down on that).\n\n\n---\n\n**Affects:** 1.0.0.m4\n", "url": "https://github.com/spring-projects/spring-batch/issues/3217", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-02-14 02:21:19", "closed": "2008-08-07 02:06:50", "commits": {}, "ttf": 174.00027777777777, "commitsDetails": []}, {"title": "StringBuilder (Java5 only) used in JdbcJobInstanceDao [BATCH-363]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-363](https://jira.spring.io/browse/BATCH-363?redirect=false)** and commented\n\nStringBuilder is OK, and is used in other places.  We compile with Java 5 (with compatibility set to 1.4).\n\n\n---\n\n**Affects:** 1.0.0.m5\n", "url": "https://github.com/spring-projects/spring-batch/issues/3216", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2008-02-14 02:40:10", "closed": "2008-06-18 18:28:58", "commits": {}, "ttf": 125.00027777777778, "commitsDetails": []}, {"title": "StepScope responsibilities can be assumed by Step (not ApplicationContext) [BATCH-364]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-364](https://jira.spring.io/browse/BATCH-364?redirect=false)** and commented\n\nStepScope responsibilities can be assumed by Step (not ApplicationContext).  The aim (to clarify issues raised below), is to make scope=\"step\" strongly advised but not mandatory for item readers and writers in simple steps.  Application programmers are very welcome to use scope=\"step\" where they need access to the context through StepContextAware, since this is consistent with other custom scope usages.  They are also advised to use scope=\"step\" wherever there is a possibility of more than one thread executing the same step - as in the case of a JMX launcher (see samples) or a web service that runs jobs.  Step scope is not necessary for single JVM, single Job processes, but it would be recommended to use it anyway, in case the job is ever run in a mult-threaded container.\n\n\n---\n\n**Affects:** 1.0.0.m4\n\n**Issue Links:**\n- [BATCH-366](https://jira.spring.io/browse/BATCH-366) Do we still need StepInstance?\n (_**\"is depended on by\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/3215", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-02-14 02:48:01", "closed": "2008-08-07 02:06:50", "commits": {}, "ttf": 174.00027777777777, "commitsDetails": []}, {"title": "Do we still need StepInstance? [BATCH-366]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-366](https://jira.spring.io/browse/BATCH-366?redirect=false)** and commented\n\nStepInstance has lost weight over time to the point where I think it's mere existence needs to be questioned.\n\nCurrently the only information StepInstance essentially provides is the step name. The execution count and last execution can be seen as convenience values that can be retrieved by different means - classes asking the step instance for these values (SimpleJob and StepExecutor/ChunkedStep) already have reference to the repository.\n\nTechnically it seems easy to add 'stepName' property to StepExecution and live with the pair Step+StepExecution (with already existing link StepExecution -> JobExecution -> JobInstance) rather than triple Step+StepInstance+StepExecution.\n\nAlternatively it might be StepInstance is missing properties that would logically belong to it and justify its existence, but I can't think of any candidates.\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Issue Links:**\n- [BATCH-364](https://jira.spring.io/browse/BATCH-364) StepScope responsibilities can be assumed by Step (not ApplicationContext)\n (_**\"depends on\"**_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/4a38a4a218d41500f0fb2a937befa6ab1cb15340, https://github.com/spring-projects/spring-batch/commit/96c48bcbc5ed85659fe9946474863ad6c25d6da5\n", "url": "https://github.com/spring-projects/spring-batch/issues/3213", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-02-14 19:57:43", "closed": "2008-08-07 02:06:50", "commits": {}, "ttf": 174.00027777777777, "commitsDetails": []}, {"title": "When the samples run, all the execution attributes are of type STRING - this must be wrong. [BATCH-367]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-367](https://jira.spring.io/browse/BATCH-367?redirect=false)** and commented\n\nWhen the samples run, all the execution attributes are of type STRING - this must be wrong.  Surely most of them are longs?\n\n\n---\n\n**Affects:** 1.0.0.m4\n", "url": "https://github.com/spring-projects/spring-batch/issues/3212", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-02-14 23:34:16", "closed": "2008-08-07 02:06:51", "commits": {}, "ttf": 174.00027777777777, "commitsDetails": []}, {"title": "StepExecution attributes can overflow and cause spurious OptimisticLockingException [BATCH-368]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-368](https://jira.spring.io/browse/BATCH-368?redirect=false)** and commented\n\nStepExecution attributes can overflow in the attrs table and in the step execution table (the \"compressed\" version).  I hacked the DDL to extend the columns, but we have to catch the exceptions and deal with them better - the job cannot be re-run if the meta-data are corrupt (it should get status UNKNOWN).\n\n\n---\n\n**Affects:** 1.0.0.m4\n", "url": "https://github.com/spring-projects/spring-batch/issues/3211", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-02-15 01:40:30", "closed": "2008-08-07 02:06:51", "commits": {}, "ttf": 174.00027777777777, "commitsDetails": []}, {"title": "Key names from ItemStream implementations should not include CGLIB crap [BATCH-369]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-369](https://jira.spring.io/browse/BATCH-369?redirect=false)** and commented\n\nKey names from ItemStream implementations should not include CGLIB crap.  If any of them use ClassUtils or Class.toString() they should check first for instanceof Advised.\n\n\n---\n\n**Affects:** 1.0.0.m4\n", "url": "https://github.com/spring-projects/spring-batch/issues/3210", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-02-15 01:44:26", "closed": "2008-08-07 02:06:51", "commits": {}, "ttf": 174.00027777777777, "commitsDetails": []}, {"title": "TaskletStep based step configurations don't support step scoped tasklet bean definition. [BATCH-370]", "body": "**[steven](https://jira.spring.io/secure/ViewProfile.jspa?name=xml2008)** opened **[BATCH-370](https://jira.spring.io/browse/BATCH-370?redirect=false)** and commented\n\nI have a job definition with a step definition such as:\n\n\\<bean id=\"step2\" parent=\"taskletStep\">\n\t\t\t\t\t\\<property name=\"tasklet\">\n\t\t\t\t\t\t\\<bean class=\"PerformCommissionRunTasklet\" scope=\"step\">\n\t\t\t\t\t\t\t\\<aop:scoped-proxy/>\n\t\t\t\t\t\t\\</bean>\n\t\t\t\t\t\\</property>\t\t\n\t\t\t\t\\</bean>\n\nbut the following exception is thrown:\n\nCaused by: org.springframework.batch.io.exception.BatchCriticalException: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.PerformCommissionRunTasklet#1b814a5': Scope 'step' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No context holder available for step scope\nat org.springframework.batch.execution.step.tasklet.TaskletStep.execute(TaskletStep.java:134)\nat org.springframework.batch.execution.job.simple.SimpleJob.execute(SimpleJob.java:89)\nat org.springframework.batch.execution.launch.SimpleJobLauncher$1.run(SimpleJobLauncher.java:85)\nat org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)\nat org.springframework.batch.execution.launch.SimpleJobLauncher.run(SimpleJobLauncher.java:80)\nat BatchManagerImpl.launchComMonthEndJob(BatchManagerImpl.java:352)\n... 168 more\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.com.siebre.compensation.batch.PerformCommissionRunTasklet#1b814a5': Scope 'step' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No context holder available for step scope\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:302)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160)\nat org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:33)\nat org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.getTarget(Cglib2AopProxy.java:660)\nat org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:610)\nat com.siebre.compensation.batch.PerformCommissionRunTasklet$$EnhancerByCGLIB$$39336c95.execute(\\<generated>)\nat org.springframework.batch.execution.step.tasklet.TaskletStep$1.doInIteration(TaskletStep.java:124)\nat org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:324)\nat org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:201)\nat org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:131)\nat org.springframework.batch.execution.step.tasklet.TaskletStep.execute(TaskletStep.java:122)\n... 173 more\nCaused by: java.lang.IllegalStateException: No context holder available for step scope\nat org.springframework.batch.execution.scope.StepScope.getContext(StepScope.java:127)\nat org.springframework.batch.execution.scope.StepScope.get(StepScope.java:68)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:283)\n... 183 more\n\nThe problem is due to the asymmetry between the implementation of TaskletStep.execute() and AbstractStep.execute().\nIn AbstractStep.execute(), the execution logic is delegated to class SimpleStepExecutor,  which will register step context when started.\n\npublic void execute(final StepExecution stepExecution) throws BatchCriticalException, JobInterruptedException {\n\n    \tfinal StepInstance stepInstance = stepExecution.getStep();\n    \tAssert.notNull(stepInstance);\n    \tboolean isRestart = stepInstance.getStepExecutionCount() > 0 ? true : false;\n    \n    \tExitStatus status = ExitStatus.FAILED;\n    \n    \ttry {\n    \n    \t\tstepExecution.setStartTime(new Date(System.currentTimeMillis()));\n    \t\t// We need to save the step execution right away, before we start\n    \t\t// using its ID. It would be better to make the creation atomic in\n    \t\t// the caller.\n    \t\tupdateStatus(stepExecution, BatchStatus.STARTED);\n    \n    \t\tStepContext parentStepContext = StepSynchronizationManager.getContext();\n    \t\tfinal StepContext stepContext = new SimpleStepContext(stepExecution, parentStepContext, streamManager);\n    \t\tStepSynchronizationManager.register(stepContext);\n\n....\n\nbut in TaskletStep.execute(),  there is no stepContext being registered.\n\npublic void execute(StepExecution stepExecution) throws JobInterruptedException, BatchCriticalException {\nstepExecution.setStartTime(new Date());\nupdateStatus(stepExecution, BatchStatus.STARTED);\n\n    \tExitStatus exitStatus = ExitStatus.FAILED;\n    \ttry {\n    \n    \t\t// We are using the RepeatTemplate as a vehicle for the listener\n    \t\t// so it can be set up cheaply here with standard properties.\n    \t\tRepeatTemplate template = new RepeatTemplate();\n    \t\ttemplate.setCompletionPolicy(new SimpleCompletionPolicy(1));\n    \n    \t\ttemplate.setListeners(listeners);\n    \t\texitStatus =template.iterate(new RepeatCallback() {\n    \t\t\tpublic ExitStatus doInIteration(RepeatContext context) throws Exception {\n    \t\t\t\treturn tasklet.execute();\n    \t\t\t}\t\n    \t\t});\n    \t\t\n    \t\tupdateStatus(stepExecution, BatchStatus.COMPLETED);\n    \t\t\n    \t}\n    \tcatch (Exception e) {\n    \t\tlogger.error(\"Encountered an error running the tasklet\");\n    \t\tupdateStatus(stepExecution, BatchStatus.FAILED);\n    \t\tthrow new BatchCriticalException(e);\n    \t}\n    \tfinally {\n    \t\tstepExecution.setExitStatus(exitStatus);\n    \t\tstepExecution.setEndTime(new Date());\n    \t\tjobRepository.saveOrUpdate(stepExecution);\n    \t}\n    }\n\n...\n\n\n\n---\n\n**Affects:** 1.0.0.m5\n", "url": "https://github.com/spring-projects/spring-batch/issues/3209", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2008-02-15 16:16:01", "closed": "2008-06-18 18:28:58", "commits": {}, "ttf": 124.00027777777778, "commitsDetails": []}, {"title": "FlatFileItemWriter no longer uses LineAggregator [BATCH-371]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-371](https://jira.spring.io/browse/BATCH-371?redirect=false)** and commented\n\nIt seems that the FlatFileItemWriter no longer takes a LineAggregator to determine how lines should be written. This seems to be an oversight?\n\nIt could be argued that the ItemTransformer that's injectable could be used instead, except that it only gets invoked when the item type is not String. Additionally, it is asymmetrical with the ItemReader's LineTokenizer. Also, there is no packaged ItemTransformer equivalent to the LineAggregators.\n\nAnyway, as of the moment, it seems the LineAggregators are not used or injectable anywhere, so they should either be made injectable and invoked appropriately again, OR equivalent ItemTransformers should be provided and the LineTokenizers should also be replaced, and the transformer should be invoked even if the item is a String...\n\n\n---\n\n**Affects:** 1.0.0.m4\n\n**Attachments:**\n- [DelimitedLineAggregator.patch](https://jira.spring.io/secure/attachment/13664/DelimitedLineAggregator.patch) (_1.29 kB_)\n- [FixedLengthLineAggregator.patch](https://jira.spring.io/secure/attachment/13665/FixedLengthLineAggregator.patch) (_2.35 kB_)\n- [FlatFileItemWriter.patch](https://jira.spring.io/secure/attachment/13667/FlatFileItemWriter.patch) (_4.00 kB_)\n- [LineAggregator.patch](https://jira.spring.io/secure/attachment/13666/LineAggregator.patch) (_943 bytes_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/3208", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-02-19 04:44:17", "closed": "2008-08-07 02:06:51", "commits": {}, "ttf": 169.00027777777777, "commitsDetails": []}, {"title": "job/step setup should be separated from execution [BATCH-372]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-372](https://jira.spring.io/browse/BATCH-372?redirect=false)** and commented\n\nCurrently setup of the job/step execution (figuring out whether it should be run and whether it is being restarted) is part of the execute() method rather than being dealt with separately. This has some bad consequences - even when we create a fresh job instance, both job and step investigate their execution counts and last executions. It doesn't make sense as it is clear execution count must be zero and there is no last execution. Assuming a job instance is usually executed successfully and restart is an exceptional scenario makes the current state look even more awkward.\n\nI imagine the basic execution flow should be something like:\n\nif (findJobInstance(job, params) == null) {\ncreateJobInstance()\nsetupVanillaExecution()\n}\nelse {\nrestoreFromLastExecution()\n}\nexecute() //no dealing with past here anymore, just straightforward execution\n\nrather than current:\n\n1.findOrCreateJobInstance(..)\n2.execute(..) // checking what scenario I'm in all the time\n\nThe proposed approach clearly points finger at the DDD-hostile findOrCreateJobInstance(..) method which should be broken into two, but also moves towards removing lastExecution and executionCount properties from JobInstance as they become relevant only in the narrow context of restoreFromLastExecution().\n\n\n---\n\n**Issue Links:**\n- [BATCH-375](https://jira.spring.io/browse/BATCH-375) separate optional features from core framework\n\n- [BATCH-375](https://jira.spring.io/browse/BATCH-375) separate optional features from core framework\n\n", "url": "https://github.com/spring-projects/spring-batch/issues/3207", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2008-02-19 18:43:44", "closed": "2008-02-26 05:08:32", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "jobExecution.getJobInstance().getJob() return null when re-run [BATCH-373]", "body": "**[Adrian Shum](https://jira.spring.io/secure/ViewProfile.jspa?name=adrianshum)** opened **[BATCH-373](https://jira.spring.io/browse/BATCH-373?redirect=false)** and commented\n\nIt is found that, if a job is re-run (by passing same JobParameters), the JobExecution created is referring to a JobInstance which refers to null for its Job.\ni.e.\nJobExecution x = jobLauncher.run(job, jobParam);\nx.getJobInstance().getJob();  // returns null\n\nIt seems that for re-run job, the Job passed in the JobLauncher is not set to the JobInstance restored from DB.\n\nAs I am trying to intercept the Job's execute() by AOP, the only method I can get know of which job being executed is by jobExecution.getJobInstance().getJob()\n\n\n\n---\n\n**Affects:** 1.0.0.m4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/34bd1fc44629bb46eebf5bcebd463b8f7694683c\n", "url": "https://github.com/spring-projects/spring-batch/issues/3206", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-02-19 20:32:07", "closed": "2008-08-07 02:06:51", "commits": {}, "ttf": 169.00027777777777, "commitsDetails": []}, {"title": "separate optional features from core framework  [BATCH-375]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-375](https://jira.spring.io/browse/BATCH-375?redirect=false)** and commented\n\nI believe we need to carefully separate framework core functionality (transactional item processing with restart support) from other provided features - examples being start limit support and isAllowStartIfComplete property. I see these as nice-to-have features not essential to a batch framework and our architecture should clearly reflect that - currently they are penetrated in the very heart of the domain model and execution logic, which I see as a design flaw. They should instead be layered on top of the core (e.g. subclasses providing extra properties).\n\nI remember Lucas arguing in the past that start limit support is a scheduling concern, strictly speaking out of framework's focus that would better be removed. I largely agree with that - however including few useful addons can indeed have a positive overall effect as it can serve as excellent example how to extend framework core capabilities cleanly - assuming we manage to achieve clear core/add-on separation in the first place.\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Issue Links:**\n- [BATCH-372](https://jira.spring.io/browse/BATCH-372) job/step setup should be separated from execution\n\n- [BATCH-372](https://jira.spring.io/browse/BATCH-372) job/step setup should be separated from execution\n\n", "url": "https://github.com/spring-projects/spring-batch/issues/3204", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2008-02-20 18:49:35", "closed": "2008-06-18 18:28:57", "commits": {}, "ttf": 118.00027777777778, "commitsDetails": []}, {"title": "Problem with DelimitedLineTokenizer and empty quoted value [BATCH-376]", "body": "**[Tom Rauk](https://jira.spring.io/secure/ViewProfile.jspa?name=trauk)** opened **[BATCH-376](https://jira.spring.io/browse/BATCH-376?redirect=false)** and commented\n\nThe DelimitedLineTokenizer throws a StringIndexOutOfBoundsException when a line contains an empty quoted field.\n\nexample line: \"a\", \"b\", \"\", \"d\"\n\nI will attach a patch with test for this scenario.\n\n\n---\n\n**Affects:** 1.0.0.m4\n\n**Attachments:**\n- [quotes-and-empty-value.patch](https://jira.spring.io/secure/attachment/13673/quotes-and-empty-value.patch) (_1.64 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/455bfe2fab8b35f45e8dfef19ea21c238b234aea\n", "url": "https://github.com/spring-projects/spring-batch/issues/3203", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-02-21 03:46:20", "closed": "2008-09-23 11:11:14", "commits": {}, "ttf": 215.00027777777777, "commitsDetails": []}, {"title": "Step Scope problem in TaskletStep [BATCH-380]", "body": "**[Adrian Shum](https://jira.spring.io/secure/ViewProfile.jspa?name=adrianshum)** opened **[BATCH-380](https://jira.spring.io/browse/BATCH-380?redirect=false)** and commented\n\nsnippet of app context config:\n\n\\<!-- stuffs that copied from simple-container-definition.xml -->\n\n    <bean id=\"job\" parent=\"simpleJob\">\n        <property name=\"steps\">\n            <list>\n                <bean id=\"step1\" parent=\"taskletStep\">\n                    <property name=\"tasklet\">\n                        <bean id=\"tradeTasklet\"\n                                class=\"foo.sample.TradeMatchTasklet\"\n                                scope=\"step\">\n                            <aop:scoped-proxy />\n                            <property name=\"status\" value=\"9\"/>\n                        </bean>\n                    </property>\n                </bean>\n            </list>\n        </property>\n    </bean>\n\nMy Unit test:\n`@RunWith`(SpringJUnit4ClassRunner.class)\n`@TransactionConfiguration`\n`@Transactional`\n`@ContextConfiguration`(locations={\"/mysample/sample1-job.xml\"})\npublic class TradeMatchBatchTests {\n\n    @Resource\n    JobLauncher jobLauncher;\n    \n    @Resource\n    private Job job;\n    \n    @Resource\n    MapJobRegistry jobConfigurationRegistry;\n    \n    @Test\n    public void testLaunchJob() throws Exception {\n        Map<String, String> strParam = new HashMap<String, String>();\n        strParam.put(\"KEY\", \"1\");\n        JobParameters jobParam = new JobParameters(strParam, new HashMap(), new HashMap());\n    \n        JobExecution x = jobLauncher.run(job, jobParam);\n    }\n\n}\n\nOnce it is run, following exception is thrown:\n\n2008-02-21 19:26:01,645 INFO [org.springframework.batch.execution.launch.SimpleJobLauncher] - <Job: [SimpleJob: [name=job]] failed with the following parameters: [{KEY=1}{}{}]>\norg.springframework.batch.io.exception.BatchCriticalException: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.tradeTasklet': Scope 'step' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No context holder available for step scope\nat org.springframework.batch.execution.step.tasklet.TaskletStep.execute(TaskletStep.java:134)\nat org.springframework.batch.execution.job.simple.SimpleJob.execute(SimpleJob.java:88)\nat org.springframework.batch.execution.launch.SimpleJobLauncher$1.run(SimpleJobLauncher.java:85)\nat org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)\nat org.springframework.batch.execution.launch.SimpleJobLauncher.run(SimpleJobLauncher.java:80)\nat foo.sample.TradeMatchBatchTests.testLaunchJob(TradeMatchBatchTests.java:117)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:585)\nat org.springframework.test.context.junit4.SpringTestMethod.invoke(SpringTestMethod.java:198)\nat org.springframework.test.context.junit4.SpringMethodRoadie.runTestMethod(SpringMethodRoadie.java:274)\nat org.springframework.test.context.junit4.SpringMethodRoadie$2.run(SpringMethodRoadie.java:207)\nat org.springframework.test.context.junit4.SpringMethodRoadie.runBeforesThenTestThenAfters(SpringMethodRoadie.java:254)\nat org.springframework.test.context.junit4.SpringMethodRoadie.runWithRepetitions(SpringMethodRoadie.java:234)\nat org.springframework.test.context.junit4.SpringMethodRoadie.runTest(SpringMethodRoadie.java:204)\nat org.springframework.test.context.junit4.SpringMethodRoadie.run(SpringMethodRoadie.java:146)\nat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.invokeTestMethod(SpringJUnit4ClassRunner.java:151)\nat org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)\nat org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)\nat org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)\nat org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)\nat org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)\nat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:38)\nat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.tradeTasklet': Scope 'step' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No context holder available for step scope\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:299)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:170)\nat org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:33)\nat org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.getTarget(Cglib2AopProxy.java:662)\nat org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:612)\nat foo.sample.TradeMatchTasklet$$EnhancerByCGLIB$$f5e84820.execute(\\<generated>)\nat org.springframework.batch.execution.step.tasklet.TaskletStep$1.doInIteration(TaskletStep.java:124)\nat org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:324)\nat org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:201)\nat org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:131)\nat org.springframework.batch.execution.step.tasklet.TaskletStep.execute(TaskletStep.java:122)\n... 28 more\nCaused by: java.lang.IllegalStateException: No context holder available for step scope\nat org.springframework.batch.execution.scope.StepScope.getContext(StepScope.java:127)\nat org.springframework.batch.execution.scope.StepScope.get(StepScope.java:68)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:285)\n... 38 more\n\n\n---\n\n**Affects:** 1.0.0.m4\n\n**Attachments:**\n- [TaskletStep.java](https://jira.spring.io/secure/attachment/13679/TaskletStep.java) (_5.69 kB_)\n- [TaskletStep.patch](https://jira.spring.io/secure/attachment/13692/TaskletStep.patch) (_2.14 kB_)\n- [temp.zip](https://jira.spring.io/secure/attachment/13675/temp.zip) (_3.09 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/3200", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-02-21 19:51:06", "closed": "2008-08-07 02:06:51", "commits": {}, "ttf": 167.00027777777777, "commitsDetails": []}, {"title": "mark() works only for subclasses of AbstractTransactionalIoSource [BATCH-342]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-342](https://jira.spring.io/browse/BATCH-342?redirect=false)** and commented\n\nThe mark() method is not being called from execution layer, so it actually works only for transactional classes that call their own mark() on commit.\n\nI believe transactional responsibilities are being moved away from readers/writers so the execution layer should be responsible for calling mark()?\n\nCurrenlty mark() really works only for subclasses of AbstractTransactionalIoSource - others just have it declared with no effect, which is confusing and inconsistent.\n\n\n---\n\n**Affects:** 1.0.0.m4\n\n**Issue Links:**\n- [BATCH-215](https://jira.spring.io/browse/BATCH-215) ItemStreams should use \"lastMarkedPosition\" as restart data\n (_**\"is depended on by\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/3198", "user": "spring-issuemaster", "labels": ["in: core", "in: infrastructure", "type: bug"], "created": "2008-02-05 20:38:12", "closed": "2008-08-07 02:06:49", "commits": {}, "ttf": 183.00027777777777, "commitsDetails": []}, {"title": "Remove Java 5 features from samples [BATCH-383]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-383](https://jira.spring.io/browse/BATCH-383?redirect=false)** and commented\n\nRemove Java 5 features from samples: it is OK for the main jars to require Java 5 for compilation, as long as they can be shipped with 1.4 compatibility.  But the samples probably need to be 1.4 compatible at the source level (e.g. no StringBuilder, Integer.valueOf, etc.).  Once it is fixed an additional build plan in Bamboo would help\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/9f7cc87c0d7fee1d1f4ea5e138fc5242873ce36c, https://github.com/spring-projects/spring-batch/commit/ac27e9194898df192f74e41233248b9e79a5c6bd\n", "url": "https://github.com/spring-projects/spring-batch/issues/3196", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2008-02-24 21:46:45", "closed": "2008-08-07 02:06:52", "commits": {}, "ttf": 164.00027777777777, "commitsDetails": []}, {"title": "consolidate map dao implementations [BATCH-384]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-384](https://jira.spring.io/browse/BATCH-384?redirect=false)** and commented\n\nRepository refactorings affected dao interfaces significantly - while jdbc implementations were simplified, the map implementations were just quick-fixed. These need to be consolidated to reflect the changed requirements (maybe rewritten).\n\n\n---\n\n**Issue Links:**\n- [BATCH-340](https://jira.spring.io/browse/BATCH-340) Refactor JobRepository for greater clarity and consistency.\n\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/dd7c006a041b77e794ca1cca02c53b77a95daa3c, https://github.com/spring-projects/spring-batch/commit/a25680d7f498a0714c4a625f2082b3e0ff903738, https://github.com/spring-projects/spring-batch/commit/84073c0b76c9ca254f6efbfa2a7de50518628cae, https://github.com/spring-projects/spring-batch/commit/8c68677dcbedefe33bedbda38c8c1555a9502d7d\n", "url": "https://github.com/spring-projects/spring-batch/issues/3195", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-02-25 00:06:48", "closed": "2008-08-07 02:06:52", "commits": {}, "ttf": 164.00027777777777, "commitsDetails": []}, {"title": "Merge user attributes in StepContext with ExecutionContext [BATCH-385]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-385](https://jira.spring.io/browse/BATCH-385?redirect=false)** and commented\n\nDevelopers find StepContext easy to locate and use, and mistakenly assume that its attributes ight be persisted (like the ExecutionContext).  It's an easy mistake to make, so maybe user defined attributes in StepContext should use an ExecutionContext, or maybe a separate API in StepContext could provide the same feature.\n\n\n---\n\n**Affects:** 1.0.0.m4\n", "url": "https://github.com/spring-projects/spring-batch/issues/3194", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-02-25 18:13:35", "closed": "2008-08-07 02:06:52", "commits": {}, "ttf": 163.00027777777777, "commitsDetails": []}, {"title": "Hibernate failure job relies on funky flush logic [BATCH-386]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-386](https://jira.spring.io/browse/BATCH-386?redirect=false)** and commented\n\nHibernate failure job relies on funky flush logic.  This should be analysed at least to see if the ItemWriter.flush() contract really makes sense.  The problem is the HibernateAwareItemWriter needs access to the processed items during a flush(), but they are stored in RepeatContext which isn't available in the call to ItemWriter.flush().\n\n\n---\n\n**Affects:** 1.0.0.m5\n", "url": "https://github.com/spring-projects/spring-batch/issues/3193", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-02-25 22:05:55", "closed": "2008-08-07 02:06:52", "commits": {}, "ttf": 163.00027777777777, "commitsDetails": []}, {"title": "ItemOrientedStep ignores step and chunk operations properties [BATCH-387]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-387](https://jira.spring.io/browse/BATCH-387?redirect=false)** and commented\n\nItemOrientedStep ignores step and chunk operations properties.  E.g. if commit interval or exception handler are set in one of the repeat operations they are ignored and overwritten.\n\n\n---\n\n**Affects:** 1.0.0.m4\n", "url": "https://github.com/spring-projects/spring-batch/issues/3191", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-02-25 23:59:21", "closed": "2008-08-07 02:06:52", "commits": {}, "ttf": 163.00027777777777, "commitsDetails": []}, {"title": "Key sample jobs are very sensitive to configuration [BATCH-388]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-388](https://jira.spring.io/browse/BATCH-388?redirect=false)** and commented\n\nKey sample jobs are very sensitive to configuration\n\n* Hibernate failure\n* restart\n* rollback\n* retry\n\nUsers will try similar approaches and use slightly different configuration - options like exception handler, skip limit policy, retry policy, chunk operations all could be set in a way that would break one or more of the samples without a very informative error message.  Need to go through a few combinations and see what the error is, and try and make it more obvious what has gone wrong.\n\n\n---\n\n**Affects:** 1.0.0.m5\n", "url": "https://github.com/spring-projects/spring-batch/issues/3188", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2008-02-26 01:26:17", "closed": "2008-08-07 02:06:52", "commits": {}, "ttf": 163.00027777777777, "commitsDetails": []}, {"title": "parallel job should allow configuration of lob handler. [BATCH-391]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-391](https://jira.spring.io/browse/BATCH-391?redirect=false)** and commented\n\nparallel job should allow configuration of lob handler.\n\n\n---\n\n**Affects:** 1.0.0.m5\n", "url": "https://github.com/spring-projects/spring-batch/issues/3186", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2008-02-26 07:13:31", "closed": "2008-08-07 02:06:52", "commits": {}, "ttf": 162.00027777777777, "commitsDetails": []}, {"title": "DefaultFieldSet should not always trim whitespace from the value returned [BATCH-393]", "body": "**[Anthony Falabella](https://jira.spring.io/secure/ViewProfile.jspa?name=tonyjoe)** opened **[BATCH-393](https://jira.spring.io/browse/BATCH-393?redirect=false)** and commented\n\nDefaultFieldSet should not always trim whitespace from the value returned.  (I think it's valid for trimming to occur on the \"name\" of a field.)  It's a valid use-case for people to want the raw data that was read with whitespace included.  (It also can slightly slow performance during the reading of a file when trimming is done).\n\nPlease allow users to decide which field(s) they would like trimming to occur on.\n\n\n---\n\n**Affects:** 1.0.0.m4\n\n**Issue Links:**\n- [BATCH-2404](https://jira.spring.io/browse/BATCH-2404) Optionally allow white spaces in lines to be tokenized\n\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/c42a6ea147d33842343c1d79b59201ea7cca005f\n", "url": "https://github.com/spring-projects/spring-batch/issues/3184", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-02-27 01:23:09", "closed": "2018-12-06 17:05:55", "commits": {}, "ttf": 3935.0002777777777, "commitsDetails": []}, {"title": "If FieldSet is an interface it needs a factory, otherwise existing clients are tied to specific implementations [BATCH-394]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-394](https://jira.spring.io/browse/BATCH-394?redirect=false)** and commented\n\nIf FieldSet is an interface it needs a factory, otherwise existing clients are tied to specific implementations.  See [BATCH-289](https://jira.spring.io/browse/BATCH-289) for initial comments.\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Issue Links:**\n- [BATCH-289](https://jira.spring.io/browse/BATCH-289) FieldSet should be an interface\n\n", "url": "https://github.com/spring-projects/spring-batch/issues/3183", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-02-27 03:24:00", "closed": "2009-02-28 00:00:14", "commits": {}, "ttf": 366.0002777777778, "commitsDetails": []}, {"title": "Cannot stop a TaskletStep [BATCH-397]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-397](https://jira.spring.io/browse/BATCH-397?redirect=false)** and commented\n\nCannot stop a TaskletStep.  The GracefulShutdownFunctionalTests were fooling us - they should actually fail (see commented out assertions and TODOs in that file).\n\n\n---\n\n**Affects:** 1.0.0.m5\n", "url": "https://github.com/spring-projects/spring-batch/issues/3180", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2008-02-27 21:47:53", "closed": "2008-06-18 18:28:56", "commits": {}, "ttf": 111.00027777777778, "commitsDetails": []}, {"title": "That old stateful / stateless thing again.... [BATCH-398]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-398](https://jira.spring.io/browse/BATCH-398?redirect=false)** and commented\n\nStep used to have StepExecutorFactory to create stack-confined stateful StepExecutor instances.  Now that StepExecutor is merged with Step it needs to have its own factory.  Or else we go back to the StepExecutor/Factory design.  So Job has a list of StepFactory instead of a list of Steps, and creates a Step for use inside its execute() method.  The simplest possible factory would be a prototype bean lookup, otherwise the factory has to have all the public setters of the Step implementation (maybe now that things are settling down that isn't so bad).\n\n\n---\n\n**Affects:** 1.0.0.m5\n", "url": "https://github.com/spring-projects/spring-batch/issues/3179", "user": "spring-issuemaster", "labels": ["in: core", "in: infrastructure", "type: bug"], "created": "2008-02-27 22:03:01", "closed": "2008-08-07 02:06:53", "commits": {}, "ttf": 161.00027777777777, "commitsDetails": []}, {"title": "Sources jars include .class files instead of .java files [BATCH-399]", "body": "**[Kyrill Alyoshin](https://jira.spring.io/secure/ViewProfile.jspa?name=kyrill007)** opened **[BATCH-399](https://jira.spring.io/browse/BATCH-399?redirect=false)** and commented\n\nIt looks like the *-source-1.0.0.m4.jar jars package binary files instead of actual sources. I think it is pretty important to fix it, since looking at the sources with the help of a good IDE is the only way to learn Spring Batch today. :-)\n\n\n---\n\n**Affects:** 1.0.0.m4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/c41d38c6843cadd02d9172b82dbb94380c4bd0e2\n", "url": "https://github.com/spring-projects/spring-batch/issues/3178", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2008-02-28 03:04:55", "closed": "2008-08-07 02:06:53", "commits": {}, "ttf": 160.00027777777777, "commitsDetails": []}, {"title": "Does startLimit need to be on Job and Step? [BATCH-402]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-402](https://jira.spring.io/browse/BATCH-402?redirect=false)** and commented\n\nDoes startLimit need to be on Job and Step?  I would be happy if it was only in one or the other (prefer Job, but others might have different opinions).\n\n\n---\n\n**Affects:** 1.0.0.m5\n", "url": "https://github.com/spring-projects/spring-batch/issues/3175", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-01 01:27:50", "closed": "2008-08-07 02:06:53", "commits": {}, "ttf": 159.00027777777777, "commitsDetails": []}, {"title": "Parallel job sample is prone to OptimisticLockingException [BATCH-408]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-408](https://jira.spring.io/browse/BATCH-408?redirect=false)** and commented\n\nParallel job sample is prone to OptimisticLockingException when using commons DBCP and Oracle (and probably other RDBMS, but not HSQL or Derby).  The \"toy\" databases that we currently test with do not really support multi-threaded access.  When you upgrade there are issues with optimistic locking exceptions.  The exceptions are meaningful - they tell you that the step execution in the database is not accurately reflecting the current status of the job.\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/e8da2c76f59c20115391bab2d105667560b0a68d\n", "url": "https://github.com/spring-projects/spring-batch/issues/3170", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2008-03-03 17:03:43", "closed": "2008-08-07 02:06:54", "commits": {}, "ttf": 156.00027777777777, "commitsDetails": []}, {"title": "StatefulRetryStepFactoryBean needs to co-ordinate exception handler with retry policy [BATCH-409]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-409](https://jira.spring.io/browse/BATCH-409?redirect=false)** and commented\n\nStatefulRetryStepFactoryBean needs to co-ordinate exception handler with retry policy.\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/eddb4653d7659391230b033d46470c52b69ebdc3, https://github.com/spring-projects/spring-batch/commit/ce33690a89aa04c454ab1fbcd20cd4dbf16880e6, https://github.com/spring-projects/spring-batch/commit/ee5746a860891227a28c6e1056292216b7e17927\n", "url": "https://github.com/spring-projects/spring-batch/issues/3169", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-03 23:10:59", "closed": "2008-08-07 02:06:54", "commits": {}, "ttf": 156.00027777777777, "commitsDetails": []}, {"title": "invalid blob syntax in PostgreSQL schema [BATCH-411]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-411](https://jira.spring.io/browse/BATCH-411?redirect=false)** and commented\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/bf607c315ee57568226d7019984b956806478d99\n", "url": "https://github.com/spring-projects/spring-batch/issues/3166", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-04 00:51:55", "closed": "2008-08-07 02:06:54", "commits": {}, "ttf": 156.00027777777777, "commitsDetails": []}, {"title": "consistent ItemStream key prefixes [BATCH-412]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-412](https://jira.spring.io/browse/BATCH-412?redirect=false)** and commented\n\nItemStream key names seem to follow the convention to use the short class name as key prefix - this should be consolidated (some use full class name, others hard-coded strings with out of date class name values)\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Issue Links:**\n- [BATCH-168](https://jira.spring.io/browse/BATCH-168) private vs. public step execution context data key names\n (_**\"is depended on by\"**_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/840d30426a288f179fa2696a5fe5b0d306b5fbef, https://github.com/spring-projects/spring-batch/commit/2aa867c535f753cd4cc6d6fcdea623ec80cbbb76\n", "url": "https://github.com/spring-projects/spring-batch/issues/3165", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-03-04 02:44:44", "closed": "2008-08-07 02:06:54", "commits": {}, "ttf": 155.00027777777777, "commitsDetails": []}, {"title": "Unhandled IndexOutOfBounds in DrivingQueryItemReader [BATCH-413]", "body": "**[Cameron Leach](https://jira.spring.io/secure/ViewProfile.jspa?name=cleach)** opened **[BATCH-413](https://jira.spring.io/browse/BATCH-413?redirect=false)** and commented\n\nIn the getCurrentKey() method of org.springframework.batch.io.driving.DrivingQueryItemReader, if currentIndex is 0, you will get an ArrayIndexOutOfBoundsException. This occurred when my KeyGenerator query returned 0 results for a particular batch job.\n\nIs this supposed to be handled gracefully or is it an error?  Is it a condition that my query must return at least 1 result?\n\n\n---\n\n**Affects:** 1.0.0.m4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/a7fe4db96e00c6aa1ea8a47dd7673ac1a4410907, https://github.com/spring-projects/spring-batch/commit/77b6a7c34c82ffa56c38931d745f92f707e46768\n", "url": "https://github.com/spring-projects/spring-batch/issues/3164", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-03-04 04:55:02", "closed": "2008-08-07 02:06:54", "commits": {}, "ttf": 155.00027777777777, "commitsDetails": []}, {"title": "Batch support schemas does not include RI and primary keys  [BATCH-400]", "body": "**[Kyrill Alyoshin](https://jira.spring.io/secure/ViewProfile.jspa?name=kyrill007)** opened **[BATCH-400](https://jira.spring.io/browse/BATCH-400?redirect=false)** and commented\n\nIt looks like BATCH_JOB_PARAMS and BATCH_STEP_EXECUTION_ATTRS do not include primary keys. (It also appears that these two tables are not yet used anywhere). Also, the schema does include referential integrity between tables.\n\nIt becomes difficult to get an approval from DBA's to approve such table structure...\n\nOf course, RI can be manually added as an easy workaround, but still...\n\n\n---\n\n**Affects:** 1.0.0.m4\n\n**Attachments:**\n- [batch-support-schema.sql](https://jira.spring.io/secure/attachment/13721/batch-support-schema.sql) (_3.37 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/9336443e014ea657a5d2053d594f8c5867f22c0b, https://github.com/spring-projects/spring-batch/commit/1373d56a7437199563199ca84b63943f9f05eac1, https://github.com/spring-projects/spring-batch/commit/651a5362a65bf13011bad5ab66396e4206de6c2c\n", "url": "https://github.com/spring-projects/spring-batch/issues/3163", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-02-28 03:11:39", "closed": "2008-08-07 02:06:53", "commits": {}, "ttf": 160.00027777777777, "commitsDetails": []}, {"title": "Confusing and/or inconsistent naming in M5 release [BATCH-415]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-415](https://jira.spring.io/browse/BATCH-415?redirect=false)** and commented\n\nThis issue submission is intended to be a kick-off point issue for offering feedback on naming in the M5 release.\n\nHere are a couple off the bat from the osf.batch.execution.step.support package:\n1. ListenerMulticaster breaks the XXXListener naming pattern - should this be MulticasterListener?\n2. DefaultStepExecutionSynchronizerSynchronizer - this class implements StepExecutionSynchronizer, so the extra Synchronizer in the name seems extraneous\n\n\n\n---\n\n**Affects:** 1.0.0.m5\n", "url": "https://github.com/spring-projects/spring-batch/issues/3161", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-04 10:26:14", "closed": "2008-08-07 02:06:54", "commits": {}, "ttf": 155.00027777777777, "commitsDetails": []}, {"title": "jobInstance properties lastExecution and executionCount are useless [BATCH-406]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-406](https://jira.spring.io/browse/BATCH-406?redirect=false)** and commented\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/9065b6ba25d402f153c543c7e97493158c5bb86f\n", "url": "https://github.com/spring-projects/spring-batch/issues/3160", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-03 01:24:58", "closed": "2008-08-07 02:06:53", "commits": {}, "ttf": 157.00027777777777, "commitsDetails": []}, {"title": "M5 further obscures JobParameters from collaborators [BATCH-416]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-416](https://jira.spring.io/browse/BATCH-416?redirect=false)** and commented\n\nJobParameters are only accessible to collaborators via a contrived mechanic... It was bad enough to have to pull the execution from the context to get the parameters, but now that StepContext is gone, you have to implement a Listener in order to obtain the step execution, even if you don't need any other features of the listener.\n\n\n\n---\n\n**Affects:** 1.0.0.m5\n", "url": "https://github.com/spring-projects/spring-batch/issues/3159", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2008-03-04 12:25:39", "closed": "2008-06-18 18:28:54", "commits": {}, "ttf": 106.00027777777778, "commitsDetails": []}, {"title": "SimpleExitStatusExceptionClassifier never returns a value that will result in ExitMapper.JVM_EXITCODE_JOB_ERROR [BATCH-423]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-423](https://jira.spring.io/browse/BATCH-423?redirect=false)** and commented\n\nSimpleExitStatusExceptionClassifier does not ever return ExitCodeMapper.NO_SUCH_JOB or JOB_NOT_PROVIDED, therefore JVM_EXITCODE_JOB_ERROR (2) is never returned to the command line.\n\nThe SimpleExitStatusExceptionClassifier should either return these values appropriately, or JVM_EXITCODE_JOB_ERROR and the two ExitCodeMapper values NO_SUCH_JOB and JOB_NOT_PROVIDED should be removed from the SimpleJvmExitCodeMapper.\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Attachments:**\n- [batch-423.patch](https://jira.spring.io/secure/attachment/13746/batch-423.patch) (_1.31 kB_)\n- [batch-423-unittest.patch](https://jira.spring.io/secure/attachment/13748/batch-423-unittest.patch) (_1.50 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/dc401605832fb08493244a9d7d9e4cde8559d0c9\n", "url": "https://github.com/spring-projects/spring-batch/issues/3152", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-05 11:16:08", "closed": "2008-08-07 02:06:55", "commits": {}, "ttf": 154.00027777777777, "commitsDetails": []}, {"title": "identity discrepancies [BATCH-436]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-436](https://jira.spring.io/browse/BATCH-436?redirect=false)** and commented\n\nTwo of our three domain entities are simply value objects:\n\n1. JobInstance = Job + JobParameters, id attribute is completely useless\n2. StepExecution = Step + JobExecution + non-identifying attributes, again id is redundant\n3. JobExecution = the single true DDD entity\n\nFor JobInstance I think we should simply make it a value object and remove the id and version attributes. Concerning StepExecution the situation is more interesting - we can either keep it the way it is as value object (removing the id) or make it an entity by removing its link to JobExecution (breaking a circular dependency).\n\n\n---\n\n**Affects:** 1.0.0.m5\n", "url": "https://github.com/spring-projects/spring-batch/issues/3141", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2008-03-06 18:31:12", "closed": "2008-03-10 03:47:27", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "ExitStatus constants cleanup [BATCH-438]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-438](https://jira.spring.io/browse/BATCH-438?redirect=false)** and commented\n\nExitStatus constants need to be reviewed and cleaned up - some of them are not used anymore (outside tests)\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Issue Links:**\n- [BATCH-434](https://jira.spring.io/browse/BATCH-434) Use consistent naming between BatchStatus and ExitStatus\n\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/ed6f991a761f8743a10e91a344ddcf80da6583f3\n", "url": "https://github.com/spring-projects/spring-batch/issues/3139", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-03-06 23:08:03", "closed": "2008-08-07 02:06:56", "commits": {}, "ttf": 153.00027777777777, "commitsDetails": []}, {"title": "ItemOrientedStep might not either commit or rollback transaction [BATCH-443]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-443](https://jira.spring.io/browse/BATCH-443?redirect=false)** and commented\n\nItemOrientedStep might not either commit or rollback transaction.  There is a catch (CommitFailedException) that leads to a simple rethrow and no attempt to rollback.\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/19348abbb33ea814a45bec2140f84887452a5d44\n", "url": "https://github.com/spring-projects/spring-batch/issues/3136", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-11 05:19:11", "closed": "2008-08-07 02:06:57", "commits": {}, "ttf": 148.00027777777777, "commitsDetails": []}, {"title": "Remove null check from ExecutionContext#putString [BATCH-444]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-444](https://jira.spring.io/browse/BATCH-444?redirect=false)** and commented\n\nThe ExecutionContext putString() method does an null check and throws an IllegalArgumentException if the value is null. (Assert.notNull) but this can cause issues if someone stores a string like: executionContext.putString(\"key\", new String()).  If the job fails and comes back from restart, it will pull a null value from the database, and the execution context will throw an exception.  The underlying map doesn't really care if it's null, and it seems like we shouldn't enforce new semantics.\n\nHere's a like to the forum thread it was raised in:\n\nhttp://forum.springframework.org/showthread.php?p=169118&posted=1#post169118\n\nThe JdbcCursorItemReader should also be modified to not put an empty string in, which only happens because we're putting in a comma delimited list of strings representing row numbers that have been skipped.  If it's empty nothing should be written.\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/486cc0f41e5ff4470427eae468fcd19eeef27a0c\n", "url": "https://github.com/spring-projects/spring-batch/issues/3135", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-03-11 10:33:16", "closed": "2008-09-23 11:11:41", "commits": {}, "ttf": 196.00027777777777, "commitsDetails": []}, {"title": "StaxEventItemWriter creates invalid xml for zero row documents [BATCH-448]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-448](https://jira.spring.io/browse/BATCH-448?redirect=false)** and commented\n\nCopied from http://forum.springframework.org/showthread.php?t=51054 :\n\nThe seems to be a minor bug in org.springframework.batch.io.xml.StaxEventItemWrit er which causes it to generate invalid xml for output files that have zero rows e.g.\n\n\\<?xml version='1.0' encoding='UTF-8'?>\\<modules\\</modules>\n\nrather than\n\n\\<?xml version='1.0' encoding='UTF-8'?>\\<modules>\\</modules>\n\nIt looks like it is due to the frig in endDocument() which writes the end tag manually.\n\nI have subclassed it in my project and overridden the endDocument() and added another event to the writer (writer.add(factory.createCharacters(\"\"))), to get round this problem. This extra 'useless' event seems to result in the startElement event being rendered correctly.\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/cc39916c198dc2083d809524aba5ae1498981a7b\n", "url": "https://github.com/spring-projects/spring-batch/issues/3131", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-03-12 02:06:24", "closed": "2008-08-07 02:06:57", "commits": {}, "ttf": 148.00027777777777, "commitsDetails": []}, {"title": "Msqld type creation script doesn't work on mysql 5.0.45 [BATCH-452]", "body": "**[Agim Emruli](https://jira.spring.io/secure/ViewProfile.jspa?name=agim)** opened **[BATCH-452](https://jira.spring.io/browse/BATCH-452?redirect=false)** and commented\n\nHi,\n\nmysql fails to create the tables for the spring-batch-core, because there are small errors inside the sql script.\n\nCREATE TABLE BATCH_JOB_INSTANCE  (\nJOB_INSTANCE_ID BIGINT unsigned PRIMARY KEY ,  \n);\n\nCREATE TABLE BATCH_JOB_EXECUTION  (\nJOB_INSTANCE_ID BIGINT NOT NULL,\nconstraint JOB_INSTANCE_EXECUTION_FK foreign key (JOB_INSTANCE_ID)\nreferences BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)\n);\n\nThe column JOB_INSTANCE_ID is defined as an unsigned BIGINT in the table  TABLE BATCH_JOB_INSTANCE. But the referencing column inside the CREATE TABLE BATCH_JOB_EXECUTION is not defined as an unsigned BIGINT.\n\nUnfortunately mysql throws an erno:150, because of the type mismatch between the target and the reference. We should change the type of all references to the column JOB_INSTANCE_ID to an unsigned BIGINT.\n\nAnother issue is the table engine definition, actually mysql uses the default table engine (InnoDB, MyIsam). We should set the InnoDB as the engine for all tables except the last ones which are used for primary key generation (they must use the myisam engine).\n\nThanks\nAgim\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Attachments:**\n- [create.sql](https://jira.spring.io/secure/attachment/13775/create.sql) (_2.63 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/1a316c1aa999243141d3b0721c7d49901a88423f, https://github.com/spring-projects/spring-batch/commit/ef8bd0f20e9c40b7a2c9c2fb80de3d77bff34209\n", "url": "https://github.com/spring-projects/spring-batch/issues/3128", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-13 03:16:40", "closed": "2008-08-07 02:06:57", "commits": {}, "ttf": 146.00027777777777, "commitsDetails": []}, {"title": "broken step's isAllowedStartIfComplete property [BATCH-454]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-454](https://jira.spring.io/browse/BATCH-454?redirect=false)** and commented\n\nWhen restarting job should restore execution context only for the step that crashed. If a step completed successfully but has isAllowedStartIfComplete=true, it needs to be started with empty execution context.\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/fe79a4dbe07fa8c004c6e14e8cb270452fbffa44\n", "url": "https://github.com/spring-projects/spring-batch/issues/3126", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-13 04:33:30", "closed": "2008-08-07 02:06:57", "commits": {}, "ttf": 146.00027777777777, "commitsDetails": []}, {"title": "Error handling broken in SimpleJob [BATCH-457]", "body": "**[Gregory Kick](https://jira.spring.io/secure/ViewProfile.jspa?name=gk5885)** opened **[BATCH-457](https://jira.spring.io/browse/BATCH-457?redirect=false)** and commented\n\nSimpleJob.execute() uses rethrow() to rethrow all Throwables caught during execution.  rethrow checks to see if something is a RuntimeException and wraps it if it is not.\n\nthe issue is that anything that is an Error (OutOfMemory, StackOverflow, etc.) is caught and wrapped as an UnexpectedJobExecutionException.  errors are inadvertently reclassified as exceptions.\n\nhonestly, i think that it's a little dodgy to be catching errors anyway, but if you must, rethrow needs to be corrected.\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/9b1bd77e8a37d0733e1444293884143f60bf7848, https://github.com/spring-projects/spring-batch/commit/4fd2968e5e05fe837cadf4221a508760d1edb276\n", "url": "https://github.com/spring-projects/spring-batch/issues/3123", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-13 07:45:54", "closed": "2008-08-07 02:06:57", "commits": {}, "ttf": 146.00027777777777, "commitsDetails": []}, {"title": "Skip sample fails in Eclipse (but not Maven) [BATCH-458]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-458](https://jira.spring.io/browse/BATCH-458?redirect=false)** and commented\n\nSkip sample fails in Eclipse (but not Maven).  Must be an ordering issue - one of the other tests not tidying up properly.\n\n\n---\n\n**Affects:** 1.0.0.rc1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/4e9ca5baeb68c304b0d450882c52382f2b70df96\n", "url": "https://github.com/spring-projects/spring-batch/issues/3122", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2008-03-13 21:07:27", "closed": "2008-08-07 02:06:57", "commits": {}, "ttf": 146.00027777777777, "commitsDetails": []}, {"title": "unused StepExecution methods [BATCH-459]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-459](https://jira.spring.io/browse/BATCH-459?redirect=false)** and commented\n\nitem count and commit count have setters and incrementer methods that are unused (the values are adjusted using apply(StepContribution).\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/0a1c4f49db2a6d64d9eb26943acd596d4e1b7be8\n", "url": "https://github.com/spring-projects/spring-batch/issues/3121", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-14 01:34:45", "closed": "2008-08-07 02:06:57", "commits": {}, "ttf": 146.00027777777777, "commitsDetails": []}, {"title": "beanRefContext still exists in samples src/main/resources [BATCH-460]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-460](https://jira.spring.io/browse/BATCH-460?redirect=false)** and commented\n\nSummary says it all - file just needs to be removed once and for all\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/f3faf8f79530cb5dc8886ef4e6449c93d3881137\n", "url": "https://github.com/spring-projects/spring-batch/issues/3120", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2008-03-14 02:19:13", "closed": "2008-08-07 02:06:58", "commits": {}, "ttf": 145.00027777777777, "commitsDetails": []}, {"title": "skip sample job should be named  (read: id=) \"skipSample\" not \"tradeJob\" [BATCH-462]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-462](https://jira.spring.io/browse/BATCH-462?redirect=false)** and commented\n\nSummary says it all\n\n\n---\n\n**Affects:** 1.0.0.rc1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3119", "user": "spring-issuemaster", "labels": ["in: samples", "status: duplicate", "type: bug"], "created": "2008-03-14 02:56:29", "closed": "2008-03-14 03:12:31", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "More code samples in Retry reference docos [BATCH-463]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-463](https://jira.spring.io/browse/BATCH-463?redirect=false)** and commented\n\nMore code samples in Retry reference docos.  See Wayne's comments on [BATCH-424](https://jira.spring.io/browse/BATCH-424).\n\n\n---\n\n**Affects:** 1.0.0.rc1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d56e0adc519673b98dbaf587e50426b44812c5da\n", "url": "https://github.com/spring-projects/spring-batch/issues/3118", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2008-03-14 02:57:53", "closed": "2008-08-07 02:06:58", "commits": {}, "ttf": 145.00027777777777, "commitsDetails": []}, {"title": "The term \"exit code\" is overloaded [BATCH-465]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-465](https://jira.spring.io/browse/BATCH-465?redirect=false)** and commented\n\nIn the ExitStatus class exit code refers to the string representing the exit status e.g. FAILED\nIn the CommandLineJobRunner exit code refers to what will be returned to the OS\n\nOne of these should be changed to remove confusion, e.g.\n\nreturn exitCodeMapper.getExitCode(jobExecution.getExitStatus().getExitCode());\n\nAt first glance can you tell what the heck this does? :)\n\n\n\n---\n\n**Affects:** 1.0.0.rc1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/271d6815c7bb8b567771c8d4bbad110281334b81\n", "url": "https://github.com/spring-projects/spring-batch/issues/3116", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-14 05:33:50", "closed": "2008-08-07 02:06:58", "commits": {}, "ttf": 145.00027777777777, "commitsDetails": []}, {"title": "ExitStatusExceptionClassifier, ExitCodeMapper and simple versions thereof (and others?) incorrectly moved into step.item package [BATCH-468]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-468](https://jira.spring.io/browse/BATCH-468?redirect=false)** and commented\n\nInterfaces mentioned in summary and their implementations should be under the step package - they are just as relevant to TaskletSteps or ChunkedSteps as they are to ItemOrientedSteps\n\nI'm also confused as to what the StepExecutionSynchronizer, et al. and StepInterruptionPolicy et al. are doing there. These seem like general step concerns, not item-related step concerns.\n\n\n---\n\n**Affects:** 1.0.0.rc1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/271d6815c7bb8b567771c8d4bbad110281334b81\n", "url": "https://github.com/spring-projects/spring-batch/issues/3113", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-14 05:54:09", "closed": "2008-08-07 02:06:58", "commits": {}, "ttf": 145.00027777777777, "commitsDetails": []}, {"title": "Replace Interface21 with SpringSource in reference documentation [BATCH-469]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-469](https://jira.spring.io/browse/BATCH-469?redirect=false)** and commented\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/064fc14ea01c2b08834f457c8a0270a55eba3187, https://github.com/spring-projects/spring-batch/commit/b325e6e3777a433abffce9456496132a1750c1da\n", "url": "https://github.com/spring-projects/spring-batch/issues/3112", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2008-03-14 06:27:26", "closed": "2008-08-07 02:06:58", "commits": {}, "ttf": 145.00027777777777, "commitsDetails": []}, {"title": "PDF version of documentation missing images. [BATCH-471]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-471](https://jira.spring.io/browse/BATCH-471?redirect=false)** and commented\n\nAlthough the images are showing up correctly for the html version of the docs, the pdf version is missing them.  I've done a quick check through and the correct \\<imageobject> tag is there, with a role of 'fo', so I'm not sure what is causing the issue.\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/9d54d877e0f4bf4a4eae2f56a1d0e59acba0e86b\n", "url": "https://github.com/spring-projects/spring-batch/issues/3110", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2008-03-16 11:47:09", "closed": "2008-08-07 02:06:58", "commits": {}, "ttf": 143.00027777777777, "commitsDetails": []}, {"title": "Images are not visible in the online reference documentation [BATCH-477]", "body": "**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[BATCH-477](https://jira.spring.io/browse/BATCH-477?redirect=false)** and commented\n\nIt looks like a simple path issue.\n\nFor example: src=\"images/job-heirarchy.png\"\nShould be: src=\"../images/job-heirarchy.png\"\n\n\n---\n\n**Affects:** 1.0.0.rc1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3105", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2008-03-17 05:47:03", "closed": "2008-08-07 02:06:59", "commits": {}, "ttf": 142.00027777777777, "commitsDetails": []}, {"title": "Incorrect message logged in SimpleJobLauncher when TaskExecutor is set [BATCH-478]", "body": "**[Richard Kettelerij](https://jira.spring.io/secure/ViewProfile.jspa?name=rkettelerij)** opened **[BATCH-478](https://jira.spring.io/browse/BATCH-478?redirect=false)** and commented\n\nRegardless of whether a (custom) TaskExecutor is specified, SimpleJobLauncher always logs the following message in afterPropertiesSet(): \"No TaskExecutor has been set, defaulting to synchronous executor\". See attached patch for a fix. Note that this patch requires that afterPropertiesSet() is called or else a NPE will be thrown.\n\n\n---\n\n**Affects:** 1.0.0.rc1\n\n**Attachments:**\n- [mylyn-context.zip](https://jira.spring.io/secure/attachment/13836/mylyn-context.zip) (_1.23 kB_)\n- [simplejoblauncher-taskexecutor-not-set.patch](https://jira.spring.io/secure/attachment/13800/simplejoblauncher-taskexecutor-not-set.patch) (_1.14 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/e82635386603e354b0eedbfca69d1bc2e7a8eccc, https://github.com/spring-projects/spring-batch/commit/4f3bf4ffaf3703817df833584e8f1f1697904fd1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3104", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-17 08:56:57", "closed": "2008-08-07 02:06:59", "commits": {}, "ttf": 142.00027777777777, "commitsDetails": []}, {"title": "Fix broken links on website [BATCH-482]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-482](https://jira.spring.io/browse/BATCH-482?redirect=false)** and commented\n\nFix broken links on website.  Maven Site plugin does not really work as advertised for inheritance of site.xml - the result appears to be a load of wrongly inherited links and broken links on the sub-project web pages.  The only way I can think to fix it is some filtering of the site after it is generated.\n\n\n---\n\n**Affects:** 1.0.0.rc1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3100", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2008-03-17 19:02:45", "closed": "2008-08-07 02:06:59", "commits": {}, "ttf": 142.00027777777777, "commitsDetails": []}, {"title": "ExecutionContext does not handle null values correctly [BATCH-483]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-483](https://jira.spring.io/browse/BATCH-483?redirect=false)** and commented\n\nExecutionContext still does not handle null values correctly:\n\n    public void put(String key, Object value) {\n    \tAssert.isInstanceOf(Serializable.class, value, \"Value: [ \" + value + \"must be serializable.\");\n    \tdirty = true;\n    \tmap.put(key, value);\n    }\n\nsince null won't pass this test, it will throw an error.\n\n\n---\n\n**Affects:** 1.0.0.rc1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3099", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-03-18 06:59:49", "closed": "2008-08-07 02:07:00", "commits": {}, "ttf": 141.00027777777777, "commitsDetails": []}, {"title": "Another example of dual extends and implements [BATCH-427]", "body": "**[Wayne Lund](https://jira.spring.io/secure/ViewProfile.jspa?name=wxlund)** opened **[BATCH-427](https://jira.spring.io/browse/BATCH-427?redirect=false)** and commented\n\nUsing eUML to reverse engineer the models and finding more examples of cleanup that needs to occur in the ItemWriter hierarchy - a very small fix.  In this case CompositeItemWriter is both extending AbstractItemWriter and implementing ItemWriter.  Remove ItemWriter from implements list.\n\n\n---\n\n**Affects:** 1.0.0.rc1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/f2ae3f05b9fe877ac3920a90fc6009feee4bb22b\n", "url": "https://github.com/spring-projects/spring-batch/issues/3096", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-03-05 16:52:37", "closed": "2018-12-06 18:00:38", "commits": {}, "ttf": 3928.0002777777777, "commitsDetails": []}, {"title": "Restart not working properly with Oracle [BATCH-439]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-439](https://jira.spring.io/browse/BATCH-439?redirect=false)** and commented\n\nRestart not working properly with Oracle.  This is a weird one.  Some people seem to have the problem and others not (see forum thread, dating from pre-m3: http://forum.springframework.org/showthread.php?t=46821).\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/7208151adb60be852100b60bcc7f8bfe9da76502\n", "url": "https://github.com/spring-projects/spring-batch/issues/3091", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-07 18:56:09", "closed": "2008-08-07 02:06:56", "commits": {}, "ttf": 152.00027777777777, "commitsDetails": []}, {"title": "JdbcStepExecutionDao should use LobHandler [BATCH-440]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-440](https://jira.spring.io/browse/BATCH-440?redirect=false)** and commented\n\nJdbcStepExecutionDao should use LobHandler.  It only affects people using Oracle 9 (or less) which we don't provide DDL for out of the box.  Only affects people using Objects in their ExecutionContext as well.  So two minority cases (hence postponed for a maintenance release).\n\n\n---\n\n**Affects:** 1.0.0.m5\n", "url": "https://github.com/spring-projects/spring-batch/issues/3090", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-07 19:24:06", "closed": "2008-04-02 18:32:14", "commits": {}, "ttf": 25.00027777777778, "commitsDetails": []}, {"title": "undocumented JobExecutionException [BATCH-489]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-489](https://jira.spring.io/browse/BATCH-489?redirect=false)** and commented\n\nThe root of job-centric exception hierarchy has empty javadoc\n\n\n---\n\n**Affects:** 1.0.0.rc1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3089", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-19 00:32:57", "closed": "2008-08-07 02:07:00", "commits": {}, "ttf": 141.00027777777777, "commitsDetails": []}, {"title": "SkipLimitStepFactoryBean ignores the skippableExceptionClasses property [BATCH-490]", "body": "**[Assaf Berg](https://jira.spring.io/secure/ViewProfile.jspa?name=assaf27)** opened **[BATCH-490](https://jira.spring.io/browse/BATCH-490?redirect=false)** and commented\n\nThe value of this property should be passed to the underlying ExceptionHandler, but gets overwritten in this suspicious code fragment:\n\nSimpleLimitExceptionHandler exceptionHandler = new SimpleLimitExceptionHandler();\nexceptionHandler.setLimit(skipLimit);\nexceptionHandler.setExceptionClasses(skippableExceptionClasses);\nsetExceptionHandler(new SimpleLimitExceptionHandler(skipLimit));\n\n\n---\n\n**Affects:** 1.0.0.rc1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3088", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2008-03-19 01:11:03", "closed": "2008-08-07 02:07:00", "commits": {}, "ttf": 141.00027777777777, "commitsDetails": []}, {"title": "checked exception handling [BATCH-491]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-491](https://jira.spring.io/browse/BATCH-491?redirect=false)** and commented\n\nSpecifying exception types for stepOperations' exception handler doesn't work properly for checked exceptions. This is because chunkOperations' exception handler is called first and wraps the checked exception into runtime RepeatException.\n\n\n---\n\n**Affects:** 1.0.0.rc1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3087", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-19 02:05:25", "closed": "2008-09-24 16:02:23", "commits": {}, "ttf": 189.00027777777777, "commitsDetails": []}, {"title": "CommandLineJobRunner should close the spring context [BATCH-492]", "body": "**[Gerard COLLIN](https://jira.spring.io/secure/ViewProfile.jspa?name=gcollin)** opened **[BATCH-492](https://jira.spring.io/browse/BATCH-492?redirect=false)** and commented\n\nIn CommandLineJobRunner.start (), you create a new Spring context but don't close it at the end.\n\nThat means that if any spring bean is expecting some close method to be called (for flushing generated file for example), it won't work.\n\nG\u00e9rard COLLIN\n\n\n---\n\n**Affects:** 1.0.0.rc1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3086", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-19 02:12:39", "closed": "2008-08-07 02:07:00", "commits": {}, "ttf": 140.00027777777777, "commitsDetails": []}, {"title": "skip synchronization between reader and writer [BATCH-449]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-449](https://jira.spring.io/browse/BATCH-449?redirect=false)** and commented\n\nItemSkipPolicyItemHandler always calls skip on both reader and writer. If reader threw the exception it is one item ahead of the writer, so calling skip makes reader skip the item that caused the error, but writer will skip the previous item.\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/591e5074212dce78c427fc157e8b62e20788bdd3\n", "url": "https://github.com/spring-projects/spring-batch/issues/3085", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-12 20:55:06", "closed": "2008-08-07 02:06:57", "commits": {}, "ttf": 147.00027777777777, "commitsDetails": []}, {"title": "readers must not clear buffers on mark() [BATCH-495]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-495](https://jira.spring.io/browse/BATCH-495?redirect=false)** and commented\n\nHistorically readers implemented TransactionSynchronization and the logic from afterCommit() was largely moved into current mark(). However, the contract of mark() differs significantly - it is not a point where the reader can safely forget the past events and clear its buffers. This relates to skipped item buffers in general and specifically to buffered XMLEvents in StaxEventItemReader.\n\nThe basic issue is that mark() is called also before re-processing rolled back chunk.\n\n\n---\n\n**Affects:** 1.0.0.rc1\n\n1 votes, 1 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/3082", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-03-20 01:35:39", "closed": "2008-08-07 02:07:01", "commits": {}, "ttf": 140.00027777777777, "commitsDetails": []}, {"title": "Skip method should get ExecutionContext as an argument [BATCH-498]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-498](https://jira.spring.io/browse/BATCH-498?redirect=false)** and commented\n\nSkippable readers and writers are, most of the time, going to keep some sort of statistic about how much or what was skipped. It makes sense for these collaborators to have the ExecutionContext directly supplied as an argument the skip method rather than making each Skippable have to also implement StepListener to become context aware.\n\nSince this is a change to a public API, requesting consideration for 1.0.0 release. Please vote / comment ASAP. Thanks.\n\n\n---\n\n**Affects:** 1.0.0.rc1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3079", "user": "spring-issuemaster", "labels": ["in: core", "in: infrastructure", "type: bug"], "created": "2008-03-20 10:16:31", "closed": "2008-08-07 02:07:01", "commits": {}, "ttf": 139.00027777777777, "commitsDetails": []}, {"title": "skip counting [BATCH-461]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-461](https://jira.spring.io/browse/BATCH-461?redirect=false)** and commented\n\nboth StepExecution#apply(StepContribution) and StepContribution.getSkipCount() add the other's skip count to the total number of skipped items, so the eventual result reminds of Fibonacci.\n\n\n---\n\n**Affects:** 1.0.0.m5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/f202dd4b44cfea5e0c2ee0b439c534cf001a34d3, https://github.com/spring-projects/spring-batch/commit/db2344d2fac91c31fcafb5a80ce36deae87b3108\n", "url": "https://github.com/spring-projects/spring-batch/issues/3078", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-14 02:40:26", "closed": "2008-08-07 02:06:58", "commits": {}, "ttf": 145.00027777777777, "commitsDetails": []}, {"title": "incorrect version [BATCH-499]", "body": "**[Gregory Kick](https://jira.spring.io/secure/ViewProfile.jspa?name=gk5885)** opened **[BATCH-499](https://jira.spring.io/browse/BATCH-499?redirect=false)** and commented\n\n\\<version>1.0.0.-SNAPSHOT\\</version> should be \\<version>1.0.0-SNAPSHOT\\</version>\n\n\n---\n\n**Affects:** 1.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/0201bcb2b3886451b7b0e646a1b1303b3d9e5141\n", "url": "https://github.com/spring-projects/spring-batch/issues/3077", "user": "spring-issuemaster", "labels": ["in: documentation", "in: infrastructure", "in: samples", "type: bug"], "created": "2008-03-21 07:35:50", "closed": "2008-08-07 02:07:01", "commits": {}, "ttf": 138.00027777777777, "commitsDetails": []}, {"title": "JobListener is not a BatchListener [BATCH-506]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-506](https://jira.spring.io/browse/BATCH-506?redirect=false)** and commented\n\nJobListener doesn't implement marker interface BatchListener - seems like it should...\n\n\n---\n\n**Attachments:**\n- [batch-506.patch](https://jira.spring.io/secure/attachment/13831/batch-506.patch) (_392 bytes_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/3070", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2008-03-24 18:23:26", "closed": "2008-08-07 02:07:02", "commits": {}, "ttf": 135.00027777777777, "commitsDetails": []}, {"title": "FlatFileItemWriter OutputSource not initialised on FlatFileItemReader.open() [BATCH-507]", "body": "**[Nigel Watson](https://jira.spring.io/secure/ViewProfile.jspa?name=nigel.d.watson)** opened **[BATCH-507](https://jira.spring.io/browse/BATCH-507?redirect=false)** and commented\n\nFlatFileItemWriter.OutputSource contains a number of member variables that are only initialised via the FlatFileItemWriter.set methods - for example setShouldDeleteIfExists.\n\nIf a writer is closed and then re-opened (ie same FlatFileItemWriter object is reused in same vm), a new OutputSource object is created, but it is not reinitialised so these attributes are defaulted - eg shouldDeleteIfExists defaults to true.\n\nApologies if this is a product of the way I am using the FlatFileItemWriter.  I am new to Spring and SpringBatch and don't properly understand the lifecycle of the beans. I might be misusing the FlatFileItemWriter - perhaps it should not be possible to close and then re-open one of these?\n\nI have been using code below based on one of the sample jobs which seems to reuse the same writer on the second run of the jobs. My aim was to reproduce a second potential bug, whereby FlatFileItemWriter won't restart if it already exists but  no record of it exists in StepExecutionContext (eg if first run of job failed before this step commits for first time), however this bug is preventing me from doing this  - I am dependant on shouldDeleteIfExists being false, however I am finding that it is false on first run (set via my job.xml), but true on second run.\n\npublic class FlatFileItemWriterRestartTests extends AbstractBatchLauncherTests {\n\n    public void testLaunchJob() throws Exception {\n    \n        final JobParameters jobParameters = new JobParameters();\n        logger.info(\"Starting test\");\n        \n        JobExecution jobExecution = null;\n        try {\n            jobExecution = launcher.run(getJob(), jobParameters);\n        }\n        catch (InfrastructureException expected) {\n            logger.info(\"Caught Exception\");\n            logger.info(expected);\n            assertTrue(\"Not planned exception: \"+expected.getMessage(), expected.getMessage().toLowerCase().indexOf(\"planned\")>=0);\n        }\n        \n        // At this point existing FlatFileItemWriter is reused, \n        // but new OutputState  \n        // is created, with default shouldDeleteIfExists=true \n        jobExecution = launcher.run(getJob(), jobParameters); \n    \n        assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus());\n        logger.info(\"Completed\");\n    }\n\n}\n\nFor reference I mentioned this on:\nhttp://forum.springframework.org/showthread.php?t=51190\n\n\n---\n\n**Affects:** 1.0.0.rc1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3069", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-03-25 01:11:39", "closed": "2008-08-07 02:07:02", "commits": {}, "ttf": 135.00027777777777, "commitsDetails": []}, {"title": "FlatFileItemWriter.restarted logic fails if step fails before first chunk commit. [BATCH-510]", "body": "**[Nigel Watson](https://jira.spring.io/secure/ViewProfile.jspa?name=nigel.d.watson)** opened **[BATCH-510](https://jira.spring.io/browse/BATCH-510?redirect=false)** and commented\n\nForum ref  http://forum.springframework.org/showthread.php?p=171215\n\nScenario:\n\n- I have a Step that reads in items, and outputs via FFIW with shouldDeleteIfExists=false;\n- Step runs through a few items and output file buffer is flushed to disk\n- Job fails before first chunk commit (I am ending the job in a debugger).\n\nOn restart:\n- Output file accessed via FFIW will exist on the file system.\n- No record of it exists in the STEP_EXECUTION_CONTEXT table.\n\nRestart the job (has to be in a new vm becasue of #batch-507) and it will fail with:\n\norg.springframework.batch.item.exception.StreamException: Resource already exists: file [D:\\temp\\output1.csv]\nat org.springframework.batch.io.file.FlatFileItemWriter$OutputState.initializeBufferedWriter(FlatFileItemWriter.java:378)\n\nI think this is because outputState.restoreFrom is not getting called because STEP_EXECUTION_CONTEXT table has no data for this step (see code extract below).\n\n    /**\n\n* Initialize the Output Template.\n* \n* `@see` ResourceLifecycle#open()\n  */\n  public void open(ExecutionContext executionContext) {\n  OutputState outputState = getOutputState();\n  if (executionContext.containsKey(getKey(RESTART_DATA_NAME))) {\n  outputState.restoreFrom(executionContext);\n  }\n  }\n\nThis means FFIW.restarted is false, and then initializeBufferedWriter fails in\n\n....\nif (!restarted) {\nif (file.exists()) {\nif (shouldDeleteIfExists) {\nfile.delete();\n} else {\nthrow new ItemStreamException(\"Resource already exists: \" + resource);\n}\n}\n....\n\n\n---\n\n**Affects:** 1.0.0.rc1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3066", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2008-03-25 03:12:03", "closed": "2018-12-06 18:00:15", "commits": {}, "ttf": 3908.0002777777777, "commitsDetails": []}, {"title": "read failures cause rollback [BATCH-511]", "body": "**[Gregory Kick](https://jira.spring.io/secure/ViewProfile.jspa?name=gk5885)** opened **[BATCH-511](https://jira.spring.io/browse/BATCH-511?redirect=false)** and commented\n\nwhen using 'skipping', the item handler rethrows any read exception to delegate to the exception handler\n\nprotected Object read(StepContribution contribution) throws Exception {\ntry {\nreturn getItemReader().read();\n}\ncatch (Exception e) {\nif (itemSkipPolicy.shouldSkip(e, contribution.getStepSkipCount())) {\ncontribution.incrementSkipCount();\nif (getItemReader() instanceof Skippable) {\n((Skippable) getItemReader()).skip();\n}\n}\n===>> throw e; <<===\n}\n}\n\nthe exception handler picks up the exception at the step level\n\n...\nSimpleLimitExceptionHandler exceptionHandler = new SimpleLimitExceptionHandler();\nexceptionHandler.setLimit(skipLimit);\nexceptionHandler.setExceptionClasses(skippableExceptionClasses);\nexceptionHandler.setFatalExceptionClasses(fatalExceptionClasses);\nsetExceptionHandler(exceptionHandler);\ngetStepOperations().setExceptionHandler(getExceptionHandler());\n...\n\nso, whenever you encounter an exception in the read, it rolls back all successful writes instead of just skipping the item and continuing.\n\n\n---\n\n**Affects:** 1.0.0.rc1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3065", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-25 08:07:55", "closed": "2008-08-07 02:07:02", "commits": {}, "ttf": 134.00027777777777, "commitsDetails": []}, {"title": "Core and Infrastructure still have circular dependency [BATCH-501]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-501](https://jira.spring.io/browse/BATCH-501?redirect=false)** and commented\n\nSeveral classes in Core package org.springframework.batch.core.step.item depend on infrastructure classes ItemReader and ItemWriter. However, ItemReader and ItemWriter are not core stereotypes. Conversely, infrastructure inherently depends on core.\n\nProposed solutions:\n\n1) Move classes in base org.springframework.batch.item package and potentially the generic subpackages (e.g. adapter, support, transform) to the same package name but in the Core module, leaving the optional concerns in infrastructure (e.g. JMS, stax, ORM, etc.)\n\n2) Move those same classes into the org.springframework.batch.core.step.item package\n\n3) Completely combine core and infrastructure - honestly, you never use one without the other, why are they still separate? If you want to separate out optional concerns, do that (e.g. JMS, stax, ORM, etc.) but there's honestly no real reason to ever not have at least half the infrastructure package on your classpath (unless you think item oriented processing is evil and you only use tasklet steps, but that's a fringe concern).\n\nI vote for (3)\n\nPlease re-examine this pre-release.\n\n\n---\n\n**Affects:** 1.0.0.rc1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3064", "user": "spring-issuemaster", "labels": ["in: core", "in: infrastructure", "type: bug"], "created": "2008-03-21 19:18:54", "closed": "2008-03-24 02:02:36", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "delegating item reader/writer needs documentation on registering delegate as a Stream. [BATCH-512]", "body": "**[Gregory Kick](https://jira.spring.io/secure/ViewProfile.jspa?name=gk5885)** opened **[BATCH-512](https://jira.spring.io/browse/BATCH-512?redirect=false)** and commented\n\nDelegatingItemReader and DelegatingItemWriter don't implement ItemStream so when they are configured via a SimpleStepFactoryBean, they aren't registered.\n\n\n\n---\n\n**Affects:** 1.0.0.rc1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3063", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-25 08:43:26", "closed": "2008-08-07 02:07:02", "commits": {}, "ttf": 134.00027777777777, "commitsDetails": []}, {"title": "CompositeItemReadListener, CompositeItemWriteListener using ChunkListeners? [BATCH-513]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-513](https://jira.spring.io/browse/BATCH-513?redirect=false)** and commented\n\nThe setListeners method in both composite listeners takes type ChunkListener[].... since we use 1.4.2, the list they get added to isn't parameterized so this would only get caught at runtime when they are cast back -- this seems very broken to me.\n\nI think this should be ItemReadListener[] and ItemWriteListener[], respectively?\n\n\n---\n\n**Affects:** 1.0.0.rc1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3062", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-25 13:16:36", "closed": "2008-08-07 02:07:02", "commits": {}, "ttf": 134.00027777777777, "commitsDetails": []}, {"title": "item writers need to handle empty flush gracefully [BATCH-517]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-517](https://jira.spring.io/browse/BATCH-517?redirect=false)** and commented\n\nIn case \"item_count mod commit_interval == 0\" there will be an empty extra chunk that only calls the item reader that will return null to indicate all items have been read. This results in flushing item writer without calling write(item) previously - an \"empty\" flush, that needs to be handled gracefully (e.g. BatchSqlUpdateItemWriter throws a confusing exception).\n\nIn principle the execution logic should be smart enough not to do silly things such as empty flushing, but it's unrealistic to fix for 1.0. Making sure writers handle empty flushing gracefully should be good enough for now.\n\n\n---\n\n**Affects:** 1.0.0.rc1\n", "url": "https://github.com/spring-projects/spring-batch/issues/3058", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-03-26 20:59:53", "closed": "2008-08-07 02:07:02", "commits": {}, "ttf": 133.00027777777777, "commitsDetails": []}, {"title": "FlatFileItemReader calls mark?? [BATCH-523]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-523](https://jira.spring.io/browse/BATCH-523?redirect=false)** and commented\n\nLine 151: \t\tmark();\n\nSeems like this is a bug -- it would break the mark/reset logic of the enclosing Step.\n\n\n---\n\n**Affects:** 1.0.0.rc1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d0455b519774147f174e9cca898c9f4930bcea21\n", "url": "https://github.com/spring-projects/spring-batch/issues/3052", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-03-27 20:48:34", "closed": "2008-08-07 02:07:03", "commits": {}, "ttf": 132.00027777777777, "commitsDetails": []}, {"title": "documentation corrections [BATCH-524]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-524](https://jira.spring.io/browse/BATCH-524?redirect=false)** and commented\n\nThis is a summary of the semantically significant issues I've noticed while reading through the docs so far:\n\n1.1.3 Figure 1.1 should explain the difference between solid and dotted links\n\n2.2 Note - \"job tier can be completely missing\" - really?\n\n2.4.2 Table 2.8 StepExecution#itemCount does not include reprocessed items after rollback (docs say it does)\n\n4.4.1.6 BatchListener no longer exists\n\n\n\n---\n\n**Affects:** 1.0.0.rc1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/62f8ac5d700afc7fb4e7091fdf1248c9a4a521db\n", "url": "https://github.com/spring-projects/spring-batch/issues/3051", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2008-03-28 01:27:30", "closed": "2008-08-07 02:07:03", "commits": {}, "ttf": 132.00027777777777, "commitsDetails": []}, {"title": "Inserting non-date JobParameter fails on MySQL [BATCH-528]", "body": "**[Alex Eagle](https://jira.spring.io/secure/ViewProfile.jspa?name=phallix)** opened **[BATCH-528](https://jira.spring.io/browse/BATCH-528?redirect=false)** and commented\n\nI ran the schema creation script schema-mysql.sql found in the spring-batch-core-1.0.0.rc1.jar.\nIt creates a table for the job parameters:\n\n```sql\nCREATE TABLE BATCH_JOB_PARAMS  (\n\tJOB_INSTANCE_ID BIGINT NOT NULL ,\n    TYPE_CD VARCHAR(6) NOT NULL ,\n\tKEY_NAME VARCHAR(100) NOT NULL , \n\tSTRING_VAL VARCHAR(250) , \n\tDATE_VAL TIMESTAMP NULL,\n\tLONG_VAL BIGINT ,\n\tDOUBLE_VAL DOUBLE PRECISION,\n\tconstraint JOB_INSTANCE_PARAMS_FK foreign key (JOB_INSTANCE_ID)\n\treferences BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)\n) type=InnoDB;\n```\n\nHowever, when starting a job with a single long parameter, the query fails. A java.sql.Timestamp with value 0L is created in JdbcJobInstanceDao:146 and inserted into the DATE_VAL column, which fails:\n\n```\norg.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL [INSERT into BATCH_JOB_PARAMS(JOB_INSTANCE_ID, KEY_NAME, TYPE_CD, STRING_VAL, DATE_VAL, LONG_VAL, DOUBLE_VAL) values (?, ?, ?, ?, ?, ?, ?)]; SQL state [01004]; error code [0]; Data truncation: Incorrect datetime value: '1969-12-31 19:00:00' for column 'DATE_VAL' at row 1\n\nQuery being executed when exception was thrown:\n\ncom.mysql.jdbc.ServerPreparedStatement[6] - INSERT into BATCH_JOB_PARAMS(JOB_INSTANCE_ID, KEY_NAME, TYPE_CD, STRING_VAL, DATE_VAL, LONG_VAL, DOUBLE_VAL) values (1, 'batchSize', 'LONG', '', '1969-12-31 19:00:00', 1, 0.0); nested exception is java.sql.SQLException: Data truncation: Incorrect datetime value: '1969-12-31 19:00:00' for column 'DATE_VAL' at row 1\n        at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.translate(SQLStateSQLExceptionTranslator.java:121)\n        at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.translate(SQLErrorCodeSQLExceptionTranslator.java:322)\n        at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:582)\n        at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:767)\n        at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:825)\n        at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:829)\n        at org.springframework.batch.core.repository.dao.JdbcJobInstanceDao.insertParameter(JdbcJobInstanceDao.java:155)\n        at org.springframework.batch.core.repository.dao.JdbcJobInstanceDao.insertJobParameters(JdbcJobInstanceDao.java:109)\n        at org.springframework.batch.core.repository.dao.JdbcJobInstanceDao.createJobInstance(JdbcJobInstanceDao.java:71)\n        at org.springframework.batch.core.repository.support.SimpleJobRepository.createJobExecution(SimpleJobRepository.java:179)\n        at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:83)\n```\n\nApparently MySQL has an issue with a timestamp in 1969:\n\n```\nmysql> create table timestamper ( t timestamp null );\nQuery OK, 0 rows affected (0.01 sec)\nmysql> insert into timestamper(t) values ('1969-12-31 19:00:00');\nERROR 1292 (22007): Incorrect datetime value: '1969-12-31 19:00:00' for column 't' at row 1\nmysql> insert into timestamper(t) values ('1980-12-31 19:00:00');\nQuery OK, 1 row affected (0.00 sec)\n```\n\nAs a workaround, I changed the column type of DATE_VAL to datetime rather than timestamp. I think datetime may be the more appropriate type for this column in mysql.\n\n\n---\n\n**Affects:** 1.0.0.rc1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/4f0cb707cbd1d6eabcd1897c8ed2d0b07b48134d\n", "url": "https://github.com/spring-projects/spring-batch/issues/3047", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-28 09:53:07", "closed": "2008-08-07 02:07:03", "commits": {}, "ttf": 131.00027777777777, "commitsDetails": []}, {"title": "StepExecutionListener.afterStep() should only be called on success [BATCH-529]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-529](https://jira.spring.io/browse/BATCH-529?redirect=false)** and commented\n\nStepExecutionListener.afterStep() should only be called on success.  The interface javadocs don't say this, but I think it makes more sense for this callback to come only on a successful completion (since there is an onError() callback for the failure case).\n\n\n---\n\n**Affects:** 1.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/7746cfc304a36fb557fd84e7143fc614b6be8ab0\n", "url": "https://github.com/spring-projects/spring-batch/issues/3046", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-29 00:02:27", "closed": "2008-08-07 02:07:03", "commits": {}, "ttf": 131.00027777777777, "commitsDetails": []}, {"title": "Off by one error in itemCount of StepExecution [BATCH-531]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-531](https://jira.spring.io/browse/BATCH-531?redirect=false)** and commented\n\nThe StepExecution always has one more item at the end than it should.  Here's a unit test (insert in ItemOrientedStepTests):\n\n    public void testStepToCompletion() throws Exception {\n    \n    \tRepeatTemplate template = new RepeatTemplate();\n    \n    \t// process all items:\n    \ttemplate.setCompletionPolicy(new DefaultResultCompletionPolicy());\n    \titemOrientedStep.setStepOperations(template);\n    \t\n    \tJobExecution jobExecutionContext = new JobExecution(jobInstance);\n    \tStepExecution stepExecution = new StepExecution(itemOrientedStep, jobExecutionContext);\n    \n    \titemOrientedStep.execute(stepExecution);\n    \tassertEquals(3, processed.size());\n    \tassertEquals(3, stepExecution.getItemCount().intValue());\n    }\n\n\n\n---\n\n**Affects:** 1.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/3edc30eec68822f609c9ed2446f06953794b5748\n", "url": "https://github.com/spring-projects/spring-batch/issues/3044", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-29 03:06:34", "closed": "2008-08-07 02:07:04", "commits": {}, "ttf": 130.00027777777777, "commitsDetails": []}, {"title": "StepExecutionListener can influence exit status but not status of step execution [BATCH-532]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-532](https://jira.spring.io/browse/BATCH-532?redirect=false)** and commented\n\nStepExecutionListener can influence exit status but not status of step execution.  The exit status can be downgraded from COMPLETE to FAILED by returning FAILED from the afterStep() callback.  But the BatchStatus in the stepExecution is unchanged, so it looks as if the step was successful.  It's a hard decision to decide how to fix this.  I suggest that StepExecutionListener should be allowed to throw an exception to signal a failure, and treat that as a normal way for steps to fail, instead of trying to map exit codes to statuses.\n\n\n---\n\n**Affects:** 1.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/bff748f5760a34741288bbb84994fea82d2fbc5d, https://github.com/spring-projects/spring-batch/commit/7746cfc304a36fb557fd84e7143fc614b6be8ab0\n\n1 votes, 1 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/3043", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-29 20:28:20", "closed": "2008-08-07 02:07:04", "commits": {}, "ttf": 130.00027777777777, "commitsDetails": []}, {"title": "prefix in the JobRepositoryFactoryBean does not apply to the sequences [BATCH-533]", "body": "**[Gregory Kick](https://jira.spring.io/secure/ViewProfile.jspa?name=gk5885)** opened **[BATCH-533](https://jira.spring.io/browse/BATCH-533?redirect=false)** and commented\n\n...\ndao.setJobIncrementer(incrementerFactory.getIncrementer(databaseType, \"BATCH_JOB_SEQ\"));\n...\ndao.setJobExecutionIncrementer(incrementerFactory.getIncrementer(databaseType, \"BATCH_JOB_EXECUTION_SEQ\"));\n...\ndao.setStepExecutionIncrementer(incrementerFactory.getIncrementer(databaseType, \"BATCH_STEP_EXECUTION_SEQ\"));\n....\nAs you can see, the prefix is not applied to any of the sequences.\n\n\n---\n\n**Affects:** 1.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/973e146aa3962cff735259238ad5fe134ffcedda\n", "url": "https://github.com/spring-projects/spring-batch/issues/3042", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-30 22:25:53", "closed": "2008-08-07 02:07:04", "commits": {}, "ttf": 129.00027777777777, "commitsDetails": []}, {"title": "Eclipse launch configurations have wrong path to main class [BATCH-534]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-534](https://jira.spring.io/browse/BATCH-534?redirect=false)** and commented\n\nEclipse launch configurations have wrong path to main class\n\n\n---\n\n**Affects:** 1.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d471b84fdaf1c12902a340c6a446f85a8ca132b4\n", "url": "https://github.com/spring-projects/spring-batch/issues/3041", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2008-03-31 02:43:39", "closed": "2008-08-07 02:07:04", "commits": {}, "ttf": 128.00027777777777, "commitsDetails": []}, {"title": " TaskletStep does not call StepExecutionListener.afterStep() [BATCH-535]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-535](https://jira.spring.io/browse/BATCH-535?redirect=false)** and commented\n\n\n---\n\n**Affects:** 1.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/3040", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-31 20:26:49", "closed": "2008-03-31 22:27:30", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "TaskletStep#setStepListeners should be setStepExecutionListeners [BATCH-536]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-536](https://jira.spring.io/browse/BATCH-536?redirect=false)** and commented\n\n\n---\n\n**Affects:** 1.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/3039", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-03-31 22:31:18", "closed": "2008-08-07 02:07:04", "commits": {}, "ttf": 128.00027777777777, "commitsDetails": []}, {"title": "Bad ItemKeyGenerator strategy can lead to infinite loop in retry [BATCH-537]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-537](https://jira.spring.io/browse/BATCH-537?redirect=false)** and commented\n\nBad ItemKeyGenerator strategy can lead to infinite loop in retry. http://forum.springframework.org/showthread.php?t=51766 is a good example.  Part of the problem here is that the skip limit is ignored when retry is in place (that's a bug as well).\n\n\n---\n\n**Affects:** 1.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/b050f95f03cd0e49193f594732dd520f2b22bbfc\n", "url": "https://github.com/spring-projects/spring-batch/issues/3038", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-04-01 01:41:14", "closed": "2008-08-07 02:07:04", "commits": {}, "ttf": 128.00027777777777, "commitsDetails": []}, {"title": "HibernateCursorItemReader close() doesn't close statefull sessions correctly [BATCH-538]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-538](https://jira.spring.io/browse/BATCH-538?redirect=false)** and commented\n\n    public void close(ExecutionContext executionContext) {\n    \tinitialized = false;\n    \tif (cursor != null) {\n    \t\tcursor.close();\n    \t}\n    \tcurrentProcessedRow = 0;\n    \tif (useStatelessSession) {\n    \t\tif (statelessSession != null) {\n    \t\t\tstatelessSession.close();\n    \t\t}\n    \t}\n    \telse {\n    \t\tif (statelessSession != null) {\n    \t\t\tstatelessSession.close();\n    \t\t}\n    \t}\n    }\n\nThe close method above won't close correctly because if useStatelessSession is false, the statelessSession will always been false as well.\n\n\n---\n\n**Affects:** 1.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/0ea4e286e83b13b2cc1395bbccf4ebec32698f9c\n", "url": "https://github.com/spring-projects/spring-batch/issues/3037", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-04-01 05:42:29", "closed": "2008-08-07 02:07:04", "commits": {}, "ttf": 127.00027777777778, "commitsDetails": []}, {"title": "StatefulRetryStepFactoryBean should be SimpleRetryStepFactoryBean [BATCH-543]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-543](https://jira.spring.io/browse/BATCH-543?redirect=false)** and commented\n\nSeems to me that StatefulRetryStepFactoryBean doesn't actually let you configure your retry policy. It always uses a SimpleRetryPolicy  (which, to make things even more confusing, isn't even a stateful RetryPolicy -- it's is a subclass of AbstractStatelessRetryPolicy).\n\nAside from that, I don't think you'd necessarily want to create a separate factory for stateful and stateless retry-able steps -- the user should just be able to inject a policy into the factory and that should be the end of it.\n\nIf I'm misunderstanding, please correct me. Thanks.\n\n\n---\n\n**Affects:** 1.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/3033", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2008-04-01 18:45:11", "closed": "2008-04-06 19:08:04", "commits": {}, "ttf": 5.000277777777778, "commitsDetails": []}, {"title": "RetryTemplate swallows Throwables that are not Exception or Error [BATCH-545]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-545](https://jira.spring.io/browse/BATCH-545?redirect=false)** and commented\n\nThe following code is missing an else clause that would rethrow unclassified throwable as RetryException perhaps:\n\nprivate static void unwrapAndThrow(Throwable ex) throws Exception {\nif (ex instanceof Exception) {\nthrow (Exception) ex;\n}\nelse if (ex instanceof Error) {\nthrow (Error) ex;\n}\n}\n\n\n---\n\n**Affects:** 1.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/840cb48995fc0960267c96176b8f718f10857c58, https://github.com/spring-projects/spring-batch/commit/6111128b576e0ee147ae6d82dbe8cec60801f1a8\n", "url": "https://github.com/spring-projects/spring-batch/issues/3031", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-04-02 00:26:20", "closed": "2008-08-07 02:07:05", "commits": {}, "ttf": 127.00027777777778, "commitsDetails": []}, {"title": "skipping items can lead to an invalidated mark in the ResourceItemReader [BATCH-548]", "body": "**[Gregory Kick](https://jira.spring.io/secure/ViewProfile.jspa?name=gk5885)** opened **[BATCH-548](https://jira.spring.io/browse/BATCH-548?redirect=false)** and commented\n\nsince spring batch does not apply skipped items to the commit interval so a large chunk of skippable items can cause the underlying BufferedItemReader to invalidate its mark.  Then, if reset is invoked, the reader will throw an IOException.\n\n\n---\n\n**Affects:** 1.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/dcca8b74cb37f40dd644643cef1d152bd664342b\n", "url": "https://github.com/spring-projects/spring-batch/issues/3028", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-04-02 02:29:39", "closed": "2008-08-07 02:07:05", "commits": {}, "ttf": 126.00027777777778, "commitsDetails": []}, {"title": "JdbcCursorItemReader will not handle more than one restart [BATCH-549]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-549](https://jira.spring.io/browse/BATCH-549?redirect=false)** and commented\n\nThe JdbcCursorItemReader won't handle restarting more than once, since the BufferedResultSetReader returns only the records it's processed.  An extra unit test for this scenario should be added to the abstract integration tests as well.\n\n\n---\n\n**Affects:** 1.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/3027", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-04-02 02:29:41", "closed": "2008-08-07 02:07:05", "commits": {}, "ttf": 126.00027777777778, "commitsDetails": []}, {"title": "Fix samples-14 CI build (MBeanServer not automatically created in Java 1.4) [BATCH-552]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-552](https://jira.spring.io/browse/BATCH-552?redirect=false)** and commented\n\nFix samples-14 CI build (MBeanServer not automatically created in Java 1.4)\n\n\n---\n\n**Affects:** 1.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/3024", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2008-04-02 22:12:18", "closed": "2008-08-07 02:07:06", "commits": {}, "ttf": 126.00027777777778, "commitsDetails": []}, {"title": "There is no way to set the ChunkOperations ExceptionHandler in any factory bean [BATCH-553]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-553](https://jira.spring.io/browse/BATCH-553?redirect=false)** and commented\n\nThe SimpleStepFactoryBean has a setter for the ExceptionHandler, but it isn't used anywhere.\n\n\n---\n\n**Affects:** 1.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/3023", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-04-03 03:02:17", "closed": "2008-08-07 02:07:06", "commits": {}, "ttf": 125.00027777777778, "commitsDetails": []}, {"title": "TaskletAdapter still maps to CONTINUABLE by default [BATCH-558]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-558](https://jira.spring.io/browse/BATCH-558?redirect=false)** and commented\n\nSummary says it all.\n\n\n---\n\n**Affects:** 1.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d6c79227e7f1ac194bc4938b41f516b6f7e7a938, https://github.com/spring-projects/spring-batch/commit/4a1fb49053e7e25fe98904272df6ea424852c12d\n", "url": "https://github.com/spring-projects/spring-batch/issues/3018", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-04-04 14:38:45", "closed": "2008-08-07 02:07:06", "commits": {}, "ttf": 124.00027777777778, "commitsDetails": []}, {"title": "StepExecutionResourceProxy can not be used with FlatFileItemWriter [BATCH-560]", "body": "**[C.L. Chang](https://jira.spring.io/secure/ViewProfile.jspa?name=itsliang)** opened **[BATCH-560](https://jira.spring.io/browse/BATCH-560?redirect=false)** and commented\n\nStepExecutionResourceProxy can work with FlatFileItemReader, but FlatFileItemWriter. It seems FlatFileItemWriter try to get the real file during its afterPropertiesSet(), which means before StepExecutionResourceProxy.beforeStep() get called. Hence, the \"The delegate resource has not been initialised...\" exception always get thrown by StepExecutionResourceProxy.\n\n\n---\n\n**Affects:** 1.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/3016", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-04-04 23:37:49", "closed": "2008-08-07 02:07:06", "commits": {}, "ttf": 124.00027777777778, "commitsDetails": []}, {"title": "ItemReaderAdapter still implements unnecessary close method [BATCH-561]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-561](https://jira.spring.io/browse/BATCH-561?redirect=false)** and commented\n\nSummary says it all\n\n\n---\n\n**Affects:** 1.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/0eac8f0c6f92337f1a8a81ef2ab84e94132a9cf7\n", "url": "https://github.com/spring-projects/spring-batch/issues/3015", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-04-06 14:45:56", "closed": "2008-08-07 02:07:06", "commits": {}, "ttf": 122.00027777777778, "commitsDetails": []}, {"title": "CompositeSkipListener has method from StepExecutionListener [BATCH-564]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-564](https://jira.spring.io/browse/BATCH-564?redirect=false)** and commented\n\nCompositeSkipListener has method from StepExecutionListener - clearly should be removed as it will never be called.\n\n\n---\n\n**Affects:** 1.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/3013", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-04-06 20:39:26", "closed": "2008-08-07 02:07:07", "commits": {}, "ttf": 122.00027777777778, "commitsDetails": []}, {"title": "Remove reference to Step from StepExecution and reference to Job from JobInstance [BATCH-571]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-571](https://jira.spring.io/browse/BATCH-571?redirect=false)** and commented\n\nRemove reference to Step from StepExecution.  It is only used to get the name of the step, and it doesn't really belong in an Entity (makes it questionably Serializable for example).\n\n\n---\n\n**Affects:** 1.0.0\n\n**Issue Links:**\n- [BATCH-603](https://jira.spring.io/browse/BATCH-603) JobExecution fields could be modified in another Thread and are not volatile\n (_**\"is depended on by\"**_)\n- [BATCH-29](https://jira.spring.io/browse/BATCH-29) All domain entities and scoping abstractions (RepeatContext in particular) need to be Serializable\n (_**\"is depended on by\"**_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/58375f319832cfd114c6e053090a1d6bf46256a1, https://github.com/spring-projects/spring-batch/commit/6ca877c1d9cfb3b9ac2f4b0ba1051fef0a6d232b\n", "url": "https://github.com/spring-projects/spring-batch/issues/3009", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-04-09 18:53:30", "closed": "2008-08-07 02:07:07", "commits": {}, "ttf": 119.00027777777778, "commitsDetails": []}, {"title": "StatefulRetryStepFactoryBean still uses a local variable that refers to item provider [BATCH-542]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-542](https://jira.spring.io/browse/BATCH-542?redirect=false)** and commented\n\nLocal variable itemProviderRetryPolicy should be itemWriterRetryPolicy. No biggie.\n\n\n---\n\n**Affects:** 1.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/27ce423bea8789a8ae8d5be9e2d4853753bcdc21\n", "url": "https://github.com/spring-projects/spring-batch/issues/3006", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-04-01 18:38:01", "closed": "2008-08-07 02:07:04", "commits": {}, "ttf": 127.00027777777778, "commitsDetails": []}, {"title": "The database schema for db2 is incorrect, the constraint name is too long [BATCH-576]", "body": "**[C.L. Chang](https://jira.spring.io/secure/ViewProfile.jspa?name=itsliang)** opened **[BATCH-576](https://jira.spring.io/browse/BATCH-576?redirect=false)** and commented\n\nWhen I load the schema-db2.sql into db2 v9.1, I always get an error message indicates that the constraint name is too long, it must be less than 18 characters.\n\n\n---\n\n**Affects:** 1.0.0\n\n**Attachments:**\n- [BATCH-576.patch](https://jira.spring.io/secure/attachment/14252/BATCH-576.patch) (_2.03 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/4e247e7577623f4006e751a1118f8bb817e5bbec\n", "url": "https://github.com/spring-projects/spring-batch/issues/3003", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-04-10 14:09:58", "closed": "2008-08-07 02:07:07", "commits": {}, "ttf": 118.00027777777778, "commitsDetails": []}, {"title": "JdbcCursorItemReader doesn't work with Derby [BATCH-577]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-577](https://jira.spring.io/browse/BATCH-577?redirect=false)** and commented\n\nUsing embedded Derby driver:\n\njava.sql.SQLException: The 'getRow()' method is only allowed on scroll cursors.\nat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\nat org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)\nat org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)\nat org.apache.derby.impl.jdbc.EmbedResultSet.checkScrollCursor(Unknown Source)\nat org.apache.derby.impl.jdbc.EmbedResultSet.getRow(Unknown Source)\nat org.apache.commons.dbcp.DelegatingResultSet.getRow(DelegatingResultSet.java:331)\nat org.springframework.batch.item.database.JdbcCursorItemReader$BufferredResultSetReader.read(JdbcCursorItemReader.java:475)\n\n\n\n---\n\n**Affects:** 1.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/8326f540a739011b96343a787e4d52ba7b1b5a4e\n", "url": "https://github.com/spring-projects/spring-batch/issues/3002", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-04-10 23:13:40", "closed": "2008-08-07 02:07:07", "commits": {}, "ttf": 118.00027777777778, "commitsDetails": []}, {"title": "Remove redundant IOException from throws declaration in FlatFileIteReader [BATCH-579]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-579](https://jira.spring.io/browse/BATCH-579?redirect=false)** and commented\n\nRemove redundant IOException from throws declaration in FlatFileIteReader\n\n\n---\n\n**Affects:** 1.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/8a023b6c5ca6ef492385d54541e978848f60dd53\n", "url": "https://github.com/spring-projects/spring-batch/issues/3000", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-04-11 08:18:21", "closed": "2008-08-07 02:07:08", "commits": {}, "ttf": 117.00027777777778, "commitsDetails": []}, {"title": "Resize the figures in reference manual [BATCH-582]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-582](https://jira.spring.io/browse/BATCH-582?redirect=false)** and commented\n\nResize the figures in reference manual.  Most of them are too large for the page anyway.  Some even bleed over the right margin and are truncated.\n\nSome of them look like PPT slides - those can easily be resized from the original source document by setting the page size and then re-exporting.\n\n\n---\n\n**Affects:** 1.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2997", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2008-04-11 19:26:58", "closed": "2008-08-07 02:07:08", "commits": {}, "ttf": 117.00027777777778, "commitsDetails": []}, {"title": "Figures missing from PDF docs [BATCH-583]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-583](https://jira.spring.io/browse/BATCH-583?redirect=false)** and commented\n\nFigures missing from PDF docs\n\n\n---\n\n**Affects:** 1.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/87e004bd307cca86bbbdafa45da095487cab1908\n\n1 votes, 1 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/2996", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2008-04-11 19:28:03", "closed": "2009-02-22 20:32:37", "commits": {}, "ttf": 317.0002777777778, "commitsDetails": []}, {"title": "org.springframework.batch.execution package still referenced in documentation [BATCH-562]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-562](https://jira.spring.io/browse/BATCH-562?redirect=false)** and commented\n\nDo a search for the phrase \"org.springframework.batch.execution\" in the execution chapter of the documentation.\n\n\n---\n\n**Affects:** 1.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2994", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2008-04-06 16:56:05", "closed": "2008-08-07 02:07:07", "commits": {}, "ttf": 122.00027777777778, "commitsDetails": []}, {"title": "StatefulRetryStepFactoryBean ignores skip configuration [BATCH-565]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-565](https://jira.spring.io/browse/BATCH-565?redirect=false)** and commented\n\nStatefulRetryStepFactoryBean ignores skip limit and exceptions\n\n\n---\n\n**Affects:** 1.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/b0ba064247def176f33ddb845a4655b7b926353f\n", "url": "https://github.com/spring-projects/spring-batch/issues/2992", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-04-06 21:02:30", "closed": "2008-08-07 02:07:07", "commits": {}, "ttf": 122.00027777777778, "commitsDetails": []}, {"title": "JdbcCursorItemReader should use DataSourceUtils to obtain Connection [BATCH-566]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-566](https://jira.spring.io/browse/BATCH-566?redirect=false)** and commented\n\nThe JdbcCursorItemReader currently called dataSource.getConnection() to get the connection to create the resultSet from.  This means that it will get a separate connection than the one tied to the business transaction.  It should be modified to use DataSourceUtils, so that if a connection is tied to the datasource for a particular thread, it will return that one.\n\n\n---\n\n**Affects:** 1.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2991", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: declined", "type: bug"], "created": "2008-04-07 08:58:31", "closed": "2008-04-07 14:31:17", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "StepExecutionResourceProxy's toString() leads to NPE [BATCH-589]", "body": "**[Gregory Kick](https://jira.spring.io/secure/ViewProfile.jspa?name=gk5885)** opened **[BATCH-589](https://jira.spring.io/browse/BATCH-589?redirect=false)** and commented\n\nSince it is possible to call toString before the delegate is set, toString will throw a NPE.\n\nFor example, when setResource() is invoked on FlatFileItemReader\npublic void setResource(Resource resource) throws IOException {\nthis.resource = resource;\npath = resource.toString();\nif (path.length() > 50) {\npath = path.substring(0, 20) + \"...\" + path.substring(path.length());\n}\n}\n\nyou end up with a NPE when you try to get the path.\n\n\n\n---\n\n**Affects:** 1.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2986", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-04-15 07:32:21", "closed": "2008-08-07 02:07:08", "commits": {}, "ttf": 113.00027777777778, "commitsDetails": []}, {"title": "broken rollback/buffering in JdbcCursorItemReader [BATCH-590]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-590](https://jira.spring.io/browse/BATCH-590?redirect=false)** and commented\n\nThe reader keeps moving  the result set cursor while returning items from the buffer (after rollback). This means after next commit the buffer is cleared and some items from the chunk following the rollbacked chunk are skipped e.g.\n\nread -> 1\ncommit\nread -> 2\nrollback\nread ->2\ncommit\nread -> 4 // 3 was skipped during re-reading 2\n\n\n---\n\n**Affects:** 1.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2985", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-04-15 22:54:08", "closed": "2008-08-07 02:07:08", "commits": {}, "ttf": 113.00027777777778, "commitsDetails": []}, {"title": "Calling update before read on DrivingQueryItemReader causes ArrayIndexOutOfBoundsError [BATCH-593]", "body": "**[Matthew Hargus](https://jira.spring.io/secure/ViewProfile.jspa?name=mhargus)** opened **[BATCH-593](https://jira.spring.io/browse/BATCH-593?redirect=false)** and commented\n\nWhen calling the update method on the DrivingQueryItemReader to save the state to the execution context, an attempt is made to get the current key by doing a get(currentIndex - 1) on the keys list.  Unfortunately, since the read() method has not yet been called, the currentIndex is still at 0, and an ArrayIndexOutOfBoundsError is thrown.\n\n\n---\n\n**Affects:** 1.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2982", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-04-20 17:21:03", "closed": "2008-08-07 02:07:08", "commits": {}, "ttf": 108.00027777777778, "commitsDetails": []}, {"title": "RepeatOperationsInterceptor discards method invocation result [BATCH-594]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-594](https://jira.spring.io/browse/BATCH-594?redirect=false)** and commented\n\nRepeatOperationsInterceptor discards method invocation result.  At least it could return the last non-null value?\n\n\n---\n\n**Affects:** 1.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2981", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-04-21 03:45:48", "closed": "2008-08-07 02:07:08", "commits": {}, "ttf": 107.00027777777778, "commitsDetails": []}, {"title": "Incorrect JDBC type for job parameters of long type [BATCH-595]", "body": "**[Henrik Lundahl](https://jira.spring.io/secure/ViewProfile.jspa?name=henrik.lundahl)** opened **[BATCH-595](https://jira.spring.io/browse/BATCH-595?redirect=false)** and commented\n\nThe JDBC type for long parameters is Types.INTEGER in JdbcJobInstanceDao.insertParameter. This makes the values become truncated to int before they are inserted into the table. The type should probably be Types.BIGINT.\n\n\n---\n\n**Affects:** 1.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/75111fbe01c354bf13d2a3332091ef2a0ca6469a\n", "url": "https://github.com/spring-projects/spring-batch/issues/2980", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-04-21 19:59:14", "closed": "2008-08-07 02:07:08", "commits": {}, "ttf": 107.00027777777778, "commitsDetails": []}, {"title": "with-dependencies jar doesn't include test scoped dependencies [BATCH-600]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-600](https://jira.spring.io/browse/BATCH-600?redirect=false)** and commented\n\nI'm assuming the issue is caused because of test scope, but jars such as easymock and commons-io are missing.\n\n\n---\n\n**Affects:** 1.0.0\n\n**Issue Links:**\n- [BATCH-736](https://jira.spring.io/browse/BATCH-736) problems in spring-batch-dist-1.1.0.RELEASE-with-dependencies.zip\n (_**\"depends on\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2976", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2008-04-23 13:00:39", "closed": "2008-08-07 02:07:09", "commits": {}, "ttf": 105.00027777777778, "commitsDetails": []}, {"title": "JobExecution fields could be modified in another Thread and are not volatile [BATCH-603]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-603](https://jira.spring.io/browse/BATCH-603?redirect=false)** and commented\n\nJobExecution fields could be modified in another Thread and are not volatile.\n\n\n---\n\n**Affects:** 1.0.0\n\n**Issue Links:**\n- [BATCH-571](https://jira.spring.io/browse/BATCH-571) Remove reference to Step from StepExecution and reference to Job from JobInstance\n (_**\"depends on\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2974", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-04-25 01:22:56", "closed": "2008-08-07 02:07:09", "commits": {}, "ttf": 104.00027777777778, "commitsDetails": []}, {"title": "JdbcStepExecutionDao isn't deserializing objects correctly. [BATCH-604]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-604](https://jira.spring.io/browse/BATCH-604?redirect=false)** and commented\n\nI'm not sure how this issue has been there so long.  I checked back and it's been doing the following since I originally wrote it:\n\nexecutionContext.put(key, rs.getObject(\"OBJECT_VAL\"));\n\nWhich will never work, since getObject will just return a Byte[].  Perhaps it's a reflection of usage that no one has caught this?\n\n\n---\n\n**Affects:** 1.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2973", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2008-04-25 07:00:26", "closed": "2008-08-07 02:07:09", "commits": {}, "ttf": 103.00027777777778, "commitsDetails": []}, {"title": "Broken link on the Spring Batch main page (http://static.springframework.org/spring-batch/batch-processing-strategies.html) [BATCH-606]", "body": "**[Jeevan Sunkersett](https://jira.spring.io/secure/ViewProfile.jspa?name=jnsunkersett)** opened **[BATCH-606](https://jira.spring.io/browse/BATCH-606?redirect=false)** and commented\n\nThe Spring Batch home page (http://static.springframework.org/spring-batch/batch-processing-strategies.html) has a list of links on the left hand menu. Under \"Documentation\" item 2 is 'User guide\" which points to a non-existant page :: http://static.springframework.org/spring-batch/spring-batch-docs/reference/index.html\n\nHowever http://static.springframework.org/spring-batch/spring-batch-docs/reference gives me a FTP explorer kind of layout with links to the documentation.\n\n\n---\nNo further details from [BATCH-606](https://jira.spring.io/browse/BATCH-606?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/2970", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2008-04-28 16:41:27", "closed": "2008-08-07 02:07:09", "commits": {}, "ttf": 100.00027777777778, "commitsDetails": []}, {"title": "JobExecutionListener.onInterrupt() is never called by spring batch framework [BATCH-608]", "body": "**[C.L. Chang](https://jira.spring.io/secure/ViewProfile.jspa?name=itsliang)** opened **[BATCH-608](https://jira.spring.io/browse/BATCH-608?redirect=false)** and commented\n\nThe onInterrupt() callback method of JobExecutionListener should be called by SimpleJob once JobInterruptedException is caught\n\n\n---\n\n**Affects:** 1.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/7cbda13d0a365575a1ce16b3ad87a337d06b1f5f, https://github.com/spring-projects/spring-batch/commit/b684aab2db2dc82252e9d13402562ab89b70de38\n\n**Backported to:** [1.0.1](https://github.com/spring-projects/spring-batch/milestone/8?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2968", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2008-04-30 18:54:10", "closed": "2008-08-07 02:07:09", "commits": {}, "ttf": 98.00027777777778, "commitsDetails": []}, {"title": "JdbcCursorItemReader cannot be reopened once closed. [BATCH-610]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-610](https://jira.spring.io/browse/BATCH-610?redirect=false)** and commented\n\nThe JdbcCursorItemReader cannot be reopned because it does a check to ensure the previous resultset is null before opening.  However, the close method only closes the resultset and doesn't set it to null.\n\n\n---\n\n**Affects:** 1.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/ac16b1fa65f095b7b7b715bf0a713e62300be732, https://github.com/spring-projects/spring-batch/commit/6c15a59a3ec93562bc2b44e67a07b338ca289c74, https://github.com/spring-projects/spring-batch/commit/68092549bd8ca11648af2d015f7ad92f9bd9b917, https://github.com/spring-projects/spring-batch/commit/0cf7d45026779c6909557590b7c2dbe796943782\n\n**Backported to:** [1.0.1](https://github.com/spring-projects/spring-batch/milestone/8?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2966", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2008-05-02 01:58:52", "closed": "2008-08-07 02:07:10", "commits": {}, "ttf": 97.00027777777778, "commitsDetails": []}, {"title": "OSGi MANIFEST missing import of org.springframework.beans.factory [BATCH-611]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-611](https://jira.spring.io/browse/BATCH-611?redirect=false)** and commented\n\nOSGi MANIFEST missing import of org.springframework.beans.factory.  There are probably more, but this one stops you from configuring a SimpleJob or a SimpleJobRepository.\n\n\n---\n\n**Affects:** 1.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/0ff7c3bfe94d009feea221518f871243ad2a4a2b\n", "url": "https://github.com/spring-projects/spring-batch/issues/2965", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-05-03 23:13:06", "closed": "2008-08-07 02:07:10", "commits": {}, "ttf": 95.00027777777778, "commitsDetails": []}, {"title": "StaxEventItemReader can run out of memory [BATCH-613]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-613](https://jira.spring.io/browse/BATCH-613?redirect=false)** and commented\n\nStaxEventItemReader buffers XMLEvents, which causes out of memory error if the XML document has a large part that contains no items. This should be resolved by buffering items instead of XMLEvents.\n\n\n---\n\n**Affects:** 1.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/2f17add6b7ab13184fd7df7f9389148fc0e706c5\n", "url": "https://github.com/spring-projects/spring-batch/issues/2963", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-05-05 21:02:34", "closed": "2008-08-07 02:07:10", "commits": {}, "ttf": 93.00027777777778, "commitsDetails": []}, {"title": "NullPointerException by using HibernateCursorItemReader [BATCH-615]", "body": "**[Alexander Berresch](https://jira.spring.io/secure/ViewProfile.jspa?name=aberresch)** opened **[BATCH-615](https://jira.spring.io/browse/BATCH-615?redirect=false)** and commented\n\nI have configured a ItemOrientedStep with an ItemSkipPolicyItemHandler. If I use a stateless Hibernate SessionFactory it works all fine, but when I \u00b4change to a stateful Hibernate SessionFactory it throws an NullPointerException because mark() was called before open(), here is the Stacktrace:\n\nINFO: Job: [SimpleJob: [name=buLiStatisticJob2]] failed with the following parameters: [{}{}{}{}]\njava.lang.NullPointerException\nat org.springframework.batch.item.database.HibernateCursorItemReader.mark(HibernateCursorItemReader.java:185)\nat org.springframework.batch.core.step.item.SimpleItemHandler.mark(SimpleItemHandler.java:108)\nat org.springframework.batch.core.step.item.ItemSkipPolicyItemHandler.mark(ItemSkipPolicyItemHandler.java:223)\nat org.springframework.batch.core.step.item.ItemOrientedStep.execute(ItemOrientedStep.java:267)\nat org.springframework.batch.core.job.SimpleJob.execute(SimpleJob.java:125)\nat org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:86)\nat org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)\nat org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:81)\nat org.kingdeloui.batch.BuLiStatisticJob.testLaunchJob(BuLiStatisticJob.java:31)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\nat java.lang.reflect.Method.invoke(Unknown Source)\nat org.springframework.test.context.junit4.SpringTestMethod.invoke(SpringTestMethod.java:163)\nat org.springframework.test.context.junit4.SpringMethodRoadie.runTestMethod(SpringMethodRoadie.java:233)\nat org.springframework.test.context.junit4.SpringMethodRoadie$RunBeforesThenTestThenAfters.run(SpringMethodRoadie.java:333)\nat org.springframework.test.context.junit4.SpringMethodRoadie.runWithRepetitions(SpringMethodRoadie.java:217)\nat org.springframework.test.context.junit4.SpringMethodRoadie.runTest(SpringMethodRoadie.java:197)\nat org.springframework.test.context.junit4.SpringMethodRoadie.run(SpringMethodRoadie.java:143)\nat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.invokeTestMethod(SpringJUnit4ClassRunner.java:142)\nat org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)\nat org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)\nat org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)\nat org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)\nat org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)\nat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:38)\nat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n\n\n\n---\n\n**Affects:** 1.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2961", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-05-06 05:07:01", "closed": "2008-09-30 22:45:47", "commits": {}, "ttf": 147.00027777777777, "commitsDetails": []}, {"title": "Possible overflow in exit description if a stream.open() throws exception [BATCH-616]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-616](https://jira.spring.io/browse/BATCH-616?redirect=false)** and commented\n\nPossible overflow in exit description if a stream.open() throws exception.  Since we only truncate the exitStatus.description on update, if an exception is thrown before the initial insert would normally happen (ItemOrientedStep.doExecute) then the description could overflow the database column.  Fix would be to truncate on insert as well.\n\n\n---\n\n**Affects:** 1.0.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/879b9fcb127eabf17f198f40a98847001423ac4b\n", "url": "https://github.com/spring-projects/spring-batch/issues/2960", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-05-09 02:04:52", "closed": "2008-08-07 02:07:10", "commits": {}, "ttf": 90.00027777777778, "commitsDetails": []}, {"title": "BATCH/spring-batch-dist-1.0.1.RELEASE-with-dependencies.zip appears to be  missing the dependency jars [BATCH-617]", "body": "**[Kelvin Meeks](https://jira.spring.io/secure/ViewProfile.jspa?name=intltechventures)** opened **[BATCH-617](https://jira.spring.io/browse/BATCH-617?redirect=false)** and commented\n\nThe dependency jar files appear to be missing from the zip.\n\nThe dependency jar file **do** appear to be included in the BATCH/spring-batch-dist-1.0.0.FINAL-with-dependencies.zip\n\n\n---\n\n**Affects:** 1.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2959", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2008-05-12 06:03:51", "closed": "2008-08-07 02:07:10", "commits": {}, "ttf": 86.00027777777778, "commitsDetails": []}, {"title": "DefaultJobParametersConverter does not parse parameters of type double [BATCH-618]", "body": "**[Gaetan Pitteloud](https://jira.spring.io/secure/ViewProfile.jspa?name=gpitteloud)** opened **[BATCH-618](https://jira.spring.io/browse/BATCH-618?redirect=false)** and commented\n\nAlthough JobParameters and JobParametersBuilder support parameters of type double, the DefaultJobParametersConverter does not handle double parameters. Other types (string, date, long) are correctly managed.\n\n\n---\n\n**Affects:** 1.0.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/e40aab476a9fceb39284a1df055922751b32d70e, https://github.com/spring-projects/spring-batch/commit/5dcd2e30625ad3313bbf3dfcc4e0ffe7d715363c, https://github.com/spring-projects/spring-batch/commit/a2d92a7db0ff993165d142b7384e9bd3aece93c9\n", "url": "https://github.com/spring-projects/spring-batch/issues/2958", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-05-13 01:40:15", "closed": "2019-01-29 08:32:33", "commits": {}, "ttf": 3913.0002777777777, "commitsDetails": []}, {"title": "Three typos in the documentation [BATCH-621]", "body": "**[Sanghyuk Jung](https://jira.spring.io/secure/ViewProfile.jspa?name=sanghyuk.jung)** opened **[BATCH-621](https://jira.spring.io/browse/BATCH-621?redirect=false)** and commented\n\nIn my view, I see three typos as following.\n\n1. [url]http://static.springframework.org/spring-batch/spring-batch-docs/reference/html/apa.html#d0e5062[/url]\n\n   A.2. Item Writers\n   ItemWriterItemWriter -> DelegatingItemWriter\n\n2. [url]http://static.springframework.org/spring-batch/spring-batch-docs/reference/html/spring-batch-infrastructure.html#d0e1300[/url]\n\n   itemReader.setResource = new FileSystemResource(\"resources/players.csv\");\n   ->\n   itemReader.setResource(new FileSystemResource(\"resources/players.csv\"));\n\n3. [url]http://static.springframework.org/spring-batch/spring-batch-docs/reference/html/spring-batch-infrastructure.html#d0e1349[/url]\n\nFlatFileItemReader itemReader = new FlatFileItemReader();\nitemReader.setResource = new FileSystemResource(\"resources/players.csv\");\n//DelimitedLineTokenizer defaults to comma as it's delimiter\nitemReader.setLineTokenizer(new DelimitedLineTokenizer());\nitemReader.setFieldSetMapper(new PlayerFieldSetMapper());\nitemReader.read();\n\nI tested this code, but I got exceptions. After inserting the following codes before last line, it works successfully.\n\n\" itemReader.open(new ExecutionContext());\"\n\n\n---\n\n**Affects:** 1.0.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/e43a5984ad40607a8b8e89491c99eebcd529ad13\n", "url": "https://github.com/spring-projects/spring-batch/issues/2955", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2008-05-13 19:30:52", "closed": "2008-08-07 02:07:11", "commits": {}, "ttf": 85.00027777777778, "commitsDetails": []}, {"title": "StatefulRetryStepFactoryBean causes item count to be lost in database [BATCH-623]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-623](https://jira.spring.io/browse/BATCH-623?redirect=false)** and commented\n\nStatefulRetryStepFactoryBean causes item count to be lost in database\n\n\n---\n\n**Affects:** 1.0.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/83e3e48762749ab8ec279f8f0bfec582467ffe8a\n", "url": "https://github.com/spring-projects/spring-batch/issues/2953", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-05-14 01:09:57", "closed": "2008-08-07 02:07:11", "commits": {}, "ttf": 85.00027777777778, "commitsDetails": []}, {"title": "SkipListener#onSkipInWrite(..) called multiple times for the same item and not called without rollback [BATCH-625]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-625](https://jira.spring.io/browse/BATCH-625?redirect=false)** and commented\n\nSkipListener#onSkipInWrite(..) is called every time the problematic item is encountered i.e. multiple times in case of rollbacks. It should instead be called once per skipped item (i.e. the listener should be called when the write error was encountered and the item was marked for future skipping).\n\n\n---\n\n**Affects:** 1.0.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/307054d61587ae0b6bfa42a458d9e4f6e8cc036d\n", "url": "https://github.com/spring-projects/spring-batch/issues/2951", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-05-14 22:29:29", "closed": "2008-08-07 02:07:11", "commits": {}, "ttf": 84.00027777777778, "commitsDetails": []}, {"title": "Fix code snippet for In-Memory Repository [BATCH-627]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-627](https://jira.spring.io/browse/BATCH-627?redirect=false)** and commented\n\nThe code snippet showing how to setup the in memory repository is incorrect, the following should be used instead:\n\n\\<bean id=\"simpleJobRepository\" class=\"org.springframework.batch.core.repository.support.SimpleJobRepository\">\n\t\t\\<constructor-arg ref=\"mapJobInstanceDao\" />\n\t    \\<constructor-arg ref=\"mapJobExecutionDao\" />\n\t    \\<constructor-arg ref=\"mapStepExecutionDao\" />\n\t\\</bean>\n\n    <bean id=\"mapJobInstanceDao\"\n            class=\"org.springframework.batch.core.repository.dao.MapJobInstanceDao\" />\n    \n    <bean id=\"mapJobExecutionDao\"\n            class=\"org.springframework.batch.core.repository.dao.MapJobExecutionDao\" />\n    \n    <bean id=\"mapStepExecutionDao\"\n            class=\"org.springframework.batch.core.repository.dao.MapStepExecutionDao\" />\n\n\n\n---\n\n**Affects:** 1.0.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/f75bc3f376cadd0432435da70a3003a0725309c9\n", "url": "https://github.com/spring-projects/spring-batch/issues/2949", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2008-05-15 07:24:06", "closed": "2008-08-07 02:07:11", "commits": {}, "ttf": 83.00027777777778, "commitsDetails": []}, {"title": "site download page still says 1.0.0 is newest release [BATCH-634]", "body": "**[Douglas C. Kaminsky](https://jira.spring.io/secure/ViewProfile.jspa?name=douglas.c.kaminsky)** opened **[BATCH-634](https://jira.spring.io/browse/BATCH-634?redirect=false)** and commented\n\nhttp://static.springframework.org/spring-batch/downloads.html\n\n\n---\n\n**Affects:** 1.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2943", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2008-05-19 08:15:19", "closed": "2008-10-01 00:29:06", "commits": {}, "ttf": 134.00027777777777, "commitsDetails": []}, {"title": "Value too large for column \"BATCH_STEP_EXECUTION\".\"EXIT_MESSAGE\" (actual: 2677, maximum: 2500) [BATCH-637]", "body": "**[Albert Espelt Pons](https://jira.spring.io/secure/ViewProfile.jspa?name=alespo)** opened **[BATCH-637](https://jira.spring.io/browse/BATCH-637?redirect=false)** and commented\n\nGetting the following exception\n\n[CLT-BATCH] - [21-05-08 14:08:05] - 2669 [main] ERROR es.cofidis.clt.test.PutAsnef  - testLaunchJob() - Encountered an error saving batch meta data.\norg.springframework.batch.core.UnexpectedJobExecutionException: Encountered an error saving batch meta data.\nat org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:218)\nat org.springframework.batch.core.job.SimpleJob.execute(SimpleJob.java:125)\nat org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:86)\nat org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)\nat org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:81)\nat es.cofidis.batch.util.AbstractJob.testLaunchJob(AbstractJob.java:48)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:585)\nat junit.framework.TestCase.runTest(TestCase.java:168)\nat junit.framework.TestCase.runBare(TestCase.java:134)\nat org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:76)\nat junit.framework.TestResult$1.protect(TestResult.java:110)\nat junit.framework.TestResult.runProtected(TestResult.java:128)\nat junit.framework.TestResult.run(TestResult.java:113)\nat junit.framework.TestCase.run(TestCase.java:124)\nat junit.framework.TestSuite.runTest(TestSuite.java:232)\nat junit.framework.TestSuite.run(TestSuite.java:227)\nat org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:81)\nat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:38)\nat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\nCaused by: org.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL [INSERT into BATCH_STEP_EXECUTION(STEP_EXECUTION_ID, VERSION, STEP_NAME, JOB_EXECUTION_ID, START_TIME, END_TIME, STATUS, COMMIT_COUNT, ITEM_COUNT, CONTINUABLE, EXIT_CODE, EXIT_MESSAGE) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]; SQL state [72000]; error code [12899]; ORA-12899: el valor es demasiado grande para la columna \"SPRNG\".\"BATCH_STEP_EXECUTION\".\"EXIT_MESSAGE\" (real: 2677, m\u00e1ximo: 2500)\n; nested exception is java.sql.SQLException: ORA-12899: el valor es demasiado grande para la columna \"SPRNG\".\"BATCH_STEP_EXECUTION\".\"EXIT_MESSAGE\" (real: 2677, m\u00e1ximo: 2500)\n\n    at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.translate(SQLStateSQLExceptionTranslator.java:121)\n    at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.translate(SQLErrorCodeSQLExceptionTranslator.java:322)\n    at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:582)\n    at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:767)\n    at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:825)\n    at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:829)\n    at org.springframework.batch.core.repository.dao.JdbcStepExecutionDao.saveStepExecution(JdbcStepExecutionDao.java:189)\n    at org.springframework.batch.core.repository.support.SimpleJobRepository.saveOrUpdate(SimpleJobRepository.java:235)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:585)\n    at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:301)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:182)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:149)\n    at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:106)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)\n    at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:89)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)\n    at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204)\n    at $Proxy0.saveOrUpdate(Unknown Source)\n    at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:201)\n    ... 25 more\n\nCaused by: java.sql.SQLException: ORA-12899: el valor es demasiado grande para la columna \"SPRNG\".\"BATCH_STEP_EXECUTION\".\"EXIT_MESSAGE\" (real: 2677, m\u00e1ximo: 2500)\n\n    at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:112)\n    at oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:331)\n    at oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:288)\n    at oracle.jdbc.driver.T4C8Oall.receive(T4C8Oall.java:745)\n    at oracle.jdbc.driver.T4CPreparedStatement.doOall8(T4CPreparedStatement.java:216)\n    at oracle.jdbc.driver.T4CPreparedStatement.executeForRows(T4CPreparedStatement.java:966)\n    at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:1170)\n    at oracle.jdbc.driver.OraclePreparedStatement.executeInternal(OraclePreparedStatement.java:3339)\n    at oracle.jdbc.driver.OraclePreparedStatement.executeUpdate(OraclePreparedStatement.java:3423)\n    at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:773)\n    at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:566)\n    ... 44 more\n\n\n\n---\n\n**Affects:** 1.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2940", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-05-20 23:48:09", "closed": "2008-08-07 02:07:11", "commits": {}, "ttf": 78.00027777777778, "commitsDetails": []}, {"title": "ItemSkipPolicyItemHandler does not count items [BATCH-638]", "body": "**[Michel Zanini](https://jira.spring.io/secure/ViewProfile.jspa?name=michelz)** opened **[BATCH-638](https://jira.spring.io/browse/BATCH-638?redirect=false)** and commented\n\nIn 1.0.1 release, the resolution of  \"http://jira.springframework.org/browse/BATCH-531\" issue causes another issue.\n\nThe item count has move to SimpleItemHandler. The write method calls contribution.incrementItemCount().\n\nThe problem is in ItemSkipPolicyItemHandler, subclass of SimpleItemHandler. This class doesn't call incrementItemCount.\n\nIn my application, using 1.0.0 release item count ends with one number more than total items, and in 1.0.1, ends always with 0 (zero).\n\n\n---\n\n**Affects:** 1.0.1\n\n**Attachments:**\n- [patch.txt](https://jira.spring.io/secure/attachment/14080/patch.txt) (_747 bytes_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/c5992c98336335bb97d61326bf6108d2c79c90d9\n", "url": "https://github.com/spring-projects/spring-batch/issues/2939", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-05-21 04:14:53", "closed": "2008-08-07 02:07:12", "commits": {}, "ttf": 77.00027777777778, "commitsDetails": []}, {"title": "mvc-step-by-step doc link is broken [BATCH-642]", "body": "**[Owen Corpening](https://jira.spring.io/secure/ViewProfile.jspa?name=ocorpening)** opened **[BATCH-642](https://jira.spring.io/browse/BATCH-642?redirect=false)** and commented\n\nhttp://www.springframework..org/docs/MVC-step-by-step/Spring-MVC-step-by-step-Part-1.html\n\nNot Found error\n\nWorked yesterday\n\nI was smack in the middle of the tutorial and it was really helpful.\n\n\n---\nNo further details from [BATCH-642](https://jira.spring.io/browse/BATCH-642?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/2935", "user": "spring-issuemaster", "labels": ["in: documentation", "status: duplicate", "type: bug"], "created": "2008-05-26 02:39:20", "closed": "2008-05-26 02:58:27", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Use FORWARD_ONLY as scroll mode in HibernateCursorItemReader [BATCH-650]", "body": "**[Johannes Rauber](https://jira.spring.io/secure/ViewProfile.jspa?name=hessenmob)** opened **[BATCH-650](https://jira.spring.io/browse/BATCH-650?redirect=false)** and commented\n\nWhen using a HibernateCursorItemReader with the thin Oracle Database Driver hughe amounts of date lead to a Memory Exception. The current implementation doesn't set the cursor that is opened to FORWARD_ONLY. FORWARD_ONLY disables the caching in the driver, otherwise every row that is fetched is stored in the drivers caching mechanism.\n\nA possible fix for this issue is:\n\nif (useStatelessSession) {\nstatelessSession = sessionFactory.openStatelessSession();\ncursor = statelessSession.createQuery(queryString).scroll(FORWARD_ONLY);\n} else {\nstatefulSession = sessionFactory.openSession();\ncursor = statefulSession.createQuery(queryString).scroll(FORWARD_ONLY);\n}\n\n\n---\n\n**Affects:** 1.0.0, 1.0.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d377e4c5c3fea163ddf677d281a20e616fe62ceb\n", "url": "https://github.com/spring-projects/spring-batch/issues/2927", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-06-03 03:45:22", "closed": "2008-08-07 02:07:12", "commits": {}, "ttf": 64.00027777777778, "commitsDetails": []}, {"title": "buffered readers don't handle volatile commit interval [BATCH-651]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-651](https://jira.spring.io/browse/BATCH-651?redirect=false)** and commented\n\nIf commit interval is decreased after rollback buffered readers simply clear the item buffer on mark() - this happens when used e.g. with batchUpdateWriter which causes commits on each item after rollback.\n\nAll buffered readers should be consolidated not to duplicate the item buffering logic (common superclass is probably the way to go until [BATCH-592](https://jira.spring.io/browse/BATCH-592) can be implemented).\n\n\n---\n\n**Affects:** 1.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2926", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-06-04 00:56:27", "closed": "2008-08-07 02:07:12", "commits": {}, "ttf": 64.00027777777778, "commitsDetails": []}, {"title": "Job control should support shutdown hook on kill. [BATCH-652]", "body": "**[Wayne Lund](https://jira.spring.io/secure/ViewProfile.jspa?name=wxlund)** opened **[BATCH-652](https://jira.spring.io/browse/BATCH-652?redirect=false)** and commented\n\n[BATCH-453](https://jira.spring.io/browse/BATCH-453) was moved to 2.0 but it was determined that making sure that the shutdown-hook would catch kill-9 should be supported for 1.1.\n\n\n---\n\n**Affects:** 1.1.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2925", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: declined", "type: bug"], "created": "2008-06-04 01:43:38", "closed": "2008-06-24 02:13:28", "commits": {}, "ttf": 20.00027777777778, "commitsDetails": []}, {"title": "Ensure best efforts are made to commit StepExecution when commit fails [BATCH-654]", "body": "**[Telematica](https://jira.spring.io/secure/ViewProfile.jspa?name=telematica)** opened **[BATCH-654](https://jira.spring.io/browse/BATCH-654?redirect=false)** and commented\n\nWhen the commit operation fails in an ItemOrientedStep, the writing of the Spring Batch metadata fails (trying to write the rollback information).\n\nWhen trying to commit the transaction, SB has already set the information it's about to persist in the StepExecutionContext. Then, in another transaction, SB wants to store that a rollback ocurred. Nevertheless, SB hasn't read the current persisted state from the database, so it still has the Version it read when trying to commit. That's why we think it fails.\n\nFurthermore, even if it succeeded, the persisted information wouldn't be accurate, because, as I've pointed out, the StepExecutionContext hasn't been reset.\n\n\n---\n\n**Affects:** 1.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2923", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-06-05 02:31:58", "closed": "2008-08-07 02:07:12", "commits": {}, "ttf": 62.000277777777775, "commitsDetails": []}, {"title": "Correct error is not caught in \"JdbcCursorItemReader.open\" when SQL has the wrong column name [BATCH-655]", "body": "**[Hiren Shah](https://jira.spring.io/secure/ViewProfile.jspa?name=springforever)** opened **[BATCH-655](https://jira.spring.io/browse/BATCH-655?redirect=false)** and commented\n\nOn setting values for the reader-sql using StepExecutionPreparedStatementSetter, I am getting the following error:\n\n\"org.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL [INSERT into BATCH_STEP_EXECUTION(STEP_EXECUTION_ID, VERSION, STEP_NAME, JOB_EXECUTION_ID, START_TIME, END_TIME, STATUS, COMMIT_COUNT, ITEM_COUNT, CONTINUABLE, EXIT_CODE, EXIT_MESSAGE) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]; SQL state [72000]; error code [1461]; ORA-01461: can bind a LONG value only for insert into a LONG column\n; nested exception is java.sql.SQLException: ORA-01461: can bind a LONG value only for insert into a LONG column\"\n\nHowever, the actual problem is with the sql. Sql, has the wrong column name.\n\n\n---\n\n**Affects:** 1.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2922", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: duplicate", "type: bug"], "created": "2008-06-06 02:38:05", "closed": "2008-06-24 02:09:29", "commits": {}, "ttf": 17.00027777777778, "commitsDetails": []}, {"title": "Auto-create channels must apply to sources, targets and endpoints consistently [BATCH-656]", "body": "**[Marius Bogoevici](https://jira.spring.io/secure/ViewProfile.jspa?name=mbogoevici)** opened **[BATCH-656](https://jira.spring.io/browse/BATCH-656?redirect=false)** and commented\n\nEssentially, wherever there is a reference to a channel, this must be resolved in the favor of the client if the MessageBus is in auto-create mode.\n\nA simple solution is defining a PropertyEditor for the MessageChannel type who will defer to MessageBus.lookupChannel\n\n\n---\nNo further details from [BATCH-656](https://jira.spring.io/browse/BATCH-656?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/2921", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2008-06-06 09:50:48", "closed": "2008-06-07 06:52:13", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": " SimpleStepFactoryBean#setExceptionHandler() not working [BATCH-660]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-660](https://jira.spring.io/browse/BATCH-660?redirect=false)** and commented\n\nCopied from http://forum.springframework.org/showthread.php?t=55706\n\nIt appears that while SkipLimitFactoryBean and StatefulRetryFactoryBean propogate the ExceptionHandler set in setExceptionHandler(), SimpleStepFactoryBean does not. The resulting ItemOrientedStep does not have anything other than DefaultExceptionHandler.\n\nI believe that a call to ItemOrientedStep#setExceptionHandler() within SimpleStepFactoryBean#applyConfiguration() will fix the issue.\n\n\n---\n\n**Affects:** 1.0.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/40594d75e7b90f00d8502e2aace5b4485c59eb92\n", "url": "https://github.com/spring-projects/spring-batch/issues/2917", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-06-10 19:03:51", "closed": "2008-08-07 02:07:12", "commits": {}, "ttf": 57.000277777777775, "commitsDetails": []}, {"title": "broken job interruption logic [BATCH-661]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-661](https://jira.spring.io/browse/BATCH-661?redirect=false)** and commented\n\nCurrenlty jobExecution#stop() is implemented by setting the \"terminateOnly\" flag on all step executions created so far. Therefore in case stop() is called e.g. in StepListener#afterStep(..) it has no effect on the following steps. Also the terminateOnly flag is checked only in ItemOrientedStep so a job consisting of arbitrary number of TaskletSteps can't be stopped unless the Tasklet implementations support interruption.\n\n\n---\n\n**Affects:** 1.0.1\n\n**Issue Links:**\n- [BATCH-401](https://jira.spring.io/browse/BATCH-401) aspect-oriented handling of job interruption logic\n\n", "url": "https://github.com/spring-projects/spring-batch/issues/2916", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-06-10 19:26:14", "closed": "2008-08-07 02:07:13", "commits": {}, "ttf": 57.000277777777775, "commitsDetails": []}, {"title": "MultiResourceItemReader doesn't restart correctly after multi-resource rollback [BATCH-663]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-663](https://jira.spring.io/browse/BATCH-663?redirect=false)** and commented\n\nMultiResourceItemReader needs to track the last marked resource and delegates position within that resource to restart correctly after multi-resource rollback. After rollback it also needs to handle possible shortening of the commit interval.\n\n\n---\n\n**Affects:** 1.1.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2914", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-06-10 23:30:09", "closed": "2008-08-07 02:07:13", "commits": {}, "ttf": 57.000277777777775, "commitsDetails": []}, {"title": "ChunkListeners are registered on stepOperations in RepeatOperationsStepFactoryBean - should be chunkOperations [BATCH-665]", "body": "**[Gaetan Pitteloud](https://jira.spring.io/secure/ViewProfile.jspa?name=gpitteloud)** opened **[BATCH-665](https://jira.spring.io/browse/BATCH-665?redirect=false)** and commented\n\nIn RepeatOperationsStepFactoryBean.applyConfiguration(), the chunk listeners are registered on the stepOperations, which means they are executed when the step starts and when it ends, which seems to be wrong : as name and javadoc mentions it, ChunkListeners are executed around a chunk, i.e. inside the transaction boundaries.\n\nThe other step factory bean SimpleStepFactoryBean correctly registers the chunk listeners on the chunkOperations.\n\n\n---\n\n**Affects:** 1.0.1\n\n**Issue Links:**\n- [BATCH-666](https://jira.spring.io/browse/BATCH-666) consolidate duplications in SimpleStepFactoryBean and RepeatOperationsStepFactoryBean\n\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/446f55072d1a2a364f17b03df97a642d5c55778d\n", "url": "https://github.com/spring-projects/spring-batch/issues/2911", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-06-11 01:14:30", "closed": "2008-08-07 02:07:13", "commits": {}, "ttf": 57.000277777777775, "commitsDetails": []}, {"title": "Documentation on savestate for ItemReaders and ItemWriters [BATCH-667]", "body": "**[Wayne Lund](https://jira.spring.io/secure/ViewProfile.jspa?name=wxlund)** opened **[BATCH-667](https://jira.spring.io/browse/BATCH-667?redirect=false)** and commented\n\nA question came up in the forum today that the docs did not answer. See http://forum.springframework.org/showthread.php?t=56038. DrivingQueryItemReader and KeyCollector are documented in section 8.2 but omits the information in both the javadocs and documentation on the use of setSaveState=true to make a job \"CONTINUABLE\".\n\n\n---\n\n**Affects:** 1.0.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/dbd859f10665a9f4cd9717977a6f307677c92564\n", "url": "https://github.com/spring-projects/spring-batch/issues/2909", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2008-06-17 09:18:53", "closed": "2008-08-07 02:07:13", "commits": {}, "ttf": 50.000277777777775, "commitsDetails": []}, {"title": "Automapping FieldSets to Domain Objects - sample code bugs [BATCH-678]", "body": "**[Paul Hill](https://jira.spring.io/secure/ViewProfile.jspa?name=phill)** opened **[BATCH-678](https://jira.spring.io/browse/BATCH-678?redirect=false)** and commented\n\nIn Spring Batch 1.0 Spring Batch - Reference Documentation\np20 (PDF)\n\n[...]\nThe FieldSetMapper configuration looks like the following\n\n\\<bean id=\"fieldSetMapper\"\nclass=\"org.springframework.batch.io.file.mapping.BeanWrapperFieldSetMapper\">\n\\<property name=\"prototypeBeanName\" value=\"player\" />\n\\</bean>\n\\<bean id=\"person\"\nclass=\"org.springframework.batch.sample.domain.Player\"\nscope=\"prototype\" />\n[...]\n\nTwo problems found:\n\n1. There was probably some late refactoring of packages which didn't get reflected in the documentation.\n\nThe class path for BeanWrapperFieldSetWrapper in the final jar is currently:\norg.springframework.batch.item.file.mapping.BeanWrapperFieldSetWrapper\n\n2. The prototypeBeanName property value doesn't match the provided\n   bean ID.\n\n\\<property name=\"prototypeBeanName\" value=\"player\" />\n\nProbably ought to change the ID of bean to match by changing the bean name.\n\n<bean id=\"player\" ...\n\n\n\n---\n\n**Affects:** 1.0.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/bf4a3f91d2ea85d8c4ec0e9d9b6bafecc3a0bd0b\n", "url": "https://github.com/spring-projects/spring-batch/issues/2898", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2008-06-18 05:54:42", "closed": "2008-08-07 02:07:14", "commits": {}, "ttf": 49.000277777777775, "commitsDetails": []}, {"title": "Job Level RollBack [BATCH-681]", "body": "**[V.Jayasimhan](https://jira.spring.io/secure/ViewProfile.jspa?name=jayasimhan)** opened **[BATCH-681](https://jira.spring.io/browse/BATCH-681?redirect=false)** and commented\n\nJob Level Rollback is not happening when transaction is added to Job.execute() method.\nThis is the configuration\n\n\\<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n\\<beans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:aop=\"http://www.springframework.org/schema/aop\"\nxmlns:tx=\"http://www.springframework.org/schema/tx\"\nxmlns:p=\"http://www.springframework.org/schema/p\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"\nhttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\nhttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd\nhttp://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd\">\n\n    <description>Example for Hibernate integration.</description>\n    \n    <bean id=\"hibernateJob\" parent=\"simpleJob\">\n    \t<!-- set restartable=false so that this job can be used by more than one test -->\n    \t<property name=\"restartable\" value=\"true\"  />\n    \t<property name=\"steps\">\n    \t\t<list>\n    \t\t<bean id=\"step1\" parent=\"simpleStep\">\n    \t\t\t<!--<property name=\"skipLimit\" value=\"0\" />-->\n    \t\t\t<property name=\"itemReader\" ref=\"hibernateItemReader\" />\n    \t\t\t<property name=\"itemWriter\" ref=\"hibernateItemWriter\" />\n    \t\t\t<property name=\"commitInterval\" value=\"100000\" />\n    \t\t\t<!--<property name=\"skippableExceptionClasses\"\tvalue=\"java.lang.Exception\"/>-->\n    \t\t\t<property name=\"listeners\" ref=\"stepListener\" /> \n    \t\t\t<!--<property name=\"exceptionHandler\" ref=\"exceptionHandler\" />-->\n    \t\t\t<property name=\"allowStartIfComplete\" value=\"true\" />\n    \t\t</bean>\n    \t\t<bean id=\"step2\" parent=\"simpleStep\">\n    \t\t\t<!--<property name=\"skipLimit\" value=\"0\" />-->\n    \t\t\t<property name=\"itemReader\" ref=\"hibernateItemReader2\" />\n    \t\t\t<property name=\"itemWriter\" ref=\"hibernateItemWriter\" />\n    \t\t\t<property name=\"commitInterval\" value=\"100000\" />\n    \t\t\t<!--<property name=\"skippableExceptionClasses\"\tvalue=\"java.lang.Exception\"/>-->\n    \t\t\t<property name=\"listeners\" ref=\"stepListener\" /> \n    \t\t\t<!--<property name=\"exceptionHandler\" ref=\"exceptionHandler\" />-->\n    \t\t\t<property name=\"allowStartIfComplete\" value=\"true\" />\n    \t\t</bean>\t\t\t\n    \t\t</list>\n    \t</property>\n    </bean>\n    \n    \n    <!-- This is a framework class that needs a delegate and also needs to be registered as a RepeatInterceptor in the chunk -->\n    <bean id=\"hibernateItemWriter\"\n    \tclass=\"org.springframework.batch.item.database.HibernateAwareItemWriter\">\n    \t<property name=\"sessionFactory\" ref=\"sessionFactory\" />\n    \t<property name=\"delegate\" ref=\"hibernateCreditWriter\" />\n    </bean>\n    \n    <bean id=\"hibernateCreditWriter\"\n    \tclass=\"com.met.ib.upi.batch.item.processor.CustomerCreditProcessor\">\n    \t<property name=\"customerCreditDao\" ref=\"customerCreditDao\" />\n    \t<property name=\"readerDAO\" ref=\"readerDAO\" />\n    \t<property name=\"hibernateBO\" ref=\"hibernateBO\"/>\n    </bean>\n    <bean id=\"hibernateBO\"\n    \tclass=\"com.met.ib.upi.batch.bo.HibernateTestBO\">\n    </bean>\n    <bean id=\"customerCreditDao\"\n    \tclass=\"com.met.ib.upi.batch.dao.HibernateCreditWriter\">\n    \t<property name=\"sessionFactory\" ref=\"sessionFactory\" />\n    </bean>\n    <bean id=\"readerDAO\"\n    \tclass=\"com.met.ib.upi.batch.item.reader.EPIReader\">\n    \t<property name=\"sessionFactory\" ref=\"sessionFactory\" />\n    </bean>\n    <bean id=\"hibernateItemReader\"\n    \tclass=\"org.springframework.batch.item.database.HibernateCursorItemReader\">\n    \t<property name=\"queryString\" value=\"from ProdTranStgModel\" />\n    \t<property name=\"sessionFactory\" ref=\"sessionFactory\" />\n    </bean>\n    <bean id=\"hibernateItemReader2\"\n    \tclass=\"org.springframework.batch.item.database.HibernateCursorItemReader\">\n    \t<property name=\"queryString\" value=\"from ProdTranStgModel\" />\n    \t<property name=\"sessionFactory\" ref=\"sessionFactory\" />\n    </bean>\t\n    <bean id=\"exceptionHandler\"\n    \tclass=\"com.met.ib.upi.batch.exceptionHandler.StepExceptionHandler\">\n    </bean>\n    <bean id=\"stepListener\"\n    \tclass=\"com.met.ib.upi.batch.listener.StepExceptionListener\">\n    </bean>\n\n<tx:advice id=txJobAdvice transaction-manager=\"transactionManager\">\n\n\\<!-- the transactional semantics... -->\n\n<tx:attributes>\n<tx:method name=\"execute*\" rollback-for=\"java.lang.Exception\" propagation=\"REQUIRES_NEW\" />\n\n\\<!-- other methods use the default transaction settings (see below) -->\n\n<tx:method name=\"*\"/>\n</tx:attributes>\n</tx:advice>\n\n\\<!---- ensure that the above transactional advice runs for any execution\nof an operation defined by the FooService interface -->\\<aop:config>\n<aop:pointcut id=\"jobOperation\" expression=\"execution(* org.springframework.batch.core.\\*.\\*(..))\"/>\n<aop:advisor advice-ref=\"txJobAdvice\" pointcut-ref=\"jobOperation\"/>   \n</aop:config> \t\n\\</beans>\n\n\n---\n\n**Affects:** 1.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2895", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2008-06-22 17:00:27", "closed": "2008-06-22 21:49:02", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Use SoftReference and/or expiry to store entries in RetryContextCache implementation(s) [BATCH-682]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-682](https://jira.spring.io/browse/BATCH-682?redirect=false)** and commented\n\nUse SoftReference and/or expiry to store entries in RetryContextCache implementation(s).  If the map-based cache is used in a multi-VM environment, stale cache entries can easily be accumulated inadvertently because the successful processing of a previously failed item happened on a different node than the original failure.  A good start would be to use SoftReferences in the map-based implementation.  Expiry and more complicated features would be best left to mature cache technologies, and custom implementations of the RetryContextCache interface.\n\n\n---\n\n**Affects:** 1.0.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d30e74c35b25d6176e474c9433239f665c175b82\n", "url": "https://github.com/spring-projects/spring-batch/issues/2894", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-06-22 20:35:12", "closed": "2008-09-30 21:53:56", "commits": {}, "ttf": 100.00027777777778, "commitsDetails": []}, {"title": "Rebuild site and republish [BATCH-684]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-684](https://jira.spring.io/browse/BATCH-684?redirect=false)** and commented\n\nRebuild site and republish. Save the old site and create a link to it.\n\n\n---\n\n**Affects:** 1.1.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2892", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2008-06-22 22:23:49", "closed": "2008-08-07 02:07:14", "commits": {}, "ttf": 45.000277777777775, "commitsDetails": []}, {"title": "Chunk Listeners seems incorrectly set in RepeatOperationStepFactoryBean [BATCH-686]", "body": "**[Adrian Shum](https://jira.spring.io/secure/ViewProfile.jspa?name=adrianshum)** opened **[BATCH-686](https://jira.spring.io/browse/BATCH-686?redirect=false)** and commented\n\napplyConfiguration() of RepeatOperationStepFactoryBean seems setup chunk listener incorrectly.  Original Code:\nRepeatOperations stepOperations = helper.addChunkListeners(this.stepOperations, listeners);\n\nI think it should be (after looking at SimpleStepFactoryBean as reference)\nRepeatOperations chunkOperations = helper.addChunkListeners(this.chunkOperations, listeners);\n\n\n---\n\n**Affects:** 1.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2890", "user": "spring-issuemaster", "labels": ["status: duplicate", "type: bug"], "created": "2008-06-23 13:58:33", "closed": "2008-10-01 00:15:09", "commits": {}, "ttf": 99.00027777777778, "commitsDetails": []}, {"title": "BatchUpdateItemWriter should fail if any of the statements does not update any rows (at least by default). [BATCH-687]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-687](https://jira.spring.io/browse/BATCH-687?redirect=false)** and commented\n\nBatchUpdateItemWriter should fail if any of the statements does not update any rows (at least by default).\n\n\n---\n\n**Affects:** 1.0.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/786de6f5a87914cc87f570c0bfec3624b2e8ab6d\n", "url": "https://github.com/spring-projects/spring-batch/issues/2889", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-06-24 22:41:57", "closed": "2008-08-07 02:07:14", "commits": {}, "ttf": 43.000277777777775, "commitsDetails": []}, {"title": "Refactor samples along domain contours [BATCH-693]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-693](https://jira.spring.io/browse/BATCH-693?redirect=false)** and commented\n\nIt has always bugged me that the samples have technical packaging.  It is really hard to isolate the individual domains (e.g. football).\n\n\n---\n\n**Affects:** 1.1.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2883", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2008-06-27 03:19:16", "closed": "2008-09-23 11:24:02", "commits": {}, "ttf": 88.00027777777778, "commitsDetails": []}, {"title": "JdbcPlayerDaoIntegrationTests fail due to rows added to customer table by other test [BATCH-696]", "body": "**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[BATCH-696](https://jira.spring.io/browse/BATCH-696?redirect=false)** and commented\n\nThe JdbcPlayerDaoIntegrationTests fail due to rows added to customer table by other tests.  The tests expect an empty table but it contains other rows:\nID: AbduKa00\nID: AbduRa00\nID: AberWa00\nID: AbraDa00\nID: AdamBo00\n\n\n\n---\n\n**Attachments:**\n- [BATCH-696.patch](https://jira.spring.io/secure/attachment/14278/BATCH-696.patch) (_1.45 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/c82bebcafc6065a75cc847bcfbc2be0afe8037f5\n", "url": "https://github.com/spring-projects/spring-batch/issues/2880", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2008-06-30 13:14:08", "closed": "2008-08-07 02:07:15", "commits": {}, "ttf": 37.000277777777775, "commitsDetails": []}, {"title": "JdbcJobInstanceDao doesn't locate JOB_INSTANCE on Oracle where JOB_KEY is empty [BATCH-703]", "body": "**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[BATCH-703](https://jira.spring.io/browse/BATCH-703?redirect=false)** and commented\n\nOracle has this \"feature\" where an empty string is stored as NULL.  This causes the JdbcJobInstanceDao to fail to look up existing JOB_INSTANCE where the key is empty since the JOB_KEY is stored as NULL in the database and must be queried using JOB_KEY IS NULL.  The end result is that there will be a new JOB_INSTANCE created even though a matching one already exists.\n\nThe JdbcJobRepositoryTests expose this issue.\n\n\n---\n\n**Affects:** 1.0.1\n\n**Attachments:**\n- [BATCH-703.patch](https://jira.spring.io/secure/attachment/14319/BATCH-703.patch) (_2.39 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/b2e66532f9605f187b3d1ea6ba75eab0a5294383\n", "url": "https://github.com/spring-projects/spring-batch/issues/2874", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-07-01 23:32:21", "closed": "2008-08-07 02:07:15", "commits": {}, "ttf": 36.000277777777775, "commitsDetails": []}, {"title": "TradeJobFunctionalTests might fail since verification queries don't have ORDER clause [BATCH-705]", "body": "**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[BATCH-705](https://jira.spring.io/browse/BATCH-705?redirect=false)** and commented\n\nTradeJobFunctionalTests might randomly fail since verification queries don't have ORDER clause.  When the data stored is verified it might fail if rows are retrieved in a random order that is different from the order the rows where added.\n\n\n---\n\n**Affects:** 1.0.1\n\n**Attachments:**\n- [BATCH-705.patch](https://jira.spring.io/secure/attachment/14320/BATCH-705.patch) (_888 bytes_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/b480460efee252a39fd98e62a1f6dbc659bdc110\n", "url": "https://github.com/spring-projects/spring-batch/issues/2872", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2008-07-02 02:03:22", "closed": "2008-08-07 02:07:16", "commits": {}, "ttf": 36.000277777777775, "commitsDetails": []}, {"title": "Commit exception is lost if update fails as well [BATCH-706]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-706](https://jira.spring.io/browse/BATCH-706?redirect=false)** and commented\n\nhttp://forum.springframework.org/showthread.php?t=56783\n\n\n---\n\n**Affects:** 1.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/e79543b72dd4a97803099013837b582e689cee05\n", "url": "https://github.com/spring-projects/spring-batch/issues/2871", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-07-02 02:49:28", "closed": "2008-08-07 02:07:16", "commits": {}, "ttf": 35.000277777777775, "commitsDetails": []}, {"title": "StaxEventItemWriter test failures [BATCH-698]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-698](https://jira.spring.io/browse/BATCH-698?redirect=false)** and commented\n\ncca one half of the StaxItemWriterTests keep failing (reproduced on two machines, Windows & Linux).\n\n\n---\n\n**Affects:** 1.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/544390720bd877ba687b88e8eb2095fdb1205540\n", "url": "https://github.com/spring-projects/spring-batch/issues/2869", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-06-30 22:49:52", "closed": "2008-08-07 02:07:15", "commits": {}, "ttf": 37.000277777777775, "commitsDetails": []}, {"title": "FlatFileItemWriter initialization causes file deletion [BATCH-713]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-713](https://jira.spring.io/browse/BATCH-713?redirect=false)** and commented\n\nFlatFileItemWriter will inadvertently delete it's output file multiple times if open is not called first.  The following unit test fails on my machine:\n\n    public void testWriteBeforeOpen() throws Exception{\n    \t\n    \twriter.write(\"test1\");\n    \twriter.flush();\n    \twriter.open(executionContext);\n    \twriter.write(\"test2\");\n    \twriter.flush();\n    \tassertEquals(\"test1\", readLine());\n    \tassertEquals(\"test2\", readLine());\n    }\n\nThe issue is that the write method initializes the buffer:\n\npublic void write(String line) throws IOException {\nif (!initialized) {\ninitializeBufferedWriter();\n}\n\n         outputBufferedWriter.write(line);\n         outputBufferedWriter.flush();\n         linesWritten++;\n    }\n\nNote: the above is from OutputState#write\n\nHowever, the open method never checks to see if it's already been initialized:\n\n    public void open(ExecutionContext executionContext) throws ItemStreamException {\n    \tOutputState outputState = getOutputState();\n    \tif (executionContext.containsKey(getKey(RESTART_DATA_NAME))) {\n    \t\toutputState.restoreFrom(executionContext);\n    \t}\n    \ttry {\n    \t\toutputState.initializeBufferedWriter();\n    \t}\n    \tcatch (IOException ioe) {\n    \t\tthrow new ItemStreamException(\"Failed to initialize writer\", ioe);\n    \t}\n    \tif (outputState.lastMarkedByteOffsetPosition == 0) {\n    \t\tfor (Iterator iterator = headerLines.iterator(); iterator.hasNext();) {\n    \t\t\tString line = (String) iterator.next();\n    \t\t\tlineBuffer.add(line + lineSeparator);\n    \t\t}\n    \t}\n    }\n\nThus, the FileUtils will call delete on the file.\n\n\n\n---\n\n**Affects:** 1.0.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/e748dad82e0f95260b3cbb6b1d143bedd22f7d6c, https://github.com/spring-projects/spring-batch/commit/cb3f23e4c5c8d102e1a3b22910fbb8bdb77249d6\n", "url": "https://github.com/spring-projects/spring-batch/issues/2863", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-07-03 05:09:53", "closed": "2008-08-07 02:07:16", "commits": {}, "ttf": 34.000277777777775, "commitsDetails": []}, {"title": "Default value of saveState flag should be true [BATCH-715]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-715](https://jira.spring.io/browse/BATCH-715?redirect=false)** and commented\n\nDefault value of saveState flag should be true - restartable should be the default.  Assigning to Robert because he did the original abstraction so he might know why the default isn't already true.\n\n\n---\n\n**Affects:** 1.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/54b322dfa71a503008050610b542b8619e7076c8, https://github.com/spring-projects/spring-batch/commit/a61b725bc2af32a7b34e81e69377349beff76af2\n", "url": "https://github.com/spring-projects/spring-batch/issues/2861", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-07-05 01:17:15", "closed": "2008-08-07 02:07:16", "commits": {}, "ttf": 33.000277777777775, "commitsDetails": []}, {"title": "No framework logic should depend on the value of ExitStatus [BATCH-722]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-722](https://jira.spring.io/browse/BATCH-722?redirect=false)** and commented\n\nNo framework logic should depend on the value of ExitStatus - BatchStatus is fixed by the framework, but users can set the ExitStatus codes to what they like.\n\n\n---\n\n**Affects:** 1.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/11a84dd267b7b4185f96f0dd1e4bf6bc5f5c43f6\n", "url": "https://github.com/spring-projects/spring-batch/issues/2854", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-07-12 22:35:55", "closed": "2008-08-07 02:07:17", "commits": {}, "ttf": 25.00027777777778, "commitsDetails": []}, {"title": "tablePrefix property is not injected into JbdcExecutionContextDao [BATCH-723]", "body": "**[david varnes](https://jira.spring.io/secure/ViewProfile.jspa?name=dvarnes)** opened **[BATCH-723](https://jira.spring.io/browse/BATCH-723?redirect=false)** and commented\n\nWhen using an alternate table prefix in the batch repository schema and\nsetting this property on the JobRepositoryFactoryBean, the setting is properly injected into the three primary daos\n(  JdbcJobInstanceDao, JdbcJobExecutionDao, JdbcStepExecutionDao ).\n\nHowever the setting is not injected into the JdbcExecutionContextDao, resulting in an inconsistent table naming prefix strategy in the batch schema.\n\nIt appears to me that the JdbcJobExecutionDao and JdbcStepExecutionDao each create an instance of the JdbcExecutionContextDao, referred to as \"ecDao\", and should inject the tablePrefix.\n\nThey already set some properties of the \"ecDao\" in their afterPropertiesSet() .. but seems they neglect to inject the tablePrefix as well.\n\nShould be a simple one line fix in each dao?\n\n\n\n---\n\n**Affects:** 1.1.0\n\n**Attachments:**\n- [inject-table-prefix-ecDao.patch](https://jira.spring.io/secure/attachment/14361/inject-table-prefix-ecDao.patch) (_1.90 kB_)\n\n**Issue Links:**\n- [BATCH-724](https://jira.spring.io/browse/BATCH-724) create tests for non-default table prefix\n\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/5321f74e401f4972edbf30b28594bfa48acd2d19\n", "url": "https://github.com/spring-projects/spring-batch/issues/2853", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-07-13 13:54:08", "closed": "2008-08-07 02:07:17", "commits": {}, "ttf": 24.00027777777778, "commitsDetails": []}, {"title": "The description of DelegatingItemReader in Appendix A( List of ItemReaders) [BATCH-725]", "body": "**[Sanghyuk Jung](https://jira.spring.io/secure/ViewProfile.jspa?name=sanghyuk.jung)** opened **[BATCH-725](https://jira.spring.io/browse/BATCH-725?redirect=false)** and commented\n\nHello.\n\nI can see the description of DelegatingItemReader in Appendix A( List of ItemReaders) as following\n\nhttp://static.springframework.org/spring-batch/spring-batch-docs/reference/html/apa.html#d0e4963\n\n\"Extends AbstractMethodInvokingDelegator, which enables dynamically calling of a custom method of the injected object. Provides a convenient API for dynamic method invocation shielding subclasses from the low-level details and exception handling.\"\n\nI guess this description is about ItemReaderAdapter, not DelegatingItemReader. (AggregateItemReader doesn't extend AbstractMethodInvokingDelegator)\n\n\n---\n\n**Affects:** 1.0.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/5ed3fecab643c56232dafdf4ba679a367041f7b0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2851", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2008-07-13 19:46:11", "closed": "2008-10-24 08:37:59", "commits": {}, "ttf": 102.00027777777778, "commitsDetails": []}, {"title": "Move all POMs in trunk to 2.0.0.CI-SNAPSHOT [BATCH-727]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-727](https://jira.spring.io/browse/BATCH-727?redirect=false)** and commented\n\n\n---\n\n**Affects:** 1.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/877737ab72026652fb06d7befc788a9fbf4b2b7a\n", "url": "https://github.com/spring-projects/spring-batch/issues/2849", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2008-07-14 18:14:27", "closed": "2008-09-23 12:27:12", "commits": {}, "ttf": 70.00027777777778, "commitsDetails": []}, {"title": "FlatFileItemReader doesn't take \"firstLineIsHeader\" flag into account when restarting [BATCH-732]", "body": "**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[BATCH-732](https://jira.spring.io/browse/BATCH-732?redirect=false)** and commented\n\nFlatFileItemReader doesn't take \"firstLineIsHeader\" flag into account when restarting so the restart begins with the last successfully processed item rather than the one following it.  This is only an issue if the flat file contains a header line.\n\n\n---\n\n**Affects:** 1.1.0, 2.0.0.M1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/5a37462d73bc1b13d655f6380823d1bc14eabb94, https://github.com/spring-projects/spring-batch/commit/074ea016810f5b3d805ebfd53a80a4c55835a0c6\n", "url": "https://github.com/spring-projects/spring-batch/issues/2844", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-07-17 02:18:02", "closed": "2008-09-23 11:26:43", "commits": {}, "ttf": 68.00027777777778, "commitsDetails": []}, {"title": "ItemReaders and ItemWriters using Resource(s) should check for file during ItemStream#open [BATCH-734]", "body": "**[Greg Abell](https://jira.spring.io/secure/ViewProfile.jspa?name=gregabell)** opened **[BATCH-734](https://jira.spring.io/browse/BATCH-734?redirect=false)** and commented\n\nDuring bean initialization MultiResourceItemReader checks [in afterPropertiesSet()] that it actually has resources to read. If not, it throws an exception. There are use cases where the resources might not be created at bean initialization time (see http://forum.springframework.org/showthread.php?t=57502 for details).\n\nLucas Ward suggests that this check might better be made during ItemStream#open().\n\n\n---\n\n**Affects:** 1.1.0\n\n**Backported to:** [1.1.2](https://github.com/spring-projects/spring-batch/milestone/11?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2842", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2008-07-17 06:17:47", "closed": "2008-08-14 02:42:17", "commits": {}, "ttf": 27.00027777777778, "commitsDetails": []}, {"title": "problems in spring-batch-dist-1.1.0.RELEASE-with-dependencies.zip [BATCH-736]", "body": "**[Samuel Bercovici](https://jira.spring.io/secure/ViewProfile.jspa?name=sam_bercovici)** opened **[BATCH-736](https://jira.spring.io/browse/BATCH-736?redirect=false)** and commented\n\nThis looks like similar problem reported on the 1.0.1 release with dependencise.\nI have downloaded the spring-batch-dist-1.1.0.RELEASE-with-dependencies.zip and tried to extract using winrar and winzip on windows.\nI encounter fiew problems:\n1. Some of the files such as pom.xml and .classes appear twice on the same location.\n2. All the files in the lib directories under a org.org.springframework.batch/1.1.0.RELEASE and all of them are named spring-batch-dist-1.1.0.RALEASE.${extension}\n\n-Sam.\n\n\n---\n\n**Affects:** 1.1.0\n\n**Issue Links:**\n- [BATCH-600](https://jira.spring.io/browse/BATCH-600) with-dependencies jar doesn't include test scoped dependencies\n (_**\"is depended on by\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2841", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2008-07-18 03:14:47", "closed": "2008-08-07 02:07:17", "commits": {}, "ttf": 19.00027777777778, "commitsDetails": []}, {"title": "JdbcCursorItemReader will spin through entire resultset if numberOfProcessRows=0 [BATCH-737]", "body": "**[Morten Andersen-Gott](https://jira.spring.io/secure/ViewProfile.jspa?name=magott)** opened **[BATCH-737](https://jira.spring.io/browse/BATCH-737?redirect=false)** and commented\n\nIf a step using jdbccursoritemreader to read fails in the processing-step (itemwriter), number of processed rows (0) will be persisted in ExecutionContext. When re-running the step, 0 will be read as the number of processed rows, and the code will call moveCursorToRow with 0 as param.\n\nThe way the private method moveCursorToRow is implemented now, it will always call next() and increment count once, before checking if count==rows. At this point count=1 and row=0, this resultset will be traveresed until next()=false.\n\nChecked the history of the file, and it seems this behavior has been there since before the private method was introduced.\n\nThe code below should solve this problem:\n\n    /**\n     * Moves the cursor in the resultset to the position specified by the in param by\n     * traversing the resultset\n     * @param row\n     */\n    private void moveCursorToRow(int row){\n    \ttry {\n    \t\tfor (int skipped = 0; skipped < row && rs.next(); skipped++) {\n    \t\t\t//Do nothing\n    \t\t}\n    \t}\n    \tcatch (SQLException se) {\n    \t\tthrow getExceptionTranslator().translate(\"Attempted to move ResultSet to last committed row\", sql, se);\n    \t}\t\t\n    }\n\n\n\n---\n\n**Affects:** 1.0.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/e338f24233fd403c48d0773e21705cc311cddbd3, https://github.com/spring-projects/spring-batch/commit/8a3cda03c45a688cc77d16e915f6fc48f5ebfe36\n\n**Backported to:** [1.1.1](https://github.com/spring-projects/spring-batch/milestone/10?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2840", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2008-07-18 03:56:37", "closed": "2008-08-07 02:07:17", "commits": {}, "ttf": 19.00027777777778, "commitsDetails": []}, {"title": "MultiResourceItemReader.readNextItem() does not close the last delegate [BATCH-738]", "body": "**[Samuel Bercovici](https://jira.spring.io/secure/ViewProfile.jspa?name=sam_bercovici)** opened **[BATCH-738](https://jira.spring.io/browse/BATCH-738?redirect=false)** and commented\n\ncurrent code is:\nif (index.currentResource >= resources.length) {\nreturn null;\n}\n\nwhich need to be changed to:\nif (index.currentResource >= resources.length) {\ndelegate.close(new ExecutionContext());\nreturn null;\n}\n\n\n---\n\n**Affects:** 1.1.0\n\n**Backported to:** [1.1.1](https://github.com/spring-projects/spring-batch/milestone/10?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2839", "user": "spring-issuemaster", "labels": ["has: backports", "status: invalid", "type: bug"], "created": "2008-07-18 09:27:52", "closed": "2008-08-07 02:07:17", "commits": {}, "ttf": 19.00027777777778, "commitsDetails": []}, {"title": "Missing images from the html reference documentation [BATCH-739]", "body": "**[Andrei Stefan](https://jira.spring.io/secure/ViewProfile.jspa?name=astefan)** opened **[BATCH-739](https://jira.spring.io/browse/BATCH-739?redirect=false)** and commented\n\nThere are two pictures missing from the html reference documentation for Spring Batch: after first and second paragraphs in 3.9.3 section - http://static.springframework.org/spring-batch/spring-batch-docs/reference/html-single/index.html#d0e2581\n\n\n---\n\n**Affects:** 1.1.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2838", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2008-07-21 00:13:20", "closed": "2008-08-07 02:07:17", "commits": {}, "ttf": 17.00027777777778, "commitsDetails": []}, {"title": "Cannot create CGLib Proxy for SimpleJobRepository [BATCH-740]", "body": "**[Mark St.Godard](https://jira.spring.io/secure/ViewProfile.jspa?name=markstgodard)** opened **[BATCH-740](https://jira.spring.io/browse/BATCH-740?redirect=false)** and commented\n\nI am using CGLib proxies (i.e. proxy-target-class -> true).... and (according to Spring batch documentation & examples)...  \nwhen I tried to apply transaction management around the JobRepository... I get an error when creating the proxy...\n\nCaused by: org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class [class org.springframework.batch.core.repository.support.SimpleJobRepository]: Common causes of this problem include using a final class or a non-visible class; nested exception is net.sf.cglib.core.CodeGenerationException: java.lang.IllegalAccessError-->tried to access method org.springframework.batch.core.repository.support.SimpleJobRepository.\\<init>()V from class org.springframework.batch.core.repository.support.SimpleJobRepository$$EnhancerByCGLIB$$1b091047\n\n(see full trace in comment below)\n\nFor example:\n\n    <aop:config proxy-target-class=\"true\">\n    \n    \t<!-- Transaction Management -->\n    \t<aop:advisor pointcut=\"SystemArchitecture.businessService() || execution(* org.springframework.batch.core..*Repository+.*(..))\"\n    \t\t\t\t advice-ref=\"txAdvice\" />\n    \n    </aop:config>\n    \n    <tx:advice id=\"txAdvice\">\n    \t<tx:attributes>\n    \t\t<tx:method name=\"createJobExecution\" propagation=\"REQUIRES_NEW\" isolation=\"SERIALIZABLE\" />  <!-- Added for Spring Batch -->\n                          . . . \n    \t\t<tx:method name=\"*\" propagation=\"REQUIRED\" />\n    \t\t\n    \t</tx:attributes>\n    </tx:advice>\n    \n    \n    <!--  this is our class... hack to fix constructor scope,  -->\n    <bean id=\"jobRepository\" class=\"org.springframework.batch.core.repository.support.SimpleJobRepository\">\n                . . . \n        </bean>\n\nSide Note:  I would like to use regular Java dynamic proxies, however I do need CGLib proxies for a small set of my objects in my application ...\nand I believe the way that autoproxying works is that  if you use the   proxy-target-class=\"true\"  in one <aop:config> snippet... and false in all others...\nthe CGLIb proxy target class will override the other behavior....  i.e. even if you say false... it will create CGLib proxies...  anyway... a moot point... just wanted\nto let you know that I DO NOT have a choice to not use CGLib proxies :)\n\nCheers\nMark\n\n\n---\n\n**Affects:** 1.0.1, 1.1.0\n\n**Attachments:**\n- [stackTrace.txt](https://jira.spring.io/secure/attachment/14406/stackTrace.txt) (_10.10 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2837", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-07-21 03:48:05", "closed": "2008-10-15 19:32:04", "commits": {}, "ttf": 86.00027777777778, "commitsDetails": []}, {"title": "DefaultFieldSet should clone the tokens before exposing them in getValues() [BATCH-741]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-741](https://jira.spring.io/browse/BATCH-741?redirect=false)** and commented\n\nDefaultFieldSet should clone the tokens before exposing them in getValues()\n\n\n---\n\n**Affects:** 1.1.0\n\n**Backported to:** [1.1.1](https://github.com/spring-projects/spring-batch/milestone/10?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2836", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2008-07-21 19:03:40", "closed": "2008-08-07 02:07:17", "commits": {}, "ttf": 16.00027777777778, "commitsDetails": []}, {"title": "restart.count is always 0 in FlatFileItemWriter [BATCH-744]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-744](https://jira.spring.io/browse/BATCH-744?redirect=false)** and commented\n\n\n---\n\n**Affects:** 1.1.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2833", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-07-24 17:59:56", "closed": "2008-09-30 22:41:19", "commits": {}, "ttf": 68.00027777777778, "commitsDetails": []}, {"title": "Throwing an Exception from a SkipListener causing unpredictable behavior [BATCH-750]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-750](https://jira.spring.io/browse/BATCH-750?redirect=false)** and commented\n\nThrowing an Exception from a SkipListener causes erroneous behavior.  This is because it causes a rollback rather than failing the job.\n\n\n---\n\n**Affects:** 1.1.0\n\n**Attachments:**\n- [SkipIntegrationTests.java](https://jira.spring.io/secure/attachment/14468/SkipIntegrationTests.java) (_6.33 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/42237215a2bf7d46117887e201a11083cdab8576, https://github.com/spring-projects/spring-batch/commit/87c5626db1299b4e0be79354d301c2dd9903e337\n", "url": "https://github.com/spring-projects/spring-batch/issues/2828", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-07-28 05:19:24", "closed": "2008-08-07 02:07:17", "commits": {}, "ttf": 9.000277777777777, "commitsDetails": []}, {"title": "ensure StepExecution is saved before trying to save ExecutionContext [BATCH-751]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-751](https://jira.spring.io/browse/BATCH-751?redirect=false)** and commented\n\nhttp://forum.springframework.org/showthread.php?t=57647\n\n\n---\n\n**Affects:** 1.1.0\n\n1 votes, 1 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/2827", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-07-29 01:10:32", "closed": "2008-08-07 02:07:18", "commits": {}, "ttf": 9.000277777777777, "commitsDetails": []}, {"title": "FlatFileItemReader restart broken for non-default RecordSeparatorPolicy (record > 1 line) [BATCH-752]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-752](https://jira.spring.io/browse/BATCH-752?redirect=false)** and commented\n\nSimple fix is to remove the overriden jumpToItem(int) method and use the default provided by superclass\n\n\n---\n\n**Affects:** 1.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/8c4043c8820b65ff58fa674d81c4cc7a783cee1f, https://github.com/spring-projects/spring-batch/commit/878d497956bc6c8246262186b905c91140cf745d\n", "url": "https://github.com/spring-projects/spring-batch/issues/2826", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2008-07-30 00:19:46", "closed": "2008-08-07 02:07:18", "commits": {}, "ttf": 8.000277777777777, "commitsDetails": []}, {"title": "remove DelegatingItemWriter [BATCH-757]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-757](https://jira.spring.io/browse/BATCH-757?redirect=false)** and commented\n\n\n---\n\n**Affects:** 1.1.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2821", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-08-04 01:45:54", "closed": "2008-09-23 11:43:09", "commits": {}, "ttf": 50.000277777777775, "commitsDetails": []}, {"title": "StaxEventItemWriter writes extra end document tag with Woodstox 3.2.6 [BATCH-761]", "body": "**[Ian Brandt](https://jira.spring.io/secure/ViewProfile.jspa?name=ibrandt)** opened **[BATCH-761](https://jira.spring.io/browse/BATCH-761?redirect=false)** and commented\n\nWoodstox 3.2.6 (current stable)'s StaxEventWriter implementation automatically writes end tags and end document tags that it detects as still open on close.  When StaxEventItemWriter wraps Woodstox with a NoStartEndDocumentStreamWriter for the chunk writer (eventWriter), and another Woodstox instance for the document writer (delegateEventWriter), the result is two end document tags being written.  This is because even though the NoStartEndDocumentStreamWriter prevents the end document event from being written to the chunk writer, it writes the end document tag on close() anyway, on top of the one being written by StaxEventItemWriter.endDocument(delegateEventWriter) itself.\n\nHere's the relevant stack trace:\n\nThread [main] (Suspended)\t\ncom.ctc.wstx.sw.SimpleNsStreamWriter(com.ctc.wstx.sw.BaseStreamWriter).finishDocument() line: 1672\t\ncom.ctc.wstx.sw.SimpleNsStreamWriter(com.ctc.wstx.sw.BaseStreamWriter).close() line: 288\t\ncom.ctc.wstx.evt.WstxEventWriter.close() line: 237\t\norg.springframework.batch.item.xml.stax.NoStartEndDocumentStreamWriter(org.springframework.batch.item.xml.stax.AbstractEventWriterWrapper).close() line: 32\t\norg.springframework.batch.item.xml.StaxEventItemWriter.close(org.springframework.batch.item.ExecutionContext) line: 376\n\nThis was captured with Spring 1.1.0, but I diff'ed StaxEventItemWriter and NoStartEndDocumentStreamWriter for 1.1.0 vs. 1.1.1 in FishEye, and am not seeing anything that would change the behavior.\n\n\n---\n\n**Affects:** 1.1.0\n\n**Attachments:**\n- [StaxEventItemWriter.Woodstox.patch](https://jira.spring.io/secure/attachment/14502/StaxEventItemWriter.Woodstox.patch) (_804 bytes_)\n\n**Backported to:** [1.1.2](https://github.com/spring-projects/spring-batch/milestone/11?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2818", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2008-08-05 05:10:14", "closed": "2011-03-11 04:08:54", "commits": {}, "ttf": 947.0002777777778, "commitsDetails": []}, {"title": "Truncate flatfile in restart scenarios. [BATCH-764]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-764](https://jira.spring.io/browse/BATCH-764?redirect=false)** and commented\n\nThere may be scenarios in which the FlatFileItemWriter has flushed, but the current transaction isn't committed, there may be extra data in the file.  For this reason, in a restart scenario, the file pointer should be moved to the correct location, and then the rest of the file truncated, in case there's data remaining.\n\n\n---\n\n**Affects:** 1.1.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2815", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: declined", "type: bug"], "created": "2008-08-06 06:54:50", "closed": "2008-10-14 20:31:00", "commits": {}, "ttf": 69.00027777777778, "commitsDetails": []}, {"title": "StepExecution should be saved on every commit [BATCH-765]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-765](https://jira.spring.io/browse/BATCH-765?redirect=false)** and commented\n\nStepExecution is saved when step starts and updated when step ends, but it is not being updated after chunk is commited. This means the statistics such as item_count are reflected in the database only once the step has finished executing.\n\n\n---\n\n**Affects:** 1.1.1\n\n**Attachments:**\n- [mylyn-context.zip](https://jira.spring.io/secure/attachment/14535/mylyn-context.zip) (_46.05 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/23e1d0d01ac78ea3a5edcc7f8be359e3ace0cbde, https://github.com/spring-projects/spring-batch/commit/b9810c6eeb4b922c7e5ae169a2210d7d8cd85eb9, https://github.com/spring-projects/spring-batch/commit/f291ba3385bc4d9391db2a5fb297a87f28fa7273, https://github.com/spring-projects/spring-batch/commit/6d15a371ec7cba6e99c88c0148ec7a033a324444\n\n**Backported to:** [1.1.2](https://github.com/spring-projects/spring-batch/milestone/11?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2814", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2008-08-06 08:43:29", "closed": "2008-08-13 01:36:30", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "Insufficient error handling in case of a missing resource for a org.springframework.batch.item.xml.StaxEventItemWriter [BATCH-766]", "body": "**[Dino Marzi](https://jira.spring.io/secure/ViewProfile.jspa?name=dmarzi)** opened **[BATCH-766](https://jira.spring.io/browse/BATCH-766?redirect=false)** and commented\n\nUsing an ItemOrientedStep with the following combination of ItemReader and ItemWriter\n\n                   ... <!-- other tags -->\n    \n    <bean id=\"testFileItemReader\"\n    \tclass=\"org.springframework.batch.item.xml.StaxEventItemReader\">\n    \t<property name=\"fragmentRootElementName\" value=\"record\" />\n    \t<property name=\"resource\" value=\"classpath:doesntexist.xml\" />\n    \t<property name=\"fragmentDeserializer\">\n    \t\t<bean\n    \t\t\tclass=\"org.springframework.batch.item.xml.oxm.UnmarshallingEventReaderDeserializer\">\n    \t\t\t<constructor-arg ref=\"jaxb2Marshaller\" />\n    \t\t</bean>\n    \t</property>\n    </bean>\n    \n    <bean id=\"jaxb2Marshaller\"\n    \tclass=\"org.springframework.oxm.jaxb.Jaxb2Marshaller\">\n    \t<property name=\"contextPath\"\n    \t\tvalue=\"${context.path}\" />\n    \t<property name=\"schema\" value=\"classpath:${input.schema}\" />\n    </bean>\n    \n    <bean class=\"org.springframework.batch.item.xml.StaxEventItemWriter\"\n    \tid=\"testFileItemWriter\">\n    \t<property name=\"resource\"\n    \t\tvalue=\"file:${output.resource}\" />\n    \t<property name=\"serializer\" ref=\"marshallingSerializer\" />\n    \t<property name=\"rootTagName\" value=\"records\" />\n    \t<property name=\"overwriteOutput\" value=\"true\" />\n    </bean>\n    \n    <bean\n    \tclass=\"org.springframework.batch.item.xml.oxm.MarshallingEventWriterSerializer\"\n    \tid=\"marshallingSerializer\">\n    \t<constructor-arg ref=\"jaxb2Marshaller\" />\n    </bean>\n\nwill lead to a NullPointerException in the execution of the ItemWriter if the resource configured for the ItemReader doesn't exist (for example due to an unintentional typo).\n\nThis behavior makes it rather difficult to analyze the error and find the true cause. There should be a more sophisticated error handling if the StaxEventItemReader can't find its resource.\n\nLog entry:\n\nERROR AbstractStep                   - Encountered an error executing the step: class org.springframework.batch.core.UnexpectedJobExecutionException: Failed to initialize the step\nERROR AbstractStep                   - Exception while closing step execution resources\njava.lang.NullPointerException\nat org.springframework.batch.item.xml.StaxEventItemWriter.flush(StaxEventItemWriter.java:463)\nat org.springframework.batch.item.xml.StaxEventItemWriter.close(StaxEventItemWriter.java:373)\nat org.springframework.batch.item.support.CompositeItemStream.close(CompositeItemStream.java:90)\nat org.springframework.batch.core.step.item.ItemOrientedStep.close(ItemOrientedStep.java:435)\nat org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:226)\nat org.springframework.batch.core.job.SimpleJob.execute(SimpleJob.java:100)\nat org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:86)\nat org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)\nat org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:81)\nat com.tsystems.favbg.batch.job.TestJobTest.testLaunchJob(TestJobTest.java:83)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:585)\nat junit.framework.TestCase.runTest(TestCase.java:164)\nat junit.framework.TestCase.runBare(TestCase.java:130)\nat org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:76)\nat junit.framework.TestResult$1.protect(TestResult.java:106)\nat junit.framework.TestResult.runProtected(TestResult.java:124)\nat junit.framework.TestResult.run(TestResult.java:109)\nat junit.framework.TestCase.run(TestCase.java:120)\nat junit.framework.TestSuite.runTest(TestSuite.java:230)\nat junit.framework.TestSuite.run(TestSuite.java:225)\nat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)\nat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n\n\n---\n\n**Affects:** 1.1.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/452591e580685bbbb28b546588f025cf2ac3ab5a, https://github.com/spring-projects/spring-batch/commit/f5268ced571b0d10baa5c8c9a252f8d890bb0184, https://github.com/spring-projects/spring-batch/commit/f49b5c5e154b683a7f4a66fa9099a6bc474459e3, https://github.com/spring-projects/spring-batch/commit/8dc8d253f5cc2b6c0ca2262d65cb68473c1d0c8e\n\n**Backported to:** [1.1.2](https://github.com/spring-projects/spring-batch/milestone/11?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2813", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2008-08-07 00:02:32", "closed": "2008-10-08 07:12:44", "commits": {}, "ttf": 62.000277777777775, "commitsDetails": []}, {"title": "Getting Started page should be updated [BATCH-735]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-735](https://jira.spring.io/browse/BATCH-735?redirect=false)** and commented\n\nThe getting-started page on the spring batch home page needs to be updated:\n\nhttp://static.springframework.org/spring-batch/getting-started.html\n\nThe first option it gives people is without maven, using the 'with-dependencies' release (which is almost always buggy), followed by the 'use maven' option, which tells them to still use the same 'with-dependencies' release before (which they shouldn't)\n\nI propose we update to have the maven option be first, with the 'no dependency' zip, followed by the 'with dependency' without maven.\n\n\n---\n\n**Affects:** 1.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/c269dca4b322ec708b4e68c1da989a6870b45cb4\n\n**Backported to:** [1.1.1](https://github.com/spring-projects/spring-batch/milestone/10?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2811", "user": "spring-issuemaster", "labels": ["has: backports", "type: bug"], "created": "2008-07-18 01:43:51", "closed": "2008-08-07 02:07:17", "commits": {}, "ttf": 20.00027777777778, "commitsDetails": []}, {"title": "StaxEventItemWriter headers should not have to be the same type as the T that the writer is parameterised with [BATCH-776]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-776](https://jira.spring.io/browse/BATCH-776?redirect=false)** and commented\n\nStaxEventItemWriter headers should not have to be the same type as the T that the writer is parameterised with.  They could be anything that the Marshaller understands.\n\n\n---\n\n**Affects:** 2.0.0.M1\n\n**Attachments:**\n- [mylyn-context.zip](https://jira.spring.io/secure/attachment/14528/mylyn-context.zip) (_636 bytes_)\n\n**Issue Links:**\n- [BATCH-821](https://jira.spring.io/browse/BATCH-821) remove EventSerializer/Deserializer abstractions and use Marshaller/Unmarshaller directly\n (_**\"depends on\"**_)\n- [BATCH-821](https://jira.spring.io/browse/BATCH-821) remove EventSerializer/Deserializer abstractions and use Marshaller/Unmarshaller directly\n\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/f623b0651a42ceefa6720e7ad368505e6b0b42c3\n", "url": "https://github.com/spring-projects/spring-batch/issues/2802", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-08-09 01:03:39", "closed": "2008-09-29 01:12:46", "commits": {}, "ttf": 51.000277777777775, "commitsDetails": []}, {"title": "MapJobRepositoryFactoryBean shouldn't require transactionManager [BATCH-778]", "body": "**[Michel Zanini](https://jira.spring.io/secure/ViewProfile.jspa?name=michelz)** opened **[BATCH-778](https://jira.spring.io/browse/BATCH-778?redirect=false)** and commented\n\nIf you're using:\n\n\\<bean id=\"jobRepository\"\nclass=\"org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean\" />\n\nThis exception occurs:\n\njava.lang.IllegalArgumentException: TransactionManager must not be null\n\nThis is because MapJobRepositoryFactoryBean extends AbstractJobRepositoryFactoryBean (same as JobRepositoryFactoryBean) and this\nabstract class require a TransactionManager set. (in afterPropertiesSet method)\n\nI believe the TransactionManager  should be requiered only for JobRepositoryFactoryBean, because only in this we have database operations involved.\n\n\n---\n\n**Affects:** 1.1.0, 1.1.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/0a699575215282448ad68dcccbd06171d3b0a4a6, https://github.com/spring-projects/spring-batch/commit/34f7cd8519ed63f47bacaac1357462403db82f20, https://github.com/spring-projects/spring-batch/commit/1f731769f85170071f9232ae9acb711c3fea38d7\n", "url": "https://github.com/spring-projects/spring-batch/issues/2799", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-08-11 04:43:17", "closed": "2008-11-30 08:40:45", "commits": {}, "ttf": 111.00027777777778, "commitsDetails": []}, {"title": "Synchronization issue in ItemOrientedStep if exception is throw in chunk processing [BATCH-782]", "body": "**[Adrian Shum](https://jira.spring.io/secure/ViewProfile.jspa?name=adrianshum)** opened **[BATCH-782](https://jira.spring.io/browse/BATCH-782?redirect=false)** and commented\n\nI have read source code of 1.0.x and 1.1.x and both share similar problem\n\nIn ItemOrientedStep:\nCode:\n\nprotected ExitStatus doExecute(final StepExecution stepExecution) throws Exception {\n// blablabla\n\n    return stepOperations.iterate(new RepeatCallback() {\n    \n        public ExitStatus doInIteration(RepeatContext context) throws Exception {\n            // balblabla\n            try {\n                // Process chunk .... (1)\n                try {\n                    synchronizer.lock(stepExecution);\n                }\n                catch (InterruptedException e) {\n                    stepExecution.setStatus(BatchStatus.STOPPED);\n                    Thread.currentThread().interrupt();\n                }\n                // step execution persistence\n    \n            }\n            catch (Error e) {\n                processRollback(stepExecution, contribution, fatalException, transaction);\n                throw e;\n            }\n            catch (Exception e) {\n                processRollback(stepExecution, contribution, fatalException, transaction);\n                throw e;\n            }\n            finally {\n                synchronizer.release(stepExecution);\n            }\n            //blblabla\n            return exitStatus;\n        }\n    });\n\n}\n\nIn case of any exception occured in (1) or during synchronizer.lock(), the internal semaphore in synchronizer is NOT acquired. However, the outer final block releases synchronizer, and hence, releasing the semaphore.\n\nFrom JDK API of 1.5, it stated that Semaphore can be released by another thread which is not the original acquirer of semaphore.\n\nSo, in case of parallel processing, I may goes into some case:\n\nThread 1 acquired the semaphore and doing those step execution persistence stuff.\n\nThread 2 have exception in processChunk, and hence releasing the semaphore.\n\nThread 3, originally waiting for semaphore, is now acquired the semaphore because Thread 2 releases it, and hence, it goes to the peresistence block of code.\n\nIn such case, Thread 1 and 3 goes into the should-be-protected block of code for step execution persistence.\n\nIn my environment, I throwed an exception in my writer, and it caused this exception:\n\n[ERROR] SimpleAsyncTaskExecutor-1 [step.AbstractStep] Encountered an error executing the step\norg.springframework.batch.core.step.AbstractStep$FatalException: Fatal error detected during save of step execution context\n// stack trace deleted\nCaused by: org.springframework.dao.OptimisticLockingFailureException: Attempt to update step execution id=609 with wrong version (5), where current version is 4\n// stack trace deleted\n\nIt is caused by concurrent access and persistence of step execution because of the above mentioned issue.\n\nUpon happening, in DB, the step execution will be updated with UNKNOWN status, and hence, preventing it from re-run.\n\nA quick fix is to set a flag after synchronizer lock, and only release if flag is set.  However it does not cater for interruption exception during synchronizer locking.\n\n\n---\n\n**Affects:** 1.0.1, 1.1.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/f29aa1e9fd0cbd2891ae188abe5d5f5e160f3555, https://github.com/spring-projects/spring-batch/commit/17e87e0f2ce0ac129c085ef36621ea182f4a5159\n\n**Backported to:** [1.1.2](https://github.com/spring-projects/spring-batch/milestone/11?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2794", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2008-08-13 21:48:54", "closed": "2008-09-23 11:05:34", "commits": {}, "ttf": 40.000277777777775, "commitsDetails": []}, {"title": "SQL error caused by changes to JdbcExecutionContextDao [BATCH-790]", "body": "**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[BATCH-790](https://jira.spring.io/browse/BATCH-790?redirect=false)** and commented\n\nSQL error caused by changes to JdbcExecutionContextDao -- need to use toString() when passed in as bind parameter.  See http://forum.springframework.org/showthread.php?t=59050\n\n\n---\n\n**Issue Links:**\n- [BATCH-756](https://jira.spring.io/browse/BATCH-756) Upgrade JdbcExecutionContextDao to use enums\n\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/317f40ad849283415b625129ca5fefd8c7db3001\n", "url": "https://github.com/spring-projects/spring-batch/issues/2786", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2008-08-20 23:11:45", "closed": "2008-09-23 12:19:14", "commits": {}, "ttf": 33.000277777777775, "commitsDetails": []}, {"title": "JdbcJobExecutionDao output sorting [BATCH-795]", "body": "**[Pavel Zupa](https://jira.spring.io/secure/ViewProfile.jspa?name=pavel.zupa)** opened **[BATCH-795](https://jira.spring.io/browse/BATCH-795?redirect=false)** and commented\n\nThere is minor bug in JdbcJobExecutionDao.findJobExecutions(JobInstance jobInstance). JobExecutionDao's javadoc says that executions returned from this method are sorted bacwards by start time, but there is no ORDER BY clause in sql query so executions are sorted the wrong way. I didn't see ORDER BY anywhere in the file so maybe other methods should be checked too.\n\n\n---\n\n**Affects:** 2.0.0.M1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/63d39624540a51698dc64e998e3073d038a2a14e, https://github.com/spring-projects/spring-batch/commit/d6d6a650f07d82cf6870ac627a22089a9527adb5, https://github.com/spring-projects/spring-batch/commit/b79a496626a3b3b815cb21a03658401a50a40773\n", "url": "https://github.com/spring-projects/spring-batch/issues/2781", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-08-27 19:22:21", "closed": "2008-09-29 07:34:22", "commits": {}, "ttf": 32.000277777777775, "commitsDetails": []}, {"title": "Serialization bug in JobExecution [BATCH-807]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-807](https://jira.spring.io/browse/BATCH-807?redirect=false)** and commented\n\nSerialization bug in JobExecution.  When deserialized, the transient field stepExecutions is assumed to be not null in createStepExecution().  I think it maybe comes from an old version where StepExecution had a reference to a Step - and was therefore not really Serializable.\n\n\n---\n\n**Affects:** 2.0.0.M2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/c66f98501d235a878efc8ac9c972d49366f4e6e0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2770", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-09-02 22:27:19", "closed": "2008-09-23 12:31:03", "commits": {}, "ttf": 20.00027777777778, "commitsDetails": []}, {"title": "StepExecutionResourceProxy should throw an exception if a job paramter key in the path isn't found [BATCH-811]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-811](https://jira.spring.io/browse/BATCH-811?redirect=false)** and commented\n\nStepExecutionResourceProxy will not throw an exception if it's configured to pull a value from the JobParameters that doesn't exit, as illustrated by the below failed unit test:\n\n    public void testNonExistentJobParameter() throws Exception{\n    \t\n    \tresource.setFilePattern(\"foo/data/%JOB_NAME%/%non.key%-foo\");\n    \tjobInstance = new JobInstance(new Long(0), new JobParametersBuilder().addString(\"job.key\", \"spam\")\n    \t\t\t.toJobParameters(), \"testJob\");\n    \tJobExecution jobExecution = new JobExecution(jobInstance);\n    \tStep step = new StepSupport(\"bar\");\n    \ttry{\n    \t\tresource.beforeStep(jobExecution.createStepExecution(step.getName()));\n    \t\tfail();\n    \t}\n    \tcatch(Exception ex){\n    \t\t//expected, if there isn't a JobParameter for that key, it should throw an exception\n    \t}\n    }\n\nThe side effect of this is that the filename will include %job.key%, rather than failing, leading to extra debugging time.\n\n\n---\n\n**Affects:** 1.1.2\n\n**Attachments:**\n- [mylyn-context.zip](https://jira.spring.io/secure/attachment/14652/mylyn-context.zip) (_60.31 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2768", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-09-03 07:58:19", "closed": "2008-09-17 09:35:00", "commits": {}, "ttf": 14.000277777777777, "commitsDetails": []}, {"title": "StepExecutionResourceProxy should use a different JobParametersConverter [BATCH-812]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-812](https://jira.spring.io/browse/BATCH-812?redirect=false)** and commented\n\nStepExecutionResourceProxy has some odd results when using non string JobParameters in the file path.  For example, if using a long parameter, (long) must be added to the end of the key name:\n\n    public void testLongJobParameter() throws Exception {\n    \t\n    \tresource.setFilePattern(\"foo/data/%JOB_NAME%/%job.key(long)%-foo\");\n    \tjobInstance = new JobInstance(new Long(0), new JobParametersBuilder().addLong(\"job.key\", 123L)\n    \t\t\t.toJobParameters(), \"testJob\");\n    \tJobExecution jobExecution = new JobExecution(jobInstance);\n    \tStep step = new StepSupport(\"bar\");\n    \tresource.beforeStep(jobExecution.createStepExecution(step.getName()));\n    \tdoTestPathName(\"123-foo\", \"foo\" + pathsep + \"data\" + pathsep);\n    }\n\nThis is because DefaultJobParametersConverter makes this change, which makes sense when converting from the command line, but not as much in the above scenario.  I think the expected behavior is that %job.key% will convert whatever parameter has that key name to a string, regardless of the type.\n\n\n---\n\n**Affects:** 1.1.2, 2.0.0.M1\n\n**Attachments:**\n- [mylyn-context.zip](https://jira.spring.io/secure/attachment/14653/mylyn-context.zip) (_1.96 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/4bc6e9aee68376bb28d30813b2440ebd6cc09796\n\n**Backported to:** [1.1.3](https://github.com/spring-projects/spring-batch/milestone/12?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2767", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2008-09-03 08:39:13", "closed": "2008-10-01 02:42:48", "commits": {}, "ttf": 27.00027777777778, "commitsDetails": []}, {"title": "SingleColumnJdbcKeyGeneratorIntegrationTests fails in Eclipse [BATCH-813]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-813](https://jira.spring.io/browse/BATCH-813?redirect=false)** and commented\n\nSingleColumnJdbcKeyGeneratorIntegrationTests fails in Eclipse.  Looks like an ordering issue - some other test isn't cleaning up a thread local?\n\njava.lang.IllegalStateException: Already value [org.springframework.jdbc.datasource.ConnectionHolder@90ebfe] for key [org.springframework.jdbc.datasource.DriverManagerDataSource@13043d2] bound to thread [main]\nat org.springframework.transaction.support.TransactionSynchronizationManager.bindResource(TransactionSynchronizationManager.java:182)\nat org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:232)\nat org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:377)\nat org.springframework.test.context.transaction.TransactionalTestExecutionListener$TransactionContext.startTransaction(TransactionalTestExecutionListener.java:496)\nat org.springframework.test.context.transaction.TransactionalTestExecutionListener.startNewTransaction(TransactionalTestExecutionListener.java:256)\nat org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:149)\nat org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:292)\n...\n\n\n---\n\n**Affects:** 2.0.0.M2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d7cb39ba252220605a40e856222622aa2a279f83\n", "url": "https://github.com/spring-projects/spring-batch/issues/2766", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-09-03 19:47:02", "closed": "2008-09-23 12:21:50", "commits": {}, "ttf": 19.00027777777778, "commitsDetails": []}, {"title": "JobRepository should not require Step or Job (only their names) [BATCH-814]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-814](https://jira.spring.io/browse/BATCH-814?redirect=false)** and commented\n\nIt's a matter of encapsulation.  The repository responsibility should not intersect with the configuration concerns of Step and Job (or their execution concerns).  THis change is necessary for efficient partitioning of a step (where the name might be overridden for partitions).\n\n\n---\n\n**Affects:** 2.0.0.M2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/34c2fce32f9de456f667cc1c9d56f8e033c1f144, https://github.com/spring-projects/spring-batch/commit/917f31be0cfe7e200575c82d7dd5a7ba5552e359, https://github.com/spring-projects/spring-batch/commit/4726eeaa77e3655c6c63109f626c47e3fc787fb5, https://github.com/spring-projects/spring-batch/commit/db608b91a80cd5d39b5060f7824e193618409378\n", "url": "https://github.com/spring-projects/spring-batch/issues/2764", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-09-03 20:40:53", "closed": "2008-09-23 12:29:12", "commits": {}, "ttf": 19.00027777777778, "commitsDetails": []}, {"title": "Storing a Blob with JdbcExecutionContextDao in DB2 [BATCH-820]", "body": "**[D. R. Vanlandingham](https://jira.spring.io/secure/ViewProfile.jspa?name=drvanland)** opened **[BATCH-820](https://jira.spring.io/browse/BATCH-820?redirect=false)** and commented\n\nWhen storing an Integer into the 'OBJECT_VAL BLOB' field on the 'EXECUTION_CONTEXT' table I receive the exception below, seemingly caused by a 'Data Type Mismatch' (Also See Below) for the field.  Line 178 of the JdbcExecutionContextDao (lobCreator.setBlobAsBytes(ps, 5, SerializationUtils.serialize((Serializable) value));) can be changed to:\n\nbyte[] b = SerializationUtils.serialize((Serializable) value );\nlobCreator.setBlobAsBinaryStream( ps, 8, new ByteArrayInputStream( b ), b.length );\n\n... and the problem seems to be resolved, however I am not sure how this would work on other databases.  It may be worthwhile to allow a flexibility of what LobHandler is used so that the user is not always forced into using the 'DefaultLobHandler'.  It seems that Spring recommends using the 'OracleLobHandler' for Oracle specific environments and allowing this flexibility could essentially lead a way around the problem for us, i.e. creating a 'DB2LobHandler' where we could change the behavior of the 'setBlobAsBytes'.\n\nThis seems to be a specific DB2 issue caused by trying to a 'ByteArray' into a Blob field where a Byte InputStream appears to store without issue.  The 'SQLWarning' trace below seems to be a side effect of this warning, however it in turn throws an exception that causes our job to rollback.\n\nLog message:\n2008-09-03 15:18:23,126 DEBUG [org.springframework.jdbc.core.JdbcTemplate] SQLWarning ignored: SQL state 'null', error code '0', message [Input data type mismatch, see chained exceptions; will retry execution using describe input information. Please change application to use an input data type that matches the database column type as required by JDBC semantics.]\n\nWhich then creates this Exception:\njava.lang.Error: SQLWarning chain holds value that is not a SQLWarning\nat java.sql.SQLWarning.getNextWarning(SQLWarning.java:111)\nat org.springframework.jdbc.core.JdbcTemplate.handleWarnings(JdbcTemplate.java:1172)\nat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:567)\nat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:594)\nat TestBlobExceptionyUtil.testBlobHandler(TestExceptionDisplayUtil.java:67)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:615)\nat junit.framework.TestCase.runTest(TestCase.java:154)\nat junit.framework.TestCase.runBare(TestCase.java:127)\nat org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:76)\nat junit.framework.TestResult$1.protect(TestResult.java:106)\nat junit.framework.TestResult.runProtected(TestResult.java:124)\nat junit.framework.TestResult.run(TestResult.java:109)\nat junit.framework.TestCase.run(TestCase.java:118)\nat junit.framework.TestSuite.runTest(TestSuite.java:208)\nat junit.framework.TestSuite.run(TestSuite.java:203)\nat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)\nat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n\nWhich has a root cause of:\ncom.ibm.db2.jcc.c.SqlException: DB2 SQL error: SQLCODE: -301, SQLSTATE: 42895, SQLERRMC: 8\n\n\n\n---\n\n**Affects:** 1.1.2\n\n**Attachments:**\n- [TestBlobHandler.java](https://jira.spring.io/secure/attachment/14643/TestBlobHandler.java) (_2.26 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/32902a86be874babca6d6ec922ee3b3c5aab165a\n", "url": "https://github.com/spring-projects/spring-batch/issues/2756", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-09-04 02:56:36", "closed": "2008-09-17 06:48:41", "commits": {}, "ttf": 13.000277777777777, "commitsDetails": []}, {"title": "New WRITE_COUNT should count items instead of chunks [BATCH-822]", "body": "**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[BATCH-822](https://jira.spring.io/browse/BATCH-822?redirect=false)** and commented\n\nI have a test processing 3 chunks of 10 - read_count = 29, filter_count = 1, commit_count = 3, write_count = 3 and I have 29 items processed in the db\n\nthe write_count should be 29 and not 3 if we are counting items\n\n\n---\nNo further details from [BATCH-822](https://jira.spring.io/browse/BATCH-822?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/2754", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-09-05 01:16:46", "closed": "2008-09-23 12:22:30", "commits": {}, "ttf": 18.00027777777778, "commitsDetails": []}, {"title": "DelegatingItemReader should be removed [BATCH-830]", "body": "**[Pavel Zupa](https://jira.spring.io/secure/ViewProfile.jspa?name=pavel.zupa)** opened **[BATCH-830](https://jira.spring.io/browse/BATCH-830?redirect=false)** and commented\n\nThere have been a small logic mistake if I understand it right in adding generics to DelegatingItemReader. It's read method returns type T and the delegate must be of type T too. So there is no clean way to read eg. FieldSet from delegate and return some domain object, which is the purpose of this reader, isn't it?\n\n\n---\n\n**Affects:** 2.0.0.M2\n", "url": "https://github.com/spring-projects/spring-batch/issues/2746", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-09-10 17:08:52", "closed": "2008-09-30 10:40:15", "commits": {}, "ttf": 19.00027777777778, "commitsDetails": []}, {"title": "id counter in MapJobInstanceDao should be declared static [BATCH-831]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-831](https://jira.spring.io/browse/BATCH-831?redirect=false)** and commented\n\nhttp://forum.springframework.org/showthread.php?t=60053\n\n\n---\n\n**Affects:** 1.1.2\n\n**Backported to:** [1.1.3](https://github.com/spring-projects/spring-batch/milestone/12?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2745", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2008-09-11 00:57:38", "closed": "2008-09-17 06:50:25", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "DefaultTransactionAttribute is inappropriate for TaskletStep [BATCH-832]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-832](https://jira.spring.io/browse/BATCH-832?redirect=false)** and commented\n\nThe DefaultTransactionAttributes use in TaskletStep should not be used.  The problem is how it determines what should be rolledback:\n\n    public boolean rollbackOn(Throwable ex) {\n    \treturn (ex instanceof RuntimeException || ex instanceof Error);\n    }\n\nThis means that any checked exceptions will not cause a rollback.  This was fine in 1.1 given how way it was structured, it wouldn't be possible to get a checked exception, since it would have been wrapped first.  However, the Tasklet interface declares that it throws exception, so anyone using the TaskletStep for the same reasons they would have done so in 1.1 will get into an infinite loop if they throw a checked exception from their Tasklet.\n\n\n---\n\n**Affects:** 2.0.0.M1\n\n**Backported to:** [1.1.3](https://github.com/spring-projects/spring-batch/milestone/12?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2744", "user": "spring-issuemaster", "labels": ["has: backports", "type: bug"], "created": "2008-09-11 07:24:21", "closed": "2008-10-08 14:41:58", "commits": {}, "ttf": 27.00027777777778, "commitsDetails": []}, {"title": "TransactionAttributes swallows Exceptions [BATCH-833]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-833](https://jira.spring.io/browse/BATCH-833?redirect=false)** and commented\n\nIf the TransactionAttributes determines that a Transaction shouldn't be rolled back, the exception is effectively swallowed:\n\ntry {\nexitStatus = tasklet.execute(contribution, attributes);\n}\ncatch (Error e) {\nif (transactionAttribute.rollbackOn(e)) {\nthrow e;\n}\nelse {\nlogger.error(\"Ecountered error that should not cause rollback: \", e);\n}\n}\ncatch (Exception e) {\nif (transactionAttribute.rollbackOn(e)) {\nthrow e;\n}\nelse {\nlogger.error(\"Ecountered error that should not cause rollback: \", e);\n}\n}\n\nSo, for example, if the TransactionAttributes are set to not rollback a SkipLimitExceededException, it won't be rolledback, effectively preventing it from going up to the StepOperations and causing the step to fail.  Of course, someone shouldn't think to do that, but it's just one example.  If someone sets any exception to be on the fatal list, but messes up and puts an exception in the attribute list to cause rollback, the step won't fail.\n\nI propose that the rollback decision on transaction attribute be used solely to determine whether the transaction is committing, but that the exception should still be propagated up to the StepOperations to determine whether or not it should cause failure.\n\n\n---\n\n**Affects:** 1.1.2, 2.0.0.M1\n\n**Attachments:**\n- [mylyn-context.zip](https://jira.spring.io/secure/attachment/14683/mylyn-context.zip) (_26.58 kB_)\n\n**Backported to:** [1.1.3](https://github.com/spring-projects/spring-batch/milestone/12?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2743", "user": "spring-issuemaster", "labels": ["has: backports", "type: bug"], "created": "2008-09-11 11:06:10", "closed": "2008-10-24 08:31:52", "commits": {}, "ttf": 42.000277777777775, "commitsDetails": []}, {"title": "sql error \"column ambiguously defined\" in JdbcJobInstanceDao [BATCH-835]", "body": "**[Pavel Zupa](https://jira.spring.io/secure/ViewProfile.jspa?name=pavel.zupa)** opened **[BATCH-835](https://jira.spring.io/browse/BATCH-835?redirect=false)** and commented\n\nI'm getting BadSqlGrammarException \"column ambiguously defined\" on oracle while executing query in JdbcJobInstanceDao.getJobInstance(). The problem is in following query:\nSELECT JOB_INSTANCE_ID, JOB_NAME, JOB_KEY, VERSION from %PREFIX%JOB_INSTANCE ji, %PREFIX%JOB_EXECUTION je where JOB_EXECUTION_ID = ? and ji.JOB_INSTANCE_ID = je.JOB_INSTANCE_ID\n\nPoor oracle doesn't know from which table to get JOB_INSTANCE_ID and VERSION.\nSimple addition of \"ji.\" to these two columns works fine.\n\n\n---\n\n**Affects:** 2.0.0.M2\n", "url": "https://github.com/spring-projects/spring-batch/issues/2741", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-09-11 20:04:08", "closed": "2008-09-23 11:06:41", "commits": {}, "ttf": 11.000277777777777, "commitsDetails": []}, {"title": "BIGINT datatype is not in Sybase but schema-sybase.sql is using it [BATCH-837]", "body": "**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[BATCH-837](https://jira.spring.io/browse/BATCH-837?redirect=false)** and commented\n\nI tried to run schema-sybase.sql to install all tables in the sybase, and I just found out that a few of fields are using BIGINT as the data type. However, BIGINT is not a supported type in Sybase, could we use numeric(38,0) instead?\n\n\n---\n\n**Affects:** 1.1.2\n", "url": "https://github.com/spring-projects/spring-batch/issues/2739", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2008-09-13 12:17:22", "closed": "2008-11-10 08:11:10", "commits": {}, "ttf": 57.000277777777775, "commitsDetails": []}, {"title": "TimeoutTerminationPolicy does not terminate when eof is encountered [BATCH-838]", "body": "**[Lars Delin](https://jira.spring.io/secure/ViewProfile.jspa?name=ldelin)** opened **[BATCH-838](https://jira.spring.io/browse/BATCH-838?redirect=false)** and commented\n\nThe isCompleted methods of TimeoutTerminationPolicy (both the one implemented in the class and the one inherited from CompletionPolicySupport) does not seem to take end-of-file into account., They returns false until the timeout-time is up, even if the exitCode of the ExitStatus parameter changes to \"COMPLETED\"  when an eof is reached (looking at the constants in ExitStatus I should have guessed that the status should be \"FINISHED\"....). The result is lots of extra reads that all gets end-of-file.\n\n\n---\n\n**Affects:** 1.1.2\n\n**Backported to:** [1.1.3](https://github.com/spring-projects/spring-batch/milestone/12?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2738", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2008-09-15 01:48:40", "closed": "2008-09-23 23:16:52", "commits": {}, "ttf": 8.000277777777777, "commitsDetails": []}, {"title": "Reference doc reference deprecated code: 'StatefulRetryStepFactoryBean'  [BATCH-839]", "body": "**[Morten Andersen-Gott](https://jira.spring.io/secure/ViewProfile.jspa?name=magott)** opened **[BATCH-839](https://jira.spring.io/browse/BATCH-839?redirect=false)** and commented\n\nIn the reference doc under \"4.4.1.6. Configuring Retry Logic\" a reference is made to the deprecated StatefulRetryStepFactoryBean under the configuration showing, which is using the correct SkipLimitStepFactoryBean. It is not a big issue, but it makes the documentation confusing.\n\nThe actual reference is in the following sentence:\n\"The StatefulRetryStepFactoryBean requires a limit for the number of times an individual item can be retried, and a list of Exceptions that are 'retryable'.\"\n\n\n---\n\n**Affects:** 1.1.0\n\n**Backported to:** [1.1.3](https://github.com/spring-projects/spring-batch/milestone/12?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2737", "user": "spring-issuemaster", "labels": ["has: backports", "in: documentation", "type: bug"], "created": "2008-09-15 21:40:49", "closed": "2008-09-23 12:28:11", "commits": {}, "ttf": 7.000277777777778, "commitsDetails": []}, {"title": "Defer resolution of resource pattern in MultiResourceItemReader [BATCH-840]", "body": "**[Kenneth DeLong](https://jira.spring.io/secure/ViewProfile.jspa?name=kdelong)** opened **[BATCH-840](https://jira.spring.io/browse/BATCH-840?redirect=false)** and commented\n\nOften, the first step in a job is to fetch the files to be processed into a working directory.  As MultiResourceItemReader's \"resources\" property is resolved by Spring on bean initialization, it always gets an empty Resource[] (because the job has not started yet, therefore the files have not been fetched).\n\nMRIR should be able to use some sort of deferred resolution strategy to resolve its resource string.\n\nThere is further discussion here: http://forum.springframework.org/showthread.php?p=201823\n\nAlso, as part of this, MRIR should expose the actual list of Resources processed, either with a getResources() method or by putting the list into the ExecutionContext so that downstream steps can access it (like a FileArchiver or something like that).\n\n\n---\n\n**Affects:** 1.1.2\n", "url": "https://github.com/spring-projects/spring-batch/issues/2736", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: declined", "type: bug"], "created": "2008-09-16 04:59:10", "closed": "2008-09-29 00:56:41", "commits": {}, "ttf": 12.000277777777777, "commitsDetails": []}, {"title": "FatalException does not get through StepListener [BATCH-842]", "body": "**[Pavel Zupa](https://jira.spring.io/secure/ViewProfile.jspa?name=pavel.zupa)** opened **[BATCH-842](https://jira.spring.io/browse/BATCH-842?redirect=false)** and commented\n\nWhile debugging new batch task I've encontered this strange behaviour. There have been an error in use of hibernate in my writer which caused org.springframework.dao.InvalidDataAccessApiUsageException to be thrown on commit. But instead of passing this exception to my StepListener's onErrorInStep(), the step simply finishes and only loggs this message, which really doesn't tell much:\n18.9.2008 11:06:36 [thread: 11] org.springframework.batch.core.step.tasklet.TaskletStep$1 doInIteration\nSEVERE: Fatal error detected during commit.\n\nI use skiplimitstep with java.lang.Exception set as skippable and retryable, but even setting DataAccessException as fatal doesn't help. When the above exception is processed it's wrapped in TaskletStep.FatalException, so it won't match. And TaskletStep.FatalException is internal protected thing, so it cannot be declared as fatal exception class in skip limit step.\n\n\n---\n\n**Affects:** 2.0.0.M2\n", "url": "https://github.com/spring-projects/spring-batch/issues/2734", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2008-09-17 20:40:31", "closed": "2008-09-29 00:55:50", "commits": {}, "ttf": 11.000277777777777, "commitsDetails": []}, {"title": "FlatFileItemWriter handling of failure in LineAggregator [BATCH-843]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-843](https://jira.spring.io/browse/BATCH-843?redirect=false)** and commented\n\nFFIW should first map all items to strings and only then write them. Currently failure in line aggregator can cause rollback when some lines from the current chunk are already written.\n\n\n---\n\n**Affects:** 2.0.0.M1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2733", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-09-19 02:16:53", "closed": "2008-09-29 02:41:49", "commits": {}, "ttf": 10.000277777777777, "commitsDetails": []}, {"title": "FaultTolerantChunkOrientedTasklet loses chunks when non-skippable exceptions thrown in read phase [BATCH-847]", "body": "**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[BATCH-847](https://jira.spring.io/browse/BATCH-847?redirect=false)** and commented\n\nFaultTolerantChunkOrientedTasklet loses chunks when non-skippable exceptions are thrown during the read phase.  This is true for exceptions thrown in Readers or in ItemListeners.  The RepeatTemplate doesn't see this as a fatal exception so it keeps going.  The chunk that was processed is lost and the reader picks up at the next record or page from where the failure occurred.\n\nIf there is an error in the SQL statement used for a JdbcPagingItemReader then the end result looks like there was nothing to process.\n\nHaving the read throw a fatal exception for any non-skippable exception would solve this specific issue.  Not sure of that would cause some other side effects.\n\n\n\n---\n\n**Affects:** 1.1.2, 2.0.0.M1\n\n**Backported to:** [1.1.3](https://github.com/spring-projects/spring-batch/milestone/12?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2729", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2008-09-22 06:18:39", "closed": "2008-10-01 01:24:20", "commits": {}, "ttf": 8.000277777777777, "commitsDetails": []}, {"title": "broken transactional item processing [BATCH-853]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-853](https://jira.spring.io/browse/BATCH-853?redirect=false)** and commented\n\nResults of processing are buffered between transactions, which means in case of write failure causing rollback items don't get re-processed. In case processing is transactional this is obviously wrong behavior. We either need to fix this or document clearly as limitation.\n\n\n---\n\n**Affects:** 2.0.0.M1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/a77b200c4031f65337d933967c596c832990ce01, https://github.com/spring-projects/spring-batch/commit/fddfc3a5b0dd9b023bdebaff6223131e482d4230, https://github.com/spring-projects/spring-batch/commit/e9ca8a4d8229e7a2139aebbb4f654b9b13eac3cb, https://github.com/spring-projects/spring-batch/commit/4d0a786552967b84b40efa618dac766ab770c48a, https://github.com/spring-projects/spring-batch/commit/2accde774f78e9176a38638fa33a51ccae271a44\n", "url": "https://github.com/spring-projects/spring-batch/issues/2724", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-09-25 02:31:08", "closed": "2008-10-16 22:41:37", "commits": {}, "ttf": 21.00027777777778, "commitsDetails": []}, {"title": "map daos need to be truly transactional for correct restart [BATCH-857]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-857](https://jira.spring.io/browse/BATCH-857?redirect=false)** and commented\n\nMap daos keep references to mutable entities therefore they aren't truly transactional, regardless of using transactional maps. This leads to incorrect restart since the values stored in ExecutionContext don't reflect the rollback that preceded step failure.\n\nThe solution should be to clone the values before storing them, together with using the transactional collection wrappers.\n\n\n---\n\n**Affects:** 1.1.2, 2.0.0.M2\n\n**Backported to:** [1.1.3](https://github.com/spring-projects/spring-batch/milestone/12?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2721", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2008-10-01 00:07:43", "closed": "2008-10-24 08:36:06", "commits": {}, "ttf": 23.00027777777778, "commitsDetails": []}, {"title": "CompositeItemProcessor should handle null properly [BATCH-865]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-865](https://jira.spring.io/browse/BATCH-865?redirect=false)** and commented\n\nNow that returning null from an ItemProcessor indicates filtering on an item, CompositeItemProcessor should return null if any processor in the chain returns null.\n\n\n---\n\n**Affects:** 2.0.0.M1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/56a12d0e77d788c8f8ee8652f0ff21454ec415bb\n", "url": "https://github.com/spring-projects/spring-batch/issues/2714", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2008-10-03 12:55:15", "closed": "2008-10-06 01:57:12", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "Reference manual has invalid references to org.springframework.batch.io.file package [BATCH-866]", "body": "**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[BATCH-866](https://jira.spring.io/browse/BATCH-866?redirect=false)** and commented\n\nThe org.springframework.batch.io.file package doesn't exists - should reference org.springframework.batch.item.file instead\n\n\n---\n\n**Affects:** 1.1.2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/a0277677922a9d7176739f19dcb42f9c305fb6ef, https://github.com/spring-projects/spring-batch/commit/5fd07bd425610ec2b7d4f71d00c7bf28b04116b2\n\n**Backported to:** [1.1.3](https://github.com/spring-projects/spring-batch/milestone/12?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2713", "user": "spring-issuemaster", "labels": ["has: backports", "in: documentation", "type: bug"], "created": "2008-10-05 05:33:38", "closed": "2008-10-24 08:40:33", "commits": {}, "ttf": 19.00027777777778, "commitsDetails": []}, {"title": "Cannot add description to empty ExitStatus [BATCH-870]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-870](https://jira.spring.io/browse/BATCH-870?redirect=false)** and commented\n\nCannot add description to empty ExitStatus.  One result is that the stack trace is missing from JobExecution when an exception is thrown in a step.\n\n\n---\n\n**Affects:** 1.1.1\n\n**Attachments:**\n- [mylyn-context.zip](https://jira.spring.io/secure/attachment/14754/mylyn-context.zip) (_1.54 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/77a5637c36a69703c57ec10d4b538a7bdc8cbc08, https://github.com/spring-projects/spring-batch/commit/a98d26b3537d88d20de8c001031707e3529e120a\n\n**Backported to:** [1.1.3](https://github.com/spring-projects/spring-batch/milestone/12?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2709", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2008-10-08 18:10:56", "closed": "2008-10-24 08:40:23", "commits": {}, "ttf": 15.000277777777777, "commitsDetails": []}, {"title": "Broken link on Spring Batch homepage to user guide [BATCH-876]", "body": "**[Richard Kettelerij](https://jira.spring.io/secure/ViewProfile.jspa?name=rkettelerij)** opened **[BATCH-876](https://jira.spring.io/browse/BATCH-876?redirect=false)** and commented\n\nThe link on the homepage pointing to the user guide is broken. The link points to http://static.springframework.org/spring-batch/spring-batch-docs/index.html and gives a 404.\n\n\n---\n\n**Affects:** 2.0.0.M2\n", "url": "https://github.com/spring-projects/spring-batch/issues/2704", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2008-10-15 07:24:31", "closed": "2008-11-04 02:35:28", "commits": {}, "ttf": 19.00027777777778, "commitsDetails": []}, {"title": "JobExecution status isn't being updated when Step fails. [BATCH-856]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-856](https://jira.spring.io/browse/BATCH-856?redirect=false)** and commented\n\n\n---\n\n**Affects:** 2.0.0.M1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2698", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2008-09-30 10:09:46", "closed": "2008-10-01 10:07:55", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "SkipLimitStep does not fail if exception occurs [BATCH-884]", "body": "**[Jens Eickmeyer](https://jira.spring.io/secure/ViewProfile.jspa?name=eickmeyer)** opened **[BATCH-884](https://jira.spring.io/browse/BATCH-884?redirect=false)** and commented\n\nIf you define a skipLimitStep with both skippableExceptionClasses and fatalExceptionClasses defined and the ItemWriter throws an exception of a type which is not covered by one of the lists the step does not fail.\n\nNote: Robert could already reproduce the problem.\n\n\n---\n\n**Affects:** 1.1.2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/adc89290f1496fe45df2862ee19a39ee1086903f\n", "url": "https://github.com/spring-projects/spring-batch/issues/2694", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-10-20 01:27:00", "closed": "2008-10-20 23:07:33", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "onSkipInProcess called multiple times for same item using FaultTolerantChunkOrientedTasklet [BATCH-887]", "body": "**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[BATCH-887](https://jira.spring.io/browse/BATCH-887?redirect=false)** and commented\n\nIf there are skips during the writing of the chunk then the items in the chunk are processed twice again and the onSkipInProcess gets called for each time the chunk is processed.\n\nThe basic sequence of events:\n\n* read chunk\n\n* process chunk - some items cause process skip and the items are removed from chunk and placed in skip list\n\n* onSkipInProcess called for skipped items\n\n* write chunk - exception thrown for one item\n\n* process chunk without the process skips\n\n* onSkipInProcess called again for skipped items\n\n* write individual chunks - exception thrown for same item  and the item is removed from the chunk\n\n* onSkipInWrite called\n\n* process chunk without the process or write skips\n\n* write chunk without the process or write skips\n\n* onSkipInProcess called again for skipped items\n\nSeems that we should remove the skips from the skip list after the first onSkipInProcess is completed or supress the call once it has been made for the skip list.\n\n\n---\n\n**Affects:** 2.0.0.M2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/2acb661331d6432409f018b855575a60609ca221\n", "url": "https://github.com/spring-projects/spring-batch/issues/2690", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-10-23 13:49:36", "closed": "2008-10-24 01:15:47", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "SkipLimitStepFactoryBean should be FaultTolerantStepFactoryBean [BATCH-889]", "body": "**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[BATCH-889](https://jira.spring.io/browse/BATCH-889?redirect=false)** and commented\n\nThe docs need to be updated since SkipLimitStepFactoryBean should be FaultTolerantStepFactoryBean\n\n\n---\n\n**Affects:** 2.0.0.M2\n", "url": "https://github.com/spring-projects/spring-batch/issues/2688", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2008-10-28 00:13:26", "closed": "2008-11-12 03:17:57", "commits": {}, "ttf": 15.000277777777777, "commitsDetails": []}, {"title": "Thread visibility issues in repeat template [BATCH-892]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-892](https://jira.spring.io/browse/BATCH-892?redirect=false)** and commented\n\nResultHolder implementation in TaskExecutorRepeatTemplate probably needs some volatile keywords (http://forum.springframework.org/showthread.php?t=61715).\n\n\n---\n\n**Affects:** 1.1.2\n\n**Backported to:** [1.1.3](https://github.com/spring-projects/spring-batch/milestone/12?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2684", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2008-10-28 22:15:48", "closed": "2008-10-30 00:34:55", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Fix XML schema so that only top-level elements are allowed at top level (i.e. job). [BATCH-895]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-895](https://jira.spring.io/browse/BATCH-895?redirect=false)** and commented\n\nFix XML schema so that only top-level elements are allowed at top level (i.e. job).\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/aae3e2ecce95a9c4be17dc1a56b7dfb509a38f43\n", "url": "https://github.com/spring-projects/spring-batch/issues/2681", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-10-29 01:12:18", "closed": "2008-11-05 18:14:17", "commits": {}, "ttf": 7.000277777777778, "commitsDetails": []}, {"title": "Version is not rehydrated from database in JobInstance or JobExecution [BATCH-897]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-897](https://jira.spring.io/browse/BATCH-897?redirect=false)** and commented\n\nVersion is not rehydrated from database in JobInstance or JobExecution\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/7a4caca1fdff39074e151aa945a5d8774d1e7f25\n", "url": "https://github.com/spring-projects/spring-batch/issues/2679", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-10-30 03:53:45", "closed": "2008-11-05 18:13:22", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "HibernateCursorItemReader runs out of memory [BATCH-898]", "body": "**[sridhar](https://jira.spring.io/secure/ViewProfile.jspa?name=sridhar_ratna)** opened **[BATCH-898](https://jira.spring.io/browse/BATCH-898?redirect=false)** and commented\n\nWhen trying to read large data from MySQL 5.0& MS SQl Server 2005 runs out of memory\n\nDescription\n-----------\n\nThere is a single table in the data base with 10 columns. One of these columns is a BLOB fields which holds binary content of 33KB.\nThere are in total 70000 records in database.\nWhen trying to read these records its throwing out of memory error.\n\nWhen used HibernateCursorItemReader it shouldn't populate all the records in the memory. right?\n\nsteps to reproduce the problem\n------------------------------\n\nimport the attched project\nMySQL and SQL Server 2005 JDBC drivers are available in the lib folder. add the rest of the libraries from Spring 2.5, Hibernate 3.2 and Spring batch 1.1.2 jars to classpath.\nspecify the driver information in the jdbc.properties file.\ntable script.txt contain the table script for MySQL 5.0\nrun the DBRead.java\n\n\n\n---\n\n**Affects:** 1.1.2\n\n**Attachments:**\n- [hibernate.zip](https://jira.spring.io/secure/attachment/14823/hibernate.zip) (_2.45 MB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2678", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-10-30 21:41:29", "closed": "2008-11-07 01:14:29", "commits": {}, "ttf": 7.000277777777778, "commitsDetails": []}, {"title": "Uncreachable code in SkipLimitFactoryBean (setting BackOffPolicy) [BATCH-901]", "body": "**[Morten Andersen-Gott](https://jira.spring.io/secure/ViewProfile.jspa?name=magott)** opened **[BATCH-901](https://jira.spring.io/browse/BATCH-901?redirect=false)** and commented\n\nIn SkipLimitStepFactoryBean the code that sets the BackOffPolicy seems to be unreachable.\nIt is only set if the retryPolicy!=null. The retryPolicy will however never be null, as an if test prior to this test sets the retryPolicy if it is null.\nIn effect this is how the code works:\n\nif(retryPolicy==null){\n//set retryPolicy\n}\nif(retryPolicy==null && backOffPolicy!=null){\n//set backofpolicy\n}\n\nIn 2.0 the FaultTolerantStepFactoryBean the retryPolicy==null is taken out of the last if-statement.\n\n(You may also want to se the forum post: http://forum.springframework.org/showthread.php?t=62383)\nI have attached a patch that makes the if statement equal to that in FaultTolerantStepFactoryBean. Not sure why the retryPolicy==null was there in the first place, so this is something the original author might want to look into before the patch is applied. Just to make sure that it doesn't interfere with some logic that was not obvious to me.\n\n\n---\n\n**Affects:** 1.1.2\n\n**Attachments:**\n- [SkipLimitStepFactoryBean_1.1.2_backoffpolicy_patch.patch](https://jira.spring.io/secure/attachment/14828/SkipLimitStepFactoryBean_1.1.2_backoffpolicy_patch.patch) (_724 bytes_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/9fc803e6bd6b45ba2c9ee485e4e3b5ab15973428\n", "url": "https://github.com/spring-projects/spring-batch/issues/2676", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-11-02 23:11:07", "closed": "2008-11-07 01:15:36", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "Broken 1.1.3 release [BATCH-899]", "body": "**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[BATCH-899](https://jira.spring.io/browse/BATCH-899?redirect=false)** and commented\n\nJust to be able to track any movement on: http://forum.springframework.org/showthread.php?t=62883\n\n\n---\n\n**Affects:** 1.1.3\n", "url": "https://github.com/spring-projects/spring-batch/issues/2670", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-11-01 06:56:37", "closed": "2008-11-07 01:14:02", "commits": {}, "ttf": 5.000277777777778, "commitsDetails": []}, {"title": "Thread safety issue in JobRegistryBackgroundJobRunner [BATCH-912]", "body": "**[Morten Andersen-Gott](https://jira.spring.io/secure/ViewProfile.jspa?name=magott)** opened **[BATCH-912](https://jira.spring.io/browse/BATCH-912?redirect=false)** and commented\n\nI noticed that the errors variable in JobRegistryBackgroundJobRunner is modified by one thread and accessed by another without synchronization. As the ArrayList isn't thread safe, I think this might cause visibility issues in the code that checks if errors has occurred during initialization of the application context. As with all visibility issues it is hard to prove this, but I believe that at least in theory this may be a problem.\n\nA way to fix this would be by replacing\nprivate static List\\<Exception> errors = new ArrayList\\<Exception>();\nwith\nprivate static List\\<Exception> errors = Collections.synchronizedCollection(new ArrayList\\<Exception>());\n\nNot sure if making the list volatile will work...as I'm not all that confident on what the implications are of making a collection variable volatile. Don't think there will much of a performance hit this particular case anyway.\n\n\n---\n\n**Affects:** 2.0.0.M2, 2.0.0.M3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/38520ea68c5f8f9a21d18b5100710e4a947e7aa7\n", "url": "https://github.com/spring-projects/spring-batch/issues/2666", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-11-08 02:25:39", "closed": "2008-11-09 19:53:07", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Concurrent modification of execution context in tasklet step [BATCH-917]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-917](https://jira.spring.io/browse/BATCH-917?redirect=false)** and commented\n\nConcurrent modification of execution context in tasklet step.  http://forum.springframework.org/showthread.php?t=63162.\n\nThe tasklet step is making a false assumption about execution context updates (it just clears the dirty flag once per chunk, but there is no reason chunks need to be serial).\n\n\n---\nNo further details from [BATCH-917](https://jira.spring.io/browse/BATCH-917?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/2659", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-11-10 18:22:30", "closed": "2008-11-14 03:03:45", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "Duplicate jar files in *-with-dependencies.zip [BATCH-918]", "body": "**[Manfred Paix](https://jira.spring.io/secure/ViewProfile.jspa?name=manzi)** opened **[BATCH-918](https://jira.spring.io/browse/BATCH-918?redirect=false)** and commented\n\nThe ZIP package spring-batch-dist-1.1.3.RELEASE-A-with-dependencies.zip does contain several duplicate entries in the same folder, mainly jar files.\n\nExamples:\n\nsamples\\lib\\antlr\\2.7.6 contains 2 jar files named antlr-2.7.6.jar\nsources\\lib\\log4j\\1.2.12 contains 2 jar files named log4j-1.2.12.jar\n\nThere are a lot of such duplicate entries in samples\\lib and also in sources\\lib\n\nI noticed the same problem in previous distributions.\n\n\n---\n\n**Affects:** 1.1.4\n", "url": "https://github.com/spring-projects/spring-batch/issues/2658", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2008-11-10 19:16:00", "closed": "2009-02-27 22:52:35", "commits": {}, "ttf": 109.00027777777778, "commitsDetails": []}, {"title": "ExecutionContext keys are not unique enough in partition components [BATCH-921]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-921](https://jira.spring.io/browse/BATCH-921?redirect=false)** and commented\n\nExecutionContext keys are not unique enough.  I thought we used to prepend the class name or something?\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/493950e3cba8e0c3f1b56353b0e35bd4fe4d14c8\n", "url": "https://github.com/spring-projects/spring-batch/issues/2655", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-11-11 21:38:32", "closed": "2008-11-12 17:23:22", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Missing dependency / repository breaks build on fresh checkout [BATCH-923]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-923](https://jira.spring.io/browse/BATCH-923?redirect=false)** and commented\n\nMissing dependency / repository breaks build on fresh checkout\n\nThomas says:\nI added the repo http://s3.amazonaws.com/maven.springframework.org/external and it worked\n\nBut we aren't supposed to depend on that repo.  Everything we need should be in http://repository.springsource.com/maven/bundles/*.  Maybe it's just for S3 deployment?\n\n\n---\n\n**Issue Links:**\n- [BATCH-816](https://jira.spring.io/browse/BATCH-816) Make sure all dependencies are part of the Enterprise Repository\n\n", "url": "https://github.com/spring-projects/spring-batch/issues/2653", "user": "spring-issuemaster", "labels": ["in: core", "in: documentation", "in: infrastructure", "in: samples", "type: bug"], "created": "2008-11-12 03:12:50", "closed": "2008-12-10 23:52:07", "commits": {}, "ttf": 28.00027777777778, "commitsDetails": []}, {"title": "StaxEventItemWriter doesn't reset restart flag on close [BATCH-925]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-925](https://jira.spring.io/browse/BATCH-925?redirect=false)** and commented\n\nWhen SEIW is restarted, closed and opened with blank execution context it still assumes restart. The issue is a boolean instance variable that is not reset on close. The fix is to remove the instance variable altogether as it is only relevant in the scope of open(..) method.\n\n\n---\n\n**Affects:** 1.1.3, 2.0.0.M2\n\n**Backported to:** [1.1.4](https://github.com/spring-projects/spring-batch/milestone/13?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2651", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2008-11-12 20:23:18", "closed": "2008-11-12 22:36:02", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "vague skip limit for concurrent chunks [BATCH-926]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-926](https://jira.spring.io/browse/BATCH-926?redirect=false)** and commented\n\nWhen chunks execute concurrently each chunk works with its own local copy of skipCount (from StepContribution). Given skipLimit=1 and 10 chunks execute concurrenlty we can end up with successful job execution and 10 skips. As the number of concurrent chunks increases the skipLimit becomes more a limit per chunk rather than job.\n\n\n---\n\n**Affects:** 1.1.3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/43b5edba71f11295d27b210418dac795062836d1, https://github.com/spring-projects/spring-batch/commit/3eac2c8bfecfa51bfe24f565df60ad10a32a0e74, https://github.com/spring-projects/spring-batch/commit/f72cd89bc62bca9ff1001fcd5bf686afc3c449fb\n\n**Backported to:** [1.1.4](https://github.com/spring-projects/spring-batch/milestone/13?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2650", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2008-11-13 00:54:53", "closed": "2008-11-20 18:20:12", "commits": {}, "ttf": 7.000277777777778, "commitsDetails": []}, {"title": "Write failures don't fail immediately. [BATCH-931]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-931](https://jira.spring.io/browse/BATCH-931?redirect=false)** and commented\n\nWhen using the FaultTolerantStepFactoryBean, without configuring any exception lists, an exception thrown in the writer will cause failure.  However, it appears to be trying to determine which item failed before actually failing, which is somewhat confusing.\n\n\n---\n\n**Affects:** 2.0.0.M2\n\n**Issue Links:**\n- [BATCH-936](https://jira.spring.io/browse/BATCH-936) avoid chunk reprocessing if failure is neither retryable nor skippable\n\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/e3a9e29b67ea50ddcfb816220da6442f0a3dd2aa\n", "url": "https://github.com/spring-projects/spring-batch/issues/2646", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-11-19 02:48:02", "closed": "2008-11-20 20:29:22", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "FlatFileItemWriter.clear does not reset OutputState [BATCH-934]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-934](https://jira.spring.io/browse/BATCH-934?redirect=false)** and commented\n\nPasted from http://forum.springframework.org/showthread.php?t=63720\n\nLooking through FlatFileItemWriter (FFIW) code, I found out that the clear() method does not invoke reset() on OutputState, and I'm wondering if this is a bug or not.\n\nThe FFIW buffers the lines until it comes to flush(), where all lines are actually written to the file. If an IOException occurs during flush() -after some lines were already written to the file- , the clear() method is invoked, that only clears the buffer of lines.\n\nShouldn't the FFIW.clear() method also invoke reset() on OutputState, so that the lines that were already written by the flush() are removed, and the file is in the exact state it was before flush() ? This would allow some kind of transactional behaviour.\n\n\n---\n\n**Affects:** 1.1.3\n", "url": "https://github.com/spring-projects/spring-batch/issues/2643", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: declined", "type: bug"], "created": "2008-11-19 23:35:03", "closed": "2008-11-20 04:04:22", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Make sure JobRepository can be proxied [BATCH-937]", "body": "**[Gaetan Pitteloud](https://jira.spring.io/secure/ViewProfile.jspa?name=gpitteloud)** opened **[BATCH-937](https://jira.spring.io/browse/BATCH-937?redirect=false)** and commented\n\nI encountered the following exception while running a job:\n\norg.springframework.dao.CannotSerializeTransactionException:\nPreparedStatementCallback; SQL [INSERT into  BCM.BCM_JOB_EXECUTION(JOB_EXECUTION_ID, JOB_INSTANCE_ID,  START_TIME, END_TIME, STATUS, CONTINUABLE, EXIT_CODE,  EXIT_MESSAGE, VERSION, CREATE_TIME) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]; ORA-08177: can't serialize access for this transaction ; nested exception is java.sql.SQLException: ORA-08177: can't  serialize access for this transaction\n\nI was not able to reproduce it in the application, but could actually reproduce it in an \"isolated\" environment:\n\nWhen 2 requests to run a job comes together, the following situation might occur in SimpleJobLauncher's call to JobRepository.createJobExecution(). This behaviour is due to the serializable isolation; of course, it is still possible to change this level, but the default from JobRepositoryFactoryBean is serializable.\n\nSimpleJobLauncher.run(job1)\njobRepository.createJobExecution(job1)\nnew transaction from job1 --> jdbc connection1\nconnection1: set transaction isolation level serializable\n\nSimpleJobLauncher.run(job2)\njobRepository.createJobExecution(job2)\nnew transaction from job2 --> jdbc connection2\nconnection2: set transaction isolation level serializable\n\ncon1: insert into job_execution\ncon1: commit\ncon2: insert into job_execution --> ORA-8177\n\nThis exception seems to be caused by the fact that con2 is in isolation and does not see what's going on in con1. This isolation is still there even after con1 has committed (in particular, if con2 queries job_execution, it will not see the committed record inserted by con1). Thus, con2 cannot assume that PK constraint will not be violated when insertion occurs (since con1 has committed, changes are definitive and will not be withdrawn, if a constraint violation happens). Using serializable isolation is like pessimistic locking, in the sense that queries are rejected when a risk is present.\n\nThere might be 2 solutions:\n1. reduce isolation level, but this might not be a good idea in order to prevent duplicate job running\n2. wrap the call to jobRepository.createJobExecution() into a retry operations that retries as long as this exception happens (this is actually the DBMS proposed solution : rollback the transaction and retry in a new one).\n\n\n\n---\n\n**Affects:** 1.1.3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/95bbf6d0f071b8425030eeabcc4497a60d17fe14\n", "url": "https://github.com/spring-projects/spring-batch/issues/2641", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2008-11-20 20:29:47", "closed": "2009-02-27 22:03:34", "commits": {}, "ttf": 99.00027777777778, "commitsDetails": []}, {"title": "Make step scope work with aop-auto-proxy [BATCH-939]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-939](https://jira.spring.io/browse/BATCH-939?redirect=false)** and commented\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/fb9b662160e28ee4200b3902165a3fb84d1a6ce5\n", "url": "https://github.com/spring-projects/spring-batch/issues/2639", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-11-23 18:04:06", "closed": "2008-11-23 18:05:23", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Remove or change reference to ItemProcessor in 1.x docos [BATCH-943]", "body": "**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[BATCH-943](https://jira.spring.io/browse/BATCH-943?redirect=false)** and commented\n\nThe documentation for 1.1.x is misleading - regardless of what may pop up in the 2.x series.\nPlease see this discussion for details:\nhttp://forum.springframework.org/showthread.php?p=214917#post214917\n\n\n---\n\n**Affects:** 1.1.3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/77959978375dbc4c1bb2234e2799d137311fade1, https://github.com/spring-projects/spring-batch/commit/f58b761e9f27a8e7a5fc4f5ad40de38cf0486671\n", "url": "https://github.com/spring-projects/spring-batch/issues/2637", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2008-11-25 11:11:48", "closed": "2009-01-12 03:27:46", "commits": {}, "ttf": 47.000277777777775, "commitsDetails": []}, {"title": "Fix zip distribution [BATCH-944]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-944](https://jira.spring.io/browse/BATCH-944?redirect=false)** and commented\n\nThe zip distribution needs to be fixed.  Test should be added, and the with-dependencies release has issues.\n\n\n---\n\n**Affects:** 2.0.0.M2\n", "url": "https://github.com/spring-projects/spring-batch/issues/2636", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2008-11-25 14:50:57", "closed": "2008-11-25 14:59:39", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "NullPointerException in MapStepExecutionDao.getStepExecutions [BATCH-946]", "body": "**[Artem Grinstein](https://jira.spring.io/secure/ViewProfile.jspa?name=artfh)** opened **[BATCH-946](https://jira.spring.io/browse/BATCH-946?redirect=false)** and commented\n\nMapStepExecutionDao throws a NullPointerException for jobs whitout steps. For example\nJob job1 = new Job() {\npublic void execute(JobExecution arg0) {\nSystem.err.println(\"execute!\");\n}\n..\n}\nI get the following exception while running a job:\njava.lang.NullPointerException\nat org.springframework.batch.core.repository.dao.MapStepExecutionDao.getStepExecutions(MapStepExecutionDao.java:101)\nat org.springframework.batch.core.explore.support.SimpleJobExplorer.getJobExecutionDependencies(SimpleJobExplorer.java:127)\nat org.springframework.batch.core.explore.support.SimpleJobExplorer.findJobExecutions(SimpleJobExplorer.java:73)\nat StartupTest.testMe(StartupTest.java:72)\n\nThe solution is:\npublic List\\<StepExecution> getStepExecutions(JobExecution jobExecution) {\nMap<String, StepExecution> executions = executionsByJobExecutionId.get(jobExecution.getId());\n+\n\n    if (executions == null) {\n\n+ \n\n      return null;\n\n+ \n\n      }\n      List<StepExecution> result = new ArrayList<StepExecution>(executions.values());\n\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/0fbb815989cdde604090909ce605e91d2bc4229f\n", "url": "https://github.com/spring-projects/spring-batch/issues/2635", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-11-27 03:57:48", "closed": "2008-11-28 00:06:33", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "ItemTransformer and ItemProcessor mixed together [BATCH-947]", "body": "**[Grzegorz Borkowski](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorzborkowski)** opened **[BATCH-947](https://jira.spring.io/browse/BATCH-947?redirect=false)** and commented\n\nIn Spring Batch reference manual under this link: http://static.springsource.org/spring-batch/spring-batch-docs/reference/html-single/index.html#d0e2802\nin section 3.11 there is a sentence:\n\nFor this scenario, Spring Batch provides the ItemTransformer interface:\n\npublic interface ItemProcessor<I, O> {\n\nO process(I item) throws Exception;\n}\n\nAn ItemTransformer is very simple, given one object, transorm it and return another.\n\nAs you see, first it talkes about ItemTransformer, but then it prints ItemProcessor interface code, and then it again talks about ItemTransformer.\n\n\n---\n\n**Affects:** 2.0.0.RC2\n", "url": "https://github.com/spring-projects/spring-batch/issues/2634", "user": "spring-issuemaster", "labels": ["in: documentation", "status: duplicate", "type: bug"], "created": "2008-11-30 02:15:14", "closed": "2008-12-17 00:25:07", "commits": {}, "ttf": 16.00027777777778, "commitsDetails": []}, {"title": "MapJobInstanceDao.getLastJobInstances ignores jobName parameter [BATCH-948]", "body": "**[Artem Grinstein](https://jira.spring.io/secure/ViewProfile.jspa?name=artfh)** opened **[BATCH-948](https://jira.spring.io/browse/BATCH-948?redirect=false)** and commented\n\nMapJobInstanceDao.getLastJobInstances ignores jobName parameter and returns  JobInstances for all jobs.\n\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Attachments:**\n- [fix.diff](https://jira.spring.io/secure/attachment/14923/fix.diff) (_1.03 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/67c45bfe8aa3c0026e63b920bb41983ff1c1bc22\n", "url": "https://github.com/spring-projects/spring-batch/issues/2633", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-12-01 00:37:23", "closed": "2008-12-01 03:19:48", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Exception during rollback hides root cause [BATCH-950]", "body": "**[Eric Dalquist](https://jira.spring.io/secure/ViewProfile.jspa?name=edalquist)** opened **[BATCH-950](https://jira.spring.io/browse/BATCH-950?redirect=false)** and commented\n\nIf an exception is thrown while processing a rollback the root exception fails to be logged.\n\nIn ItemOrientedStep it catches Exception then calls processRollback but if processRollback throws an exception the original cause is never even logged, making it very difficult to track down the root cause of the exception. Perhaps changing the code from:\n\ncatch (Exception e) {\nprocessRollback(stepExecution, contribution, fatalException, transaction);\nthrow e;\n}\n\nto:\n\ncatch (Exception e) {\ntry {\nprocessRollback(stepExecution, contribution, fatalException, transaction);\nthrow e;\n}\ncatch (Exception rollbackException) {\nlogger.error(\"Exception thrown during processRollback will be propegated, exception that caused the rollback follows\", e);\nthrow rollbackException;\n}\n}\n\nAn example stack trace for this problem is:\norg.springframework.batch.core.step.AbstractStep$FatalException: Failed while processing rollback\nat org.springframework.batch.core.step.item.ItemOrientedStep.processRollback(ItemOrientedStep.java:428)\nat org.springframework.batch.core.step.item.ItemOrientedStep.access$1000(ItemOrientedStep.java:68)\nat org.springframework.batch.core.step.item.ItemOrientedStep$1.doInIteration(ItemOrientedStep.java:347)\nat org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:346)\nat org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:212)\nat org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:143)\nat org.springframework.batch.core.step.item.ItemOrientedStep.doExecute(ItemOrientedStep.java:231)\nat org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:172)\nat org.springframework.batch.core.job.SimpleJob.execute(SimpleJob.java:100)\nat org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:86)\nat org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)\nat org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:81)\nat org.jasig.portal.stats.quartz.JobLauncherDetails.executeInternal(JobLauncherDetails.java:71)\nat org.springframework.scheduling.quartz.QuartzJobBean.execute(QuartzJobBean.java:86)\nat org.quartz.core.JobRunShell.run(JobRunShell.java:203)\nat org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:520)\nCaused by: org.springframework.transaction.TransactionSystemException: Could not roll back JDBC transaction; nested exception is java.sql.SQLException: Protocol violation\nat org.springframework.jdbc.datasource.DataSourceTransactionManager.doRollback(DataSourceTransactionManager.java:279)\nat org.springframework.transaction.support.AbstractPlatformTransactionManager.processRollback(AbstractPlatformTransactionManager.java:800)\nat org.springframework.transaction.support.AbstractPlatformTransactionManager.rollback(AbstractPlatformTransactionManager.java:777)\nat org.springframework.batch.core.step.item.ItemOrientedStep.processRollback(ItemOrientedStep.java:419)\n... 15 more\nCaused by: java.sql.SQLException: Protocol violation\nat oracle.jdbc.driver.SQLStateMapping.newSQLException(SQLStateMapping.java:70)\nat oracle.jdbc.driver.DatabaseError.newSQLException(DatabaseError.java:110)\nat oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:171)\nat oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:227)\nat oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:439)\nat oracle.jdbc.driver.T4C7Ocommoncall.receive(T4C7Ocommoncall.java:130)\nat oracle.jdbc.driver.T4CConnection.doRollback(T4CConnection.java:613)\nat oracle.jdbc.driver.PhysicalConnection.rollback(PhysicalConnection.java:3389)\nat org.apache.commons.dbcp.DelegatingConnection.rollback(DelegatingConnection.java:328)\nat org.apache.commons.dbcp.PoolingDataSource$PoolGuardConnectionWrapper.rollback(PoolingDataSource.java:312)\nat org.springframework.jdbc.datasource.DataSourceTransactionManager.doRollback(DataSourceTransactionManager.java:276)\n... 18 more\n\n\n---\n\n**Affects:** 1.1.3, 2.0.0.M3\n\n**Issue Links:**\n- [BATCH-962](https://jira.spring.io/browse/BATCH-962) refactor TaskletStep's exception handling for better clarity\n\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/22fb6350e155dde3102b39a06dfa090ca3b15c9a, https://github.com/spring-projects/spring-batch/commit/fe28e558bd9e2464ab53057feb432785a578f14a, https://github.com/spring-projects/spring-batch/commit/b1bcc8422ffd50108404f45872e9d762e368642b\n\n**Backported to:** [1.1.4](https://github.com/spring-projects/spring-batch/milestone/13?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2631", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2008-12-02 02:06:33", "closed": "2008-12-08 02:22:47", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "StagingItemReader is not restartable [BATCH-952]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-952](https://jira.spring.io/browse/BATCH-952?redirect=false)** and commented\n\nStagingItemReader is not restartable because it updates the process indicator in the read() method, which is only ever called once per item (used to be once per item per transaction in 1.x).  I'm not sure the best way to fix this.  The reader knows the id of the record to be updated, but that information is lost further downstream in the processing pipeline.  Maybe it's time to get serious about ChunkContext or `@ChunkAttribute` (see [BATCH-920](https://jira.spring.io/browse/BATCH-920))?\n\nIt would be a good time to replace the innards of StagingItemReader anyway - it can delegate most of its stateful behaviour to an off the shelf JDBC ItemReader.\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Attachments:**\n- [mylyn-context.zip](https://jira.spring.io/secure/attachment/15046/mylyn-context.zip) (_4.50 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/8e41bc5603bb1c50d1c08ebe80408005b14ba9ae\n", "url": "https://github.com/spring-projects/spring-batch/issues/2630", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2008-12-02 21:00:50", "closed": "2009-01-15 03:25:41", "commits": {}, "ttf": 43.000277777777775, "commitsDetails": []}, {"title": "Failure on job stop [BATCH-954]", "body": "**[Edouard Lemaistre](https://jira.spring.io/secure/ViewProfile.jspa?name=edouard)** opened **[BATCH-954](https://jira.spring.io/browse/BATCH-954?redirect=false)** and commented\n\nTry to stop a job with SimpleJobOperator through JMX.\n\nA OptimisticLockingFailureException is thrown because the jobExecution version doesn't match with persisted one.\n\nBug origin :\nWhen the JobExecution status is synchronized, the version is not updated.\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Issue Links:**\n- [BATCH-961](https://jira.spring.io/browse/BATCH-961) integration tests for JobOperator\n\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/9b76c9eaae10d6b807b651ccce82332eb5c33252\n", "url": "https://github.com/spring-projects/spring-batch/issues/2628", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-12-04 23:55:20", "closed": "2008-12-07 23:41:22", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "Optional dependencies included by default with new m3 pom [BATCH-957]", "body": "**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[BATCH-957](https://jira.spring.io/browse/BATCH-957?redirect=false)** and commented\n\nLooks like most or all optional dependencies are now included by default\n\nThe dependency tree when including spring-batch-core for latest milestones:\n\nM2:\n[INFO] +- org.springframework.batch:spring-batch-core:jar:2.0.0.M2:compile\n[INFO] |  +- org.springframework.batch:spring-batch-infrastructure:jar:2.0.0.M2:compile\n[INFO] |  |  \\- org.springframework.ws:spring-oxm:jar:1.0.4:compile\n[INFO] |  |     \\- org.springframework.ws:spring-xml:jar:1.0.4:compile\n[INFO] |  +- com.thoughtworks.xstream:xstream:jar:1.3:compile\n[INFO] |  |  \\- xpp3:xpp3_min:jar:1.1.4c:compile\n[INFO] |  +- org.codehaus.jettison:jettison:jar:1.0.1:compile\n[INFO] |  |  \\- stax:stax-api:jar:1.0.1:compile\n[INFO] |  +- org.springframework:spring-aop:jar:2.5.5:compile\n[INFO] |  |  \\- aopalliance:aopalliance:jar:1.0:compile\n[INFO] |  +- org.springframework:spring-beans:jar:2.5.5:compile\n[INFO] |  +- org.springframework:spring-context:jar:2.5.5:compile\n[INFO] |  \\- org.springframework:spring-core:jar:2.5.5:compile\n\nM3:\n[INFO] +- org.springframework.batch:org.springframework.batch.core:jar:2.0.0.M3:compile\n[INFO] |  +- org.springframework.batch:org.springframework.batch.infrastructure:jar:2.0.0.M3:compile\n[INFO] |  |  +- net.sourceforge.cglib:com.springsource.net.sf.cglib:jar:2.1.3:compile\n[INFO] |  |  +- javax.jms:com.springsource.javax.jms:jar:1.1.0:compile\n[INFO] |  |  +- org.apache.commons:com.springsource.org.apache.commons.lang:jar:2.1.0:compile\n[INFO] |  |  +- org.hibernate:com.springsource.org.hibernate:jar:3.2.6.ga:compile\n[INFO] |  |  |  +- org.apache.commons:com.springsource.org.apache.commons.collections:jar:3.2.0:compile\n[INFO] |  |  |  +- org.antlr:com.springsource.antlr:jar:2.7.6:compile\n[INFO] |  |  |  +- org.jboss.javassist:com.springsource.javassist:jar:3.3.0.ga:compile\n[INFO] |  |  |  \\- org.dom4j:com.springsource.org.dom4j:jar:1.6.1:compile\n[INFO] |  |  +- org.hibernate:com.springsource.org.hibernate.ejb:jar:3.3.2.GA:compile\n[INFO] |  |  |  +- org.hibernate:com.springsource.org.hibernate.annotations.common:jar:3.3.0.ga:compile\n[INFO] |  |  |  \\- org.jboss.util:com.springsource.org.jboss.util:jar:2.0.4.GA:compile\n[INFO] |  |  |     \\- edu.oswego.cs.concurrent:com.springsource.edu.oswego.cs.dl.util.concurrent:jar:1.3.4:compile\n[INFO] |  |  +- org.hibernate:com.springsource.org.hibernate.annotations:jar:3.3.1.ga:compile\n[INFO] |  |  +- javax.transaction:com.springsource.javax.transaction:jar:1.1.0:compile\n[INFO] |  |  +- org.apache.ibatis:com.springsource.com.ibatis:jar:2.3.0.677:compile\n[INFO] |  |  |  \\- org.apache.log4j:com.springsource.org.apache.log4j:jar:1.2.15:compile\n[INFO] |  |  +- stax:stax:jar:1.2.0:compile\n[INFO] |  |  |  \\- stax:stax-api:jar:1.0.1:compile\n[INFO] |  |  \\- org.springframework.ws:org.springframework.oxm:jar:1.5.4.A:compile\n[INFO] |  |     \\- org.springframework.ws:org.springframework.xml:jar:1.5.4.A:compile\n[INFO] |  |        \\- org.apache.ws:com.springsource.org.apache.ws.commons.schema:jar:1.3.2:compile\n[INFO] |  +- org.objectweb.asm:com.springsource.org.objectweb.asm.commons:jar:2.2.3:runtime\n[INFO] |  |  \\- org.objectweb.asm:com.springsource.org.objectweb.asm:jar:2.2.3:runtime\n[INFO] |  +- org.aspectj:com.springsource.org.aspectj.runtime:jar:1.5.4:compile\n[INFO] |  +- org.aspectj:com.springsource.org.aspectj.weaver:jar:1.5.4:compile\n[INFO] |  +- com.thoughtworks.xstream:com.springsource.com.thoughtworks.xstream:jar:1.3.0:compile\n[INFO] |  |  \\- org.xmlpull:com.springsource.org.xmlpull:jar:1.1.3.4-O:compile\n[INFO] |  +- org.codehaus.jettison:com.springsource.org.codehaus.jettison:jar:1.0.0:compile\n[INFO] |  +- org.eclipse.osgi:org.eclipse.osgi:jar:3.4.2.R34x_v20080826-1230:compile\n[INFO] |  +- org.springframework:org.springframework.aop:jar:2.5.6.A:compile\n[INFO] |  |  \\- org.aopalliance:com.springsource.org.aopalliance:jar:1.0.0:compile\n[INFO] |  +- org.springframework:org.springframework.beans:jar:2.5.6.A:compile\n[INFO] |  +- org.springframework:org.springframework.context:jar:2.5.6.A:compile\n[INFO] |  +- org.springframework.osgi:org.springframework.osgi.core:jar:1.1.2.A:compile\n[INFO] |  |  \\- org.springframework.osgi:org.springframework.osgi.io:jar:1.1.2.A:compile\n[INFO] |  \\- org.springframework:org.springframework.transaction:jar:2.5.6.A:compile\n\n\n\n---\n\n**Affects:** 2.0.0.M3\n", "url": "https://github.com/spring-projects/spring-batch/issues/2625", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-12-06 03:57:10", "closed": "2009-01-13 00:03:33", "commits": {}, "ttf": 37.000277777777775, "commitsDetails": []}, {"title": "Get rid of compiler warnings in samples [BATCH-959]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-959](https://jira.spring.io/browse/BATCH-959?redirect=false)** and commented\n\nGet rid of compiler warnings in samples.  I think they are all just caused by sloppy use of raw types.\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Attachments:**\n- [batch-959.patch](https://jira.spring.io/secure/attachment/14946/batch-959.patch) (_3.06 kB_)\n- [springConfig.patch](https://jira.spring.io/secure/attachment/14949/springConfig.patch) (_1.07 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2623", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2008-12-07 05:47:11", "closed": "2009-01-27 07:45:13", "commits": {}, "ttf": 51.000277777777775, "commitsDetails": []}, {"title": "Redundant test cases in samples? [BATCH-960]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-960](https://jira.spring.io/browse/BATCH-960?redirect=false)** and commented\n\nRedundant test cases in samples?  There are some test cases in the (mis-named?) iosample package that only test classes in src/test/java.  Is this just a mistake?\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/cf39e049c0388580bd3d6b2cde2bcddbb32c5d3a\n", "url": "https://github.com/spring-projects/spring-batch/issues/2622", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2008-12-07 05:49:37", "closed": "2009-01-27 06:58:22", "commits": {}, "ttf": 51.000277777777775, "commitsDetails": []}, {"title": "ExecutionContext modifications in ItemStream.close(ExecutionContext) are not persisted [BATCH-963]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-963](https://jira.spring.io/browse/BATCH-963?redirect=false)** and commented\n\nThere is an issue with semantics - the close(..) method is typically used to release resources after step completion but can also be used to store values in execution context. In the first case  failure in close(..) shouldn't cause step failure, in the latter it should.\n\nThe easy way to go would be to document the behavior, or maybe we can simply remove the ExecutionContext method argument?\n\n\n---\n\n**Affects:** 2.0.0.M3\n", "url": "https://github.com/spring-projects/spring-batch/issues/2619", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-12-08 20:31:29", "closed": "2008-12-09 22:12:00", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "FlatFileItemWriters interference in CompositeItemWriter [BATCH-969]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-969](https://jira.spring.io/browse/BATCH-969?redirect=false)** and commented\n\nhttp://forum.springframework.org/showthread.php?t=64607\n\nTwo FFIW end up writing to the same resource when injected into CompositeItemWriter. No clue how that's possible yet, but I was able to recreate the problem.\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Attachments:**\n- [mylyn-context.zip](https://jira.spring.io/secure/attachment/14955/mylyn-context.zip) (_1.50 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/85f815b094dd30af7ed9bea8faf51387e9abb75b\n", "url": "https://github.com/spring-projects/spring-batch/issues/2612", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2008-12-14 19:02:19", "closed": "2008-12-19 19:52:13", "commits": {}, "ttf": 5.000277777777778, "commitsDetails": []}, {"title": "Possible Memory Leak in 'prototype' data beans used by org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper [BATCH-940]", "body": "**[Vito Limandibhrata](https://jira.spring.io/secure/ViewProfile.jspa?name=vito)** opened **[BATCH-940](https://jira.spring.io/browse/BATCH-940?redirect=false)** and commented\n\nI am using org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper to process 3 fixed length flat files in 1 job. The fixed length flat files has the following characteristics (no of lines/file size): File 1: 5000 lines/ 1MB, File 2: 120k lines/42MB and File 3: 510k lines and 210MB file size.\n\nThe Job is configured as described by this forum's thread: http://forum.springsource.org/showthread.php?t=60421\nEach job run should use separate sub application context (created by ClassPathXmlApplicationContextJobFactory) which should be automatically destroyed after each run.\n\nFor testing, I run the job once for every 2 hours. After repeated tried, out of memory error always occurs on the 4th run at the start of the step to process the 3rd flat file.:\njava.lang.OutOfMemoryError: Java heap space at org.apache.catalina.loader.WebappClassLoader.findResourceInternal(WebappClassLoader.java:2053) at org.apache.catalina.loader.WebappClassLoader.findResource(WebappClassLoader.java:934) at org.apache.catalina.loader.WebappClassLoader.getResource(WebappClassLoader.java:1069) at org.springframework.core.io.ClassPathResource.getURL(ClassPathResource.java:159) at org.springframework.core.io.ClassPathResource.getFile(ClassPathResource.java:174) at org.springframework.core.io.AbstractResource.exists(AbstractResource.java:51) at org.springframework.batch.core.resource.StepExecutionResourceProxy.exists(StepExecutionResourceProxy.java:112) at org.springframework.batch.item.file.FlatFileItemReader.doOpen(FlatFileItemReader.java:226) at org.springframework.batch.item.support.AbstractBufferedItemReaderItemStream.open(AbstractBufferedItemReaderItemStream.java:154) at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:103) at org.springframework.batch.core.step.item.ItemOrientedStep.open(ItemOrientedStep.java:462) at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:167) at org.springframework.batch.core.job.SimpleJob.execute(SimpleJob.java:100) at org.springframework.batch.core.configuration.support.ClassPathXmlApplicationContextJobFactory$ContextClosingJob.execute(ClassPathXmlApplicationContextJobFactory.java:107) at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:86) at java.lang.Thread.run(Thread.java:619)\n\nUsing Profiler4J, I can see that the used memory size is creeping up after each run until it fills up the available memory as shown on DGIS-DBIZLINK-MemoryProfile1.PNG\n\nAfter a restart, the memory is emptied (DGIS-DBIZLINK-MemoryProfile1.PNG between 5.40 and 5.50)  but again the used memory size is creeping up again as shown on DGIS-DBIZLINK-MemoryProfile1.PNG (after 5.50) and DGIS-DBIZLINK-MemoryProfile2.PNG\n\n\n---\n\n**Affects:** 1.1.2\n\n**Attachments:**\n- [applicationContext-SpringBatch-Base.xml](https://jira.spring.io/secure/attachment/14904/applicationContext-SpringBatch-Base.xml) (_1.20 kB_)\n- [applicationContext-SpringBatch-Base-Parent.xml](https://jira.spring.io/secure/attachment/14905/applicationContext-SpringBatch-Base-Parent.xml) (_2.91 kB_)\n- [applicationContext-SpringBatch-Job-GISDEB.xml](https://jira.spring.io/secure/attachment/14907/applicationContext-SpringBatch-Job-GISDEB.xml) (_3.57 kB_)\n- [applicationContext-SpringBatch-Job-GISDEB-GISSOH-GISSOL.xml](https://jira.spring.io/secure/attachment/14910/applicationContext-SpringBatch-Job-GISDEB-GISSOH-GISSOL.xml) (_1.39 kB_)\n- [applicationContext-SpringBatch-Job-GISSOH.xml](https://jira.spring.io/secure/attachment/14908/applicationContext-SpringBatch-Job-GISSOH.xml) (_3.67 kB_)\n- [applicationContext-SpringBatch-Job-GISSOL.xml](https://jira.spring.io/secure/attachment/14909/applicationContext-SpringBatch-Job-GISSOL.xml) (_3.58 kB_)\n- [applicationContext-SpringBatch-Jobs.xml](https://jira.spring.io/secure/attachment/14906/applicationContext-SpringBatch-Jobs.xml) (_1.93 kB_)\n- [DGIS-DBIZLINK-MemoryProfile1.PNG](https://jira.spring.io/secure/attachment/14902/DGIS-DBIZLINK-MemoryProfile1.PNG) (_123.54 kB_)\n- [DGIS-DBIZLINK-MemoryProfile2.PNG](https://jira.spring.io/secure/attachment/14903/DGIS-DBIZLINK-MemoryProfile2.PNG) (_67.63 kB_)\n- [GZipUncompress.java](https://jira.spring.io/secure/attachment/14911/GZipUncompress.java) (_2.38 kB_)\n- [ProcessCobolFlatFilesInSeparateApplicationContexts.java](https://jira.spring.io/secure/attachment/14912/ProcessCobolFlatFilesInSeparateApplicationContexts.java) (_5.27 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2609", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: invalid", "type: bug"], "created": "2008-11-24 12:08:41", "closed": "2009-06-27 21:16:29", "commits": {}, "ttf": 215.00027777777777, "commitsDetails": []}, {"title": "Job has the same ExitStatus as the last StepExecution [BATCH-972]", "body": "**[Jens Eickmeyer](https://jira.spring.io/secure/ViewProfile.jspa?name=eickmeyer)** opened **[BATCH-972](https://jira.spring.io/browse/BATCH-972?redirect=false)** and commented\n\nWe want to modify the ExitStatus of a JobExecution depending on the ExitStati of its StepExecutions. We have introduced several additional ExitStati which symbolize different outcomes of a StepExecution, e.g. the Step completed successfully but some tolerateable errors occured. So, when there are two steps in the Job, one completes without any issues and one that has such a tolerateable error, the job should have the ExitStatus which indicates that there was a tolerateable error.\nWe therefore implemented a JobExecutionListener that iterates over all StepExecutions of the Job in the afterJob() method and determines the right ExitStatus for the whole Job. This works fine if the last StepExecution has the right ExitStatus. Otherwise the last StepExecution defines the outcome of the whole Job.\nWe think that the reason for this behaviour can be found in line 137 of SimpleJob. There we can see that the ExitStatus of the last StepExecution is used to set the ExitStatus of the JobExecution.\n\n\n---\n\n**Affects:** 1.1.3\n\n**Attachments:**\n- [BATCH-972.patch](https://jira.spring.io/secure/attachment/14973/BATCH-972.patch) (_3.70 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/03904e018abbe1a09adfea35a0e755cf8bb11ab1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2605", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-12-16 03:31:16", "closed": "2009-01-04 22:25:01", "commits": {}, "ttf": 19.00027777777778, "commitsDetails": []}, {"title": "MapJobInstanceDao.getLastJobInstances doesn't return the last job instance  [BATCH-951]", "body": "**[Artem Grinstein](https://jira.spring.io/secure/ViewProfile.jspa?name=artfh)** opened **[BATCH-951](https://jira.spring.io/browse/BATCH-951?redirect=false)** and commented\n\nWrong order of job instances in MapJobInstanceDao.getLastJobInstances. MapJobInstanceDao.getLastJobInstances returns always  'old' job instances.\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Attachments:**\n- [MapJobInstanceDao.diff](https://jira.spring.io/secure/attachment/14928/MapJobInstanceDao.diff) (_702 bytes_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/6cf072076830f21ab91758a416556d07728823ca\n", "url": "https://github.com/spring-projects/spring-batch/issues/2602", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2008-12-02 03:36:00", "closed": "2008-12-04 07:48:31", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "Insert Apache license header in Java sources (where missing) [BATCH-979]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-979](https://jira.spring.io/browse/BATCH-979?redirect=false)** and commented\n\nInsert Apache license header in Java sources (where missing).  I think 1.0 started off with all headers correct.  Looks like we have slipped...\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/df2ef029327723ea1560ead0a79b2bd6c94b3b26\n", "url": "https://github.com/spring-projects/spring-batch/issues/2597", "user": "spring-issuemaster", "labels": ["in: core", "in: infrastructure", "in: samples", "type: bug"], "created": "2008-12-29 18:40:54", "closed": "2009-01-12 21:07:35", "commits": {}, "ttf": 14.000277777777777, "commitsDetails": []}, {"title": "Implement and test synchronizeStatus() in MapJobExecutionDao [BATCH-990]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-990](https://jira.spring.io/browse/BATCH-990?redirect=false)** and commented\n\nImplement and test synchronizeStatus() in MapJobExecutionDao\n\n\n---\n\n**Affects:** 2.0.0.M4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/e497499f409731c8ba5f4fc949cdca11a2a3768e\n", "url": "https://github.com/spring-projects/spring-batch/issues/2586", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2009-01-07 21:28:21", "closed": "2009-01-12 02:39:32", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "unclear retry configuration in FaultTolerantStepFactoryBean [BATCH-995]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-995](https://jira.spring.io/browse/BATCH-995?redirect=false)** and commented\n\nif (retryPolicy == null) {\n\n    SimpleRetryPolicy simpleRetryPolicy = new SimpleRetryPolicy(retryLimit);\n    if (!retryableExceptionClasses.isEmpty()) { // otherwise we\n    \t// retry all exceptions\n    \tsimpleRetryPolicy.setRetryableExceptionClasses(retryableExceptionClasses);\n    }\n    simpleRetryPolicy.setFatalExceptionClasses(fatalExceptionClasses);\n    \n    ExceptionClassifierRetryPolicy classifierRetryPolicy = new ExceptionClassifierRetryPolicy();\n    HashMap<Class<? extends Throwable>, RetryPolicy> exceptionTypeMap = new HashMap<Class<? extends Throwable>, RetryPolicy>();\n    for (Class<? extends Throwable> cls : retryableExceptionClasses) {\n    \texceptionTypeMap.put(cls, simpleRetryPolicy);\n    }\n    classifierRetryPolicy.setPolicyMap(exceptionTypeMap);\n    retryPolicy = classifierRetryPolicy;\n\n}\n\nSimpleRetryPolicy is for some reason wrapped in ExceptionClassifierRetryPolicy. This not only seems unnecessary, but also ignores the fatalExceptionClasses (unless they subclass the retryableExceptionClasses).\n\nThe most interesting thing however is that using simpleRetryPolicy directly severely breaks the FaultTolerantStepFactoryBeanTests.\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Attachments:**\n- [mylyn-context.zip](https://jira.spring.io/secure/attachment/15036/mylyn-context.zip) (_801 bytes_)\n\n**Issue Links:**\n- [BATCH-996](https://jira.spring.io/browse/BATCH-996) use default retryLimit  == 1 (not 0) in *StepFactoryBean\n\n", "url": "https://github.com/spring-projects/spring-batch/issues/2583", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-01-13 00:24:29", "closed": "2009-01-15 20:29:03", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "use default retryLimit  == 1 (not 0) in *StepFactoryBean [BATCH-996]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-996](https://jira.spring.io/browse/BATCH-996?redirect=false)** and commented\n\nPer SimpleRetryPolicy's javadoc the retryLimit includes the initial try as well, therefore it only makes sense to use value >=1.\n\n\n---\n\n**Affects:** 1.1.3, 2.0.0.M3\n\n**Issue Links:**\n- [BATCH-995](https://jira.spring.io/browse/BATCH-995) unclear retry configuration in FaultTolerantStepFactoryBean\n\n", "url": "https://github.com/spring-projects/spring-batch/issues/2582", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2009-01-13 23:36:25", "closed": "2019-01-29 08:32:49", "commits": {}, "ttf": 3667.0002777777777, "commitsDetails": []}, {"title": "EXIT_CODE and EXIT_MESSAGE out of synch for step [BATCH-997]", "body": "**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[BATCH-997](https://jira.spring.io/browse/BATCH-997?redirect=false)** and commented\n\nUsing SVN Rev 2823 I'm running a job with a single step where one of the items read throws a non-skippable exception. This results in a step execution entry where STATUS=FAILED\nEXIT_CODE=COMPLETED\nEXIT_MESSAGE=[blank]\n\nRunning seme step using M3 I get\nEXIT_CODE=FAILED\nEXIT_MESSAGE=java.lang.RuntimeException: ...\n\nRestarting the job ends up with a step_execution with\nSTATUS=COMPLETED\nEXIT_CODE=EXECUTING\nEXIT_MESSAGE=[blank]\n\nFor M3 this gives:\nEXIT_CODE=COMPLETED\nEXIT_MESSAGE=[blank]\n\nLooks like something has changed between M3 and now where the handling of the exit state gets out of synch.\n\n\n---\nNo further details from [BATCH-997](https://jira.spring.io/browse/BATCH-997?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/2581", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-01-16 07:20:56", "closed": "2009-01-19 22:52:53", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "PDF of Reference Documentation does not contain images of figures [BATCH-998]", "body": "**[John Quinn](https://jira.spring.io/secure/ViewProfile.jspa?name=john.quinn)** opened **[BATCH-998](https://jira.spring.io/browse/BATCH-998?redirect=false)** and commented\n\nSee Link. The PDF has the titles of the different figures, but no actual images.\n\n\n---\n\n**Affects:** 2.0.0.M3\n", "url": "https://github.com/spring-projects/spring-batch/issues/2580", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2009-01-19 00:27:38", "closed": "2009-02-05 19:50:09", "commits": {}, "ttf": 17.00027777777778, "commitsDetails": []}, {"title": "JobExecution ExecutionContext should not be persisted by Step? [BATCH-999]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-999](https://jira.spring.io/browse/BATCH-999?redirect=false)** and commented\n\nJobExecution ExecutionContext should not be persisted by Step?  I can see a hopeful looking comment added in 1.1 inside SimpleJobRepository:\n\n    public void updateExecutionContext(StepExecution stepExecution) {\n    \t// Until there is an interface change (\n    \tecDao.persistExecutionContext(stepExecution.getJobExecution());\n    \tecDao.persistExecutionContext(stepExecution);\n    }\n\nWe should re-visit that before 2.0 gets to a release candidate.  Caused problems for someone on the forum as well (http://forum.springframework.org/showthread.php?t=66030).\n\n\n---\nNo further details from [BATCH-999](https://jira.spring.io/browse/BATCH-999?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/2579", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2009-01-19 22:19:16", "closed": "2009-01-22 03:19:29", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "Add timeout to TaskExecutorPartitionHandler [BATCH-1000]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1000](https://jira.spring.io/browse/BATCH-1000?redirect=false)** and commented\n\nAdd timeout to TaskExecutorPartitionHandler\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb\n", "url": "https://github.com/spring-projects/spring-batch/issues/2578", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2009-01-20 04:19:10", "closed": "2009-02-15 23:22:43", "commits": {}, "ttf": 26.00027777777778, "commitsDetails": []}, {"title": "Make jobs restartable by default [BATCH-1001]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1001](https://jira.spring.io/browse/BATCH-1001?redirect=false)** and commented\n\nA Job should be restartable by default.  However, the Spring Batch schema, spring-batch-2.0.xsd, and the AbstractJob class list the \"restartable\" attribute has being false by default.\n\nA patch has been created and attached to make these changes.\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Attachments:**\n- [restartability-core.patch](https://jira.spring.io/secure/attachment/15060/restartability-core.patch) (_1.18 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2577", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-01-20 07:05:19", "closed": "2009-02-13 07:06:28", "commits": {}, "ttf": 24.00027777777778, "commitsDetails": []}, {"title": "Getting  PSQLException: ERROR: column \"serialized_context\" is of type bytea but expression is of type oid  [BATCH-991]", "body": "**[U](https://jira.spring.io/secure/ViewProfile.jspa?name=newbie)** opened **[BATCH-991](https://jira.spring.io/browse/BATCH-991?redirect=false)** and commented\n\nI am using Grails 1.0.4 and Spring Batch M3. My job repository configuration looks like following\n\njobRepository(org.springframework.batch.core.repository.support.JobRepositoryFactoryBean) {    \ndataSource=ref(\"dataSource\")\ntransactionManager=ref(\"transactionManager\")    \n}\n\nI am posting the entire stack trace below.  Exception message is  \"org.postgresql.util.PSQLException: ERROR: column \"serialized_context\" is of type bytea but expression is of type oid \" .\n\nException Stack Trace\n---------------------\n\nExpected to complete: <org.springframework.batch.core.JobExecution@7e jobInstance=JobInstance: id=1, JobParameters=[{collectionId=2}], Job=[docProcessingJob] stepExecutions=[StepExecution: id=1, name=fileListingStep, status=FAILED, exitStatus=exitCode=FAILED;exitDescription=org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [INSERT INTO BATCH_JOB_EXECUTION_CONTEXT (JOB_EXECUTION_ID, SHORT_CONTEXT, SERIALIZED_CONTEXT) VALUES(?, ?, ?)]; nested exception is org.postgresql.util.PSQLException: ERROR: column \"serialized_context\" is of type bytea but expression is of type oid at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:220) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:607) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:792) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:850) at org.springframework.batch.core.repository.dao.JdbcExecutionContextDao.persistSerializedContext(JdbcExecutionContextDao.java:201) at org.springframework.batch.core.repository.dao.JdbcExecutionContextDao.persistExecutionContext(JdbcExecutionContextDao.java:135) at org.springframework.batch.core.repository.support.SimpleJobRepository.updateExecutionContext(SimpleJobRepository.java:269) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:307) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:182) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:149) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:106) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy3.updateExecutionContext(Unknown Source) at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:217) at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:192) at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:329) at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:85) at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:228) at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:115) at java.lang.Thread.run(Thread.java:619) Caused by: org.postgresql.util.PSQLException: ERROR: column \"serialized_context\" is of type bytea but expression is of type oid at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:1608) at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1343) at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:194) at org.postgresql.jdbc2.AbstractJdbc2Statement.execute(AbstractJdbc2Statement.java:451) at org.postgresql.jdbc2.AbstractJdbc2Statement.executeWithFlags(AbstractJdbc2Statement.java:350) at org.postgresql.jdbc2.AbstractJdbc2Statement.executeUpdate(AbstractJdbc2Statement.java:304) at org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:101) at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:798) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:591) ... 23 more , readCount=0, filterCount=0, writeCount=0 readSkipCount=0, writeSkipCount=0, commitCount=0, rollbackCount=0] status=FAILED startTime=Thu Jan 08 13:02:37 PST 2009 createTime=Thu Jan 08 13:02:37 PST 2009 endTime=Thu Jan 08 13:02:38 PST 2009 lastUpdated=Thu Jan 08 13:02:38 PST 2009 exitStatus=exitCode=FAILED;exitDescription=org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [INSERT INTO BATCH_JOB_EXECUTION_CONTEXT (JOB_EXECUTION_ID, SHORT_CONTEXT, SERIALIZED_CONTEXT) VALUES(?, ?, ?)]; nested exception is org.postgresql.util.PSQLException: ERROR: column \"serialized_context\" is of type bytea but expression is of type oid at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:220) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:607) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:792) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:850) at org.springframework.batch.core.repository.dao.JdbcExecutionContextDao.persistSerializedContext(JdbcExecutionContextDao.java:201) at org.springframework.batch.core.repository.dao.JdbcExecutionContextDao.persistExecutionContext(JdbcExecutionContextDao.java:135) at org.springframework.batch.core.repository.support.SimpleJobRepository.updateExecutionContext(SimpleJobRepository.java:269) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:307) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:182) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:149) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:106) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy3.updateExecutionContext(Unknown Source) at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:217) at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:192) at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:329) at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:85) at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:228) at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:115) at java.lang.Thread.run(Thread.java:619) Caused by: org.postgresql.util.PSQLException: ERROR: column \"serialized_context\" is of type bytea but expression is of type oid at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:1608) at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1343) at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:194) at org.postgresql.jdbc2.AbstractJdbc2Statement.execute(AbstractJdbc2Statement.java:451) at org.postgresql.jdbc2.AbstractJdbc2Statement.executeWithFlags(AbstractJdbc2Statement.java:350) at org.postgresql.jdbc2.AbstractJdbc2Statement.executeUpdate(AbstractJdbc2Statement.java:304) at org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:101) at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:798) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:591) ... 23 more executionContext={} failureExceptions=[] id=1 version=2> expected:\\<COMPLETED> but was:\\<FAILED>\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Attachments:**\n- [schema-postgresql.sql](https://jira.spring.io/secure/attachment/15024/schema-postgresql.sql) (_2.82 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d0df4379ef165aebb8a3e2966053dbee40e98d03\n", "url": "https://github.com/spring-projects/spring-batch/issues/2576", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-01-08 07:14:38", "closed": "2009-01-10 01:18:15", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Default behavior for a Job should be failure if a step fails [BATCH-1002]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1002](https://jira.spring.io/browse/BATCH-1002?redirect=false)** and commented\n\nCurrently, the when the \"next\" attribute is used on a step in a job configuration with the namespace, such as the following:\n\n    <step name=\"step1\" next=\"step2\"/>\n    <step name=\"step2\" />\n\nthe interpretation is as follows:\n\n    <step name=\"step1\">\n    \t<next on=\"*\" to=\"step2\"/>\n    </step>\n    <step name=\"step2\" />\n\nHowever, this behavior may be confusing for users because \"step2\" will still execute even if \"step1\" fails.  Therefore, the correct default behavior should be:\n\n    <step name=\"step1\">\n    \t<end on=\"FAILED\" status=\"FAILED\"/>\n    \t<next on=\"*\" to=\"step2\"/>\n    </step>\n    <step name=\"step2\" />\n\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Attachments:**\n- [BATCH-1002-core.patch](https://jira.spring.io/secure/attachment/15064/BATCH-1002-core.patch) (_15.88 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2575", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-01-20 14:41:57", "closed": "2009-01-21 22:40:23", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "BackOffPolicy is not applied for exceptions that cause rollback [BATCH-994]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-994](https://jira.spring.io/browse/BATCH-994?redirect=false)** and commented\n\nRetryable exceptions that should cause rollback get re-thrown before BackOffPolicy applies.\n\nhttp://forum.springframework.org/showthread.php?t=65811\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Attachments:**\n- [mylyn-context.zip](https://jira.spring.io/secure/attachment/15035/mylyn-context.zip) (_47.73 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d57487725521332c3a384dcac8a0f3c893bbe6a8\n", "url": "https://github.com/spring-projects/spring-batch/issues/2574", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2009-01-12 23:38:19", "closed": "2009-01-13 02:58:07", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "spring-batch-2.0.xsd should not allow \"listeners\" element on \"tasklet\" [BATCH-1003]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1003](https://jira.spring.io/browse/BATCH-1003?redirect=false)** and commented\n\nspring-batch-2.0.xsd currently allows a \"listeners\" element on \"tasklet\".  Listeners should only be allowed on the job and on the step.  Also, the parser doesn't seem to do anything with this extra \"listeners\" element.\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Attachments:**\n- [tasklet-listeners-core.patch](https://jira.spring.io/secure/attachment/15065/tasklet-listeners-core.patch) (_1.08 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2573", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-01-21 06:13:34", "closed": "2009-02-13 07:00:21", "commits": {}, "ttf": 23.00027777777778, "commitsDetails": []}, {"title": "Using namespace to define a step does not store step name [BATCH-1004]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1004](https://jira.spring.io/browse/BATCH-1004?redirect=false)** and commented\n\nWhen the namespace is used to define a step within a job definition, the parser does not store the step's \"name\" attribute on the step.  Instead, the name stored in the step execution is a generated name, for example \"(inner bean)#3\".\n\n\\<job id=\"skipJob\">\n\\<step name=\"step1\">\n\\<tasklet ... />\nStepExecution: id=0, name=(inner bean)#3, ...\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/459f7d575db7b4899ab28336775c511d1e6938d9, https://github.com/spring-projects/spring-batch/commit/289886178269436076a9d61280e81e4f5825c3ea, https://github.com/spring-projects/spring-batch/commit/e68d9a246a6276ea1910a4b6a0bd2fc2c60a4552\n", "url": "https://github.com/spring-projects/spring-batch/issues/2572", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-01-21 06:22:42", "closed": "2009-01-27 05:38:47", "commits": {}, "ttf": 5.000277777777778, "commitsDetails": []}, {"title": "startLimit and allowStartIfComplete cannot be set in the namespace [BATCH-1005]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1005](https://jira.spring.io/browse/BATCH-1005?redirect=false)** and commented\n\nstartLimit and allowStartIfComplete are properties on AbstractStep and SimpleStepFactoryBean.  However, there is currently no way to set them using the batch namespace.\n\n\n---\n\n**Affects:** 2.0.0.M3\n", "url": "https://github.com/spring-projects/spring-batch/issues/2571", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-01-21 07:06:30", "closed": "2009-02-13 07:32:45", "commits": {}, "ttf": 23.00027777777778, "commitsDetails": []}, {"title": "Namespace does not allow for variables (ie, ${varname}) [BATCH-1006]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1006](https://jira.spring.io/browse/BATCH-1006?redirect=false)** and commented\n\nThe namespace currently does not allow variables to be used as in the following:\n\n<batch:tasklet reader=\"playerFileItemReader\" writer=\"playerWriter\" commit-interval=\"${job.commit.interval}\" />\n\nThis results in the error:\n\nSAXParseException: cvc-datatype-valid.1.2.1: '${job.commit.interval}' is not a valid value for 'integer'.\n\nThe \"xsd:integer\" and \"xsd:boolean\" types in spring-batch-2.0.xsd should be replaced with \"xsd:string\".  Any incorrect types will be caught at runtime.\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Attachments:**\n- [xsd-types-core.patch](https://jira.spring.io/secure/attachment/15066/xsd-types-core.patch) (_2.59 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2570", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-01-21 07:32:51", "closed": "2009-02-13 07:33:07", "commits": {}, "ttf": 23.00027777777778, "commitsDetails": []}, {"title": "JobRepository default is inconsistent between job and step [BATCH-1007]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-1007](https://jira.spring.io/browse/BATCH-1007?redirect=false)** and commented\n\nThe way that the job repository property is defaulted in job and step is inconsistent.  With Step, it's done the right way, by defaulting in the namespace, with good documentation.  However, job is done in the parser:\n\n    String repositoryAttribute = element.getAttribute(\"repository\");\n    if (!StringUtils.hasText(repositoryAttribute)) {\n         repositoryAttribute = \"jobRepository\";\n    }\n    builder.addPropertyReference(\"jobRepository\", repositoryAttribute);\n\nThere are many others like this in job.\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/921b0eb8938156ef29582e50ab6410b1aabca058, https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/81652cc6a1af95c539a1502ac01f080b6845a81e\n", "url": "https://github.com/spring-projects/spring-batch/issues/2569", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-01-21 08:00:02", "closed": "2009-01-28 06:17:23", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "Elements in namespace are order-dependent [BATCH-1008]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1008](https://jira.spring.io/browse/BATCH-1008?redirect=false)** and commented\n\nWhen using the namespace, the elements are order-dependent, but they should not be.\n\nFor example, the following results in an error because \"retryable-exception-classes\" is not allowed to appear after \"fatal-exception-classes\".\n\n    <step name=\"step1\">\n    \t<tasklet reader=\"itemReader\" writer=\"itemWriter\" commit-interval=\"2\">\n    \t\t<fatal-exception-classes>\n    \t\t\tjava.io.FileNotFoundException\n    \t\t</fatal-exception-classes>\n    \t\t<retryable-exception-classes>\n    \t\t\torg.springframework.dao.DeadlockLoserDataAccessException\n    \t\t</retryable-exception-classes>\n    \t</tasklet>\n    </step>\n\n\n\n---\n\n**Affects:** 2.0.0.M3\n", "url": "https://github.com/spring-projects/spring-batch/issues/2568", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-01-22 00:37:40", "closed": "2009-02-13 07:27:27", "commits": {}, "ttf": 22.00027777777778, "commitsDetails": []}, {"title": "AssertFile.assertFileEquals(File,File) parameters in the wrong order [BATCH-1021]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1021](https://jira.spring.io/browse/BATCH-1021?redirect=false)** and commented\n\nIn the AssertFile class in spring-batch-test, the method:\n\nassertFileEquals(File actual, File expected)\n\nshould be:\n\nassertFileEquals(File expected, File actual)\n\nPatches are attached to fix this.\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Attachments:**\n- [assertFileParams-sample.patch](https://jira.spring.io/secure/attachment/15077/assertFileParams-sample.patch) (_1.36 kB_)\n- [assertFileParams-test.patch](https://jira.spring.io/secure/attachment/15078/assertFileParams-test.patch) (_2.00 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2555", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2009-01-26 00:42:06", "closed": "2009-01-26 01:13:07", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Chunk is not serializable but is wrapped by a Serializable ChunkRequest [BATCH-1022]", "body": "**[Eric R. Medley](https://jira.spring.io/secure/ViewProfile.jspa?name=xylocore)** opened **[BATCH-1022](https://jira.spring.io/browse/BATCH-1022?redirect=false)** and commented\n\nThe Chunk class is not serializable. This is particularly useful when sending chunks via JMS.\n\n\n---\n\n**Affects:** 2.0.0.M3\n", "url": "https://github.com/spring-projects/spring-batch/issues/2554", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-01-26 06:39:01", "closed": "2009-01-26 17:43:07", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "FlowJob replays failed steps on restart, even if the failure did not fail the job [BATCH-1030]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1030](https://jira.spring.io/browse/BATCH-1030?redirect=false)** and commented\n\n    @Test\n    public void testFailedStepRestarted() throws Exception {\n    \tSimpleFlow flow = new SimpleFlow(\"job\");\n    \tCollection<StateTransition> transitions = new ArrayList<StateTransition>();\n    \ttransitions.add(StateTransition.createStateTransition(new StepState(new StepSupport(\"step1\") {\n    \t\t@Override\n    \t\tpublic void execute(StepExecution stepExecution) throws JobInterruptedException,\n    \t\t\t\tUnexpectedJobExecutionException {\n    \t\t\tstepExecution.setStatus(BatchStatus.FAILED);\n    \t\t\tstepExecution.setExitStatus(ExitStatus.FAILED);\n    \t\t\tjobRepository.update(stepExecution);\n    \t\t}\n    \t}), \"step2\"));\n    \ttransitions.add(StateTransition.createEndStateTransition(new StepState(new StubStep(\"step2\") {\n    \t\t@Override\n    \t\tpublic void execute(StepExecution stepExecution) throws JobInterruptedException,\n    \t\t\t\tUnexpectedJobExecutionException {\n    \t\t\tif (fail) {\n    \t\t\t\tstepExecution.setStatus(BatchStatus.FAILED);\n    \t\t\t\tstepExecution.setExitStatus(ExitStatus.FAILED);\n    \t\t\t\tjobRepository.update(stepExecution);\n    \t\t\t} else {\n    \t\t\t\tsuper.execute(stepExecution);\n    \t\t\t}\n    \t\t}\n    \t})));\n    \tflow.setStateTransitions(transitions);\n    \tjob.setFlow(flow);\n    \tjob.afterPropertiesSet();\n    \tfail = true;\n    \tjob.execute(jobExecution);\n    \tassertEquals(ExitStatus.FAILED, jobExecution.getExitStatus());\n    \tassertEquals(2, jobExecution.getStepExecutions().size());\n    \tjobRepository.update(jobExecution);\n    \tjobExecution = jobRepository.createJobExecution(\"job\", new JobParameters());\n    \tfail = false;\n    \tjob.execute(jobExecution);\n    \tassertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus());\n    \tassertEquals(1, jobExecution.getStepExecutions().size());\n    }\n\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Attachments:**\n- [mylyn-context.zip](https://jira.spring.io/secure/attachment/15101/mylyn-context.zip) (_10.21 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2547", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-01-26 22:18:20", "closed": "2009-01-31 19:55:21", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "FlatFileItemReader should identify missing resource in warning [BATCH-1031]", "body": "**[David Ezzio](https://jira.spring.io/secure/ViewProfile.jspa?name=dezzio@ysoft.com)** opened **[BATCH-1031](https://jira.spring.io/browse/BATCH-1031?redirect=false)** and commented\n\nCurrent warning says: \"Input resource does not exist,\" but does not identify the resource, forcing debugging to correct.  Patch adds the resource.toString() to the message.\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Attachments:**\n- [FlatFileItemReader.diff](https://jira.spring.io/secure/attachment/15089/FlatFileItemReader.diff) (_646 bytes_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/b402914041a36a13e85f364cde6d4c3cc37add43\n", "url": "https://github.com/spring-projects/spring-batch/issues/2546", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2009-01-27 00:41:12", "closed": "2009-01-27 00:56:33", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "SimpleJobExplorer doesn't retrieve StepExecutions of running JobExecutions using MapStepExecutionDao [BATCH-1050]", "body": "**[Robert Shanahan](https://jira.spring.io/secure/ViewProfile.jspa?name=rshan)** opened **[BATCH-1050](https://jira.spring.io/browse/BATCH-1050?redirect=false)** and commented\n\nFor testing, I'm using a Map based job repository. I retrieve running JobExecutions using JobExplorer.findingRunningJobExecutions(String jobName). I then attempt to retrieve the StepExecutions from a running JobExecution, which is known to have completed steps, and the StepExecution list is empty. The Jdbc based job repository works fine.\n\n\n---\n\n**Attachments:**\n- [mylyn-context.zip](https://jira.spring.io/secure/attachment/15136/mylyn-context.zip) (_1.33 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/3836cd959740c92ace1690b269636ba6236ef349, https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/ceccb5762e3384532f5ae6ca4d32c8c61adcd6fc\n", "url": "https://github.com/spring-projects/spring-batch/issues/2528", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-01-30 06:20:20", "closed": "2009-02-16 02:02:56", "commits": {}, "ttf": 16.00027777777778, "commitsDetails": []}, {"title": "Add getStep(String) to Job interface [BATCH-1053]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1053](https://jira.spring.io/browse/BATCH-1053?redirect=false)** and commented\n\nI find AbstractJobTests very useful, but the implementation is awkward, and there are other situations where I can imagine asking the Job for a specific Step.  However getSteps() should remain an implementation detail for the SimpleJob.  I think it is debatable whether getStep(String) belongs on the interface in fact, so let's have a thin and a chat about it first, but at least it could go on AbstractJob.\n\n\n---\n\n**Affects:** 2.0.0.M4\n", "url": "https://github.com/spring-projects/spring-batch/issues/2525", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-01-31 18:19:37", "closed": "2009-02-11 02:17:04", "commits": {}, "ttf": 10.000277777777777, "commitsDetails": []}, {"title": "Maven Build - incompatible bundle manifest version [BATCH-1054]", "body": "**[Michael Pralow](https://jira.spring.io/secure/ViewProfile.jspa?name=daywalker2000@gmx.net)** opened **[BATCH-1054](https://jira.spring.io/browse/BATCH-1054?redirect=false)** and commented\n\nlatest HEAD from today (02.02.2009)\n\nwith 'clean install' i get\n\n------------------------------------------------------------------------\n\n[ERROR]BUILD ERROR\n------------------\n\nBundle transformer returned warnings.  Please fix manifest template at 'C:\\netbeans_projects\\spring-batch\\spring-batch-infrastructure/template.mf' and try again.\n\ndetails with -e switch\n\n[DEBUG]Trace\norg.apache.maven.lifecycle.LifecycleExecutionException: Bundle transformer returned warnings.  Please fix manifest template at 'C:\\netbeans_projects\\spring-batch\\spring-batch-infrastructure/template.mf' and try again.\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:583)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:499)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:478)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:330)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:291)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:142)\nat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:336)\nat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)\nat org.apache.maven.cli.MavenCli.main(MavenCli.java:287)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:597)\nat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\nat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\nat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\nat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.plugin.MojoExecutionException: Bundle transformer returned warnings.  Please fix manifest template at 'C:\\netbeans_projects\\spring-batch\\spring-batch-infrastructure/template.mf' and try again.\nat com.springsource.bundlor.maven.plugin.AbstractBundlorMojo.execute(AbstractBundlorMojo.java:212)\nat org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:451)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:558)\n... 16 more\n\n\n---\nNo further details from [BATCH-1054](https://jira.spring.io/browse/BATCH-1054?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/2524", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2009-02-02 00:36:52", "closed": "2009-02-02 17:19:40", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Residual from 1.x left over in AbstractItemWriter [BATCH-1057]", "body": "**[Wayne Lund](https://jira.spring.io/secure/ViewProfile.jspa?name=wxlund)** opened **[BATCH-1057](https://jira.spring.io/browse/BATCH-1057?redirect=false)** and commented\n\nI'm working through some of my old examples from the prior version and tracking classes that have been renamed or removed and one that I found gone is AbstractItemWriter but its mentioned a few times in the docs.  (I'm working from the word / pdf doc that Lucas sent through for review).  I see \"public class CustomItemWriter extends AbstractItemWriter implements \" and a reference in the appendix.\n\n\n---\n\n**Affects:** 2.0.0.M4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/b4fcc457c5c679cb5ea454ad85fc71958cba553c\n", "url": "https://github.com/spring-projects/spring-batch/issues/2520", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2009-02-02 15:51:07", "closed": "2009-02-03 00:59:54", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "PlaceholderTargetSource doesn't always replace all placeholders [BATCH-1058]", "body": "**[Takuma Ueda](https://jira.spring.io/secure/ViewProfile.jspa?name=tueda)** opened **[BATCH-1058](https://jira.spring.io/browse/BATCH-1058?redirect=false)** and commented\n\nWhen multiple Spring EL binding patterns are used, some keys may be missed when replacing text is shorter than the key length.\n\nFor exapmle,\n<beans:property name=\"file\" value=\"file:sample_#{jobParameters[year]}_#{jobParameters[month]}_#{jobParameters[day]}.xls\"/>\n\nWhen \"#{jobParameters[year]}\" gets replaced with \"2009\", the following code fragment misses the second key \"#{jobParameters[month]\"\nas \"next + 1\" points to where \"#{jobParameters[month]}\" has already started.\n\nwhile (first >= 0) {\n\n    ...\n    first = result.indexOf(PLACEHOLDER_PREFIX, next + 1);\n    next = result.indexOf(PLACEHOLDER_SUFFIX, first + 1);\n\n}\n\n\n---\n\n**Affects:** 2.0.0.M4\n\n**Attachments:**\n- [mylyn-context.zip](https://jira.spring.io/secure/attachment/15103/mylyn-context.zip) (_7.41 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/ef4dba7590e447f6777417a8f6aeb78af6af3abf\n", "url": "https://github.com/spring-projects/spring-batch/issues/2519", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-02-02 16:01:27", "closed": "2009-02-02 18:18:16", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "BATCH_JOB_INSTANCE.JOB_KEY ignores Date milliseconds [BATCH-1059]", "body": "**[Eric Dalquist](https://jira.spring.io/secure/ViewProfile.jspa?name=edalquist)** opened **[BATCH-1059](https://jira.spring.io/browse/BATCH-1059?redirect=false)** and commented\n\nWhen a Date is used as a Job Parameter it is stored correctly (including milliseconds) in BATCH_JOB_PARAMS but the JOB_KEY in BATCH_JOB_INSTANCE does not include milliseconds when generating the key. The problem is in JdbcJobInstanceDao.createJobKey, it just blindly toString's all the parameters and Date's toString hides some data.\n\nInstead of blindly calling toString on all parameters a better approach may be to use type-specific String formatting, this would also be slightly more efficient as it avoids adding all parameters to a single Map then iterating that and removes an extra string concatenation operation.\nprivate String createJobKey(JobParameters jobParameters) {\nStringBuffer stringBuffer = new StringBuffer();\n\n        final Map stringParameters = jobParameters.getStringParameters();\n        for (Iterator it = stringParameters.entrySet().iterator(); it.hasNext();) {\n            Entry entry = (Entry) it.next();\n            stringBuffer.append(entry.getKey());\n            stringBuffer.append(\"=\");\n            \n            stringBuffer.append(entry.getValue());\n            stringBuffer.append(\";\");\n        }\n        \n        final Map longParameters = jobParameters.getLongParameters();\n        for (Iterator it = longParameters.entrySet().iterator(); it.hasNext();) {\n            Entry entry = (Entry) it.next();\n            stringBuffer.append(entry.getKey());\n            stringBuffer.append(\"=\");\n            \n            stringBuffer.append(entry.getValue());\n            stringBuffer.append(\";\");\n        }\n        \n        final Map doubleParameters = jobParameters.getDoubleParameters();\n        for (Iterator it = doubleParameters.entrySet().iterator(); it.hasNext();) {\n            Entry entry = (Entry) it.next();\n            stringBuffer.append(entry.getKey());\n            stringBuffer.append(\"=\");\n            \n            stringBuffer.append(entry.getValue());\n            stringBuffer.append(\";\");\n        }\n        \n        final Map dateParameters = jobParameters.getDateParameters();\n        for (Iterator it = dateParameters.entrySet().iterator(); it.hasNext();) {\n            Entry entry = (Entry) it.next();\n            stringBuffer.append(entry.getKey());\n            stringBuffer.append(\"=\");\n            \n            final Date date = (Date)entry.getValue();\n            final String formattedDate;\n            synchronized (DATE_PARAMETER_FORMAT) {\n                //Logic cloned from java.util.Date\n                DATE_PARAMETER_FORMAT.setTimeZone(TimeZone.getDefault());\n                formattedDate = DATE_PARAMETER_FORMAT.format(date);\n            }\n            stringBuffer.append(formattedDate);\n            stringBuffer.append(\";\");\n        }\n    \n        return stringBuffer.toString();\n    }\n\n\n\n---\n\n**Affects:** 1.1.4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/5826cbb713072eeb70efb64d40832739ff1334cb\n", "url": "https://github.com/spring-projects/spring-batch/issues/2518", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-02-03 02:53:21", "closed": "2009-02-03 19:12:15", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Problems with the way 'split' element handles EndStates [BATCH-1067]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1067](https://jira.spring.io/browse/BATCH-1067?redirect=false)** and commented\n\nConsider the following flow:\n\\<split id=\"split1\">\n\\<next on=\"FAILED\" to=\"step3\"/>\n\\<fail on=\"COMPLETED\" />\n\n            <flow>\n                <step name=\"step1\"/>\n            </flow>\n            <flow>\n                <step name=\"failingStep\"/>\n            </flow>\n    </split>\n    <step name=\"step3\"/>\n\nWhat should happen:\n1) Since step1 exits with COMPLETED and failingStep exits with FAILED, and FAILED is higher precedence in BatchStatus, step3 should execute (based on the split1's transitions).\n2) The status of split1 should end up as FAILED and the final status (after step3) should be COMPLETED (step3's result).\n\nWhat is happening:\n1) EndState.handle() always returns COMPLETED, so when SplitState.handle() calculates the status of split1, the result is COMPLETED (not FAILED).\n2) EndState.handle() always updates the same JobExecution's status, so it is seen by the framework as the aggregate of the statuses of all the steps.\n\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/b2a31fe740fe8c6894ba3143630def3bc610fa33, https://github.com/spring-projects/spring-batch/commit/7c4953f2bedbef7774d295fe683437c923b68065\n", "url": "https://github.com/spring-projects/spring-batch/issues/2510", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2009-02-07 07:42:06", "closed": "2009-02-09 03:53:47", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "JobInterruptedException needs to be on the fatal list [BATCH-1071]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-1071](https://jira.spring.io/browse/BATCH-1071?redirect=false)** and commented\n\nOtherwise the exception won't break the repeat loop. The interrupt tests worked because the step factory bean was using simple (not fault-tolerant) implementations internally unless skipLimit or retryLimit was set.\n\nNot sure why, but this doesn't seem to affect 1.1.x\n\n\n---\n\n**Affects:** 2.0.0.M4\n\n**Issue Links:**\n- [BATCH-1010](https://jira.spring.io/browse/BATCH-1010) StepFactoryBeans cleanup\n (_**\"depends on\"**_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb\n", "url": "https://github.com/spring-projects/spring-batch/issues/2506", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-02-10 21:21:20", "closed": "2009-02-10 21:22:29", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Update docs to reflect attribute change in step element [BATCH-1072]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-1072](https://jira.spring.io/browse/BATCH-1072?redirect=false)** and commented\n\nThe 'name' attribute in step was changed to 'id', the docs still use name everywhere though, and should be updated.\n\n\n---\n\n**Affects:** 2.0.0.M4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/a96e2a1e43ef65a1b57ae21af00a867cc4467b88\n", "url": "https://github.com/spring-projects/spring-batch/issues/2505", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2009-02-11 02:42:34", "closed": "2009-03-02 13:18:41", "commits": {}, "ttf": 19.00027777777778, "commitsDetails": []}, {"title": "FlowJob.getLastStepExecution() puts arguments into isLater() in the wrong order [BATCH-1061]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1061](https://jira.spring.io/browse/BATCH-1061?redirect=false)** and commented\n\nFlowJob.getLastStepExecution() puts arguments into isLater() in the wrong order:\n\n    for (StepExecution stepExecution : execution.getStepExecutions()) {\n         if (stepExecution.getStepName().equals(result.getName())\n                   && stepExecution.getExitStatus().getExitCode().equals(result.getStatus())) {\n              value = stepExecution;\n         }\n         if (isLater(backup, stepExecution)) {\n              backup = stepExecution;\n         }\n\n\n\n---\n\n**Affects:** 2.0.0.M4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/4fd2cfc2db83d91b5d873c1e919999cc2c215e14\n", "url": "https://github.com/spring-projects/spring-batch/issues/2504", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-02-05 09:50:40", "closed": "2009-02-05 13:05:47", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "allow-start-if-complete and start-limit should be on <step/>, not <tasklet/> [BATCH-1075]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1075](https://jira.spring.io/browse/BATCH-1075?redirect=false)** and commented\n\nIt is currently not possible to set allow-start-if-complete or start-limit on a TaskletStep using the namespace because the attributes are on \\<tasklet/> instead of step.  We should be able to do the following:\n\n    <step id=\"step1\" tasklet=\"myTasklet\" allow-start-if-complete=\"true\" start-limit=\"100\" />\n\n\n\n---\n\n**Affects:** 2.0.0.M4\n", "url": "https://github.com/spring-projects/spring-batch/issues/2501", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-02-12 17:35:53", "closed": "2009-02-13 07:03:39", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Maven Build - ClassNotFoundException: com.springsource.util.math.Sets [BATCH-1078]", "body": "**[Michael Pralow](https://jira.spring.io/secure/ViewProfile.jspa?name=daywalker2000@gmx.net)** opened **[BATCH-1078](https://jira.spring.io/browse/BATCH-1078?redirect=false)** and commented\n\nwith a fresh checkout some minutes ago, i get a maven build error, when building the spring batch (parent) or infrastructure alone\n\nBuilding jar: C:\\netbeans_projects\\spring-batch\\spring-batch-infrastructure\\target\\org.springframework.batch.infrastructure-2.0.0.CI-SNAPSHOT.jar\n[WARNING] Attempting to build MavenProject instance for Artifact (com.springsource.bundlor:com.springsource.bundlor.maven:1.0.0.BUILD-20090201.212350-20) of type: maven-plugin; constructing POM artifact instead.\n[com.springsource.bundlor.:transform {execution: bundlor-transform}]\n[FATAL ERROR] com.springsource.bundlor.maven.plugin.TransformBundlorMojo#execute() caused a linkage error (java.lang.NoClassDefFoundError) and may be out-of-date. Check the realms:\n[FATAL ERROR] Plugin realm = app0.child-container[com.springsource.bundlor:com.springsource.bundlor.maven]\nurls[0] = file:/C:/netbeans_maven_repo/com/springsource/bundlor/com.springsource.bundlor.maven/1.0.0.BUILD-SNAPSHOT/com.springsource.bundlor.maven-1.0.0.BUILD-SNAPSHOT.jar\nurls[1] = file:/C:/netbeans_maven_repo/org/springframework/org.springframework.core/2.5.6.A/org.springframework.core-2.5.6.A.jar\nurls[2] = file:/C:/netbeans_maven_repo/org/apache/commons/com.springsource.org.apache.commons.logging/1.1.1/com.springsource.org.apache.commons.logging-1.1.1.jar\nurls[3] = file:/C:/netbeans_maven_repo/com/springsource/bundlor/com.springsource.bundlor/1.0.0.BUILD-SNAPSHOT/com.springsource.bundlor-1.0.0.BUILD-SNAPSHOT.jar\nurls[4] = file:/C:/netbeans_maven_repo/com/springsource/util/com.springsource.util.osgi/1.5.0.BUILD-SNAPSHOT/com.springsource.util.osgi-1.5.0.BUILD-SNAPSHOT.jar\nurls[5] = file:/C:/netbeans_maven_repo/org/antlr/com.springsource.org.antlr/3.0.1/com.springsource.org.antlr-3.0.1.jar\nurls[6] = file:/C:/netbeans_maven_repo/org/eclipse/osgi/org.eclipse.osgi/3.4.0.v20080605-1900/org.eclipse.osgi-3.4.0.v20080605-1900.jar\nurls[7] = file:/C:/netbeans_maven_repo/com/springsource/util/com.springsource.util.common/1.5.0.BUILD-SNAPSHOT/com.springsource.util.common-1.5.0.BUILD-SNAPSHOT.jar\nurls[8] = file:/C:/netbeans_maven_repo/com/springsource/util/com.springsource.util.io/1.5.0.BUILD-SNAPSHOT/com.springsource.util.io-1.5.0.BUILD-SNAPSHOT.jar\nurls[9] = file:/C:/netbeans_maven_repo/org/objectweb/asm/com.springsource.org.objectweb.asm/3.1.0/com.springsource.org.objectweb.asm-3.1.0.jar\nurls[10] = file:/C:/netbeans_maven_repo/org/objectweb/asm/com.springsource.org.objectweb.asm.tree/3.1.0/com.springsource.org.objectweb.asm.tree-3.1.0.jar\nurls[11] = file:/C:/netbeans_maven_repo/org/objectweb/asm/com.springsource.org.objectweb.asm.commons/3.1.0/com.springsource.org.objectweb.asm.commons-3.1.0.jar\nurls[12] = file:/C:/netbeans_maven_repo/org/apache/commons/com.springsource.org.apache.commons.cli/1.1.0/com.springsource.org.apache.commons.cli-1.1.0.jar\nurls[13] = file:/C:/netbeans_maven_repo/org/slf4j/com.springsource.slf4j.nop/1.5.0/com.springsource.slf4j.nop-1.5.0.jar\nurls[14] = file:/C:/netbeans_maven_repo/org/slf4j/com.springsource.slf4j.api/1.5.0/com.springsource.slf4j.api-1.5.0.jar\nurls[15] = file:/C:/netbeans_maven_repo/org/springframework/ws/org.springframework.xml/1.5.2.A/org.springframework.xml-1.5.2.A.jar\nurls[16] = file:/C:/netbeans_maven_repo/org/apache/ws/com.springsource.org.apache.ws.commons.schema/1.3.2/com.springsource.org.apache.ws.commons.schema-1.3.2.jar\nurls[17] = file:/C:/netbeans_maven_repo/org/springframework/org.springframework.beans/2.5.6.A/org.springframework.beans-2.5.6.A.jar\nurls[18] = file:/C:/netbeans_maven_repo/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar\n[FATAL ERROR] Container realm = plexus.core\nurls[0] = file:/C:/Programme/maven/apache-maven-2.0.9/lib/maven-2.0.9-uber.jar\nn\n[ERROR]FATAL ERROR\n------------------\n\ncom/springsource/util/math/Sets\ncom.springsource.util.math.Sets\n---------------------------------------------------------------\n\nTrace\njava.lang.NoClassDefFoundError: com/springsource/util/math/Sets\nat com.springsource.bundlor.support.HibernateMappingParser.\\<clinit>(HibernateMappingParser.java:107)\nat com.springsource.bundlor.support.StandardBundleTransformer.\\<init>(StandardBundleTransformer.java:92)\nat com.springsource.bundlor.maven.plugin.AbstractBundlorMojo.execute(AbstractBundlorMojo.java:192)\nat org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:451)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:558)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:499)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:478)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:330)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:291)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:142)\nat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:336)\nat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)\nat org.apache.maven.cli.MavenCli.main(MavenCli.java:287)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:597)\nat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\nat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\nat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\nat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: java.lang.ClassNotFoundException: com.springsource.util.math.Sets\nat java.net.URLClassLoader$1.run(URLClassLoader.java:200)\nat java.security.AccessController.doPrivileged(Native Method)\nat java.net.URLClassLoader.findClass(URLClassLoader.java:188)\nat java.lang.ClassLoader.loadClass(ClassLoader.java:306)\nat org.codehaus.classworlds.RealmClassLoader.loadClassDirect(RealmClassLoader.java:195)\nat org.codehaus.classworlds.DefaultClassRealm.loadClass(DefaultClassRealm.java:255)\nat org.codehaus.classworlds.DefaultClassRealm.loadClass(DefaultClassRealm.java:274)\nat org.codehaus.classworlds.RealmClassLoader.loadClass(RealmClassLoader.java:214)\nat java.lang.ClassLoader.loadClass(ClassLoader.java:251)\nat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n... 21 more\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb\n", "url": "https://github.com/spring-projects/spring-batch/issues/2498", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2009-02-12 19:15:37", "closed": "2009-02-13 03:49:00", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "If file reader is lenient about resource existing on startup, it should also check when it is closed [BATCH-1082]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1082](https://jira.spring.io/browse/BATCH-1082?redirect=false)** and commented\n\nIf file reader is lenient about resource existing on startup, it should also check when it is closed.  See forum post: http://forum.springframework.org/showthread.php?t=67490\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/b19b90be73a0f45e9a72ef60c53d631f206962c3\n", "url": "https://github.com/spring-projects/spring-batch/issues/2495", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2009-02-14 22:53:10", "closed": "2009-02-16 19:03:20", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "JdbcJobExecutionDao.getRunningJobExecutions() ignores jobName [BATCH-1086]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1086](https://jira.spring.io/browse/BATCH-1086?redirect=false)** and commented\n\nJdbcJobExecutionDao.getRunningJobExecutions() ignores jobName\n\n\n---\n\n**Affects:** 2.0.0.M4\n\n**Attachments:**\n- [mylyn-context.zip](https://jira.spring.io/secure/attachment/15140/mylyn-context.zip) (_22.78 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/7a8598e244ddb3ea0911bda716e04d8d6d010032\n", "url": "https://github.com/spring-projects/spring-batch/issues/2492", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-02-17 04:27:16", "closed": "2009-02-17 23:00:08", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "NamespaceHandler no handle all XML tags [BATCH-1088]", "body": "**[Bob Yang](https://jira.spring.io/secure/ViewProfile.jspa?name=thinhair)** opened **[BATCH-1088](https://jira.spring.io/browse/BATCH-1088?redirect=false)** and commented\n\nThe class \"org.springframework.batch.core.configuration.xml.CoreNamespaceHandler\" used to handle xml tag of \"http://www.springframework.org/schema/batch\" namespace, but it only defined 2 tags: \"job\" and \"job-repository\". why have no \"step\", \"flow\" etc. ?\n\n\n---\n\n**Affects:** 2.0.0.M4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb\n", "url": "https://github.com/spring-projects/spring-batch/issues/2490", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2009-02-18 12:30:59", "closed": "2009-02-18 15:16:57", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Central pom [BATCH-1079]", "body": "**[Edouard Lemaistre](https://jira.spring.io/secure/ViewProfile.jspa?name=edouard)** opened **[BATCH-1079](https://jira.spring.io/browse/BATCH-1079?redirect=false)** and commented\n\ncentral-pom.xml files are failed.\n\n1) spring-batch-core : you should change xstream reference\n\n\\<profiles>\n\\<profile>\n\\<id>tiger\\</id>\n\\<activation>\n\\<jdk>1.5\\</jdk>\n\\</activation>\n\\<dependencies>\n\\<dependency>\n\t\t\t\\<groupId>com.thoughtworks.xstream\\</groupId>\n\t\t\t\\<artifactId>xstream\\</artifactId>\n\\</dependency>\n\\</dependencies>\n\\</profile>\n\\</profiles>\n2) spring-batch-core : groupid missing\n\n3) spring-core : bad version for stax\n   you should change from 1.2 to 1.2.0 in dependencyManagement\n\nI attach the corrected files\n\n\n---\n\n**Affects:** 2.0.0.M4\n\n**Attachments:**\n- [spring-batch-2.0.0.M4.pom](https://jira.spring.io/secure/attachment/15130/spring-batch-2.0.0.M4.pom) (_29.25 kB_)\n- [spring-batch-core-2.0.0.M4.pom](https://jira.spring.io/secure/attachment/15129/spring-batch-core-2.0.0.M4.pom) (_10.71 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2489", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-02-12 23:06:05", "closed": "2009-04-01 00:50:24", "commits": {}, "ttf": 47.000277777777775, "commitsDetails": []}, {"title": "Add strict flag to file readers (flat and XML). [BATCH-1091]", "body": "**[David Ezzio](https://jira.spring.io/secure/ViewProfile.jspa?name=dezzio@ysoft.com)** opened **[BATCH-1091](https://jira.spring.io/browse/BATCH-1091?redirect=false)** and commented\n\nIf file reader is lenient about resource existing on startup, it should also check when it is closed.  See forum post: http://forum.springframework.org/showthread.php?t=67490\n\n\n---\n\n**Affects:** 2.0.0.M3\n", "url": "https://github.com/spring-projects/spring-batch/issues/2486", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2009-02-21 01:49:13", "closed": "2009-02-23 10:04:04", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "Remove StepScope bean definition from samples that don't need it [BATCH-1101]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1101](https://jira.spring.io/browse/BATCH-1101?redirect=false)** and commented\n\nRemove StepScope bean definition from samples that don't need it\n\n\n---\n\n**Affects:** 2.0.0.RC1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/88e92591649310abede911f29cf965ac571e43be, https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb\n", "url": "https://github.com/spring-projects/spring-batch/issues/2476", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2009-02-24 03:38:02", "closed": "2009-02-24 05:57:15", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Wrong stax version in spring-batch-parent-2.0.0.RC1.pom, is 1.2 should be 1.2.0 [BATCH-1104]", "body": "**[Lars-Olof Moilanen](https://jira.spring.io/secure/ViewProfile.jspa?name=mojje)** opened **[BATCH-1104](https://jira.spring.io/browse/BATCH-1104?redirect=false)** and commented\n\nThe wrong version of stax is specified in spring-batch-parent-2.0.0.RC1.pom?\nThis causes the build to fail, since it cannot find the package.\n(infrastructure seems to activate this dependency when using jdk 1.5)\n\n\\<dependency>\n\\<groupId>stax\\</groupId>\n\\<artifactId>stax\\</artifactId>\n\\<version>1.2\\</version>\n\\<optional>true\\</optional>\n\\</dependency>\n\n\n---\n\n**Affects:** 2.0.0.M4, 2.0.0.RC1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb\n", "url": "https://github.com/spring-projects/spring-batch/issues/2472", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2009-02-24 23:44:29", "closed": "2009-02-24 23:57:43", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "SqlPagingQueryProviderFactoryBean ascending should default to true [BATCH-1106]", "body": "**[Tom Green](https://jira.spring.io/secure/ViewProfile.jspa?name=skelf)** opened **[BATCH-1106](https://jira.spring.io/browse/BATCH-1106?redirect=false)** and commented\n\nKind of a minor issue, though it did cause me a lot of grief.  On switching to RC1 and updating my previous SimpleDelegatingPagingQueryProvider beans to use the new SqlPagingQueryProviderFactoryBean, I got was no longer getting anything past the first page of results because it was suddenly ordering 'DESC' instead of 'ASC'.  Even though the ascending property defaults to true in the actual query providers, the factory bean is explicitly setting the property every time and it defaults to false there.\n\n\n---\n\n**Affects:** 2.0.0.RC1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2470", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-02-26 06:20:40", "closed": "2009-02-27 22:03:10", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Fix Date conversion in PlaceholderTargetSource [BATCH-1107]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1107](https://jira.spring.io/browse/BATCH-1107?redirect=false)** and commented\n\nSpring doesn't do type conversion to String very well, and for Date not at all.  This leads to problems for placeholders of type Date.  There are two issues in the current implementation:\n\n\\<property name=\"foo\" value=\"#{jobParameters[runDate]}\"/>\n\nfails even if the \"foo\" property is of type Date because the String conversion is attempted too early; and\n\n\\<property name=\"query\" value=\"select ... where start_date > '#{jobParameters}'\"/>\nfails because the placeholder is embedded in a literal and needs to be converted to String (which Spring doesn't do natively).\n\n\n---\n\n**Affects:** 2.0.0.M3\n\n**Attachments:**\n- [mylyn-context.zip](https://jira.spring.io/secure/attachment/15167/mylyn-context.zip) (_1.36 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2469", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-02-27 21:50:48", "closed": "2009-02-27 22:00:01", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Remove cycle in infrastructure database/support [BATCH-1112]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1112](https://jira.spring.io/browse/BATCH-1112?redirect=false)** and commented\n\nRemove cycle in infrastructure database/support\n\n\n---\n\n**Affects:** 2.0.0.RC1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2466", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2009-03-02 08:37:30", "closed": "2009-03-03 00:28:26", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "ChunkListener called before WriteListener [BATCH-1111]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1111](https://jira.spring.io/browse/BATCH-1111?redirect=false)** and commented\n\nChunkListener called before WriteListener:  http://forum.springframework.org/showthread.php?t=68280\n\n\n---\n\n**Affects:** 2.0.0.RC1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2464", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-02 03:18:35", "closed": "2009-03-02 03:45:14", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "query for JdbcJobExecutionDao.findRunningJobExecutions is broken [BATCH-1113]", "body": "**[Robert Shanahan](https://jira.spring.io/secure/ViewProfile.jspa?name=rshan)** opened **[BATCH-1113](https://jira.spring.io/browse/BATCH-1113?redirect=false)** and commented\n\nJdbcJobExecutionDao.findRunningJobExecutions fails due to ambiguous columns in sql select statement.\n\nThe method makes the following call:\n\ngetJdbcTemplate().getJdbcOperations().query(getQuery(GET_RUNNING_EXECUTIONS), new Object[] { jobName }, handler);\n\nwhere GET_RUNNING_EXECUTIONS is defined as:\n\nprivate static final String GET_RUNNING_EXECUTIONS = \"SELECT JOB_EXECUTION_ID, START_TIME, END_TIME, STATUS, EXIT_CODE, EXIT_MESSAGE, CREATE_TIME, LAST_UPDATED, VERSION, \"\n+ \"JOB_INSTANCE_ID from %PREFIX%JOB_EXECUTION E, %PREFIX%JOB_INSTANCE I where E.JOB_INSTANCE_ID=I.JOB_INSTANCE_ID and I.JOB_NAME=? and E.END_TIME is NULL order by E.JOB_EXECUTION_ID desc\";\n\nRelevant stack trace:\n\nCaused by: org.springframework.dao.DataIntegrityViolationException: PreparedStatementCallback; SQL [SELECT JOB_EXECUTION_ID, START_TIME, END_TIME, STATUS, EXIT_CODE, EXIT_MESSAGE, CREATE_TIME, LAST_UPDATED, VERSION, JOB_INSTANCE_ID from BATCH_JOB_EXECUTION E, BATCH_JOB_INSTANCE I where E.JOB_INSTANCE_ID=I.JOB_INSTANCE_ID and I.JOB_NAME=? and E.END_TIME is NULL order by E.JOB_EXECUTION_ID desc]; Column 'VERSION' in field list is ambiguous; nested exception is com.mysql.jdbc.exceptions.MySQLIntegrityConstraintViolationException: Column 'VERSION' in field list is ambiguous\nat org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.translate(SQLStateSQLExceptionTranslator.java:114)\nat org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.translate(SQLErrorCodeSQLExceptionTranslator.java:322)\nat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:607)\nat org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:641)\nat org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:670)\nat org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:686)\nat org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:694)\nat org.springframework.batch.core.repository.dao.JdbcJobExecutionDao.findRunningJobExecutions(JdbcJobExecutionDao.java:268)\nat org.springframework.batch.core.explore.support.SimpleJobExplorer.findRunningJobExecutions(SimpleJobExplorer.java:82)\n\nWhile VERSION is the only column indicated as ambiguous in the stack trace, there are other ambiguous columns as well.\n\n\n---\n\n**Affects:** 2.0.0.RC1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/b8208dcd8a5b5c375fc6ee341c716eba325b4133\n", "url": "https://github.com/spring-projects/spring-batch/issues/2463", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-02 10:05:02", "closed": "2009-03-18 18:05:53", "commits": {}, "ttf": 16.00027777777778, "commitsDetails": []}, {"title": "JobOperatorgetRunningExecutions [BATCH-1115]", "body": "**[Yann C\u00e9bron](https://jira.spring.io/secure/ViewProfile.jspa?name=yann)** opened **[BATCH-1115](https://jira.spring.io/browse/BATCH-1115?redirect=false)** and commented\n\n\n---\nNo further details from [BATCH-1115](https://jira.spring.io/browse/BATCH-1115?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/2462", "user": "spring-issuemaster", "labels": ["status: duplicate", "type: bug"], "created": "2009-03-05 00:46:53", "closed": "2009-03-05 03:06:17", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "FlushFailedException should be moved from batch.item to batch.support.transaction [BATCH-1114]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-1114](https://jira.spring.io/browse/BATCH-1114?redirect=false)** and commented\n\nBecause FlushFailedException is in batch.item, and a class in support.transaction has a dependency upon it, there is a cyclic dependency between support and item.  Moving the exception fixed it.  It made much more sense when ItemWriter had a flush method, for it to be in item, but now that it doesn't, it's more of a transaction support. (Unless we want to move support.transaction into item.transaction, which is an option.\n\n\n---\nNo further details from [BATCH-1114](https://jira.spring.io/browse/BATCH-1114?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/2461", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2009-03-03 13:53:45", "closed": "2009-03-14 04:12:30", "commits": {}, "ttf": 10.000277777777777, "commitsDetails": []}, {"title": "afterWrite() will only be called if an exception is raised during throttling [BATCH-1119]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1119](https://jira.spring.io/browse/BATCH-1119?redirect=false)** and commented\n\nIf a chunk fails during write() then the recovery procedure will kick in.  But if all of the items pass during throttling, then no exception will be raised to try the chunk again.  Thus, the afterWrite() method will never be called because that method is only called by SimpleChunkProcessor.doWrite().\n\n\n---\n\n**Affects:** 2.0.0.RC1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2457", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-05 10:12:31", "closed": "2009-03-06 01:29:32", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "StaxEventWriter.startDocument() needs to be protected [BATCH-1122]", "body": "**[Jean Blanchard](https://jira.spring.io/secure/ViewProfile.jspa?name=jblanchard)** opened **[BATCH-1122](https://jira.spring.io/browse/BATCH-1122?redirect=false)** and commented\n\nThe method startDocument() in org.springframework.batch.item.xml.StaxEventWriter is private, whereas its javadoc mentions \"[...]If this is not sufficient for you, simply override this method.\"\nThis prevents one to cleanly override the creation of the root tag.\n\nThe simple fix is to make the method protected, as is endDocument().\n\n\n---\n\n**Affects:** 1.1.4, 2.0.0.RC1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2454", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2009-03-05 19:19:25", "closed": "2019-01-29 08:32:58", "commits": {}, "ttf": 3616.0002777777777, "commitsDetails": []}, {"title": "ExecutionContextPromotionListener may perform promotion multiple times [BATCH-1123]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1123](https://jira.spring.io/browse/BATCH-1123?redirect=false)** and commented\n\nThe ExecutionContextPromotionListener  currently performs the promotion for every matched pattern.  Instead, it should break out of the loop after finding a match.\n\n\n---\n\n**Affects:** 2.0.0.RC1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/c24e4b39ea85a89f01ffe9c648828abddc0edc63\n", "url": "https://github.com/spring-projects/spring-batch/issues/2453", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-06 01:51:14", "closed": "2009-03-06 02:08:27", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Fix error message that occurs when the same annotation is used twice on one method [BATCH-1124]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1124](https://jira.spring.io/browse/BATCH-1124?redirect=false)** and commented\n\nMethodInvokerUtils.getMethodInvokerByAnnotation() checks to make sure that the same annotation does not appear more than once on a single class.  If a duplicate is found, then an error such as the following is thrown:\n\njava.lang.IllegalArgumentException: found more than one method on target class [org.springframework.batch.sample.domain.trade.internal.TradeWriter@178dc08] with the annotation type [org.springframework.batch.sample.domain.trade.internal.TradeWriter@178dc08]\n\nThe error should be:\n\njava.lang.IllegalArgumentException: found more than one method on target class [TradeWriter] with the annotation type [AfterWrite]\n\n\n---\n\n**Affects:** 2.0.0.RC1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/dee9420cdab18b1fbd79fd64240c202c07a01842\n", "url": "https://github.com/spring-projects/spring-batch/issues/2452", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2009-03-06 08:51:26", "closed": "2009-03-06 09:03:21", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "NoWorkFoundStepExecutionListener doesn't fail the step [BATCH-1125]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1125](https://jira.spring.io/browse/BATCH-1125?redirect=false)** and commented\n\nThe NoWorkFoundStepExecutionListener throws an exception from an AfterStep method.  However, throwing an exception from an AfterStep only results in the exception being logged and has no impact on the status of the step.  Instead, the AfterStep method should return ExitStatus.FAILED.\n\n\n---\n\n**Affects:** 2.0.0.RC1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2451", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-06 09:25:06", "closed": "2009-03-06 10:08:46", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "StepScope does not apply to twice nested inner beans [BATCH-1126]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1126](https://jira.spring.io/browse/BATCH-1126?redirect=false)** and commented\n\nStepScope does not apply to twice nested inner beans\n\ne.g.  <bean ...>\n<property ...>\n<bean ... >\n<property ...>\n<bean ... scope=\"step\"/>\n\\</property>\n\\</bean>\n\\</property>\n\\</bean>\n\n\n---\n\n**Affects:** 2.0.0.RC1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2450", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2009-03-06 19:58:35", "closed": "2009-03-06 20:13:06", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Make sure WRITE_COUNT and ROLLBACK_COUNT are being updated correctly [BATCH-1128]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1128](https://jira.spring.io/browse/BATCH-1128?redirect=false)** and commented\n\nFrom a forum post:\n\nUsing FlatFileItemReader and loading the records into database.  File has 55 records and 55th record is skipped. Commit interval is 100.\n\nResults in:\nREAD_COUNT: 55\nWRITE_COUNT: 108\nWRITE_SKIP_COUNT: 1\nROLLBACK_COUNT: 2\nCOMMIT_COUNT: 1\n\nDatabase was correctly loaded with 54 records. But WRITE_COUNT and ROLLBACK_COUNT are misleading.\n\n\n---\n\n**Affects:** 2.0.0.RC1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2448", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-08 14:28:52", "closed": "2009-03-09 04:35:11", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Problems with exception classifications [BATCH-1129]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1129](https://jira.spring.io/browse/BATCH-1129?redirect=false)** and commented\n\nTransaction attributes of the following form don't seem to be preventing rollback:\ntransaction-attribute=\"+org.springframework.dao.DataIntegrityViolationException\"\n\nIt does, however, seem to be causing the job to fail.   ie, it's treated as a fatal exception and prevents skipping.\n\nFurthermore, all exceptions seem to be skippable by default, whereas they should be fatal unless specifically configured to be skippable.\n\nThere are some complications listed in [BATCH-859](https://jira.spring.io/browse/BATCH-859), so if those complications make these scenarios impossible, that needs to be documented.  \nSee http://static.springframework.org/spring-batch/reference/html/configureStep.html#d0e2594.\n\n\n---\n\n**Affects:** 2.0.0.RC1\n\n**Attachments:**\n- [mylyn-context.zip](https://jira.spring.io/secure/attachment/15190/mylyn-context.zip) (_27.22 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2447", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-09 16:08:32", "closed": "2009-03-19 23:05:59", "commits": {}, "ttf": 10.000277777777777, "commitsDetails": []}, {"title": "Ensure Ordered is respected by generated listeners [BATCH-1130]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1130](https://jira.spring.io/browse/BATCH-1130?redirect=false)** and commented\n\n\n---\n\n**Affects:** 2.0.0.RC1\n\n**Attachments:**\n- [mylyn-context.zip](https://jira.spring.io/secure/attachment/15192/mylyn-context.zip) (_6.93 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2446", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-10 02:27:03", "closed": "2009-03-10 02:42:14", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "In the xsd, <listeners/> should be moved from \"flowType\" to \"job\" [BATCH-1142]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1142](https://jira.spring.io/browse/BATCH-1142?redirect=false)** and commented\n\nIn the xsd, \\<listeners/> is a part of the \"flowType\", which is a part of \"job\".  However, this a problem because \"flowType\" is also referenced by the \\<flow/> element.  Therefore, the xsd allows things like the following, which doesn't make sense because listeners are part of the job.\n\n    <split id=\"split1\" task-executor=\"taskExecutor\">\n            <flow>\n                <step .../>\n                <listeners>...</listeners>\n            </flow>\n    </split>\n\n\n\n---\n\n**Affects:** 2.0.0.RC1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2438", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-12 08:10:59", "closed": "2009-03-12 10:21:18", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Standalone <step/> should not be allowed to have \"tasklet\" attribute and <tasklet/> together [BATCH-1143]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1143](https://jira.spring.io/browse/BATCH-1143?redirect=false)** and commented\n\nStandalone \\<step/> should not be allowed to have \"tasklet\" attribute and \\<tasklet/> together.  There is logic to check for this on an inline step, but not a standalone.\n\n\n---\n\n**Affects:** 2.0.0.RC1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/45a24282af68f633d154ac105b9b2ebb5f37f9a6, https://github.com/spring-projects/spring-batch/commit/4de7d5ec2da9f13ae69aed4441e4b6dfef23af23, https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/1ddfe4919146b7d1a655af75a558c46d09f5f575\n", "url": "https://github.com/spring-projects/spring-batch/issues/2437", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-12 16:48:55", "closed": "2009-03-12 17:54:35", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Conflicts if both <step/> and <tasklet/> have a \"parent\" attribute [BATCH-1145]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1145](https://jira.spring.io/browse/BATCH-1145?redirect=false)** and commented\n\nBoth \\<step/> and \\<tasklet/> affect the step factory bean  If both elements have a \"parent\" attribute, then one will override the other, causing the first to be ignored.  A solution must be found that allows two parents to be specified.\n\n\n---\n\n**Affects:** 2.0.0.RC1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/d2a5aeb616f801d64917149c139eaa6fe1880cb3\n", "url": "https://github.com/spring-projects/spring-batch/issues/2435", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-12 19:47:56", "closed": "2009-03-13 20:38:50", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "StepExecution getFilterCount always return 0 [BATCH-1147]", "body": "**[Didier Giovanetti](https://jira.spring.io/secure/ViewProfile.jspa?name=didier.giovanetti)** opened **[BATCH-1147](https://jira.spring.io/browse/BATCH-1147?redirect=false)** and commented\n\nWe use a Step FaultTolerantStepFactoryBean\nwith an ItemProcessor\n\nWe do a JUnit Test in 2.0.0 CI Snapshot\nand setup the test to have the ItemProcessor return null\nthe assert says that getFilterCount == 1 is true\n\nAfter move to 2.0.0 RC1 core SpringBatch the assert is false\nbecause getFilterCount() return 0\nIn all the other Junit Test getFilterCount() method return always 0.\n\nCan you explain if it is a bug or another way to configure FaultTolerantStepFactoryBean ?\n\n\n\n---\n\n**Affects:** 2.0.0.RC1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/9e35519672ec2c2ef6fe6f6498aba8b01f345052\n", "url": "https://github.com/spring-projects/spring-batch/issues/2434", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-13 01:28:49", "closed": "2009-03-13 06:00:09", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Random build failures [BATCH-1148]", "body": "**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[BATCH-1148](https://jira.spring.io/browse/BATCH-1148?redirect=false)** and commented\n\nTowards the end of the build cycle I sometimes get a build failure.\n\nIs this related to bundlor? Re-running the build usually works.\n\nThis was after running \"mvn clean install\".\n\n[INFO] ------------------------------------------------------------------------\n[INFO] Building Test\n[INFO]    task-segment: [clean, install]\n[INFO] ------------------------------------------------------------------------\n[INFO] [clean:clean]\n[INFO] Deleting directory /Users/trisberg/Projects/springsource/spring-batch/trunk/spring-batch-test/target\n[INFO] [resources:resources]\n[INFO] Using default encoding to copy filtered resources.\n[INFO] [compiler:compile]\n[INFO] Compiling 6 source files to /Users/trisberg/Projects/springsource/spring-batch/trunk/spring-batch-test/target/classes\n[INFO] [resources:testResources]\n[INFO] Using default encoding to copy filtered resources.\n[INFO] [compiler:testCompile]\n[INFO] Compiling 12 source files to /Users/trisberg/Projects/springsource/spring-batch/trunk/spring-batch-test/target/test-classes\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Compilation failure\nFailure executing javac, but could not parse the error:\nAn exception has occurred in the compiler (1.5.0_16). Please file a bug at the Java Developer Connection (http://java.sun.com/webapps/bugreport)  after checking the Bug Parade for duplicates. Include your program and the following diagnostic in your report.  Thank you.\njava.lang.InternalError: jzentry == 0,\njzfile = 1220800,\ntotal = 335,\nname = /Users/trisberg/Projects/springsource/spring-batch/trunk/spring-batch-core/target/org.springframework.batch.core-2.0.0.CI-SNAPSHOT.jar,\ni = 2,\nmessage = invalid LOC header (bad signature)\nat java.util.zip.ZipFile$3.nextElement(ZipFile.java:429)\nat java.util.zip.ZipFile$3.nextElement(ZipFile.java:415)\nat com.sun.tools.javac.jvm.ClassReader.openArchive(ClassReader.java:1447)\nat com.sun.tools.javac.jvm.ClassReader.list(ClassReader.java:1742)\nat com.sun.tools.javac.jvm.ClassReader.listAll(ClassReader.java:1882)\nat com.sun.tools.javac.jvm.ClassReader.fillIn(ClassReader.java:1903)\nat com.sun.tools.javac.jvm.ClassReader.complete(ClassReader.java:1538)\nat com.sun.tools.javac.code.Symbol.complete(Symbol.java:355)\nat com.sun.tools.javac.comp.Enter.visitTopLevel(Enter.java:256)\nat com.sun.tools.javac.tree.Tree$TopLevel.accept(Tree.java:382)\nat com.sun.tools.javac.comp.Enter.classEnter(Enter.java:221)\nat com.sun.tools.javac.comp.Enter.classEnter(Enter.java:235)\nat com.sun.tools.javac.comp.Enter.complete(Enter.java:460)\nat com.sun.tools.javac.comp.Enter.main(Enter.java:445)\nat com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:404)\nat com.sun.tools.javac.main.Main.compile(Main.java:592)\nat com.sun.tools.javac.main.Main.compile(Main.java:544)\nat com.sun.tools.javac.Main.compile(Main.java:85)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:585)\nat org.codehaus.plexus.compiler.javac.JavacCompiler.compileInProcess(JavacCompiler.java:420)\nat org.codehaus.plexus.compiler.javac.JavacCompiler.compile(JavacCompiler.java:141)\nat org.apache.maven.plugin.AbstractCompilerMojo.execute(AbstractCompilerMojo.java:493)\nat org.apache.maven.plugin.TestCompilerMojo.execute(TestCompilerMojo.java:102)\nat org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:451)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:558)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:499)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:478)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:330)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:291)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:142)\nat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:336)\nat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)\nat org.apache.maven.cli.MavenCli.main(MavenCli.java:287)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:585)\nat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\nat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\nat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\nat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n\nFailure executing javac, but could not parse the error:\nAn exception has occurred in the compiler (1.5.0_16). Please file a bug at the Java Developer Connection (http://java.sun.com/webapps/bugreport)  after checking the Bug Parade for duplicates. Include your program and the following diagnostic in your report.  Thank you.\njava.lang.InternalError: jzentry == 0,\njzfile = 1220800,\ntotal = 335,\nname = /Users/trisberg/Projects/springsource/spring-batch/trunk/spring-batch-core/target/org.springframework.batch.core-2.0.0.CI-SNAPSHOT.jar,\ni = 2,\nmessage = invalid LOC header (bad signature)\nat java.util.zip.ZipFile$3.nextElement(ZipFile.java:429)\nat java.util.zip.ZipFile$3.nextElement(ZipFile.java:415)\nat com.sun.tools.javac.jvm.ClassReader.openArchive(ClassReader.java:1447)\nat com.sun.tools.javac.jvm.ClassReader.list(ClassReader.java:1742)\nat com.sun.tools.javac.jvm.ClassReader.listAll(ClassReader.java:1882)\nat com.sun.tools.javac.jvm.ClassReader.fillIn(ClassReader.java:1903)\nat com.sun.tools.javac.jvm.ClassReader.complete(ClassReader.java:1538)\nat com.sun.tools.javac.code.Symbol.complete(Symbol.java:355)\nat com.sun.tools.javac.comp.Enter.visitTopLevel(Enter.java:256)\nat com.sun.tools.javac.tree.Tree$TopLevel.accept(Tree.java:382)\nat com.sun.tools.javac.comp.Enter.classEnter(Enter.java:221)\nat com.sun.tools.javac.comp.Enter.classEnter(Enter.java:235)\nat com.sun.tools.javac.comp.Enter.complete(Enter.java:460)\nat com.sun.tools.javac.comp.Enter.main(Enter.java:445)\nat com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:404)\nat com.sun.tools.javac.main.Main.compile(Main.java:592)\nat com.sun.tools.javac.main.Main.compile(Main.java:544)\nat com.sun.tools.javac.Main.compile(Main.java:85)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:585)\nat org.codehaus.plexus.compiler.javac.JavacCompiler.compileInProcess(JavacCompiler.java:420)\nat org.codehaus.plexus.compiler.javac.JavacCompiler.compile(JavacCompiler.java:141)\nat org.apache.maven.plugin.AbstractCompilerMojo.execute(AbstractCompilerMojo.java:493)\nat org.apache.maven.plugin.TestCompilerMojo.execute(TestCompilerMojo.java:102)\nat org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:451)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:558)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:499)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:478)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:330)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:291)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:142)\nat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:336)\nat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)\nat org.apache.maven.cli.MavenCli.main(MavenCli.java:287)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:585)\nat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\nat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\nat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\nat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n\n[INFO] ------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1 minute 14 seconds\n[INFO] Finished at: Fri Mar 13 09:35:02 EDT 2009\n[INFO] Final Memory: 23M/63M\n[INFO] --------------------------------------------------------------------\n\n\n---\n\n**Affects:** 2.0.0.RC1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2433", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2009-03-13 01:42:20", "closed": "2009-11-05 18:55:42", "commits": {}, "ttf": 237.00027777777777, "commitsDetails": []}, {"title": "Add IDE support to <retry-listeners/> in xsd [BATCH-1151]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1151](https://jira.spring.io/browse/BATCH-1151?redirect=false)** and commented\n\nAdd IDE support to \\<retry-listeners/> in xsd\n\n\n---\n\n**Affects:** 2.0.0.RC1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2430", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-13 05:39:50", "closed": "2009-03-13 05:58:22", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Cycle in reader package (FFIR and DefaultLineMapper) [BATCH-1155]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1155](https://jira.spring.io/browse/BATCH-1155?redirect=false)** and commented\n\n\n---\n\n**Affects:** 2.0.0.RC1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/4837400605fdce5ef8d81609486c000639fc79eb\n", "url": "https://github.com/spring-projects/spring-batch/issues/2427", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2009-03-14 04:01:29", "closed": "2009-03-14 04:08:33", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "It is not possible to set transaction-attributes for a tasklet step [BATCH-1131]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1131](https://jira.spring.io/browse/BATCH-1131?redirect=false)** and commented\n\nWhen creating a chunk-oriented step, a \"transaction-attribute\"  can be configured on the \\<tasklet/> element.  However, since tasklet steps do not use the \\<tasklet/> element (they use the 'tasklet' attribute) there is no place to configure a transaction-attribute.  If the user must use Spring's \"tx\" namespace and provide transaction advice, then this should be mentioned in the documentation.\n\n\n---\n\n**Affects:** 2.0.0.RC1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2426", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-10 03:49:45", "closed": "2009-03-13 10:39:37", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "Possible \"null\" context return with MapRetryContextCache in RetryTemplate [BATCH-1156]", "body": "**[Sandrine Raffalli](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrine.raffalli)** opened **[BATCH-1156](https://jira.spring.io/browse/BATCH-1156?redirect=false)** and commented\n\nI get a lot of unexpected RetryException that kill my batch. I suppect the use of SoftReference in MapRetryContextCache could be the cause.\nThe following lines show that the RetryTemplate throws a RetryException if the retryContextCache returns \"null\" for a given key.\nBut MapRetryContextCache uses a map of SofReference (as consequence of [BATCH-682](https://jira.spring.io/browse/BATCH-682)), that means the retry context could be deleted by the garbage collector, and the retryContextCache could return \"null\" even though containsKey() allowed entry in the if block.\n\n381                     else if (retryContextCache.containsKey(key)) {\n382 \t\n383 \t                        RetryContext context = retryContextCache.get(key);\n384 \t                        if (context == null) {\n385 \t                                throw new RetryException(\"Inconsistent state for failed item: no history found. \"\n386 \t                                                + \"Consider whether equals() or hashCode() for the item might be inconsistent, \"\n387 \t                                                + \"or if you need to supply a better ItemKeyGenerator\");\n388 \t                        }\n389 \t                        return context;\n390 \t\n391 \t                }\n\n\n---\n\n**Affects:** 2.0.0.RC1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/0c695d302b96286405303d7cd8a3b8b82a789396, https://github.com/spring-projects/spring-batch/commit/9af87b5a96792b19acc4e32fb551fbe94764fedb\n", "url": "https://github.com/spring-projects/spring-batch/issues/2425", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2009-03-15 04:25:08", "closed": "2009-03-15 07:53:05", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "PROCESS_SKIP_COUNT seems not to ever get written to database [BATCH-1159]", "body": "**[Pavel Zupa](https://jira.spring.io/secure/ViewProfile.jspa?name=pavel.zupa)** opened **[BATCH-1159](https://jira.spring.io/browse/BATCH-1159?redirect=false)** and commented\n\nExceptions in readers and writers seems to be handled nicely, but there seems to be a problem throwing skippable exception from processor. StepExecution's processSkipCount is incremented, skip listeners are called and step listener's afterStep() gets correct counts in StepExecution has correct counts. But PROCESS_SKIP_COUNT is never incremented in database - allways 0. Sometimes even filterCount is incremented in StepExecution instead of processSkipCount. I tried to debug through sources but got pretty lost:-( I've checked that HibernateTemplate.flush() is called everytime in the writer.\n\nThis is part of our parent step configuration (FaultTolerantStepFactoryBean) used for all batches (i believe there should be no problem)\n\\<property name=\"retryableExceptionClasses\">\n\\<list>\n\\<value>org.springframework.dao.RecoverableDataAccessException\\</value>\n\\<value>org.springframework.dao.TransientDataAccessException\\</value>\n\\</list>\n\\</property>\n\\<property name=\"skippableExceptionClasses\" value=\"java.lang.Exception\" />\n\\<property name=\"fatalExceptionClasses\">\n\\<list>\n\\<value>cz.mycompany.FatalProcessingException\\</value>\n\\<value>org.springframework.batch.core.JobInterruptedException\\</value>\n\\</list>\n\\</property>\n\nProblem appeared to be there quite some time. Previously we used 2.0.0.M2 and it was already there.\n\n\n---\n\n**Affects:** 2.0.0.RC1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2421", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-18 02:37:40", "closed": "2009-03-18 18:17:05", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "In Batch xsd, stepType and flowStepType should be unordered [BATCH-1160]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1160](https://jira.spring.io/browse/BATCH-1160?redirect=false)** and commented\n\nIn Batch xsd, stepType and flwoStepType should be unordered.\n\n\n---\n\n**Affects:** 2.0.0.RC1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2419", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-19 15:17:18", "closed": "2009-03-19 18:38:54", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Putting scope=\"step\" on a listener causes failure [BATCH-1164]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1164](https://jira.spring.io/browse/BATCH-1164?redirect=false)** and commented\n\nThe configuration below fails because the framework is unable to set properties onto the StepListenerFactoryBean:\n\n\\<step-listener id=\"l2\" ref=\"myListener\"/>\n\n<beans:bean id=\"myListener\" class=\"MyListener\" scope=\"step\">\n<beans:property name=\"runId\" value=\"#{jobParameters[my.param]}\"/>\n</beans:bean>\n\n\n\n---\n\n**Affects:** 2.0.0.RC1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/c87f61adf77e5d41f52cc022d549722624d4dc3a\n", "url": "https://github.com/spring-projects/spring-batch/issues/2417", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-20 03:01:46", "closed": "2009-03-20 04:49:43", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Allow 'id' and 'ref' to exist together on <*-listener/> [BATCH-1165]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1165](https://jira.spring.io/browse/BATCH-1165?redirect=false)** and commented\n\nAllow 'id' and 'ref' to exist together on <*-listener/>\n\n\n---\n\n**Affects:** 2.0.0.RC1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/7e394ddb0ab987bdffe78e729d015421e213a0b8, https://github.com/spring-projects/spring-batch/commit/94037facb8775da017f9ea17a44203c8d1f504ce\n", "url": "https://github.com/spring-projects/spring-batch/issues/2416", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-20 03:10:54", "closed": "2009-03-20 03:37:00", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Use MD5 for JobParameters key in JdbcJobInstanceDao [BATCH-1146]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1146](https://jira.spring.io/browse/BATCH-1146?redirect=false)** and commented\n\nUse MD5 for JobParameters key in JdbcJobInstanceDao\n\n\n---\n\n**Affects:** 2.0.0.RC1\n\n**Issue Links:**\n- [BATCH-1090](https://jira.spring.io/browse/BATCH-1090) Add unique constraint to BATCH_JOB_INSTANCE\n (_**\"is depended on by\"**_)\n- [BATCH-1090](https://jira.spring.io/browse/BATCH-1090) Add unique constraint to BATCH_JOB_INSTANCE\n\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/3b1c506bd98fc967d9680cde0eebbee9ecf80b3f\n", "url": "https://github.com/spring-projects/spring-batch/issues/2415", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-12 20:07:20", "closed": "2009-03-13 21:18:06", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Bad ERROR_LOG definition in business-schema-mysql.sql [BATCH-1168]", "body": "**[Willie Wheeler](https://jira.spring.io/secure/ViewProfile.jspa?name=wwheeler)** opened **[BATCH-1168](https://jira.spring.io/browse/BATCH-1168?redirect=false)** and commented\n\nThe following definition fails in MySQL since the max length for the char datatype is 255:\n\nCREATE TABLE ERROR_LOG  (\nJOB_NAME CHAR(20) ,\nSTEP_NAME CHAR(20) ,\nMESSAGE CHAR(300) NOT NULL\n) type=InnoDB;\n\nChanging the MESSAGE datatype to VARCHAR(300) should fix it.\n\n\n---\n\n**Affects:** 2.0.0.RC2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/bf9b9c2fc2aae1b238303996a9e9b1340789940b, https://github.com/spring-projects/spring-batch/commit/699e5f9a2a8d656084cb100c4878aea0d4bb232d\n", "url": "https://github.com/spring-projects/spring-batch/issues/2412", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2009-03-22 07:33:57", "closed": "2009-04-01 00:49:41", "commits": {}, "ttf": 9.000277777777777, "commitsDetails": []}, {"title": "Incorrect system property name in data-source-context.xml [BATCH-1169]", "body": "**[Willie Wheeler](https://jira.spring.io/secure/ViewProfile.jspa?name=wwheeler)** opened **[BATCH-1169](https://jira.spring.io/browse/BATCH-1169?redirect=false)** and commented\n\nIn the data-source-context.xml file (for the sample apps), at line 21 it says\n\n    <!-- Set up or detect a System property called \"environment\" used to construct a properties file on the classpath.  The default is \"hsql\".  -->\n\nBut in reality the system property is called\n\n    org.springframework.batch.support.SystemPropertyInitializer.ENVIRONMENT\n\nas given by\n\nhttp://static.springframework.org/spring-batch/apidocs/constant-values.html#org.springframework.batch.support.SystemPropertyInitializer.ENVIRONMENT\n\n\n---\n\n**Affects:** 2.0.0.RC2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/6b1e440a67193267dac0b20dfae492ac6a5aa398\n", "url": "https://github.com/spring-projects/spring-batch/issues/2411", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2009-03-22 15:27:17", "closed": "2009-04-01 00:51:31", "commits": {}, "ttf": 9.000277777777777, "commitsDetails": []}, {"title": "When using FixedLengthTokenizer and FixedLengthLineAggregator, can not read the record correctly with parameters like [p:columns=\"1-9,10-19,20-29,30-39,40-49\"] in the configuration file. [BATCH-1170]", "body": "**[jiewen.wu](https://jira.spring.io/secure/ViewProfile.jspa?name=jiewen.wu)** opened **[BATCH-1170](https://jira.spring.io/browse/BATCH-1170?redirect=false)** and commented\n\nPlease refer to the below attachment and also provide a feasible solution.\n\n\n---\n\n**Affects:** 1.1.4\n\n**Attachments:**\n- [Spring-Batch-1.1.5-RELEASE.doc](https://jira.spring.io/secure/attachment/15244/Spring-Batch-1.1.5-RELEASE.doc) (_511.50 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb\n", "url": "https://github.com/spring-projects/spring-batch/issues/2410", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: invalid", "type: bug"], "created": "2009-03-22 16:49:30", "closed": "2009-03-22 19:26:15", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Interrupted step does not fail job. [BATCH-1171]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1171](https://jira.spring.io/browse/BATCH-1171?redirect=false)** and commented\n\nInterrupted step does not fail job.  This has to be wrong otherwise you can't restart it.\n\n\n---\n\n**Affects:** 2.0.0.RC2\n", "url": "https://github.com/spring-projects/spring-batch/issues/2409", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-22 21:58:02", "closed": "2009-04-01 00:48:12", "commits": {}, "ttf": 9.000277777777777, "commitsDetails": []}, {"title": "listener element should only have an \"id\" when defined at the top level [BATCH-1153]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1153](https://jira.spring.io/browse/BATCH-1153?redirect=false)** and commented\n\nA listener element should only have an \"id\" when defined at the top level.  So \\<listener/> should not have an \"id\" and \\<job-listener/> and \\<step-listener/> should have an optional \"id\" (no id needed when defined within a bean).\n\n\n---\n\n**Affects:** 2.0.0.RC1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/cf062493e2efef78ab8f31d663cd0d34fe93b94c\n", "url": "https://github.com/spring-projects/spring-batch/issues/2408", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-13 11:26:59", "closed": "2009-03-13 11:36:51", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Late binding of jobParameters does not work if late binding expression is not preceded or trailed by string [BATCH-1174]", "body": "**[Morten Andersen-Gott](https://jira.spring.io/secure/ViewProfile.jspa?name=magott)** opened **[BATCH-1174](https://jira.spring.io/browse/BATCH-1174?redirect=false)** and commented\n\nI stumbled upon some strange behavior when using late binding. I'm trying to inject a string that is passed to the batch as a jobParameter. This string is however not inject, if I don't add a character in front-  of or after the late binding expression.\nTo replicate this bug try to do the following:\nin the restartSample.xml change the flatFileItemReader's resource from:\n<beans:property name=\"resource\" value=\"classpath:/data/skipJob/input/input#{jobParameters[run.id]}.txt\" />\nto\n<beans:property name=\"resource\" value=\"#{jobParameters[run.id]}\" />\nThis results in the following exception:\njava.lang.IllegalStateException: Input resource must exist (reader is in 'strict' mode): class path resource [#{jobParameters[run.id]}]\n\nIf you add a character at the end (or the front), like this:\n<beans:property name=\"resource\" value=\"a#{jobParameters[run.id]}\" />\nThe following exception is thrown:\njava.lang.IllegalStateException: Input resource must exist (reader is in 'strict' mode): class path resource [a1]\n(This makes sense, as there is no such classpath resource, and the jobParameter run.id which is '1' has been set.)\n\nSo, it seems that the late binding of jobParameters does not work if the jobParameter key is concatenated with some other string value...strange. Even stranger, it does not seem to be the case for late binding of stepExecutionContext parameters.\n\nWasn't able to locate the code that did the actual late binding, so I'm afraid I don't have patch ready that you can apply.\n\n\n\n---\n\n**Affects:** 2.0.0.RC2\n", "url": "https://github.com/spring-projects/spring-batch/issues/2405", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-24 02:56:19", "closed": "2009-04-01 00:48:41", "commits": {}, "ttf": 7.000277777777778, "commitsDetails": []}, {"title": "Update documentation section 5.2.2. Example Tasklet implementation [BATCH-1176]", "body": "**[Michel Zanini](https://jira.spring.io/secure/ViewProfile.jspa?name=michelz)** opened **[BATCH-1176](https://jira.spring.io/browse/BATCH-1176?redirect=false)** and commented\n\nIn the new 2.0.0 release the only method in Tasklet interface have this signature:\n\nRepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception;\n\nBut on documentation section 5.2.2 the example uses the old interface with this signature:\n\npublic ExitStatus execute() throws Exception;\n\n\n---\n\n**Affects:** 2.0.0.RC2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/bdeb0b68de9a4105d660aece5403fc2b84665263\n", "url": "https://github.com/spring-projects/spring-batch/issues/2403", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2009-03-24 05:28:50", "closed": "2009-04-04 23:23:02", "commits": {}, "ttf": 11.000277777777777, "commitsDetails": []}, {"title": "<step/> with \"ref=\" silently ignores other attributes [BATCH-1178]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1178](https://jira.spring.io/browse/BATCH-1178?redirect=false)** and commented\n\nIf the InlineStepParser finds a \"ref=\" attribute on the \\<step/>, it will ignore all other attributes.  Instead, it should be throwing errors if any other attributes are defined.\n\n\n---\n\n**Affects:** 2.0.0.RC2\n\n**Issue Links:**\n- [BATCH-1179](https://jira.spring.io/browse/BATCH-1179) Remove ref= attribute from \\<step/> in favor of parent=\n (_**\"is superseded by\"**_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/e2d528270141db7cfe25ca5a600265cfe14fce80\n", "url": "https://github.com/spring-projects/spring-batch/issues/2399", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-25 03:11:31", "closed": "2009-04-01 00:47:15", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "Error occurs if parent= attribute appears on inline <step/> without tasket [BATCH-1180]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1180](https://jira.spring.io/browse/BATCH-1180?redirect=false)** and commented\n\nAn error occurs if the parent= attribute appears on an inline \\<step/> without tasket= or \\<tasklet/> because no BeanDefinition is returned from AbstractStepParser.parseTasklet().\n\nUpdate parseTasklet() so that a BeanDefinition (even an empty one) is always returned.  This will simplify the step parser hierarchy a bit too because calling methods will no longer have to check whether a BeanDefinition was returned or not.\n\n\n---\n\n**Affects:** 2.0.0.RC2\n", "url": "https://github.com/spring-projects/spring-batch/issues/2398", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-25 05:53:14", "closed": "2009-04-01 00:47:49", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "<step/> element always assumes the step is a TaskletStep [BATCH-1181]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1181](https://jira.spring.io/browse/BATCH-1181?redirect=false)** and commented\n\nThe namespace's \\<step/> element always assumes it is creating a TaskletStep so it tries to set properties such as transactionManager and jobRepository.  However, the \\<step/> should be flexible enough to handle any implementation of Step so that if a user defines their own Step they can use it with the namespace to construct a FlowJob.\n\nIn order to resolve this issue, properties need to be removed from the \\<step/> element and moved to an inner element.  The new \\<step/> structure will be as follows:\n\\<step>\n\\<tasklet>\n\\<chunk-tasklet/>\n\\</tasklet>\n\\</step>\n\nWhere:\nThe \\<chunk-tasklet/> is the new name of what used to be \\<tasklet/>.  It is used to create a Chunk-Oriented TaskletStep.\nThe new \\<tasklet/> contains the properties that used to be on \\<step/>.  It is used to create a TaskletStep and it has a ref= that can reference a Tasklet implementation.\nThe \\<step/> contains only id=, parent=, abstract=, and flow transitions.  It can be used with any Step implementation.\n\n\n---\n\n**Affects:** 2.0.0.RC2\n\n**Issue Links:**\n- [BATCH-1179](https://jira.spring.io/browse/BATCH-1179) Remove ref= attribute from \\<step/> in favor of parent=\n\n", "url": "https://github.com/spring-projects/spring-batch/issues/2397", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-25 16:39:50", "closed": "2009-03-29 16:15:12", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "Broken links on project home page [BATCH-1182]", "body": "**[Brian Hanafee](https://jira.spring.io/secure/ViewProfile.jspa?name=bhanafee)** opened **[BATCH-1182](https://jira.spring.io/browse/BATCH-1182?redirect=false)** and commented\n\nThe Support-> 1.0.x and 1.1.x link on the left navigation are broken throughout the http://static.springsource.org/spring-batch/ site.\n\nAdding links for 2.x would be helpful too.\n\n\n---\n\n1 votes, 1 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/2396", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2009-03-28 06:46:12", "closed": "2009-04-27 00:04:20", "commits": {}, "ttf": 29.00027777777778, "commitsDetails": []}, {"title": "Job slows when step scope is used [BATCH-1185]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1185](https://jira.spring.io/browse/BATCH-1185?redirect=false)** and commented\n\nWhen scope=\"step\" appears on a flat file item reader, the job takes longer.\n\nIn the football job, if player.file.name=player.csv, the job takes 15 seconds.  If scope=\"step\" is added to playerFileItemReader, the job takes 26 seconds.\n\n\n---\n\n**Affects:** 2.0.0.RC2\n\n**Reference URL:** http://forum.springframework.org/showthread.php?t=69717\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/c4e02c9a4ef020d82ec6c8247234f67f820096de, https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb\n", "url": "https://github.com/spring-projects/spring-batch/issues/2393", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-03-30 08:25:02", "closed": "2009-04-06 01:37:17", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "JdbcCursorItemReader not failing job on exception [BATCH-1186]", "body": "**[Jaen Swart](https://jira.spring.io/secure/ViewProfile.jspa?name=jaenswart)** opened **[BATCH-1186](https://jira.spring.io/browse/BATCH-1186?redirect=false)** and commented\n\nWhen JdbcCursorItemReader encounters an exception like it can't connect (Connection Exception) to db or the query has got some error (Bad Sql Grammar Exception), it throws an exception on the console, the job does not fail, and it end swith Job status COMPLETED.\n\n\n---\n\n**Affects:** 2.0.0.RC2\n\n**Reference URL:** http://forum.springframework.org/showthread.php?t=69669\n", "url": "https://github.com/spring-projects/spring-batch/issues/2392", "user": "spring-issuemaster", "labels": ["status: invalid", "type: bug"], "created": "2009-03-30 18:13:12", "closed": "2009-04-04 02:51:56", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "Build fails for bundlor SNAPSHOT used for Batch since it conflicts with more recent one [BATCH-1188]", "body": "**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[BATCH-1188](https://jira.spring.io/browse/BATCH-1188?redirect=false)** and commented\n\nBuild fails for bundlor SNAPSHOT used for Batch. This only happens when I have previously run a build for another project using a more recent snapshot version. Clearing bundlor from local Maven repository cache fixes the issue temporarliy until the other build is run again.\n\nSpring Batch uses:\ncom.springsource.bundlor-1.0.0.BUILD-20090218.010130-17\n\nCurrent snapshot:\ncom.springsource.bundlor-1.0.0.BUILD-20090401.001051-12\n\nThere is a com.springsource.bundlor-1.0.0.BUILD-SNAPSHOT.jar that gets overwritten by the more recent version and this conflicts with the Spring Batch build.\n\nHere is the error:\n\n[INFO] [jar:jar]\n[INFO] Building jar: /Users/trisberg/Projects/springsource/spring-batch/trunk/spring-batch-infrastructure/target/org.springframework.batch.infrastructure-2.0.0.CI-SNAPSHOT.jar\n[INFO] [com.springsource.bundlor.:transform {execution: bundlor-transform}]\n[INFO] Added manifest to /Users/trisberg/Projects/springsource/spring-batch/trunk/spring-batch-infrastructure/target/org.springframework.batch.infrastructure-2.0.0.CI-SNAPSHOT.jar\n[WARNING] Bundlor Warnings:\n[WARNING]     \\<SB0001W>: The import of package javax.jms does not specify a version.\n[WARNING]     \\<SB0001W>: The import of package javax.persistence does not specify a version.\n[WARNING]     \\<SB0001W>: The import of package javax.sql does not specify a version.\n[WARNING]     \\<SB0001W>: The import of package javax.xml.namespace does not specify a version.\n[WARNING]     \\<SB0001W>: The import of package javax.xml.stream does not specify a version.\n[WARNING]     \\<SB0001W>: The import of package javax.xml.stream.events does not specify a version.\n[WARNING]     \\<SB0001W>: The import of package javax.xml.transform does not specify a version.\n[INFO] ------------------------------------------------------------------------\n[ERROR] BUILD ERROR\n[INFO] ------------------------------------------------------------------------\n[INFO] Bundle transformer returned warnings.  Please fix manifest template at '/Users/trisberg/Projects/springsource/spring-batch/trunk/spring-batch-infrastructure/template.mf' and try again.\n[INFO] ------------------------------------------------------------------------\n[INFO] For more information, run Maven with the -e switch\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 11 seconds\n[INFO] Finished at: Wed Apr 01 11:29:15 EDT 2009\n[INFO] Final Memory: 18M/36M\n[INFO] --------------------------------------------------------------------\n\n\n---\n\n**Affects:** 2.0.0.RC2\n", "url": "https://github.com/spring-projects/spring-batch/issues/2391", "user": "spring-issuemaster", "labels": ["in: build", "type: bug"], "created": "2009-04-01 02:34:37", "closed": "2009-04-05 19:55:08", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "ExecutionContext not re-hydrated by JdbcJobExecutionDao [BATCH-1196]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1196](https://jira.spring.io/browse/BATCH-1196?redirect=false)** and commented\n\nExecutionContext not re-hydrated by JdbcJobExecutionDao\n\n\n---\n\n**Affects:** 2.0.0.RC2\n", "url": "https://github.com/spring-projects/spring-batch/issues/2384", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-04-06 08:01:05", "closed": "2009-04-07 02:12:36", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Rerunning a job sometimes creates new job instance [BATCH-1197]", "body": "**[Pavel Zupa](https://jira.spring.io/secure/ViewProfile.jspa?name=pavel.zupa)** opened **[BATCH-1197](https://jira.spring.io/browse/BATCH-1197?redirect=false)** and commented\n\nAn attempt to rerun stopped job using following code sometimes leads to creation of new JobInstance with same JOB_KEY but with entries in different order.\n\nList\\<JobInstance> jobInstances = jobExplorer.getJobInstances(jobName, 0, 1);\nif (!jobInstances.isEmpty()) {\njobLauncher.run(job, jobInstances.get(0).getJobParameters());\n}\n\nI tried to debug it and I think the problem may be in JdbcJobInstanceDao.FIND_PARAMS_FROM_ID used in getJobParameters(). This query relies on the fact that job parameters are retrieved from database in same order as they have been inserted - which does not have to be true. Maybe ordering by job parameter name would help. Maybe it would be best to add this behavior to the JobParameters instead of relying on LinkedHashMap and insert order.\n\n\n---\n\n**Affects:** 2.0.0.RC3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/f12edbb5461928e36dfaa66b0c0df10710772873\n", "url": "https://github.com/spring-projects/spring-batch/issues/2383", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-04-06 19:36:08", "closed": "2009-04-06 20:06:23", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "processSkipCount and filterCount mixed up [BATCH-1198]", "body": "**[Pavel Zupa](https://jira.spring.io/secure/ViewProfile.jspa?name=pavel.zupa)** opened **[BATCH-1198](https://jira.spring.io/browse/BATCH-1198?redirect=false)** and commented\n\nThere is another issue around process phase. Skips are sometimes counted as filtered items. And there is also pretty strange filter count behaviour: i've got a file with 10 items. All get processed,  everything is ok. If I fiddle with one of the records so that processor throws exception. I get 9 written, 1 skipped and 1 filtered. When there are two invalid items, i get 8 written, 2 skipped and 1 filtered too... sometimes filter counter shows more filtered items ... by counter i mean the one in StepExecution instance that is passed to afterStep() method. I believe my skippable/fatal/retriable exceptions are configured correctly (see [BATCH-1159](https://jira.spring.io/browse/BATCH-1159)).\n\n\n---\n\n**Affects:** 2.0.0.RC3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/f708120524fa90776c266ae1155696f86276c5c3\n", "url": "https://github.com/spring-projects/spring-batch/issues/2382", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-04-06 22:17:11", "closed": "2009-04-07 00:15:28", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Step shouldn't exit with status=EXECUTING [BATCH-1187]", "body": "**[Jaen Swart](https://jira.spring.io/secure/ViewProfile.jspa?name=jaenswart)** opened **[BATCH-1187](https://jira.spring.io/browse/BATCH-1187?redirect=false)** and commented\n\nAfter a tasklet has executed, it can return with ExitStatus=EXECUTING, this should not be possible.  See http://forum.springsource.org/showthread.php?t=69578.\n\n\n---\n\n**Affects:** 2.0.0.RC2\n\n**Reference URL:** http://forum.springframework.org/showthread.php?t=69578&highlight=Jira\n\n**Attachments:**\n- [applicationContext.xml](https://jira.spring.io/secure/attachment/15300/applicationContext.xml) (_3.10 kB_)\n- [CertCandidateItemWriter.java](https://jira.spring.io/secure/attachment/15303/CertCandidateItemWriter.java) (_2.23 kB_)\n- [CertExtractFlatFileItemWriter.java](https://jira.spring.io/secure/attachment/15304/CertExtractFlatFileItemWriter.java) (_37.63 kB_)\n- [certificationExtractJob.xml](https://jira.spring.io/secure/attachment/15299/certificationExtractJob.xml) (_163.76 kB_)\n- [FTPTask.java](https://jira.spring.io/secure/attachment/15301/FTPTask.java) (_2.69 kB_)\n- [SeqRunNumberTask.java](https://jira.spring.io/secure/attachment/15302/SeqRunNumberTask.java) (_1.22 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2380", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2009-03-30 18:21:37", "closed": "2009-04-08 22:53:00", "commits": {}, "ttf": 9.000277777777777, "commitsDetails": []}, {"title": "Listener Annotations don't allow parameters to be subtypes of expected types [BATCH-1201]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1201](https://jira.spring.io/browse/BATCH-1201?redirect=false)** and commented\n\nListener Annotations don't allow parameters to be subtypes of expected types.  For example, consider the AfterProcess method.  Its enum value in StepListenerMetaData is defined as:\n\nAFTER_PROCESS(\"afterProcess\", \"after-process-method\", AfterProcess.class, ItemProcessListener.class, Object.class, Object.class).\n\nshowing that it expects two Objects as parameters.  However, if the method is defined with subtypes of Object as its parameters, then an error is shown indicating the the signature is incompatible with what is expected:\n\n`@AfterProcess`\npublic void afterProcess(String item, String result){ }\n\n\n---\n\n**Affects:** 2.0.0.RC3\n\n**Issue Links:**\n- [BATCH-1118](https://jira.spring.io/browse/BATCH-1118) Listener annotation with wrong signature fails too late and too quietly\n\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/f306e9e83e213da7244dc6ea20cb56348f080d32\n", "url": "https://github.com/spring-projects/spring-batch/issues/2378", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-04-08 02:07:49", "closed": "2009-04-08 03:47:25", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Error in documentation section 4.2.3 - In-Memory Repository [BATCH-1192]", "body": "**[Michel Zanini](https://jira.spring.io/secure/ViewProfile.jspa?name=michelz)** opened **[BATCH-1192](https://jira.spring.io/browse/BATCH-1192?redirect=false)** and commented\n\nI don't about what was done at the issue [BATCH-778](https://jira.spring.io/browse/BATCH-778), but at the end the class MapJobRepositoryFactoryBean still needs a ResourcelessTransactionManager.\n\nBut in documentarion section section 4.2.3 appers as this:\n\n\\<bean id=\"jobRepository\" \nclass=\"org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean\" />\n\nSo my advice is to make ResourcelessTransactionManager the default implementation (better) OR make the documentation correct adding the property transactionManager.\n\nAnother good option is create something in the namespace like:\n\\<map-job-repository id=\"jobRepository\" />\n\nOR\n\n\\<job-repository id=\"jobRepository\" type=\"memory\" />\n\n\n---\n\n**Affects:** 2.0.0.RC3\n\n**Attachments:**\n- [MapJobRepositoryFactoryBean.java.patch](https://jira.spring.io/secure/attachment/15296/MapJobRepositoryFactoryBean.java.patch) (_788 bytes_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/5c4f5906b823e486e45f894b821d852e1c5ee26b\n", "url": "https://github.com/spring-projects/spring-batch/issues/2376", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2009-04-02 05:57:16", "closed": "2009-04-07 23:52:27", "commits": {}, "ttf": 5.000277777777778, "commitsDetails": []}, {"title": "Correct ChunkOrientedTasklet.setBuffering javadoc [BATCH-1203]", "body": "**[Tareq Abedrabbo](https://jira.spring.io/secure/ViewProfile.jspa?name=tareq)** opened **[BATCH-1203](https://jira.spring.io/browse/BATCH-1203?redirect=false)** and commented\n\nChunkOrientedTasklet.setBuffering:\nMain (or only) use case for setting this flag to true is a transactional JMS item reader\nIt should be:\nMain (or only) use case for setting this flag to false\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/b64b9d8b7c09efd8c8e1fc69e43dc0a98c272efc\n", "url": "https://github.com/spring-projects/spring-batch/issues/2374", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2009-04-12 21:47:51", "closed": "2009-04-12 22:39:57", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Error in FieldSetMapper documentation [BATCH-1204]", "body": "**[Tareq Abedrabbo](https://jira.spring.io/secure/ViewProfile.jspa?name=tareq)** opened **[BATCH-1204](https://jira.spring.io/browse/BATCH-1204?redirect=false)** and commented\n\nBatch reference manual, section 6.6.2.3. FieldSetMapper:\nThe FieldSetMapper interface defines a single method, mapLine\nshould be mapFieldSet.\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/84a71ff607aaa4ee0231252990a36c80bd5d6ffb\n", "url": "https://github.com/spring-projects/spring-batch/issues/2373", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2009-04-13 20:25:37", "closed": "2009-04-14 01:25:44", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "When readCount % commitInterval == 0, commitCount is one more than it should be [BATCH-1205]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1205](https://jira.spring.io/browse/BATCH-1205?redirect=false)** and commented\n\nWhen readCount % commitInterval == 0, commitCount is one more than it should be.\n\n\n---\n\n**Affects:** 2.0.0\n\n**Issue Links:**\n- [BATCH-922](https://jira.spring.io/browse/BATCH-922) Why is there always one more commit than seems necessary?\n\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/ff4bf40fe6230427c1f4943cb9dd7e2902ed2c62\n", "url": "https://github.com/spring-projects/spring-batch/issues/2372", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2009-04-14 02:54:50", "closed": "2009-04-14 03:50:34", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Sources jars missing from Maven Central format releases [BATCH-1206]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1206](https://jira.spring.io/browse/BATCH-1206?redirect=false)** and commented\n\n\n---\n\n**Affects:** 2.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2371", "user": "spring-issuemaster", "labels": ["in: build", "type: bug"], "created": "2009-04-14 04:54:59", "closed": "2009-04-14 16:59:31", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "late-binding not being resolved in <list/> [BATCH-1208]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1208](https://jira.spring.io/browse/BATCH-1208?redirect=false)** and commented\n\nWhen late-binding is used within a \\<list/>, the expressions are not being resolved.\n\n<beans:bean class=\"org.springframework.batch.core.resource.ListPreparedStatementSetter\" scope=\"step\">\n<beans:property name=\"parameters\">\n<beans:list>\n<beans:value>\"#{jobParameters[id1]}\"</beans:value>\n<beans:value>\"#{jobParameters[id2]}\"</beans:value>\n. . .\n\n\n---\n\n**Affects:** 2.0.0\n\n**Issue Links:**\n- [BATCH-1207](https://jira.spring.io/browse/BATCH-1207) Modify ListPreparedStatementSetter so that setter accepts array\n (_**\"supersedes\"**_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/51c7a96369d21b889c839db6424eb2c56f07996a, https://github.com/spring-projects/spring-batch/commit/0bcc36927b10ae278dc38969bc49f87faf7758dd\n", "url": "https://github.com/spring-projects/spring-batch/issues/2369", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-04-15 04:59:21", "closed": "2009-05-06 02:25:47", "commits": {}, "ttf": 20.00027777777778, "commitsDetails": []}, {"title": "AbstractStep overwrites custom exit status for STOPPED steps [BATCH-1210]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1210](https://jira.spring.io/browse/BATCH-1210?redirect=false)** and commented\n\nAbstractStep overwrites custom exit status for STOPPED steps.  It should and() the result with the default value (like it does for FAILED).\n\n\n---\n\n**Affects:** 2.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/4de51829bbf3ad8da048e594bb15eb75ee5f55b0, https://github.com/spring-projects/spring-batch/commit/d41bdbee62f3cfc0009e905f852114d4707779ae, https://github.com/spring-projects/spring-batch/commit/50cda6b170832517abceb9a82783ca8d9f3f18ef\n", "url": "https://github.com/spring-projects/spring-batch/issues/2367", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-04-15 22:05:35", "closed": "2009-04-16 01:09:47", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Incorrect link in Documentation [BATCH-1212]", "body": "**[Mohammed Saleem Padinharkkara](https://jira.spring.io/secure/ViewProfile.jspa?name=zalym)** opened **[BATCH-1212](https://jira.spring.io/browse/BATCH-1212?redirect=false)** and commented\n\nOn page 64, link to Spring Integration points to Chapter 4 of the Spring Framework\n\n\n---\n\n**Affects:** 2.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/ffd21951c447f63ffcbb061997d8342a773a4b3a\n", "url": "https://github.com/spring-projects/spring-batch/issues/2365", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2009-04-20 05:30:03", "closed": "2009-04-20 17:54:12", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Defaults in xsd override parent attributes [BATCH-1213]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1213](https://jira.spring.io/browse/BATCH-1213?redirect=false)** and commented\n\nSome attributes in the xsd have defaults.  For example: transactionManager and jobRepository.  However, if a non-default value is set on a parent step, but not re-set on an extending bean, then attribute on the extending bean will be overridden by the default.\n\nTherefore, for elements that allow \"parents\", defaults should be removed from the xsd and the parser.  The defaulting should happen in the FactoryBean, because it is at this time that the framework can see if the value was ever set.\n\n\n---\n\n**Affects:** 2.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2364", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-04-20 12:49:05", "closed": "2009-05-21 17:40:18", "commits": {}, "ttf": 31.00027777777778, "commitsDetails": []}, {"title": "CoreNamespaceUtils.addRangePropertyEditor fails with Spring 3.0 [BATCH-1214]", "body": "**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[BATCH-1214](https://jira.spring.io/browse/BATCH-1214?redirect=false)** and commented\n\nI'm trying to use Spring Batch 2.0 with a recent Spring 3.0 build and I see the following exception when using the namespace support (only root cause shown):\nCaused by: java.lang.IllegalArgumentException: Cannot convert value of type [java.lang.Class] to required type [java.lang.String] for property 'customEditors[org.springframework.batch.item.file.transform.Range[]]': no matching editors or conversion strategy found\nat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:226)\nat org.springframework.beans.TypeConverterDelegate.convertToTypedMap(TypeConverterDelegate.java:497)\nat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:188)\nat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:132)\nat org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:378)\n... 35 more\n\nThis is caused by CoreNamespaceUtils.addRangePropertyEditor: it registers RangeArrayPropertyEditor.class as the value for an entry in the map passed to the customEditors property of CustomEditorConfigurer. This functionality was deprecated in Spring 2.5 and is currently not supported anymore: this should be a class **name**, not a Class. In this case, that's enough; we don't need a custom PropertyEditorRegistrar. Please fix this.\n\nThe current workaround is to register the editor yourself, like this:\n\n\\<bean class=\"org.springframework.beans.factory.config.CustomEditorConfigurer\">\n\t\\<property name=\"customEditors\">\n\t\t\\<map>\n\t\t\t\\<entry key=\"org.springframework.batch.item.file.transform.Range[]\" \n\t\t\t\t    value=\"org.springframework.batch.item.file.transform.RangeArrayPropertyEditor\"/>\n\t\t\\</map>\n\t\\</property>\n\\</bean>\n\n\n---\n\n**Affects:** 2.0.0\n\n**Issue Links:**\n- [BATCH-1172](https://jira.spring.io/browse/BATCH-1172) Register RangeArrayPropertyEditor automatically\n (_**\"duplicates\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2363", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-04-22 02:58:23", "closed": "2009-05-03 22:57:07", "commits": {}, "ttf": 11.000277777777777, "commitsDetails": []}, {"title": "item streams won't get registered if ItemStream reader is used with step [BATCH-1218]", "body": "**[Pavel Zupa](https://jira.spring.io/secure/ViewProfile.jspa?name=pavel.zupa)** opened **[BATCH-1218](https://jira.spring.io/browse/BATCH-1218?redirect=false)** and commented\n\nI tried to use following configuration for a step:\n\n    <bean id=\"myStep\" parent=\"skipLimitStep\">\n         <property name=\"itemReader\" ref=\"mergingReader\" />\n         ...\n         <property name=\"streams\">\n                  <list>\n                           <ref bean=\"file321Reader\"/>\n                           <ref bean=\"file324Reader\"/>\n                           <ref bean=\"mergingReader\" />\n                  </list>\n         </property>\n\nmergingReader merges data from two FlatFileItemReader delegates. This reader needs to be stateful - have to implement ItemStream to allow restart. When the step is started (FaultTolerantStepFactoryBean) it correctly registers those readers but after that it automatically registers mergingReader (as it is reader which implements ItemStream) and replaces the stream definition so that only mergingReader's open() is called.\nI believe the problem is in FaultTolerantStepFactoryBean.registerStreams() method.\nMaybe something like this would help (ChunkMonitor.getItemStream() would have to be implemented):\n\nif (chunkMonitor.getItemStream() != null) {\ncomposite.register(chunkMonitor.getItemStream());\n}\nchunkMonitor.setItemStream(composite);\n\n... grr, now i see, this would call the auto-registered reader's open() method twice, huh, at least I tried :-)\n\n\n\n---\n\n**Affects:** 2.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/b569b8419f09544fc0855e272adee8aca5eb9725, https://github.com/spring-projects/spring-batch/commit/1d1d0b85ca494a163a726423d567e97a325869a9\n", "url": "https://github.com/spring-projects/spring-batch/issues/2361", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-04-26 18:29:23", "closed": "2009-06-18 17:24:43", "commits": {}, "ttf": 52.000277777777775, "commitsDetails": []}, {"title": "Docs refer to non-existent class SimpleDelegatingPagingQueryProvider [BATCH-1215]", "body": "**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[BATCH-1215](https://jira.spring.io/browse/BATCH-1215?redirect=false)** and commented\n\nSection \"6.9.2.1. JdbcPagingItemReader\" of the reference manual refers to a class called \"org.springframework.batch.item.database.support.SimpleDelegatingPagingQueryProvider\". This class doesn't exist: it looks like SqlPagingQueryProviderFactoryBean is meant instead (probably renamed before 2.0.0.RELEASE).\n\n\n---\n\n**Affects:** 2.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/8dc6bc10913c505f799c69ffce8cb9faa375e78f\n", "url": "https://github.com/spring-projects/spring-batch/issues/2359", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2009-04-22 07:43:37", "closed": "2009-04-29 01:37:47", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "Look into namespace problems using \"java -jar\" [BATCH-1222]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1222](https://jira.spring.io/browse/BATCH-1222?redirect=false)** and commented\n\nSee here: http://forum.springsource.org/showthread.php?t=71014 and here: http://forum.springsource.org/showthread.php?t=57820\n\n\n---\n\n**Affects:** 2.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2355", "user": "spring-issuemaster", "labels": ["in: build", "status: invalid", "type: bug"], "created": "2009-04-29 18:16:23", "closed": "2009-04-29 22:24:11", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Maven Build - ClassNotFoundException: com.springsource.util.osgi.manifest.ManifestFactory [BATCH-1223]", "body": "**[Sergey Shcherbakov](https://jira.spring.io/secure/ViewProfile.jspa?name=sshcherbakov)** opened **[BATCH-1223](https://jira.spring.io/browse/BATCH-1223?redirect=false)** and commented\n\nwith a fresh checkout some minutes ago, i get a maven build error, when building the spring batch (parent) or infrastructure alone\n\nBuilding jar: C:\\netbeans_projects\\spring-batch\\spring-batch-infrastructure\\target\\org.springframework.batch.infrastructure-2.0.0.CI-SNAPSHOT.jar\n[WARNING] Attempting to build MavenProject instance for Artifact (com.springsource.bundlor:com.springsource.bundlor.maven:1.0.0.BUILD-20090201.212350-20) of type: maven-plugin; constructing POM artifact instead.\n[com.springsource.bundlor.:transform {execution: bundlor-transform}]\n[FATAL ERROR] com.springsource.bundlor.maven.plugin.TransformBundlorMojo#execute() caused a linkage error (java.lang.NoClassDefFoundError) and may be out-of-date. Check the realms:\n[FATAL ERROR] Plugin realm = app0.child-container[com.springsource.bundlor:com.springsource.bundlor.maven]\nurls[0] = file:/C:/netbeans_maven_repo/com/springsource/bundlor/com.springsource.bundlor.maven/1.0.0.BUILD-SNAPSHOT/com.springsource.bundlor.maven-1.0.0.BUILD-SNAPSHOT.jar\nurls[1] = file:/C:/netbeans_maven_repo/org/springframework/org.springframework.core/2.5.6.A/org.springframework.core-2.5.6.A.jar\nurls[2] = file:/C:/netbeans_maven_repo/org/apache/commons/com.springsource.org.apache.commons.logging/1.1.1/com.springsource.org.apache.commons.logging-1.1.1.jar\nurls[3] = file:/C:/netbeans_maven_repo/com/springsource/bundlor/com.springsource.bundlor/1.0.0.BUILD-SNAPSHOT/com.springsource.bundlor-1.0.0.BUILD-SNAPSHOT.jar\nurls[4] = file:/C:/netbeans_maven_repo/com/springsource/util/com.springsource.util.osgi/1.5.0.BUILD-SNAPSHOT/com.springsource.util.osgi-1.5.0.BUILD-SNAPSHOT.jar\nurls[5] = file:/C:/netbeans_maven_repo/org/antlr/com.springsource.org.antlr/3.0.1/com.springsource.org.antlr-3.0.1.jar\nurls[6] = file:/C:/netbeans_maven_repo/org/eclipse/osgi/org.eclipse.osgi/3.4.0.v20080605-1900/org.eclipse.osgi-3.4.0.v20080605-1900.jar\nurls[7] = file:/C:/netbeans_maven_repo/com/springsource/util/com.springsource.util.common/1.5.0.BUILD-SNAPSHOT/com.springsource.util.common-1.5.0.BUILD-SNAPSHOT.jar\nurls[8] = file:/C:/netbeans_maven_repo/com/springsource/util/com.springsource.util.io/1.5.0.BUILD-SNAPSHOT/com.springsource.util.io-1.5.0.BUILD-SNAPSHOT.jar\nurls[9] = file:/C:/netbeans_maven_repo/org/objectweb/asm/com.springsource.org.objectweb.asm/3.1.0/com.springsource.org.objectweb.asm-3.1.0.jar\nurls[10] = file:/C:/netbeans_maven_repo/org/objectweb/asm/com.springsource.org.objectweb.asm.tree/3.1.0/com.springsource.org.objectweb.asm.tree-3.1.0.jar\nurls[11] = file:/C:/netbeans_maven_repo/org/objectweb/asm/com.springsource.org.objectweb.asm.commons/3.1.0/com.springsource.org.objectweb.asm.commons-3.1.0.jar\nurls[12] = file:/C:/netbeans_maven_repo/org/apache/commons/com.springsource.org.apache.commons.cli/1.1.0/com.springsource.org.apache.commons.cli-1.1.0.jar\nurls[13] = file:/C:/netbeans_maven_repo/org/slf4j/com.springsource.slf4j.nop/1.5.0/com.springsource.slf4j.nop-1.5.0.jar\nurls[14] = file:/C:/netbeans_maven_repo/org/slf4j/com.springsource.slf4j.api/1.5.0/com.springsource.slf4j.api-1.5.0.jar\nurls[15] = file:/C:/netbeans_maven_repo/org/springframework/ws/org.springframework.xml/1.5.2.A/org.springframework.xml-1.5.2.A.jar\nurls[16] = file:/C:/netbeans_maven_repo/org/apache/ws/com.springsource.org.apache.ws.commons.schema/1.3.2/com.springsource.org.apache.ws.commons.schema-1.3.2.jar\nurls[17] = file:/C:/netbeans_maven_repo/org/springframework/org.springframework.beans/2.5.6.A/org.springframework.beans-2.5.6.A.jar\nurls[18] = file:/C:/netbeans_maven_repo/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar\n[FATAL ERROR] Container realm = plexus.core\nurls[0] = file:/C:/Programme/maven/apache-maven-2.0.9/lib/maven-2.0.9-uber.jar\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n[ERROR]FATAL ERROR\n------------------\n\ncom/springsource/util/math/Sets\ncom.springsource.util.math.Sets\n---------------------------------------------------------------\n\nTrace\njava.lang.NoClassDefFoundError: com/springsource/util/math/Sets\nat com.springsource.bundlor.support.HibernateMappingParser.\\<clinit>(HibernateMappingParser.java:107)\nat com.springsource.bundlor.support.StandardBundleTransformer.\\<init>(StandardBundleTransformer.java:92)\nat com.springsource.bundlor.maven.plugin.AbstractBundlorMojo.execute(AbstractBundlorMojo.java:192)\nat org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:451)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:558)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:499)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:478)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:330)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:291)\nat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:142)\nat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:336)\nat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)\nat org.apache.maven.cli.MavenCli.main(MavenCli.java:287)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:597)\nat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\nat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\nat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\nat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: java.lang.ClassNotFoundException: com.springsource.util.math.Sets\nat java.net.URLClassLoader$1.run(URLClassLoader.java:200)\nat java.security.AccessController.doPrivileged(Native Method)\nat java.net.URLClassLoader.findClass(URLClassLoader.java:188)\nat java.lang.ClassLoader.loadClass(ClassLoader.java:306)\nat org.codehaus.classworlds.RealmClassLoader.loadClassDirect(RealmClassLoader.java:195)\nat org.codehaus.classworlds.DefaultClassRealm.loadClass(DefaultClassRealm.java:255)\nat org.codehaus.classworlds.DefaultClassRealm.loadClass(DefaultClassRealm.java:274)\nat org.codehaus.classworlds.RealmClassLoader.loadClass(RealmClassLoader.java:214)\nat java.lang.ClassLoader.loadClass(ClassLoader.java:251)\nat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n... 21 more\n\n\n---\n\n**Affects:** 2.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2354", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: invalid", "type: bug"], "created": "2009-04-29 21:07:17", "closed": "2009-05-04 22:39:26", "commits": {}, "ttf": 5.000277777777778, "commitsDetails": []}, {"title": "FlatFileItemWriter and StaxEventItemWriter do not restart in the right place [BATCH-1225]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1225](https://jira.spring.io/browse/BATCH-1225?redirect=false)** and commented\n\nWhen writing to an output file using a FlatFileItemWriter, the position in the output file is stored in the executioncontext. This is done in the update() method in FlatFileItemWriter. The position is determined by calling the underlying fileChannel's position() method.\n\nHowever, the transaction in which it runs is not yet committed. Therefore, the actual write-to-disk has not been done and the fileChannels position will still be the position after the previous chunk.  On a restart of the job, the output file is opened at the beginning of the last chunk, which then gets overwritten.\n\nPut in other words, the stored position in the output file seems to be running one chunk behind.\n\n\n---\n\n**Affects:** 2.0.0\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=71239\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/2a3dd2aca79ceac3c2e1b9a3c73db3d178d85a3d, https://github.com/spring-projects/spring-batch/commit/d035f14f3ae75459a67725834a27c426c7ef43b1, https://github.com/spring-projects/spring-batch/commit/1980412e85f88874212c57b1ef482af7038ec447\n\n1 votes, 1 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/2352", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2009-05-01 04:33:29", "closed": "2009-05-21 18:36:55", "commits": {}, "ttf": 20.00027777777778, "commitsDetails": []}, {"title": "\"Superclass has no null constructors but no arguments were given\" when using lateBinding FileSystemResource with scope step [BATCH-1231]", "body": "**[Markus Thielen](https://jira.spring.io/secure/ViewProfile.jspa?name=mthielen)** opened **[BATCH-1231](https://jira.spring.io/browse/BATCH-1231?redirect=false)** and commented\n\nThis is a bug i found after the changes in [BATCH-1228](https://jira.spring.io/browse/BATCH-1228) were made. Described here:\nhttp://jira.springframework.org/browse/BATCH-1228?focusedCommentId=43927&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_43927\n\nWhen proxyTargetClass in StepScope is true, this bean creates an Exception:\n\\<bean id=\"ItemReader\" class=\"org.springframework.batch.item.file.FlatFileItemReader\" scope=\"step\">\n\\<property name=\"resource\">\n\\<bean class=\"org.springframework.core.io.FileSystemResource\">\n\\<constructor-arg index=\"0\" value=\"#{stepExecutionContext[foo]}\" />\n\\</bean>\n\\</property>\n\\</bean>\n\nExceptionmessage is:\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.core.io.FileSystemResource#25deba0e' defined in BeanDefinition defined in class path resource [StepScopeProxyTargetClassIntegrationTests-context.xml]: Initialization of bean failed; nested exception is org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class [class org.springframework.core.io.FileSystemResource]: Common causes of this problem include using a final class or a non-visible class; nested exception is java.lang.IllegalArgumentException: Superclass has no null constructors but no arguments were given\n\nThe changed test-context for Test \"StepScopeProxyTargetClassIntegrationTests\" is attached.\n\n\n---\n\n**Affects:** 2.0.1\n\n**Attachments:**\n- [StepScopeProxyTargetClassIntegrationTests-context.xml](https://jira.spring.io/secure/attachment/15363/StepScopeProxyTargetClassIntegrationTests-context.xml) (_1.25 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2347", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2009-05-03 22:16:18", "closed": "2009-05-03 22:43:45", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Sybase 12.5 compatiblity when writing to the spring batch context tables [BATCH-1232]", "body": "**[Marwan Simaan](https://jira.spring.io/secure/ViewProfile.jspa?name=msimaan)** opened **[BATCH-1232](https://jira.spring.io/browse/BATCH-1232?redirect=false)** and commented\n\nIn version 2.0.0, I am facing an error when persisting to the context tables (BATCH_JOB_EXECUTION_CONTEXT in specific) on the sybase version 12.5. The class JdbcExecutionContextDao shows that when the field SERIALIZED_CONTEXT is set to null, it is set with type 2005 (Types.CLOB). This type is not supported on sybase 12.5\n\n\n---\n\n**Affects:** 2.0.0\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=70701\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/7b14a66a6e0ebdf7c377d6ed422170af8c7449b2, https://github.com/spring-projects/spring-batch/commit/e80e30622d92f365108edd767352b36d2dcef598\n", "url": "https://github.com/spring-projects/spring-batch/issues/2346", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-05-04 02:12:51", "closed": "2009-06-16 07:35:08", "commits": {}, "ttf": 43.000277777777775, "commitsDetails": []}, {"title": "ExitStatus.FINISHED should be ExitStatus.COMPLETED [BATCH-1234]", "body": "**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[BATCH-1234](https://jira.spring.io/browse/BATCH-1234?redirect=false)** and commented\n\nThere are some places in the documentation, like section 4.3, that show the old ExitStatus.FINISHED. This should be replaced with COMPLETED instead.\n\n\n---\n\n**Affects:** 2.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/f39deb298bda2a95324549267b2affd5b8db1f9d\n", "url": "https://github.com/spring-projects/spring-batch/issues/2344", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2009-05-04 20:01:12", "closed": "2009-05-04 22:31:46", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Fix namespace errors in Readers and Writers chapter [BATCH-1236]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1236](https://jira.spring.io/browse/BATCH-1236?redirect=false)** and commented\n\nThe Readers and Writers chapter contains examples where \"reader\", \"writer\" etc are on \\<tasklet/> instead of \\<chunk/>\n\n\n---\n\n**Affects:** 2.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/11deb78a44a540722a2f6cbbd005c5ef0abf859b\n", "url": "https://github.com/spring-projects/spring-batch/issues/2342", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2009-05-05 06:44:44", "closed": "2009-05-05 06:47:51", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "ItemStream is not registered when defined in step scope [BATCH-1240]", "body": "**[Roman Urosov](https://jira.spring.io/secure/ViewProfile.jspa?name=romikk)** opened **[BATCH-1240](https://jira.spring.io/browse/BATCH-1240?redirect=false)** and commented\n\nconfiguration:\n\n    <job id=\"myjob\">\n    \t<step id=\"importFile\" next=\"createWorkDrivers\">\n    \t\t<tasklet>\n    \t\t\t<chunk reader=\"fileReader\" \n    \t\t\t\t\twriter=\"hibernateWriter\"\n    \t\t\t\t\ttask-executor=\"taskExecutor\" \n    \t\t\t\t\tcommit-interval=\"10\">\n    \t\t\t\t<streams>\n    \t\t\t\t\t<stream ref=\"fileReader\" />\n    \t\t\t\t</streams>\n    \t\t\t</chunk>\n    \t\t</tasklet>\n    \t</step>\n    </job>\n    \n    <beans:bean id=\"fileReader\" scope=\"step\"\n    \t\t\tclass=\"org.springframework.batch.item.file.FlatFileItemReader\">\n        <beans:property name=\"resource\" value=\"#{jobParameters[file]}\" />\n    \t<beans:property name=\"lineMapper\">\n    \t\t<beans:bean class=\"my.super.Mapper\" />\n    \t</beans:property>\n    </beans:bean>\n\nexception:\n\norg.springframework.batch.item.ReaderNotOpenException: Reader must be open before it can be read.\nat org.springframework.batch.item.file.FlatFileItemReader.readLine(FlatFileItemReader.java:195)\nat org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:166)\nat org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:84)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\nat java.lang.reflect.Method.invoke(Unknown Source)\nat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:307)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:182)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:149)\nat org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:131)\nat org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:119)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)\nat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204)\nat $Proxy1.read(Unknown Source)\nat org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:90)\nat org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:127)\nat org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:106)\nat org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:352)\nat org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:212)\nat org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:143)\nat org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:103)\nat org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:64)\nat org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:264)\nat org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:67)\nat org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:230)\nat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\n\n\n\n---\n\n**Affects:** 2.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d6c6d1ba054a70faa6bb426c9651df2985458a89\n", "url": "https://github.com/spring-projects/spring-batch/issues/2339", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2009-05-12 20:50:40", "closed": "2009-05-22 20:12:57", "commits": {}, "ttf": 9.000277777777777, "commitsDetails": []}, {"title": "SystemCommandTasklet package name is not accurate [BATCH-1241]", "body": "**[Jus Yes](https://jira.spring.io/secure/ViewProfile.jspa?name=jusyes)** opened **[BATCH-1241](https://jira.spring.io/browse/BATCH-1241?redirect=false)** and commented\n\nSpring batch Docs has reference to \\<bean class=\"org.springframework.batch.sample.tasklet.SystemCommandTasklet\"> in Section 11.6 but the actual class is in org.springframework.batch.core.step.tasklet.SystemCommandTasklet\n\n\n---\n\n**Affects:** 2.0.0\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=71903\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/9c8549fbfe2d7662c77b079652bcb66e55cdb6c9\n", "url": "https://github.com/spring-projects/spring-batch/issues/2338", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2009-05-14 06:08:19", "closed": "2009-05-15 07:51:25", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Documentation error for skip-limit [BATCH-1244]", "body": "**[Jus Yes](https://jira.spring.io/secure/ViewProfile.jspa?name=jusyes)** opened **[BATCH-1244](https://jira.spring.io/browse/BATCH-1244?redirect=false)** and commented\n\nThe spring batch documentation in section 5.1.6 has snippet below saying skip-limit is set at tasklet level, the code is at chunk level.....\n\n\\<step id=\"step1\">\n\\<tasklet skip-limit=\"10\">\n\\<chunk reader=\"flatFileItemReader\" writer=\"itemWriter\" commit-interval=\"10\">\n\\<skippable-exception-classes>\norg.springframework.batch.item.file.FlatFileParseException\n\\</skippable-exception-classes>\n\\</chunk>\n\\</tasklet>\n\\</step>\n\n\n---\n\n**Affects:** 2.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d7d3be422347508bc979fdb933f7bb6a7a4407ce\n", "url": "https://github.com/spring-projects/spring-batch/issues/2335", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2009-05-15 05:40:50", "closed": "2009-05-17 03:31:41", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "StaxEventItemWriter writes extra end document tag with Woodstox 3.2.9 plus [BATCH-1245]", "body": "**[Ian Brandt](https://jira.spring.io/secure/ViewProfile.jspa?name=ibrandt)** opened **[BATCH-1245](https://jira.spring.io/browse/BATCH-1245?redirect=false)** and commented\n\nThis is a continuation of [BATCH-761](https://jira.spring.io/browse/BATCH-761), which is closed and won't accept new attachments.  Feel free to close this as won't fix, but now that Woodstox allows disabling of \"auto-closing of unmatched start elements\" in versions >= 3.2.9 the attached patch against 1.1.4.RELEASE is my preferred solution to [BATCH-761](https://jira.spring.io/browse/BATCH-761).  With this patch there is no burden on the Spring Batch user that chooses Woodstox >= 3.2.9 as their StAX implementation to override Spring Batch API, or even be aware that this issue ever existed.\n\nAgain apologies for the lack of a test case, but my plan is to flesh that out by taking a stab at [BATCH-981](https://jira.spring.io/browse/BATCH-981) when we get a chance to migrate to 2.0.  For what it's worth we have an internal integration test case to trap this issue, and it passes with Woodstox 4.0.4 and this patch.\n\n\n---\n\n**Affects:** 1.1.4, 2.0.0\n\n**Attachments:**\n- [StaxEventItemWriter-1.1.4.RELEASE.Woodstox-3.2.9plus.patch](https://jira.spring.io/secure/attachment/15402/StaxEventItemWriter-1.1.4.RELEASE.Woodstox-3.2.9plus.patch) (_1.47 kB_)\n\n**Issue Links:**\n- [BATCH-981](https://jira.spring.io/browse/BATCH-981) Use Woodstox instead of ref impl of StaX\n\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/a5aa6212506bfe050da8bea38e95f880b2fed8b7\n", "url": "https://github.com/spring-projects/spring-batch/issues/2334", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2009-05-19 08:08:06", "closed": "2009-05-25 02:12:33", "commits": {}, "ttf": 5.000277777777778, "commitsDetails": []}, {"title": "Mysql driver incompatibility with HibernateCursorItemReader [BATCH-1252]", "body": "**[Mark Middleton](https://jira.spring.io/secure/ViewProfile.jspa?name=markymiddleton)** opened **[BATCH-1252](https://jira.spring.io/browse/BATCH-1252?redirect=false)** and commented\n\nHibernateCursorItemReader runs out of PermGen space when using the mysql driver with a large result set.  The mysql documentation says that when using large ResultSets, the driver can be told to stream results one at a time by setting the fetch size to Integer.MIN_VALUE   (this is a -ve number):\n\nstmt.setFetchSize(Integer.MIN_VALUE);\n\nSee: http://dev.mysql.com/doc/refman/5.0/en/connector-j-reference-implementation-notes.html\n\nThe HibernateCusrorItemReader.afterPropertiesSet() checks to see that the fetchSize is >=0 :\nAssert.isTrue(fetchSize >= 0, \"fetchSize must not be negative\");\n\nSuggest removing the above Assertion to allow HibernateCursorItemReader to work with a -ve fetchSize\n\n\n---\n\n**Affects:** 2.1.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2329", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: declined", "type: bug"], "created": "2009-05-27 00:28:52", "closed": "2013-02-21 06:11:02", "commits": {}, "ttf": 1366.0002777777777, "commitsDetails": []}, {"title": "Proxy with no target cannot be analysed for listener interfaces [BATCH-1255]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1255](https://jira.spring.io/browse/BATCH-1255?redirect=false)** and commented\n\nProxy with no target cannot be analysed for listener interfaces.  Various NullPointerExceptions ensue in STepListenerFactoryBean and MethodInvokerUtils.\n\n\n---\n\n**Affects:** 2.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/db1f7fc35b889a84b8f33cc053b623b1be8d224f\n", "url": "https://github.com/spring-projects/spring-batch/issues/2326", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-05-29 02:08:37", "closed": "2009-05-30 04:28:15", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Processor is called (and committed) many times for the same items if Writer skips [BATCH-1256]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1256](https://jira.spring.io/browse/BATCH-1256?redirect=false)** and commented\n\nProcessor is called (and committed) many times for the same items if Writer skips.\n\nAssume the commit interval is 5 and the Reader reads items [1,2,3,4,5].\n\nIf the Writer fails on \"4\", the following represents the items that are passed into the Processor:\n[1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5, 4, 5, 5]\n\nAnd the following are the processed items that are committed:\n[1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5, 5]\n\nThe Processor should not be receiving the same items over and over.  Furthermore, not processed item should be committed more than once.\n\n\n\n---\n\n**Affects:** 2.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/685dd789de6febd57ef40edb389c29ac30b00cbe, https://github.com/spring-projects/spring-batch/commit/001893bb8c4158c4fa637dd2154c64caccce0f6a\n", "url": "https://github.com/spring-projects/spring-batch/issues/2325", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-05-29 07:00:33", "closed": "2011-12-07 00:39:35", "commits": {}, "ttf": 921.0002777777778, "commitsDetails": []}, {"title": "scope \"step\" does not work together with Annotation \"@BeforeStep\" [BATCH-1230]", "body": "**[J\u00f6rg Gottschling](https://jira.spring.io/secure/ViewProfile.jspa?name=jgottschling)** opened **[BATCH-1230](https://jira.spring.io/browse/BATCH-1230?redirect=false)** and commented\n\nWorks both for me, but not together:\n\nEncountered an error executing the step: class java.lang.IllegalArgumentException: Unable to invoke method: [public void XXXReader.beforeStep(org.springframework.batch.core.StepExecution)] on object: [XXXReader@8b567c] with arguments: [[StepExecution: id=0, name=writeDatasheetXml, status=STARTED, exitStatus=EXECUTING, readCount=0, filterCount=0, writeCount=0 readSkipCount=0, writeSkipCount=0, commitCount=0, rollbackCount=0, exitDescription=]]\njava.lang.IllegalArgumentException: Unable to invoke method: [public void XXXReader.beforeStep(org.springframework.batch.core.StepExecution)] on object: [XXXReader@8b567c] with arguments: [[StepExecution: id=0, name=XXX, status=STARTED, exitStatus=EXECUTING, readCount=0, filterCount=0, writeCount=0 readSkipCount=0, writeSkipCount=0, commitCount=0, rollbackCount=0, exitDescription=]]\nat org.springframework.batch.support.SimpleMethodInvoker.invokeMethod(SimpleMethodInvoker.java:97)\nat org.springframework.batch.core.listener.MethodInvokerMethodInterceptor.invoke(MethodInvokerMethodInterceptor.java:68)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)\nat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204)\nat $Proxy18.beforeStep(Unknown Source)\nat org.springframework.batch.core.listener.CompositeStepExecutionListener.beforeStep(CompositeStepExecutionListener.java:76)\nat org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:193)\nat org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:348)\nat org.springframework.batch.core.job.flow.FlowJob.access$100(FlowJob.java:43)\nat org.springframework.batch.core.job.flow.FlowJob$JobFlowExecutor.executeStep(FlowJob.java:137)\nat org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:60)\nat org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:144)\nat org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:124)\nat org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:105)\nat org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:250)\nat org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:110)\nat org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)\nat org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:105)\nat org.springframework.batch.core.launch.support.CommandLineJobRunner.start(CommandLineJobRunner.java:207)\nat org.springframework.batch.core.launch.support.CommandLineJobRunner.main(CommandLineJobRunner.java:254)\nCaused by: java.lang.IllegalArgumentException: object is not an instance of declaring class\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\nat java.lang.reflect.Method.invoke(Unknown Source)\nat org.springframework.batch.support.SimpleMethodInvoker.invokeMethod(SimpleMethodInvoker.java:95)\n... 19 more\n\n\n---\n\n**Affects:** 2.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/19dee310c6b18ad566777aa0d87931d77b226b33\n", "url": "https://github.com/spring-projects/spring-batch/issues/2323", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-05-03 18:09:41", "closed": "2009-05-03 22:20:35", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "NCDFE javax/xml/stream/XMLStreamException on plain upgrade 2.0.0->2.0.1 [BATCH-1263]", "body": "**[Yann C\u00e9bron](https://jira.spring.io/secure/ViewProfile.jspa?name=yann)** opened **[BATCH-1263](https://jira.spring.io/browse/BATCH-1263?redirect=false)** and commented\n\n```\n2009-06-02 12:45:21,341                      ERROR [work.web.context.ContextLoader] - Context initialization failed \norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jobRepository': Invocation of init method failed; nested exception is java.lang.NoClassDefFoundError: javax/xml/stream/XMLStreamException\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1338)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:473)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:423)\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:728)\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:380)\n\tat org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:255)\n\tat org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:199)\n\tat org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45)\n\tat org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3843)\n\tat org.apache.catalina.core.StandardContext.start(StandardContext.java:4342)\n\tat org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791)\n\tat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771)\n\tat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:525)\n\tat org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:627)\n\tat org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:553)\n\tat org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:488)\n\tat org.apache.catalina.startup.HostConfig.start(HostConfig.java:1149)\n\tat org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:311)\n\tat org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)\n\tat org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1053)\n\tat org.apache.catalina.core.StandardHost.start(StandardHost.java:719)\n\tat org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045)\n\tat org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443)\n\tat org.apache.catalina.core.StandardService.start(StandardService.java:516)\n\tat org.apache.catalina.core.StandardServer.start(StandardServer.java:710)\n\tat org.apache.catalina.startup.Catalina.start(Catalina.java:578)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288)\n\tat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413)\nCaused by: java.lang.NoClassDefFoundError: javax/xml/stream/XMLStreamException\n\tat org.springframework.batch.core.repository.dao.XStreamExecutionContextStringSerializer.init(XStreamExecutionContextStringSerializer.java:65)\n\tat org.springframework.batch.core.repository.dao.XStreamExecutionContextStringSerializer.afterPropertiesSet(XStreamExecutionContextStringSerializer.java:60)\n\tat org.springframework.batch.core.repository.dao.JdbcExecutionContextDao.afterPropertiesSet(JdbcExecutionContextDao.java:155)\n\tat org.springframework.batch.core.repository.support.JobRepositoryFactoryBean.createExecutionContextDao(JobRepositoryFactoryBean.java:169)\n\tat org.springframework.batch.core.repository.support.AbstractJobRepositoryFactoryBean.getTarget(AbstractJobRepositoryFactoryBean.java:140)\n\tat org.springframework.batch.core.repository.support.AbstractJobRepositoryFactoryBean.initializeProxy(AbstractJobRepositoryFactoryBean.java:129)\n\tat org.springframework.batch.core.repository.support.AbstractJobRepositoryFactoryBean.afterPropertiesSet(AbstractJobRepositoryFactoryBean.java:135)\n\tat org.springframework.batch.core.repository.support.JobRepositoryFactoryBean.afterPropertiesSet(JobRepositoryFactoryBean.java:126)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1369)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1335)\n\t... 39 more\n```\n\nneeded to add manually (workaround?!)\n\n```\n<dependency>\n            <groupId>javax.xml.stream</groupId>\n            <artifactId>com.springsource.javax.xml.stream</artifactId>\n        </dependency>\n```\n\n\n\n---\n\n**Affects:** 2.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2317", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: declined", "type: bug"], "created": "2009-06-01 21:58:29", "closed": "2009-06-02 18:22:31", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "NPE in StepParserStepFactoryBean#configureTaskletStep() #289 when omitting \"isolation\" for <transaction-attributes> [BATCH-1264]", "body": "**[Yann C\u00e9bron](https://jira.spring.io/secure/ViewProfile.jspa?name=yann)** opened **[BATCH-1264](https://jira.spring.io/browse/BATCH-1264?redirect=false)** and commented\n\nthis is changed behaviour compared to 2.0.0, where the following job definition worked fine:\n\n<batch:job id=\"indexUpdater\">\n<batch:step id=\"updateIndexes\">\n<batch:tasklet ref=\"indexUpdaterTasklet\">\n<batch:transaction-attributes propagation=\"NEVER\"/>\n</batch:tasklet>\n</batch:step>\n</batch:job>\n\nafter changing to   <batch:transaction-attributes isolation=\"DEFAULT\" propagation=\"NEVER\"/> it worked again\n\n\n---\n\n**Affects:** 2.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2316", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-06-01 22:03:02", "closed": "2009-06-01 22:11:32", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Add files to .springBeans in samples project [BATCH-1249]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1249](https://jira.spring.io/browse/BATCH-1249?redirect=false)** and commented\n\nIt looks like the files and config sets were removed from .springBeans in the samples project.  They should be added back.\n\n\n---\n\n**Affects:** 2.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/3a950f4bd6f65eef9136deb1447bdcef82d9db84, https://github.com/spring-projects/spring-batch/commit/472ccb2580aebb87d19a088182771ea171652fd2\n", "url": "https://github.com/spring-projects/spring-batch/issues/2310", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2009-05-26 05:25:05", "closed": "2009-05-27 05:14:28", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Write skips do not work in a multi-threaded step [BATCH-1272]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1272](https://jira.spring.io/browse/BATCH-1272?redirect=false)** and commented\n\nWrite skips do not work in a multi-threaded step.  This is strange, and hard to explain, but apparently the FaultTolerantChunkProcessor is not fault tolerant if run in multiple threads at once.\n\n\n---\n\n**Affects:** 2.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2308", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-06-03 02:49:35", "closed": "2009-06-04 19:54:59", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "\"Singleton\" optimization in FaultTolerantChunkProcessor leads to processor work being committed unexpectedly [BATCH-1274]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1274](https://jira.spring.io/browse/BATCH-1274?redirect=false)** and commented\n\n\"Singleton\" optimization in FaultTolerantChunkProcessor leads to processor work being committed unexpectedly.  Once a chunk gets down to a single item, we try to avoid a write exception if we think we know that the item caused a failure in the last transaction.  This turns out to be a bad idea (although the motivation was good) because the item processor will have been called for that item, and a rollback is needed to clean up any state that it is creating or maintaining.\n\nIt should be adequate to simply remove the optimization.\n\n\n---\n\n**Affects:** 2.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2307", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-06-03 03:27:45", "closed": "2009-06-03 20:38:05", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "RepeatTemplate aborts early if multiple threads throw ignorable exceptions [BATCH-1278]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1278](https://jira.spring.io/browse/BATCH-1278?redirect=false)** and commented\n\nRepeatTemplate aborts early if multiple threads throw ignorable exceptions.  This is the underlying cause for [BATCH-1272](https://jira.spring.io/browse/BATCH-1272).\n\n\n---\n\n**Affects:** 2.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2304", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2009-06-03 21:32:31", "closed": "2009-06-03 21:45:43", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "JobParserJobFactoryBean should be a singleton [BATCH-1280]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1280](https://jira.spring.io/browse/BATCH-1280?redirect=false)** and commented\n\nJobParserJobFactoryBean should be a singleton.  This will cause issues with the JobRegistry - e.g. multiple registrations of the same job in integration tests.\n\n\n---\n\n**Affects:** 2.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2302", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-06-04 21:11:17", "closed": "2009-06-04 21:18:47", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "JobRegistryBeanPostProcessor skips jobs in XML namespace unless they are injected as dependency [BATCH-1282]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1282](https://jira.spring.io/browse/BATCH-1282?redirect=false)** and commented\n\nThe factory bean JobParserJobFactoryBean is not a SmartFactoryBean, so its instances do not get instantiated eagerly by default.  Not many use cases need this, but the JobRegistry is a special case as Job instances typically are not dependencies for anything.\n\n\n---\n\n**Affects:** 2.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/56e304ebcf23117c72354c8036e7f0d6dfd56397\n", "url": "https://github.com/spring-projects/spring-batch/issues/2300", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-06-07 23:14:41", "closed": "2009-06-18 19:58:08", "commits": {}, "ttf": 10.000277777777777, "commitsDetails": []}, {"title": "FlatFileItemReader.open() fails if Resource is injected by the IoC container [BATCH-1266]", "body": "**[Oliver Theissen](https://jira.spring.io/secure/ViewProfile.jspa?name=oliver.theissen)** opened **[BATCH-1266](https://jira.spring.io/browse/BATCH-1266?redirect=false)** and commented\n\nSteps to reproduce the bug\n--------------------------\n\n1.) create a working directory\n2.) unzip attachment \"spring.batch.bug.zip\" in this working directory.\n3.) compile (assuming environment set up as specified)\n7.) run the main method in class ItemReaderTest\n\nActual behavior\n---------------\n\nOutput on the console:\n\nException in thread \"main\" org.springframework.batch.item.ItemStreamException: Failed to initialize the reader\nat org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:111)\nat batch.bug.ItemReaderTest.testItemReader(ItemReaderTest.java:49)\nat batch.bug.ItemReaderTest.main(ItemReaderTest.java:34)\nCaused by: java.lang.IllegalStateException: Input resource must exist (reader is in 'strict' mode): class path resource [employeeResource]\nat org.springframework.batch.item.file.FlatFileItemReader.doOpen(FlatFileItemReader.java:245)\nat org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:108)\n... 2 more\n\nExpected behavior\n-----------------\n\nOutput on the console:\n\n[[name=joel,firstName=miller], [name=greg,firstName=taylor], [name=michael,firstName=carpenter]]\n\nRemark\n------\n\nIf I insert the following workaround into class ItemReaderTest I get the expected result:\n\n    ...\n    public void testItemReader() throws UnexpectedInputException,\n    \t\tParseException, Exception {\n    \n    \tList<Employee> employeeList = new ArrayList<Employee>();\n    \tEmployee current;\n    \n    \t// BEGIN workaround ---------------------------------------------------\n    \t Resource resource = (Resource) ctx.getBean(\"employeeResource\");\n    \t itemReader.setResource(resource);\n    \t// END workaround -----------------------------------------------------\n    \n    \titemReader.open(new ExecutionContext()); // fails, if resource is not set explicitly!\n    ...\n\nSeems that dependency injection for the resource property of a FlatFileItemReader (or one of it's superclasses) does not work correctly.\n\nIn practice, this workaround is useless because a you cannot access the ItemReader injected into a StepExecution before the open(...) method is called on an ItemReader. Thus there is not place to invoke setResource(...) on the ItemReader before it is actually used.\n\n\n---\n\n**Affects:** 2.0.0\n\n**Attachments:**\n- [spring.bacth.bug.zip](https://jira.spring.io/secure/attachment/15442/spring.bacth.bug.zip) (_2.21 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2297", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: invalid", "type: bug"], "created": "2009-06-02 03:53:34", "closed": "2009-06-02 10:52:51", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Partition Step Stop is incorrectly setting the BatchStatus to COMPLETED. [BATCH-1284]", "body": "**[Devadasan K.T.](https://jira.spring.io/secure/ViewProfile.jspa?name=devadasan)** opened **[BATCH-1284](https://jira.spring.io/browse/BATCH-1284?redirect=false)** and commented\n\nPlease refer to the forum reference.\n\n\n---\n\n**Affects:** 2.0.0\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=72963\n", "url": "https://github.com/spring-projects/spring-batch/issues/2296", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-06-09 16:43:06", "closed": "2009-06-09 18:35:18", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "JobRegistryBeanPostProcessor is checking for Job instead of JobParserJobFactoryBean [BATCH-1287]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1287](https://jira.spring.io/browse/BATCH-1287?redirect=false)** and commented\n\nJobRegistryBeanPostProcessor.postProcessAfterInitialization() only acts on beans of type Job.  However, since jobs declared using the namespace are of type JobParserJobFactoryBean, the post processor's logic is not being called on the jobs.\n\n\n---\n\n**Affects:** 2.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2294", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2009-06-10 16:57:02", "closed": "2009-06-10 17:02:28", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Null pointer in CoreNamespaceUtils.rangeArrayEditorAlreadyDefined() [BATCH-1289]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1289](https://jira.spring.io/browse/BATCH-1289?redirect=false)** and commented\n\nA NullPointerException is thrown from CoreNamespaceUtils.rangeArrayEditorAlreadyDefined() if there is a custom editor configurer without a customEditor property because of the line:\n\n```\nMap editors = (Map) bd.getPropertyValues().getPropertyValue(\"customEditors\").getValue();\n```\n\n\n\n---\n\n**Affects:** 2.0.1\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=73389\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/449e95ab1c2e1935918daa39d75252551b730d5a\n", "url": "https://github.com/spring-projects/spring-batch/issues/2291", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-06-12 00:28:00", "closed": "2009-06-12 14:55:54", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "2.0.1 sources.jar not in Maven repository [BATCH-1293]", "body": "**[Antony Quinn](https://jira.spring.io/secure/ViewProfile.jspa?name=aquinn)** opened **[BATCH-1293](https://jira.spring.io/browse/BATCH-1293?redirect=false)** and commented\n\nspring-batch-core-2.0.1.RELEASE-sources.jar is missing from the Maven central repository.\n\n\n---\n\n**Affects:** 2.0.1\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=73479\n", "url": "https://github.com/spring-projects/spring-batch/issues/2286", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-06-15 19:42:27", "closed": "2009-06-15 21:23:10", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "ItemStream is not being opened correctly for multi-threaded Step when scope=\"step\" [BATCH-1301]", "body": "**[Ryan Crumley](https://jira.spring.io/secure/ViewProfile.jspa?name=crumley)** opened **[BATCH-1301](https://jira.spring.io/browse/BATCH-1301?redirect=false)** and commented\n\nThe following job definition works however if I change the reader to scope=\"step\" I will get an exception about the stream never being opened (from FlatFileItemReader.doRead()). It appears doOpen() is called at least once however I believe its a different instance than what is actually used for read() because when read() is called the reader is not initialized.\n\n            <job id=\"search-job\" restartable=\"true\">\n    \t<step id=\"search-job-step\">\n    \t\t<tasklet transaction-manager=\"transactionManager\" allow-start-if-complete=\"true\">\n    \t\t\t<chunk reader=\"itemReader\" writer=\"itemWriter\" commit-interval=\"1\" task-executor=\"executor\" >\n    \t\t\t\t<streams> <!-- tried with and without this -->\n    \t\t\t\t\t<stream ref=\"itemReader\" />\n    \t\t\t\t</streams>\n    \t\t\t</chunk>\n    \t\t</tasklet>\n    \t</step>\n    </job>\n    \n    <b:bean id=\"itemReader\" class=\"org.springframework.batch.item.file.FlatFileItemReader\">\n    \t<b:property name=\"resource\" value=\"file:input.csv\" />\n    \t<b:property name=\"lineMapper\">\n    \t\t<b:bean class=\"org.springframework.batch.item.file.mapping.DefaultLineMapper\">\n    \t\t\t<b:property name=\"lineTokenizer\">\n    \t\t\t\t<b:bean class=\"org.springframework.batch.item.file.transform.DelimitedLineTokenizer\">\n    \t\t\t\t\t<b:property name=\"names\" value=\"col1,col2,col3\" />\n    \t\t\t\t</b:bean>\n    \t\t\t</b:property>\n    \t\t\t<b:property name=\"fieldSetMapper\">\n    \t\t\t\t<b:bean class=\"com.company.prj.batch.ItemFieldSetMapper\" />\n    \t\t\t</b:property>\n    \t\t</b:bean>\n    \t</b:property>\n    </b:bean>\n    \n    <b:bean id=\"itemWriter\" class=\"org.springframework.batch.item.file.FlatFileItemWriter\">\n    \t<b:property name=\"resource\" value=\"file:searchoutput.txt\" />\n    \t<b:property name=\"lineAggregator\">\n    \t\t<b:bean class=\"com.company.prj.batch.SearchResultsAggregator\" />\n    \t</b:property>\n    </b:bean>\n\n\n\n---\n\n**Affects:** 2.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2278", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-06-19 01:51:21", "closed": "2009-06-22 02:09:22", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "Filter counter not incremented whenever there's a skip [BATCH-1304]", "body": "**[Adrian Miranda](https://jira.spring.io/secure/ViewProfile.jspa?name=madrian)** opened **[BATCH-1304](https://jira.spring.io/browse/BATCH-1304?redirect=false)** and commented\n\nThe filterCount in StepExecution is not incremented properly whenever a skip (Exception) happens in the same chuck. See the forum link for details.\n\n\n---\n\n**Affects:** 2.0.0, 2.0.1\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=73763\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/b811f1412253c9f0c113c302d16b583f95e3a1d1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2275", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-06-22 19:04:49", "closed": "2009-06-23 02:27:19", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "FixedLengthTokenizer's 'names' property may not have spaces [BATCH-1308]", "body": "**[Rob Owens](https://jira.spring.io/secure/ViewProfile.jspa?name=rowens)** opened **[BATCH-1308](https://jira.spring.io/browse/BATCH-1308?redirect=false)** and commented\n\nIn the example code in chapter 6 (http://static.springframework.org/spring-batch/reference/html/readersAndWriters.html) this is part of the example for the fixed length file tokenizer -\n\n\\<bean id=\"fixedLengthLineTokenizer\"\nclass=\"org.springframework.batch.io.file.transform.FixedLengthTokenizer\">\n\\<property name=\"names\" value=\"ISIN, Quantity, Price, Customer\" />\n\\<property name=\"columns\" value=\"1-12, 13-15, 16-20, 21-29\" />\n\\</bean>\n\nIf you follow this example (leaving a space after the comma for each of the property names) then you are not able to use the field set readers with the name value as Spring takes the whole section between the commas. For example:\n\nfs.readString(\"Quantity\") would nor work whereas the same thing with a space appended to the front - fs.readString(\" Quantity\")\n\nJust thought it should be made clear in the documentation as it took an amount of degugging to realise why it wouldn't recognise my list of names.\n\nAlso as an aside org.springframework.batch.io.file.transform.FixedLengthTokenizer doesn't exist it is org.springframework.batch.item.file.transform.FixedLengthTokenizer\n\n\n---\n\n**Affects:** 2.0.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/c7fddc87a88035be0728a104e0fea1b7140654ba\n", "url": "https://github.com/spring-projects/spring-batch/issues/2271", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2009-06-25 19:25:13", "closed": "2009-06-26 13:19:54", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "loopFlowSample's LimitDecider returns \"COMPLETE\" instead of \"COMPLETED\" [BATCH-1313]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1313](https://jira.spring.io/browse/BATCH-1313?redirect=false)** and commented\n\n\n---\n\n**Affects:** 2.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2266", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2009-06-28 02:57:24", "closed": "2009-06-28 03:18:04", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "FFIW in tradeJob is pointing to classpath instead of the target [BATCH-1314]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1314](https://jira.spring.io/browse/BATCH-1314?redirect=false)** and commented\n\n\n---\n\n**Affects:** 2.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2265", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2009-06-28 03:02:51", "closed": "2009-06-28 03:18:12", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Section 2.3 Configuration Enhancements contains invalid example [BATCH-1315]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1315](https://jira.spring.io/browse/BATCH-1315?redirect=false)** and commented\n\nThe following appears in Section 2.3 Configuration Enhancements, but it is invalid since it doesn't actually define (or point to a definition of) a step.\n\n```\n<job id=\"footballJob\">\n    <step id=\"playerload\" next=\"gameLoad\"/>\n    <step id=\"gameLoad\" next=\"playerSummarization\"/>\n    <step id=\"playerSummarization\"/>\n</job>\n```\n\n\n\n---\n\n**Affects:** 2.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2264", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2009-06-28 15:22:53", "closed": "2009-07-04 22:26:18", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "Ensure exception classes are behaving correctly [BATCH-1318]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1318](https://jira.spring.io/browse/BATCH-1318?redirect=false)** and commented\n\nThere seem to be a few problems with the way the exception classes are being handled:\n\n[BATCH-1327](https://jira.spring.io/browse/BATCH-1327): 1) If the exception is not registered as skippable (on a step with a skip-limit), then it should be treated exactly as if it were registered as fatal (stop processing immediately).  However, right now the chunk seems to be rolling back, and reprocessing before finally failing.\n\n[BATCH-1333](https://jira.spring.io/browse/BATCH-1333): 2) Exceptions registered as retryable and fatal are not being retried.\n\n[BATCH-1332](https://jira.spring.io/browse/BATCH-1332): 3) Skippable + No-Rollback exceptions show inconsistent rollback behavior.  No rollback occurs for the initial writing of the chunk but rollback seems to occur during scanning.\n\n[BATCH-1331](https://jira.spring.io/browse/BATCH-1331): 4) Fatal + No-Rollback exceptions are causing the chunk to be reprocessed, leading to double-commits for valid records.\n\n[BATCH-1334](https://jira.spring.io/browse/BATCH-1334): 5) Non-Skippable + No-Rollback exceptions are being treated as skippable.\n\n\n---\n\n**Affects:** 2.0.1\n\n**Sub-tasks:**\n- [BATCH-1298](https://jira.spring.io/browse/BATCH-1298) no-rollback-exception-classes ignored by non-chunk-oriented TaskletStep\n\n- [BATCH-1327](https://jira.spring.io/browse/BATCH-1327) Prevent re-processing and re-writing on rollback after non-skippable and non-retryable exception\n\n- [BATCH-1331](https://jira.spring.io/browse/BATCH-1331) Fatal exceptions that are also marked as no-rollback\n\n- [BATCH-1332](https://jira.spring.io/browse/BATCH-1332) Skippable exceptions on write that are also marked as no-rollback cause a rollback, and double processing of item (writer and skip listener)\n\n- [BATCH-1333](https://jira.spring.io/browse/BATCH-1333) Support for retry of non-skippable subclasses of skippable exceptions\n\n- [BATCH-1334](https://jira.spring.io/browse/BATCH-1334) Exception marked as no-rollback but not skippable should not cause skips\n\n- [BATCH-1335](https://jira.spring.io/browse/BATCH-1335) Pathological cases of no-rollback-for-exceptions on framework panic exceptions\n\n", "url": "https://github.com/spring-projects/spring-batch/issues/2261", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-07-03 21:29:18", "closed": "2009-07-10 01:14:56", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "Small memory leak in StepSynchronizationManager [BATCH-1319]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1319](https://jira.spring.io/browse/BATCH-1319?redirect=false)** and commented\n\nSmall memory leak in StepSynchronizationManager: the counts map is not cleaned up at the end of a step execution.\n\n\n---\n\n**Affects:** 2.0.2\n", "url": "https://github.com/spring-projects/spring-batch/issues/2260", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-07-05 01:38:26", "closed": "2009-07-05 01:41:48", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Restart after <stop/> doesn't work if any previous steps have allowStartIfComplete=true [BATCH-1326]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1326](https://jira.spring.io/browse/BATCH-1326?redirect=false)** and commented\n\nRestart after \\<stop/> doesn't work if any previous steps have allowStartIfComplete=true.  The system tries to detect a restart by looking for a stopped step at the start of a job.  If one of the previous steps was already re-executed after being COMPLETED then this is wrong.\n\n\n---\n\n**Affects:** 2.0.0, 2.0.1\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=74505\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/e1c8f35353ba8bbda1b1a07f389be32cc84b96b0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2254", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-07-08 03:10:55", "closed": "2009-07-08 04:39:33", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Wrong JavaDoc in CommandLineJobRunner concerning Parameters [BATCH-1330]", "body": "**[J\u00f6rg Gottschling](https://jira.spring.io/secure/ViewProfile.jspa?name=jgottschling)** opened **[BATCH-1330](https://jira.spring.io/browse/BATCH-1330?redirect=false)** and commented\n\nIt seems to me that the documentation of the command line arguments for CommandLineJobRunner in the JavaDoc class comment is wrong. It says the parameters are \"java jobPath jobName jobLauncherPath jobParameters...\".\n\nFirst of all I would remove \"java\" here. But jobLauncherPath seams to be really wrong. There is no such parameter.\n\nThe JavaDoc for \"main(String[])\" says there are the parameters are \"jobPath, jobName, jobParameters...\". And the code seams to proof that.\n\n\n---\n\n**Affects:** 2.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/962064ee0da256f84f5107b7e97f3999cbeafee5\n", "url": "https://github.com/spring-projects/spring-batch/issues/2250", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-07-09 17:54:40", "closed": "2009-07-09 19:13:25", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "DataSourceInitializer throws ArrayOutOfBoundException when any destroyScript is specified [BATCH-1341]", "body": "**[Nicolas LE BAS](https://jira.spring.io/secure/ViewProfile.jspa?name=nlebas)** opened **[BATCH-1341](https://jira.spring.io/browse/BATCH-1341?redirect=false)** and commented\n\nbasically, this is a typo:\n\n91:\t\tfor (int i = 0; i < destroyScripts.length; i++) {\n92:\t\t\tResource destroyScript = initScripts[i];\n\n\n---\n\n**Affects:** 2.0.0.RC2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/c6056d59d2f5445dc02897bf7da67698a774c327\n", "url": "https://github.com/spring-projects/spring-batch/issues/2240", "user": "spring-issuemaster", "labels": ["in: test", "type: bug"], "created": "2009-07-22 04:05:40", "closed": "2009-07-22 04:21:24", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Fix error message for when <tasklet/> has no ref= or <chunk/> [BATCH-1345]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1345](https://jira.spring.io/browse/BATCH-1345?redirect=false)** and commented\n\n\n---\n\n**Affects:** 2.0.2\n", "url": "https://github.com/spring-projects/spring-batch/issues/2236", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-07-26 14:58:36", "closed": "2009-07-26 15:17:57", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Endless loop in AbstractPagingItemReader [BATCH-1346]", "body": "**[Alexander Kuleshov](https://jira.spring.io/secure/ViewProfile.jspa?name=arhat)** opened **[BATCH-1346](https://jira.spring.io/browse/BATCH-1346?redirect=false)** and commented\n\n    <bean id=\"dbItemReader\" class=\"org.springframework.batch.item.database.IbatisPagingItemReader\">\n        <property name=\"sqlMapClient\" ref=\"sqlMapClient\"/>\n        <property name=\"queryId\" value=\"getBatchRows\"/>\n        <property name=\"pageSize\" value=\"2\"/>\n    </bean>\n\nIf pageSize is set to value that less the number of records in DB, than the method doRead() in class AbstractPagingItemReader performs infinitely.\n\n\n---\n\n**Affects:** 2.0.2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/3429e41faf7a960e304dac141a30d7cdf78c21cc\n", "url": "https://github.com/spring-projects/spring-batch/issues/2235", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2009-07-27 21:55:11", "closed": "2009-07-28 01:24:46", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "An empty <*-exception-classes/> list does not override parent's list [BATCH-1351]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1351](https://jira.spring.io/browse/BATCH-1351?redirect=false)** and commented\n\nAn empty <*-exception-classes/> list does not override parent's list.  This probably applies to other lists (listeners, streams, ...) as well.  This prevents a step or job from being about to inherit from a parent and remove its registered exception classes.\n\nFor example, the following results in step \"B\" having java.lang.Exception registered as skippable even though it specifies \\<skippable-exception-classes/> with merge=\"false\" (the default).\n\n```\n<step id=\"A\">\n    <tasklet>\n        <chunk>\n            <skippable-exception-classes>\n                java.lang.Exception\n            </skippable-exception-classes>\n        </chunk>\n    </tasklet>\n</step>\n\n<step id=\"B\" parent=\"A\">\n    <tasklet>\n        <chunk>\n            <skippable-exception-classes/>\n        </chunk>\n    </tasklet>\n</step>\n```\n\n\n\n---\n\n**Affects:** 2.0.2\n\n**Issue Links:**\n- [BATCH-1357](https://jira.spring.io/browse/BATCH-1357) Allow empty \\<listeners/>, \\<retry-listeners/>, and \\<streams/> lists\n\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/638a379ba03f61ff9e7fd12cca5a34177549ac2d\n", "url": "https://github.com/spring-projects/spring-batch/issues/2230", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-07-30 07:35:52", "closed": "2009-08-03 16:15:48", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "Infinite loop caused by throwing an Error from the ItemWriter of a skippable step [BATCH-1354]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1354](https://jira.spring.io/browse/BATCH-1354?redirect=false)** and commented\n\nIf a java.lang.Error is thrown from the ItemWriter of a step with skipLimit > 0, then the framework falls into an infinite loop.  It appears that an Error thrown misses the catch block that increments the skip counter, but it still causes the step to skip.  So the effect is that we skip continuously.\n\nThe desired effect is that an Error is thrown out of the job and never skips.\n\nThis was discovered when using jMock since jMock throws an ExpectationError when an expectation fails.\n\n\n---\n\n**Affects:** 2.0.2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/ecddd61b478128dffee33ca8ffc70c145929be2b, https://github.com/spring-projects/spring-batch/commit/a293b6ff21bb422d4c10e945b2f1703c961377ef\n", "url": "https://github.com/spring-projects/spring-batch/issues/2227", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-07-31 00:51:17", "closed": "2009-08-20 03:42:26", "commits": {}, "ttf": 20.00027777777778, "commitsDetails": []}, {"title": "Step scope causes type= attribute of <value/> to be ignored [BATCH-1355]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1355](https://jira.spring.io/browse/BATCH-1355?redirect=false)** and commented\n\nWhen scope=\"step\" is added to a bean, the type= attribute of \\<value/> seems to be ignored.  For example, the following configuration results in a parameter that is a String.  If scope=\"step\" is removed, the parameter is an Integer.\n\n```\n<bean id=\"reader\" class=\"org.springframework.batch.item.database.JdbcCursorItemReader\" scope=\"step\">\n    <property name=\"sql\" value=\"select * from TABLE\"/>\n    <property name=\"preparedStatementSetter\">\n        <bean class=\"org.springframework.batch.core.resource.ListPreparedStatementSetter\">\n            <property name=\"parameters\">\n                <list>\n                    <value type=\"int\">123</value>\n                </list>\n            </property>\n        </bean>\n    </property>\n    ...\n</bean>\n```\n\n\n\n---\n\n**Affects:** 2.0.2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb\n", "url": "https://github.com/spring-projects/spring-batch/issues/2226", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-07-31 05:05:35", "closed": "2009-08-13 20:37:49", "commits": {}, "ttf": 13.000277777777777, "commitsDetails": []}, {"title": "Threads spinning doing nothing at end of multi-threaded Step [BATCH-1362]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1362](https://jira.spring.io/browse/BATCH-1362?redirect=false)** and commented\n\nThreads spinning doing nothing at end of multi-threaded Step.  When a multi-threaded step is waiting for its last chunk to process it needs to wait on threads that are FINISHED, rather than spinning round asking them over and over if they want to do more work.  The visible effect is often a large disparity between commit count and read count at the end of a step.  One user even reported an apparently infinite loop (probably it was just the JVM scheduler not giving priority to the real worker thread).\n\n\n---\n\n**Affects:** 2.0.0\n\n**Attachments:**\n- [mylyn-context.zip](https://jira.spring.io/secure/attachment/15602/mylyn-context.zip) (_222.98 kB_)\n- [mylyn-context.zip](https://jira.spring.io/secure/attachment/15601/mylyn-context.zip) (_3.28 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2220", "user": "spring-issuemaster", "labels": ["in: core", "in: infrastructure", "type: bug"], "created": "2009-08-07 19:02:48", "closed": "2009-08-20 03:53:24", "commits": {}, "ttf": 12.000277777777777, "commitsDetails": []}, {"title": "Job stopped in split state does not finish with status = STOPPED [BATCH-1363]", "body": "**[Devadasan K.T.](https://jira.spring.io/secure/ViewProfile.jspa?name=devadasan)** opened **[BATCH-1363](https://jira.spring.io/browse/BATCH-1363?redirect=false)** and commented\n\nThe analysis on the forum post isn't quite correct because SimpleFlow is used even for sequential executions.  The problem lies in the SplitState: it needs to unwrap ExecutionExceptions and re-throw their cause.\n\n\n---\n\n**Affects:** 2.0.0\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=75949\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/0bf64b4a8006cfb561ed77b4da1c80080e97dd64, https://github.com/spring-projects/spring-batch/commit/b90e320e31b8995921c196df5db2560338ce34e2\n", "url": "https://github.com/spring-projects/spring-batch/issues/2219", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-08-08 19:54:58", "closed": "2009-08-13 15:59:41", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "exception when reloading application [BATCH-1365]", "body": "**[Joy Vazapully](https://jira.spring.io/secure/ViewProfile.jspa?name=vazapully)** opened **[BATCH-1365](https://jira.spring.io/browse/BATCH-1365?redirect=false)** and commented\n\nSome classes are not getting loaded when the application is restarted, below is the stack trace generated.\n\n10/08/2009 14:45:00,013 [schedulerFactoryBean_QuartzSchedulerThread] DEBUG org.quartz.impl.jdbcjobstore.StdRowLockSemaphore  - Lock 'TRIGGER_ACCESS' is desired by: schedulerFactoryBean_QuartzSchedulerThread\n10/08/2009 14:45:00,013 [schedulerFactoryBean_QuartzSchedulerThread] DEBUG org.quartz.impl.jdbcjobstore.StdRowLockSemaphore  - Lock 'TRIGGER_ACCESS' is being obtained: schedulerFactoryBean_QuartzSchedulerThread\n10/08/2009 14:45:00,013 [schedulerFactoryBean_QuartzSchedulerThread] DEBUG org.quartz.impl.jdbcjobstore.StdRowLockSemaphore  - Lock 'TRIGGER_ACCESS' given to: schedulerFactoryBean_QuartzSchedulerThread\n10/08/2009 14:45:00,029 [schedulerFactoryBean_QuartzSchedulerThread] DEBUG org.quartz.impl.jdbcjobstore.StdRowLockSemaphore  - Lock 'TRIGGER_ACCESS' returned by: schedulerFactoryBean_QuartzSchedulerThread\n10/08/2009 14:45:00,029 [WorkManager.DefaultWorkManager : 0] INFO  com.te.jpay.services.scheduling.ExecuteDueCollectionJobParameterProviderJobListener  - Setting executionDate to: java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Asia/Calcutta\",offset=19800000,dstSavings=0,useDaylight=false,transitions=6,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2009,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=3,DAY_OF_MONTH=10,DAY_OF_YEAR=222,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=2,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=19800000,DST_OFFSET=0]\n10/08/2009 14:45:00,029 [WorkManager.DefaultWorkManager : 0] DEBUG org.quartz.core.JobRunShell  - Calling execute on job DEFAULT.springBatchJobLauncherDetails\n10/08/2009 14:45:00,029 [WorkManager.DefaultWorkManager : 0] INFO  com.te.jpay.services.scheduling.BatchJobLauncherJob  - Called with context: JobExecutionContext: trigger: 'DEFAULT.abcd job: DEFAULT.springBatchJobLauncherDetails fireTime: 'Mon Aug 10 14:45:00 IST 2009 scheduledFireTime: Mon Aug 10 14:45:00 IST 2009 previousFireTime: 'Sun Aug 09 14:45:00 IST 2009 nextFireTime: Tue Aug 11 14:45:00 IST 2009 isRecovering: false refireCount: 0\n10/08/2009 14:45:00,029 [WorkManager.DefaultWorkManager : 0] INFO  org.springframework.batch.core.configuration.support.ClassPathXmlApplicationContextFactory$ResourceXmlApplicationContext  - Refreshing org.springframework.batch.core.configuration.support.ClassPathXmlApplicationContextFactory$ResourceXmlApplicationContext@ae40ae4: display name [org.springframework.batch.core.configuration.support.ClassPathXmlApplicationContextFactory$ResourceXmlApplicationContext@ae40ae4]; startup date [Mon Aug 10 14:45:00 IST 2009]; parent: org.springframework.context.support.ClassPathXmlApplicationContext@3fd03fd0\n10/08/2009 14:45:00,029 [WorkManager.DefaultWorkManager : 0] INFO  org.springframework.beans.factory.xml.XmlBeanDefinitionReader  - Loading XML bean definitions from class path resource [spring/executeDueCollection-context.xml]\n10/08/2009 14:45:00,044 [WorkManager.DefaultWorkManager : 0] INFO  org.quartz.core.JobRunShell  - Job DEFAULT.springBatchJobLauncherDetails threw a JobExecutionException:\norg.quartz.JobExecutionException: org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [spring/executeDueCollection-context.xml]; nested exception is org.springframework.beans.FatalBeanException: Class [org.springframework.context.config.ContextNamespaceHandler] for namespace http://www.springframework.org/schema/context does not implement the [org.springframework.beans.factory.xml.NamespaceHandler] interface [See nested exception: org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [spring/executeDueCollection-context.xml]; nested exception is org.springframework.beans.FatalBeanException: Class [org.springframework.context.config.ContextNamespaceHandler] for namespace http://www.springframework.org/schema/context does not implement the [org.springframework.beans.factory.xml.NamespaceHandler] interface]\nat com.te.jpay.services.scheduling.BatchJobLauncherJob.executeInternal(BatchJobLauncherJob.java:64)\nat org.springframework.scheduling.quartz.QuartzJobBean.execute(QuartzJobBean.java:86)\nat org.quartz.core.JobRunShell.run(JobRunShell.java:202)\nat org.springframework.scheduling.commonj.DelegatingWork.run(DelegatingWork.java:61)\nat com.ibm.ws.asynchbeans.J2EEContext.run(J2EEContext.java:1114)\nat com.ibm.ws.asynchbeans.WorkWithExecutionContextImpl.go(WorkWithExecutionContextImpl.java:195)\nat com.ibm.ws.asynchbeans.CJWorkItemImpl.run(CJWorkItemImpl.java:187)\nat com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1497)\nCaused by:\norg.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [spring/executeDueCollection-context.xml]; nested exception is org.springframework.beans.FatalBeanException: Class [org.springframework.context.config.ContextNamespaceHandler] for namespace http://www.springframework.org/schema/context does not implement the [org.springframework.beans.factory.xml.NamespaceHandler] interface\nat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:420)\nat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:342)\nat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:310)\nat org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143)\nat org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:109)\nat org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:80)\nat org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:123)\nat org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:422)\nat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352)\nat org.springframework.batch.core.configuration.support.ClassPathXmlApplicationContextFactory$ResourceXmlApplicationContext.\\<init>(ClassPathXmlApplicationContextFactory.java:83)\nat org.springframework.batch.core.configuration.support.ClassPathXmlApplicationContextFactory$ResourceXmlApplicationContext.\\<init>(ClassPathXmlApplicationContextFactory.java:81)\nat org.springframework.batch.core.configuration.support.ClassPathXmlApplicationContextFactory.createApplicationContext(ClassPathXmlApplicationContextFactory.java:70)\nat org.springframework.batch.core.configuration.support.ApplicationContextJobFactory.createJob(ApplicationContextJobFactory.java:55)\nat org.springframework.batch.core.configuration.support.MapJobRegistry.getJob(MapJobRegistry.java:81)\nat org.springframework.batch.core.configuration.support.ClassPathXmlJobRegistry.getJob(ClassPathXmlJobRegistry.java:59)\nat com.te.jpay.services.scheduling.BatchJobLauncherJob.executeInternal(BatchJobLauncherJob.java:56)\n... 7 more\nCaused by:\norg.springframework.beans.FatalBeanException: Class [org.springframework.context.config.ContextNamespaceHandler] for namespace http://www.springframework.org/schema/context does not implement the [org.springframework.beans.factory.xml.NamespaceHandler] interface\nat org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver.resolve(DefaultNamespaceHandlerResolver.java:125)\nat org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1292)\nat org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1287)\nat org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:135)\nat org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:92)\nat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:507)\nat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:398)\n... 22 more\n10/08/2009 14:45:00,044 [WorkManager.DefaultWorkManager : 0] DEBUG org.quartz.impl.jdbcjobstore.StdRowLockSemaphore  - Lock 'TRIGGER_ACCESS' is desired by: WorkManager.DefaultWorkManager : 0\n10/08/2009 14:45:00,044 [WorkManager.DefaultWorkManager : 0] DEBUG org.quartz.impl.jdbcjobstore.StdRowLockSemaphore  - Lock 'TRIGGER_ACCESS' is being obtained: WorkManager.DefaultWorkManager : 0\n10/08/2009 14:45:00,044 [WorkManager.DefaultWorkManager : 0] DEBUG org.quartz.impl.jdbcjobstore.StdRowLockSemaphore  - Lock 'TRIGGER_ACCESS' given to: WorkManager.DefaultWorkManager : 0\n10/08/2009 14:45:00,060 [WorkManager.DefaultWorkManager : 0] DEBUG org.quartz.impl.jdbcjobstore.StdRowLockSemaphore  - Lock 'TRIGGER_ACCESS' returned by: WorkManager.DefaultWorkManager : 0\n\n\n---\n\n1 votes, 1 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/2217", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2009-08-10 22:02:36", "closed": "2009-08-20 05:52:18", "commits": {}, "ttf": 9.000277777777777, "commitsDetails": []}, {"title": "Rename spring-batch-2.0.xsd to spring-batch-2.1.xsd [BATCH-1371]", "body": "**[Dan Garrette](https://jira.spring.io/secure/ViewProfile.jspa?name=dhgarrette)** opened **[BATCH-1371](https://jira.spring.io/browse/BATCH-1371?redirect=false)** and commented\n\nThe 2.0 schema needs to be removed from the jar and re-packaged as a special bundle for Spring IDE as well.\n\n\n---\n\n**Affects:** 2.0.2\n\n**Sub-tasks:**\n- [BATCH-1382](https://jira.spring.io/browse/BATCH-1382) Publish spring-batch-2.1.xsd\n\n- [BATCH-1387](https://jira.spring.io/browse/BATCH-1387) Fix validation errors in core and samples\n\n- [BATCH-1400](https://jira.spring.io/browse/BATCH-1400) Specify schema location for imports in xsd\n\n- [BATCH-1456](https://jira.spring.io/browse/BATCH-1456) Detect spring-batch-2.0.xsd and raise an exception in the namespace parsers\n\n", "url": "https://github.com/spring-projects/spring-batch/issues/2211", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-08-14 13:29:18", "closed": "2010-01-04 18:46:23", "commits": {}, "ttf": 143.00027777777777, "commitsDetails": []}, {"title": "Could not build samples in org.springframework.batch-2.0.0.RELEASE using maven [BATCH-1373]", "body": "**[JIwei Wu](https://jira.spring.io/secure/ViewProfile.jspa?name=jiweiwu)** opened **[BATCH-1373](https://jira.spring.io/browse/BATCH-1373?redirect=false)** and commented\n\nI downloaded org.springframework.batch-2.0.0.RELEASE-with-dependencies.zip\n\n1. unzipped it to directory  org.springframework.batch-2.0.0.RELEASE\n2. cd samples\n3. mvn test\n\nProject ID: null:org.springframework.batch.samples:jar:null\n\nReason: Cannot find parent: org.springframework.batch:org.springframework.batch.parent for project: null:org.springframework.batch.samples:jar:null for project null:org.springframework.batch.samples:jar:null\n\n[INFO] ------------------------------------------------------------------------\n[INFO] Trace\norg.apache.maven.reactor.MavenExecutionException: Cannot find parent: org.springframework.batch:org.springframework.batch.parent for project: null:org.springframework.batch.samples:jar:null for project null:org.springframework.batch.samples:jar:null\nat org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:432)\nat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:300)\nat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:137)\nat org.apache.maven.cli.MavenCli.main(MavenCli.java:356)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:597)\nat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\nat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\nat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\nat org.codehaus.classworlds.Launcher.main(Launcher.java:375)\nCaused by: org.apache.maven.project.ProjectBuildingException: Cannot find parent: org.springframework.batch:org.springframework.batch.parent\n\n4. cd ..\n5. ln -s  sources/spring-batch-parent samples/spring-batch-parent\n6. test passed\n\nso  samples directory missed spring-batch-parent as it is ubder 'sources'\n\n\n---\n\n**Affects:** 2.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2209", "user": "spring-issuemaster", "labels": ["in: test", "status: declined", "type: bug"], "created": "2009-08-16 04:30:12", "closed": "2009-08-16 05:11:18", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Late binding of parameters in map value only happens once per ApplicationContext [BATCH-1378]", "body": "**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[BATCH-1378](https://jira.spring.io/browse/BATCH-1378?redirect=false)** and commented\n\nSee thorough description in the forum, which also have the related classes, configuration and log attached.\nIn essence the binding of the parameters only happens once, so that any subsequent executions will run with stale values.\n\n\n---\n\n**Affects:** 2.0.2, 2.0.3\n\n**Reference URL:** http://forum.springsource.org/showthread.php?p=256141\n\n**Attachments:**\n- [Generic.log](https://jira.spring.io/secure/attachment/15632/Generic.log) (_465.07 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/052f259cb84d24898037ed487383e9f9675149d0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2203", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-08-21 00:49:09", "closed": "2009-08-21 20:50:18", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "MySQL does not support millisecond accuracy in timestamps (problem for JobParameters) [BATCH-1379]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1379](https://jira.spring.io/browse/BATCH-1379?redirect=false)** and commented\n\nMySQL does not support millisecond accuracy in timestamps (problem for JobParameters).  The issue is that round tripping from JobParameters to the database and back does not preserve the timestamp, so a job can be launched twice with different parameters, when they should have been the same.\n\n\n---\n\n**Affects:** 2.1.0\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=74219\n\n**Issue Links:**\n- [BATCH-2522](https://jira.spring.io/browse/BATCH-2522) Job key hash returns different result for restart when using date parameter\n (_**\"is duplicated by\"**_)\n- [BATCH-2542](https://jira.spring.io/browse/BATCH-2542) Multiple Job Intance for same job parameters\n (_**\"is duplicated by\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2202", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2009-08-21 00:59:48", "closed": "2020-05-12 16:05:18", "commits": {}, "ttf": 3917.0002777777777, "commitsDetails": []}, {"title": "onSkipInProcess is not called if the exception is marked as no-rollback [BATCH-1383]", "body": "**[Marcin Kuthan](https://jira.spring.io/secure/ViewProfile.jspa?name=mkuthan)** opened **[BATCH-1383](https://jira.spring.io/browse/BATCH-1383?redirect=false)** and commented\n\nThe method onSkipInProcess in the SkipListener is not called. My application logs the step execution after each step:\n\nAfter: execution(execute) with: StepExecution: id=264, name=stage, status=COMPLETED, exitStatus=COMPLETED, readCount=28, filterCount=15, writeCount=13 readSkipCount=0, writeSkipCount=0, processSkipCount=15, commitCount=1, rollbackCount=0, exitDescription=\n\nI expected that the onSkipInProcess method should be called 15 times, but it is not. The listener class is defined as follows:\n\npublic class CommandStepListener extends SkipListenerSupport<Command, Command> {\n`@Override`\npublic void onSkipInProcess(Command item, Throwable t) {\n// some skip logic\n}\n`@BeforeStep`\npublic void initialize(StepExecution stepExecution) {\n// some initialization setup\n}\n}\n\nThe step definitions:\n\n<batch:step id=\"abstractStep\" abstract=\"true\">\n<batch:tasklet job-repository=\"jobRepository\" transaction-manager=\"transactionManager\" allow-start-if-complete=\"false\">\n</batch:tasklet>\n</batch:step>\n\n<batch:job id=\"myJob\" restartable=\"true\">\n<batch:step id=\"stage\" next=\"operation\" parent=\"abstractStep\">\n<batch:tasklet>\n<batch:chunk reader=\"commandFileReader\" processor=\"commandProcessor\" writer=\"commandWriter\" commit-interval=\"100\" skip-limit=\"1000000\" retry-limit=\"10\">\n<batch:skippable-exception-classes>org.springframework.batch.item.validator.ValidationException</batch:skippable-exception-classes>\n<batch:retryable-exception-classes>java.io.IOException</batch:retryable-exception-classes>\n</batch:chunk>\n<batch:no-rollback-exception-classes>org.springframework.batch.item.validator.ValidationException</batch:no-rollback-exception-classes>\n<batch:listeners>\n<batch:listener ref=\"commandStepListener\" />\n</batch:listeners>\n</batch:tasklet>\n</batch:step>\n\nand processor definition is:\n\n\\<bean id=\"commandProcessor\" scope=\"step\" class=\"org.springframework.batch.item.validator.ValidatingItemProcessor\">\n\\<constructor-arg ref=\"commandValidator\" />\n\\</bean>\n\nThe commandValidator just throws the ValidationException if the processed command is invalid.\n\nThe listener bean is registered, the initialize method is called. When I added onSkipInRead method to the listener and simulate error during command reading, the method was called. It seems that my setup is fine, but onSkipInProcess is not called :-(\n\nI also tried switch to pure annotation configuration with `@OnSkipInProcess`. The method is not called, also.\n\n\n---\n\n**Affects:** 2.0.2\n", "url": "https://github.com/spring-projects/spring-batch/issues/2198", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-08-23 19:29:45", "closed": "2009-09-03 21:56:51", "commits": {}, "ttf": 11.000277777777777, "commitsDetails": []}, {"title": "Multithreaded Step may Fail to Stop [BATCH-1384]", "body": "**[Kenneth DeLong](https://jira.spring.io/secure/ViewProfile.jspa?name=kdelong)** opened **[BATCH-1384](https://jira.spring.io/browse/BATCH-1384?redirect=false)** and commented\n\nWhen configuring a step for multithreaded operation in 2.0.2 and 2.0.3:\n\n\\<step id=\"digestQueueProcessingStepXML\" parent=\"singleThreadedParentStep\" next=\"splitFileStepXML\">\n\t\\<tasklet>\n\t\t\\<chunk \n\t\t\treader=\"userIdItemReader\"\n\t\t\tprocessor=\"fetchUserDataFromSpItemProcessor\"\n\t\t\twriter=\"strongMailXSLFileWriter\"\n\t\t\tcommit-interval=\"100\"\n\t\t\ttask-executor=\"taskExecutor\"\n\t\t/>\n\t\\</tasklet>\n\\</step>\n\nwhere the task executor is a thread pool:\n\n\\<bean id=\"taskExecutor\" class=\"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor\">\n\t\\<property name=\"maxPoolSize\" ref=\"3\"/>\n\t\\<property name=\"corePoolSize\" ref=\"3\"/>\n\\</bean>\n\nThe step often fails to stop even when the item reader is returning null.\n\nThe reason is a change to StepContextRepeatCallback.  In versions 2.0.0 and 2.0.1, the code in the StepContextRepeatCallback.doInIteration() method looked like this:\ntry {\nreturn doInChunkContext(context, chunkContext);\n}\ndoInChunkContext() returns RepeatStatus.FINISHED when the ItemReader is returning null, and therefore doInIteration() also returns FINISHED, and the loop exits correctly.\n\nIn 2.0.2,the code was changed to read\ntry {\nlogger.debug(\"Chunk execution starting: worker count=\"+workerCount.get()+\", queue size=\"+attributeQueue.size());\nreturn RepeatStatus.continueIf(doInChunkContext(context, chunkContext).isContinuable()\n|| !attributeQueue.isEmpty() || workerCount.get()>1);\n}\n\nUnfortunately, in a multithreaded environment it appears that each time a new chunk is handed off to a worker thread, the workerCount variable gets incremented.  This means that doInIteration() is returning RepeatStatus.CONTINUABLE (because workerCount > 1), even when the doInChunkContext() is returning FINISHED (because the ItemReader is returning nulls).  Therefore, the controlling loop creates another (empty) Chunk to process, thereby incrementing workerCount again.\n\nWe have had a step like this run for 24 hours without exiting.\n\n\n\n---\n\n**Affects:** 2.0.2, 2.0.3\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=76465\n", "url": "https://github.com/spring-projects/spring-batch/issues/2197", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2009-08-24 07:59:20", "closed": "2009-08-28 01:38:22", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "ExecutionContextPromotionListener erases previous step [BATCH-1390]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1390](https://jira.spring.io/browse/BATCH-1390?redirect=false)** and commented\n\nExecutionContextPromotionListener erases previous step.  It should check for the existence of each value by key before promting, otherwise it will erase information from previous steps.\n\n\n---\n\n**Affects:** 2.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2191", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-09-03 21:10:38", "closed": "2009-09-08 17:04:08", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "Throttle limit is not parsed in ChunkElementParser [BATCH-1392]", "body": "**[Ward Bryon](https://jira.spring.io/secure/ViewProfile.jspa?name=wardbryon)** opened **[BATCH-1392](https://jira.spring.io/browse/BATCH-1392?redirect=false)** and commented\n\nSpring Batch 2.0.3 has added the property throttle-limit property to the chunk element in the spring-batch-2.0.xsd\n\nHowever, ChunkElementParser does not parse this property at all.\n\nFix :\n\nIn method parse() of class ChunkElementParser  add the following lines:\n\nString throttleLimit = element.getAttribute(\"throttle-limit\");\nif (StringUtils.hasText(throttleLimit)) {\npropertyValues.addPropertyValue(\"throttleLimit\", throttleLimit);\n}\n\n\n---\n\n**Affects:** 2.0.3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/0b0729edcc97292f98cbe7815f356f04a959a9da, https://github.com/spring-projects/spring-batch/commit/0cc77cf6ca32ea44dc0afc8a256ed62ce4d14e4f\n\n**Backported to:** [2.0.4](https://github.com/spring-projects/spring-batch/milestone/25?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2189", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2009-09-03 22:52:41", "closed": "2009-09-08 17:05:22", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "Late binding only happens once per ApplicationContext if expression is in substring [BATCH-1397]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1397](https://jira.spring.io/browse/BATCH-1397?redirect=false)** and commented\n\nLate binding only happens once per ApplicationContext if expression is in substring (c.f. [BATCH-1378](https://jira.spring.io/browse/BATCH-1378)).  Still slightly broken: e.g. `value=\"#jobParameters[foo]\"` works fine but `value=\"foo-#jobParameters[foo]\"` does not.\n\n\n---\n\n**Affects:** 2.0.2\n\n**Backported to:** [2.0.4](https://github.com/spring-projects/spring-batch/milestone/25?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2183", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2009-09-07 03:53:39", "closed": "2009-09-08 17:04:56", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "All inserts of JobId should be of Types.BIGINT [BATCH-1401]", "body": "**[Morten Andersen-Gott](https://jira.spring.io/secure/ViewProfile.jspa?name=magott)** opened **[BATCH-1401](https://jira.spring.io/browse/BATCH-1401?redirect=false)** and commented\n\nIn JdbcJobInstanceDao the jobid is mapped to different sql types depending on which table it is inserted in.\nTypes.INTEGER is used in\nJdbcJobInstanceDao .createJobInstance\nJdbcJobExecutionDao.saveJobExecution\n\nTypes.BIGINT is used in\nJdbcJobInstanceDao .insertParameter\n\nI'm not sure if this is causing the problems I am having at the moment (breaches of constraint JOB_INST_PARAMS_FK on Sybase), but as the underlying datatype in the DB is the same for all tables persisting the jobid, the java.sql.Types used should probably be the same as well.\n\nSomeone should probably look through all the Jdbc**Daos to make sure that the same Types.** is used for all IDs, seems most inserts use Types.INTEGER.\n\n\n---\n\n**Affects:** 2.0.0\n\n**Attachments:**\n- [JdbcJobExecutionDao.java.patch](https://jira.spring.io/secure/attachment/15715/JdbcJobExecutionDao.java.patch) (_1.17 kB_)\n- [JdbcJobInstanceDao.java.patch](https://jira.spring.io/secure/attachment/15716/JdbcJobInstanceDao.java.patch) (_689 bytes_)\n- [JdbcStepExecutionDao.java.patch](https://jira.spring.io/secure/attachment/15717/JdbcStepExecutionDao.java.patch) (_1.32 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/f0e2aef7a87c0619f5af5980aed9a3669a34fdc7, https://github.com/spring-projects/spring-batch/commit/822f8bb86822c28da43aa4c44f005ca1fbe244fb, https://github.com/spring-projects/spring-batch/commit/d31702c20bab723988f64affba329013958274d6, https://github.com/spring-projects/spring-batch/commit/bade1c74c561cd84816b9b03183fe74e9fc2b4ae\n\n1 votes, 0 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/2179", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-09-10 23:11:54", "closed": "2009-10-20 22:27:58", "commits": {}, "ttf": 39.000277777777775, "commitsDetails": []}, {"title": "Starvation of threads - TaskExecutorRepeatTemplate [BATCH-1405]", "body": "**[mvdab](https://jira.spring.io/secure/ViewProfile.jspa?name=mvdab)** opened **[BATCH-1405](https://jira.spring.io/browse/BATCH-1405?redirect=false)** and commented\n\nFollowing scenario leads to the starvation of threads in a multi-threaded env.\n\nTaskExecutorRepeatTemplate:\n- line 418 -> thread 1 acquires lock\n- line 429  -> thread 1 releases lock + sleeps 2sec\n- line  456 -> thread 2 acquires lock\n- line 457  -> thread 2 updates 'paused = true'\n- line 430  -> thread 1 -> stillActive is always true because paused = true -> thread 1 loops\n\nSimilar issue: [BATCH-1362](https://jira.spring.io/browse/BATCH-1362)\n\n\n---\n\n**Affects:** 2.0.3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/0940d1b9e39959bd000ea34e95e2c18118bd101f\n", "url": "https://github.com/spring-projects/spring-batch/issues/2175", "user": "spring-issuemaster", "labels": ["status: invalid", "type: bug"], "created": "2009-09-14 23:26:28", "closed": "2009-09-15 19:30:07", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "SimpleJobLauncher Package wrong [BATCH-1408]", "body": "**[Niklas Schlimm](https://jira.spring.io/secure/ViewProfile.jspa?name=niklas)** opened **[BATCH-1408](https://jira.spring.io/browse/BATCH-1408?redirect=false)** and commented\n\nIn the User Guide Chapter \"4.3. Configuring a JobLauncher\": write at the start you have a configuration of SimpleJobLauncher where Package of the class is wrong:\n\n\\<bean id=\"jobLauncher\"\nclass=\"org.springframework.batch.execution.launch.SimpleJobLauncher\">\n\\<property name=\"jobRepository\" ref=\"jobRepository\" />\n\\</bean>\n\nMust be:\n\n\\<bean id=\"jobLauncher\" class=\"org.springframework.batch.core.launch.support.SimpleJobLauncher\">\n\t\t\\<property name=\"jobRepository\" ref=\"jobRepository\" />\n\\</bean>\n\n\n---\n\n**Affects:** 2.0.3\n\n**Backported to:** [2.0.4](https://github.com/spring-projects/spring-batch/milestone/25?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2172", "user": "spring-issuemaster", "labels": ["has: backports", "in: documentation", "type: bug"], "created": "2009-09-16 01:48:27", "closed": "2010-05-17 22:25:23", "commits": {}, "ttf": 243.00027777777777, "commitsDetails": []}, {"title": "Isolation Level in the Example is not supported [BATCH-1410]", "body": "**[Niklas Schlimm](https://jira.spring.io/secure/ViewProfile.jspa?name=niklas)** opened **[BATCH-1410](https://jira.spring.io/browse/BATCH-1410?redirect=false)** and commented\n\nIn chapter \"4.2.1. Transaction Configuration for the JobRepository\" right at the top you have the example configuration:\n\n\\<job-repository id=\"jobRepository\"\nisolation-level-for-create=\"ISOLATION_REPEATABLE_READ\" />\n\nThe Isolation Level ist not supported. Supported types according to XSD Schema:\n\n<xsd:simpleType name=\"isolationType\">\n<xsd:restriction base=\"xsd:string\">\n<xsd:enumeration value=\"DEFAULT\"/>\n<xsd:enumeration value=\"READ_UNCOMMITTED\"/>\n<xsd:enumeration value=\"READ_COMMITTED\"/>\n<xsd:enumeration value=\"REPEATABLE_READ\"/>\n<xsd:enumeration value=\"SERIALIZABLE\"/>\n</xsd:restriction>\n</xsd:simpleType>\n\n\n---\n\n**Affects:** 2.0.3\n\n**Backported to:** [2.0.4](https://github.com/spring-projects/spring-batch/milestone/25?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2170", "user": "spring-issuemaster", "labels": ["has: backports", "in: documentation", "type: bug"], "created": "2009-09-16 18:08:36", "closed": "2014-07-28 04:00:35", "commits": {}, "ttf": 1775.0002777777777, "commitsDetails": []}, {"title": "A typo in the 11.8 of reference documentation  [BATCH-1413]", "body": "**[Sanghyuk Jung](https://jira.spring.io/secure/ViewProfile.jspa?name=sanghyuk.jung)** opened **[BATCH-1413](https://jira.spring.io/browse/BATCH-1413?redirect=false)** and commented\n\nI can see following codes in the 11.8 of reference documentation.\n\n\"public void SavingItemWriter implements ItemWriter\\<Object>\"\n\nI guess \"void\" literal is a typo, because it is the declaration for the class, not for a method.\n\n\n---\n\n**Affects:** 2.0.3\n", "url": "https://github.com/spring-projects/spring-batch/issues/2168", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2009-09-20 17:45:13", "closed": "2009-09-20 23:07:37", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Error in FlatFileItemReader when RecordSeparatorPolicy.preProcess or readLine returns null [BATCH-1417]", "body": "**[adrian](https://jira.spring.io/secure/ViewProfile.jspa?name=gonzalad)** opened **[BATCH-1417](https://jira.spring.io/browse/BATCH-1417?redirect=false)** and commented\n\nWe think there's a bug in RecordSeparatorPolicy handling in FlatFileItemReader when RecordSeparatorPolicy .preProcess or readLine returns null :\n* returning null from recordSeparatorPolicy.preProcess is not handled correctly by FlatFileItemReader.\n* also on the same line, if readLine() returns null, FlatFileItemReader handles it incorrectly and we obtain a \"null\" string.\n\nCode in error ;\nwhile (line != null && !recordSeparatorPolicy.isEndOfRecord(record)) {\nrecord = recordSeparatorPolicy.preProcess(record) + (line = readLine());\n}\n\nIf isEndOfRecord returns true, record can be \"null\" string.\n\n\n---\n\n**Affects:** 2.0.3\n\n**Reference URL:** http://forum.springsource.org/showpost.php?p=261826&postcount=5\n\n**Backported to:** [2.0.4](https://github.com/spring-projects/spring-batch/milestone/25?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2164", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2009-09-27 18:33:50", "closed": "2009-10-05 01:55:03", "commits": {}, "ttf": 7.000277777777778, "commitsDetails": []}, {"title": "Upon job restart, step with FlatFileItemReader doesn't honor skippable-exception-classes [BATCH-1418]", "body": "**[Hammad Malik](https://jira.spring.io/secure/ViewProfile.jspa?name=malikh)** opened **[BATCH-1418](https://jira.spring.io/browse/BATCH-1418?redirect=false)** and commented\n\nUpon restarting a failed step, the reader (FlatFileItemReader) tries to parse the file from the beginning as it tries to reach the point from where it has to pick up after the last failure. Along the way, the reader invokes the lineTokenizer and the fieldSetMapper for each of the already processed records. This appears to be far too much work for no gain when the point is to quickly get to the last record read from the file that was successfully committed.\n\nMore importantly, during this recovery phase, the parsing exercise triggers parsing exceptions but the batch framework doesn't honor the \"skippable-exception-classes\" instruction. This causes exceptions (that should be skipped) to become fatal and the job fails to restart.\n\nMore information is available in the \"Spring Forum Reference\" thread.\n\n\n---\n\n**Affects:** 2.0.3\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=78258\n", "url": "https://github.com/spring-projects/spring-batch/issues/2163", "user": "spring-issuemaster", "labels": ["in: core", "in: infrastructure", "type: bug"], "created": "2009-09-28 00:55:30", "closed": "2010-01-17 13:40:25", "commits": {}, "ttf": 111.00027777777778, "commitsDetails": []}, {"title": "Late Binding only happens first time when using inner bean definition with collection property [BATCH-1420]", "body": "**[Cameron](https://jira.spring.io/secure/ViewProfile.jspa?name=cameronl)** opened **[BATCH-1420](https://jira.spring.io/browse/BATCH-1420?redirect=false)** and commented\n\nUsing the Partitioning method, attempting to access the separate ExecutionContexts as setup by my Partitioner only works on the first step. All subsequent steps seem to use the same ExecutionContext variables. This appears to be caused by the binding not happening at all on the later steps, essentially recycling the previous values.\n\nSee attachments for sample configuration\n\n\n---\n\n**Affects:** 2.0.3\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=79046\n\n**Attachments:**\n- [appContext.txt](https://jira.spring.io/secure/attachment/15809/appContext.txt) (_2.21 kB_)\n- [job.txt](https://jira.spring.io/secure/attachment/15808/job.txt) (_835 bytes_)\n\n**Backported to:** [2.0.4](https://github.com/spring-projects/spring-batch/milestone/25?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2160", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2009-10-13 07:47:05", "closed": "2009-10-16 14:16:03", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "HibernateCursorItemReader causes OutOfMemoryError when skipping large sets of data [BATCH-1422]", "body": "**[Roman Urosov](https://jira.spring.io/secure/ViewProfile.jspa?name=romikk)** opened **[BATCH-1422](https://jira.spring.io/browse/BATCH-1422?redirect=false)** and commented\n\nIn case of restarting of previously failed job, HibernateCursorItemReader skips already processed records by simply reading them upto desired index, i.e. uses default implementation from AbstractItemCountingItemStreamItemReader.jumpToItem(). This results in all skipped entities being loaded into hibernate session which can lead to OutOfMemoryError in case of large result sets.\n\nPossible solution:\n1) Remove ScrollMode.FORWARD_ONLY from cursor creation (line 198), which will be then defaulted to ScrollMode.SCROLL_INSENSITIVE\n\n2) Override jumpToItem() method in following way:\n\n   `@Override`\n   protected void jumpToItem( int itemIndex ) throws Exception {\n   cursor.setRowNumber(itemIndex - 1);\n   }\n\n\n\n---\n\n**Affects:** 2.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2158", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-10-16 05:38:30", "closed": "2010-01-13 03:56:49", "commits": {}, "ttf": 88.00027777777778, "commitsDetails": []}, {"title": "Upon job restart, step with FlatFileItemReader doesn't honor skippable-exception-classes [BATCH-1423]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1423](https://jira.spring.io/browse/BATCH-1423?redirect=false)** and commented\n\nCloned from: [BATCH-1418](https://jira.spring.io/browse/BATCH-1418) to allow this to be closed for 2.0.4.\n\nUpon restarting a failed step, the reader (FlatFileItemReader) tries to parse the file from the beginning as it tries to reach the point from where it has to pick up after the last failure. Along the way, the reader invokes the lineTokenizer and the fieldSetMapper for each of the already processed records. This appears to be far too much work for no gain when the point is to quickly get to the last record read from the file that was successfully committed.\n\nMore importantly, during this recovery phase, the parsing exercise triggers parsing exceptions but the batch framework doesn't honor the \"skippable-exception-classes\" instruction. This causes exceptions (that should be skipped) to become fatal and the job fails to restart.\n\nMore information is available in the \"Spring Forum Reference\" thread.\n\n\n---\n\n**Affects:** 2.0.3\n", "url": "https://github.com/spring-projects/spring-batch/issues/2157", "user": "spring-issuemaster", "labels": ["in: core", "in: infrastructure", "type: bug"], "created": "2009-10-16 23:55:07", "closed": "2009-10-16 23:56:57", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "SimpleRetryExceptionHandler treats AbstractStep$FatalException as non-fatal [BATCH-1427]", "body": "**[Hammad Malik](https://jira.spring.io/secure/ViewProfile.jspa?name=malikh)** opened **[BATCH-1427](https://jira.spring.io/browse/BATCH-1427?redirect=false)** and commented\n\nSimpleRetryExceptionHandler treats AbstractStep$FatalException as a non-fatal exception and allows Spring Batch to continue processing. Shouldn't AbstractStep$FatalException be handled as its name implies - like a fatal exception?\n\nA stack trace is available in the associated Spring Forum Reference thread.\n\n\n---\n\n**Affects:** 2.0.3\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=79779\n", "url": "https://github.com/spring-projects/spring-batch/issues/2153", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2009-10-29 07:13:03", "closed": "2009-11-10 01:19:02", "commits": {}, "ttf": 11.000277777777777, "commitsDetails": []}, {"title": "StaxEventItemWriter throws IllegalStateException for JAXBElement<X>  [BATCH-1431]", "body": "**[Erik-Berndt Scheper](https://jira.spring.io/secure/ViewProfile.jspa?name=fbascheper)** opened **[BATCH-1431](https://jira.spring.io/browse/BATCH-1431?redirect=false)** and commented\n\nIn some cases JAXB2 does not create classes with an `@XmlRootElement` annotation.\nSee http://weblogs.java.net/blog/2006/03/03/why-does-jaxb-put-xmlrootelement-sometimes-not-always\n\nUsually this is the case when you declare non-anonymous complex types and use those reusable types in xml-elements.\n\nCurrently, the StaxEventItemWriter throws an IllegalStateException if you use this pattern:\n\njava.lang.IllegalStateException: Marshaller must support the class of the marshalled object\nat org.springframework.util.Assert.state(Assert.java:384)\n\nThis is caused by the following statement:\nAssert.state(marshaller.supports(object.getClass()),\n\"Marshaller must support the class of the marshalled object\");\n(inside the method public void write(List<? extends T> items) throws XmlMappingException, IOException {}).\n\nThe Jaxb2Marshaller.class has an additional method\npublic boolean supports(Type type) {\nas opposed to public boolean supports(Class clazz) defined in the Marshaller interface.\n\nThis Jaxb2 specific variant should be used for JAXB2.\n\n\n---\nNo further details from [BATCH-1431](https://jira.spring.io/browse/BATCH-1431?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/2149", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2009-11-02 21:15:29", "closed": "2013-05-01 04:11:53", "commits": {}, "ttf": 1275.0002777777777, "commitsDetails": []}, {"title": "Error in chpt. 7.1 \"Multithreaded step\" [BATCH-1432]", "body": "**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[BATCH-1432](https://jira.spring.io/browse/BATCH-1432?redirect=false)** and commented\n\nhttp://static.springsource.org/spring-batch/2.0.x/reference/html-single/index.html, 7.1 specifies that the taskexecutor is defined on the tasklet element.\nIt's defined at the chunk element.\n\nAlso the guide is for 2.0.3.RELEASE, while the latest 2.0.x release is 2.0.4\n\n\n---\n\n**Affects:** 2.0.4\n", "url": "https://github.com/spring-projects/spring-batch/issues/2148", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2009-11-04 04:19:15", "closed": "2009-11-05 18:30:40", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Late binding in HibernateCursorItemReader.queryString uses stale value from job execution context when executing test suite [BATCH-1440]", "body": "**[Morten Andersen-Gott](https://jira.spring.io/secure/ViewProfile.jspa?name=magott)** opened **[BATCH-1440](https://jira.spring.io/browse/BATCH-1440?redirect=false)** and commented\n\nI'm experiencing a problem where a stale value from jobExecutionContext is being used in late binding of the queryString in the HibernateCursorItemReader.\n\nGiven the following configuration:\nafterStep in StepExecutionListener in step 1 sets a unique file id in jobExecutionContext. This id is being used in the queryString of the HibernateCursorItemReader in step 3, as shown below:\n\n    <bean id=\"hibernateItemReader\" class=\"org.springframework.batch.item.database.HibernateCursorItemReader\" scope=\"step\">\n    \t<property name=\"sessionFactory\" ref=\"sessionFactory\" />\n    \t<property name=\"queryString\" value=\"FROM MyTable WHERE fileId=#{jobExecutionContext[fileId]}\" />\n    </bean>\n\nThis works ok, when executing the each Junit integration test in isolation. However, when executing a test suite (in which this batch is executed more than once), the HibernateCursorItemReader uses the fileId from the first execution everytime.\n\nI have managed to work around this by adding `@DiritesContext` to all JUnit integration tests executing this batch, this does however impact the time it takes to run the test suite. I expected the scope=\"step\" setting to ensure that a new HibernateCursorItemReader was configured for each execution with subsequent new late binding of query string.\n\nI assume this is a late binding issue, and not a HibernateCursorItemReader. It happens when I run the test suite both in eclipse and maven.\n\n\n---\n\n**Affects:** 2.0.4\n", "url": "https://github.com/spring-projects/spring-batch/issues/2140", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2009-11-12 21:30:55", "closed": "2009-11-18 22:50:07", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "Stopping a job with two parallel steps is only stopping on of the steps [BATCH-1442]", "body": "**[Marwan Simaan](https://jira.spring.io/secure/ViewProfile.jspa?name=msimaan)** opened **[BATCH-1442](https://jira.spring.io/browse/BATCH-1442?redirect=false)** and commented\n\nStopping a job with two parallel steps is only stopping on of the steps. The job status moves to STOPPED, but one of the steps is not set to terminateOnly\n\n\n---\n\n**Affects:** 2.0.0\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=80257\n", "url": "https://github.com/spring-projects/spring-batch/issues/2138", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2009-11-15 05:06:49", "closed": "2009-11-15 07:34:36", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "ChunkMonitor warning message about stream state is inaccurate [BATCH-1444]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1444](https://jira.spring.io/browse/BATCH-1444?redirect=false)** and commented\n\nChunkMonitor warning message about stream state is inaccurate: it warns the user if a multi-threaded access to ItemStream data is detected, and it checks for a null stream, but the stream is a composite and it is always null.  Should check for a registered stream inside the composite.\n\n\n---\n\n**Affects:** 2.0.4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/fcf7b1d1c487f6ad1fffd4a670655421ecb95269\n", "url": "https://github.com/spring-projects/spring-batch/issues/2136", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2009-11-17 17:33:23", "closed": "2009-11-17 17:48:27", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Using a FlatFileItemWriter with a CompositeItemWriter gives exceptions [BATCH-1455]", "body": "**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[BATCH-1455](https://jira.spring.io/browse/BATCH-1455?redirect=false)** and commented\n\nWhen using a JpaItemWriter and FlatFileItemWriter wrapped in a CompositeItemWriter gives an exception. The file isn't being opened and results in a nice exception.\n\n\n---\n\n**Affects:** 2.1.0.M3\n", "url": "https://github.com/spring-projects/spring-batch/issues/2128", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2009-11-30 20:38:27", "closed": "2009-11-30 23:02:30", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Rownum clauses are illegal in DerbyPagingQueryProvider (plus additional fix to Oracle) [BATCH-1460]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1460](https://jira.spring.io/browse/BATCH-1460?redirect=false)** and commented\n\nRownum clauses are illegal in DerbyPagingQueryProvider (plus additional fix to Oracle)\n\n\n---\n\n**Affects:** 2.0.4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/25504b2a3ccac958009b6e33d56187d4b2405d0a, https://github.com/spring-projects/spring-batch/commit/420a6b28aacdfd58bec90b0ecb71278feb556f8e\n", "url": "https://github.com/spring-projects/spring-batch/issues/2123", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2009-12-21 07:42:12", "closed": "2019-01-29 08:39:28", "commits": {}, "ttf": 3326.0002777777777, "commitsDetails": []}, {"title": "Late binding broken for inner beans with Spring 3. [BATCH-1463]", "body": "**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[BATCH-1463](https://jira.spring.io/browse/BATCH-1463?redirect=false)** and commented\n\nThis late binding worked in 2.0.4 but not in the latest 2.1 milestone:\n\n```\n<bean id=\"flatFileItemReader\" class=\"org.springframework.batch.item.file.FlatFileItemReader\" scope=\"step\">\n  <property name=\"strict\" value=\"false\" />\n  <property name=\"resource\">\n    <bean class=\"org.springframework.core.io.UrlResource\" scope=\"step\">\n      <constructor-arg value=\"#{jobParameters[inputFileUrl]}\" />\n    </bean>\n  </property>\n  <property name=\"lineMapper\">\n    <bean class=\"org.springframework.batch.item.file.mapping.DefaultLineMapper\">\n      <property name=\"lineTokenizer\">\n        <bean class=\"org.springframework.batch.item.file.transform.DelimitedLineTokenizer\">\n          <property name=\"delimiter\" value=\";\" />\n          <property name=\"names\">\n            <list>\n              <value>zipCode</value>\n              <value>city</value>\n              <value>name</value>\n              <value>addressType</value>\n              <value>countyNumber</value>\n              <value>countyName</value>\n            </list>\n          </property>\n        </bean>\n      </property>\n      <property name=\"fieldSetMapper\">\n        <bean class=\"com.davidkarlsen.zipcodeservice.dataload.ZipCodeFieldSetMapper\" />\n      </property>\n    </bean>\n  </property>\n</bean>\n```\n\n```\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.flatFileItemReader' defined in class path resource [com/davidkarlsen/zipcodeservice/dataload/batch-context.xml]: Cannot create inner bean 'org.springframework.core.io.UrlResource#1242b11' of type [org.springframework.core.io.UrlResource] while setting bean property 'resource'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.core.io.UrlResource#1242b11' defined in class path resource [com/davidkarlsen/zipcodeservice/dataload/batch-context.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.core.io.UrlResource]: Constructor threw exception; nested exception is java.net.MalformedURLException: no protocol: %{jobParameters[inputFileUrl]}\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:281) [spring-beans-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:120) [spring-beans-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1305) [spring-beans-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1067) [spring-beans-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:511) [spring-beans-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:450) [spring-beans-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$2.getObject(AbstractBeanFactory.java:328) [spring-beans-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.springframework.batch.core.scope.StepScope.get(StepScope.java:146) [spring-batch-core-2.1.0.M4.jar:na]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324) [spring-beans-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:189) [spring-beans-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:33) [spring-aop-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:182) [spring-aop-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat $Proxy18.close(Unknown Source) [na:na]\n\tat org.springframework.batch.item.support.CompositeItemStream.close(CompositeItemStream.java:86) [spring-batch-infrastructure-2.1.0.M4.jar:na]\n\tat org.springframework.batch.core.step.item.ChunkMonitor.close(ChunkMonitor.java:104) [spring-batch-core-2.1.0.M4.jar:na]\n\tat org.springframework.batch.item.support.CompositeItemStream.close(CompositeItemStream.java:86) [spring-batch-infrastructure-2.1.0.M4.jar:na]\n\tat org.springframework.batch.core.step.tasklet.TaskletStep.close(TaskletStep.java:284) [spring-batch-core-2.1.0.M4.jar:na]\n\tat org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:256) [spring-batch-core-2.1.0.M4.jar:na]\n\tat org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:115) [spring-batch-core-2.1.0.M4.jar:na]\n\tat org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:61) [spring-batch-core-2.1.0.M4.jar:na]\n\tat org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:60) [spring-batch-core-2.1.0.M4.jar:na]\n\tat org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:144) [spring-batch-core-2.1.0.M4.jar:na]\n\tat org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:124) [spring-batch-core-2.1.0.M4.jar:na]\n\tat org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:99) [spring-batch-core-2.1.0.M4.jar:na]\n\tat org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:276) [spring-batch-core-2.1.0.M4.jar:na]\n\tat org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:118) [spring-batch-core-2.1.0.M4.jar:na]\n\tat org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:48) [spring-core-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:112) [spring-batch-core-2.1.0.M4.jar:na]\n\tat com.davidkarlsen.zipcodeservice.dataload.BatchTest.testReadFile(BatchTest.java:60) [test-classes/:na]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [na:1.6.0_17]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [na:1.6.0_17]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [na:1.6.0_17]\n\tat java.lang.reflect.Method.invoke(Method.java:597) [na:1.6.0_17]\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) [junit-4.7.jar:na]\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) [junit-4.7.jar:na]\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) [junit-4.7.jar:na]\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) [junit-4.7.jar:na]\n\tat org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74) [spring-test-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:82) [spring-test-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72) [spring-test-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:240) [spring-test-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) [junit-4.7.jar:na]\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) [junit-4.7.jar:na]\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) [junit-4.7.jar:na]\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) [junit-4.7.jar:na]\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) [junit-4.7.jar:na]\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) [junit-4.7.jar:na]\n\tat org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) [spring-test-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) [spring-test-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:236) [junit-4.7.jar:na]\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:180) [spring-test-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62) [surefire-junit4-2.4.3.jar:2.4.3]\n\tat org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140) [surefire-api-2.4.3.jar:2.4.3]\n\tat org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:127) [surefire-api-2.4.3.jar:2.4.3]\n\tat org.apache.maven.surefire.Surefire.run(Surefire.java:177) [surefire-api-2.4.3.jar:2.4.3]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [na:1.6.0_17]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [na:1.6.0_17]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [na:1.6.0_17]\n\tat java.lang.reflect.Method.invoke(Method.java:597) [na:1.6.0_17]\n\tat org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:345) [surefire-booter-2.4.3.jar:2.4.3]\n\tat org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1009) [surefire-booter-2.4.3.jar:2.4.3]\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.core.io.UrlResource#1242b11' defined in class path resource [com/davidkarlsen/zipcodeservice/dataload/batch-context.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.core.io.UrlResource]: Constructor threw exception; nested exception is java.net.MalformedURLException: no protocol: %{jobParameters[inputFileUrl]}\n\tat org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:283) [spring-beans-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:984) [spring-beans-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:886) [spring-beans-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:479) [spring-beans-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:450) [spring-beans-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:270) [spring-beans-3.0.0.RELEASE.jar:3.0.0.RELEASE]\n\t... 60 common frames omitted\n```\n\n\n\n---\n\n**Affects:** 2.1.0.M4\n", "url": "https://github.com/spring-projects/spring-batch/issues/2120", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-12-27 06:03:12", "closed": "2009-12-29 04:19:05", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Samples: environment switching does not work on command line (pom typo) [BATCH-1467]", "body": "**[St\u00e9phane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[BATCH-1467](https://jira.spring.io/browse/BATCH-1467?redirect=false)** and commented\n\nI am trying to run the samples with H2 and no matter what it fallbacks on HSQL.\n\nI noticed that the surefire plugin has the following configuration\n\n```\n<property>\n  <name>org.springframework.batch.support.SystemPropertyInitializer.ENVIRONMENT</name>\n  <value>${environment}</value>\n</property>\n```\n\nHowever, the environment bean is defined as follows\n\n```\n<bean id=\"environment\"\n  class=\"org.springframework.batch.support.SystemPropertyInitializer\">\n  <property name=\"defaultValue\" value=\"hsql\"/>\n  <property name=\"keyName\" value=\"ENVIRONMENT\"/>\n</bean>\n```\n\nThe right key is therefore never set (hsql always used). One possible way is to fix the pom as follows\n\n```\n<property>\n  <name>ENVIRONMENT</name>\n  <value>${environment}</value>\n</property>\n```\n\n(On a related note, there is one test failure with H2)\n\n\n---\n\n**Affects:** 2.1.0.M4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/b3784f20ab732eacf84f0af0d8fa758f4b331b83\n", "url": "https://github.com/spring-projects/spring-batch/issues/2116", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2009-12-28 20:44:29", "closed": "2009-12-29 00:23:17", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "org.apache.commons.lang.SerializationException: java.lang.ClassNotFoundException using samples in WebLogic [BATCH-1469]", "body": "**[phillip rhodes](https://jira.spring.io/secure/ViewProfile.jspa?name=rhodebump)** opened **[BATCH-1469](https://jira.spring.io/browse/BATCH-1469?redirect=false)** and commented\n\nWorking on the spring batch examples, and got the following error. To summarize, the classloader that the commons-lang SerializationUtils is using is not able to find this class (of course the class exists).  I got around this error by creating my own copy of \"SerializationUtils.java\" in a new package and using this.  Since my SerializationUtils is in my webapp, there are no classloader issues.\n\nOJB had a similar issue that they resolved in a similar fashion, http://issues.apache.org/jira/browse/OJB-140\n\n```\n2009-12-29 09:05:04,489 [main] ERROR step.AbstractStep  - Encountered an error executing the step\norg.apache.commons.lang.SerializationException: java.lang.ClassNotFoundException\n: org.springframework.batch.sample.domain.trade.Trade\n        at org.apache.commons.lang.SerializationUtils.deserialize(SerializationUtils.java:165)\n        at org.apache.commons.lang.SerializationUtils.deserialize(SerializationUtils.java:192)\n        at org.springframework.batch.sample.common.StagingItemReader$2.mapRow(StagingItemReader.java:118)\n        at org.springframework.jdbc.core.RowMapperResultSetExtractor.extractData(RowMapperResultSetExtractor.java:92)\n        at org.springframework.jdbc.core.RowMapperResultSetExtractor.extractData(RowMapperResultSetExtractor.java:1)\n        at org.springframework.jdbc.core.JdbcTemplate$1.doInPreparedStatement(JdbcTemplate.java:648)\n        at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:586)\n        at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:636)\n        at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:665)\n        at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:673)\n        at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:716)\n        at org.springframework.jdbc.core.simple.SimpleJdbcTemplate.queryForObject(SimpleJdbcTemplate.java:169)\n        at org.springframework.jdbc.core.simple.SimpleJdbcTemplate.queryForObject(SimpleJdbcTemplate.java:174)\n```\n\n\n\n---\n\n**Affects:** 2.1.0.M4\n", "url": "https://github.com/spring-projects/spring-batch/issues/2114", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2009-12-29 01:10:34", "closed": "2009-12-30 00:13:54", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Typo in FaultTolerantStepFactoryBean  [BATCH-1471]", "body": "**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[BATCH-1471](https://jira.spring.io/browse/BATCH-1471?redirect=false)** and commented\n\n```\n18:56:34.578 [main] WARN  o.s.b.c.s.i.FaultTolerantStepFactoryBean - Synchronous TaskExecutor detected (class org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor) with ItemStream reader.  This is probably an error, and may lead to incorrect restart data being stored.\n```\n\nShould read Asynchronous TaskExecutor detected\n\n\n---\n\n**Affects:** 2.1.0.M4\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=80638\n", "url": "https://github.com/spring-projects/spring-batch/issues/2112", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2009-12-30 04:03:36", "closed": "2009-12-30 04:08:58", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Stream closed exception when combining MultiResourceItemWriter and FlatFileItemWriter with footer callback [BATCH-1452]", "body": "**[Matthew Farwell](https://jira.spring.io/secure/ViewProfile.jspa?name=mfarwell)** opened **[BATCH-1452](https://jira.spring.io/browse/BATCH-1452?redirect=false)** and commented\n\nI have a Spring Batch process which takes a set of rows in the database and creates a number of flat files from those rows, 10 rows per file. To do this, I've created a Spring Batch process, similar to this:\n\n```\n<batch:job id=\"springTest\" job-repository=\"jobRepository\" restartable=\"true\">\n    <batch:step id=\"test\">\n        <batch:tasklet>\n            <batch:chunk reader=\"itemReader\" writer=\"multipleItemWriter\" commit-interval=\"2\" />\n        </batch:tasklet>\n    </batch:step>\n</batch:job>\n\n<bean id=\"itemReader\" class=\"org.springframework.batch.item.file.FlatFileItemReader\">\n    <property name=\"resource\" value=\"file:/temp/temp-input.txt\" />\n    <property name=\"lineMapper\">\n        <bean class=\"org.springframework.batch.item.file.mapping.PassThroughLineMapper\" />\n    </property>\n</bean>\n\n<bean id=\"multipleItemWriter\" class=\"org.springframework.batch.item.file.MultiResourceItemWriter\">\n    <property name=\"resource\" value=\"file:/temp/temp-out\" />\n    <property name=\"itemCountLimitPerResource\" value=\"2\" />\n    <property name=\"delegate\">\n            <bean id=\"itemWriter\" class=\"org.springframework.batch.item.file.FlatFileItemWriter\">\n                <property name=\"lineAggregator\">\n                  <bean class=\"org.springframework.batch.item.file.transform.PassThroughLineAggregator\" />\n                </property>\n                <property name=\"encoding\" value=\"utf-8\" />\n                <property name=\"headerCallback\" ref=\"headerFooter\" />\n                <property name=\"footerCallback\" ref=\"headerFooter\" />\n            </bean>\n   </property>\n</bean>\n\n<bean id=\"headerFooter\" class=\"uk.co.farwell.spring.HeaderFooterCallback\" />\n```\n\nThe above example reads from a flat file and outputs to a flat file (to show the problem). Note the commit-interval=2 in the chunk, and the itemCountLimitPerResource=2 in the MultiResourceItemWriter.\n\nThe HeaderFooterCallback does the following:\n\n```\npublic void writeHeader(Writer writer) throws IOException {\n    writer.write(\"file header\\n\");\n}\n\npublic void writeFooter(Writer writer) throws IOException {\n    writer.write(\"file footer\\n\");\n}\n```\n\nI need to be able to specify exactly the number of lines which appear in the file.\n\nFor the following input file:\n\n```\nfoo1\nfoo2\nfoo3\n```\n\nI would expect two files on output,\n\nout.1:\n\n```\nfile header\nfoo1\nfoo2\nfile footer\n```\n\nout.2:\n\n```\nfile header\nfoo3\nfile footer\n```\n\nWhen I run with commit-interval=2, I get an exception:\n\n```\n2009-11-26 15:32:46,734 ERROR .support.TransactionSynchronizationUtils - TransactionSynchronization.afterCompletion threw exception\norg.springframework.batch.support.transaction.FlushFailedException: Could not write to output buffer\n\tat org.springframework.batch.support.transaction.TransactionAwareBufferedWriter$1.afterCompletion(TransactionAwareBufferedWriter.java:71)\n\tat org.springframework.transaction.support.TransactionSynchronizationUtils.invokeAfterCompletion(TransactionSynchronizationUtils.java:157)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.invokeAfterCompletion(AbstractPlatformTransactionManager.java:974)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.triggerAfterCompletion(AbstractPlatformTransactionManager.java:949)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:777)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:701)\n\tat org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:304)\n\tat org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:76)\n\tat org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:367)\n\tat org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)\n\tat org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:143)\n\tat org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:242)\n\tat org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:198)\n\tat org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:348)\n\tat org.springframework.batch.core.job.flow.FlowJob.access$100(FlowJob.java:43)\n\tat org.springframework.batch.core.job.flow.FlowJob$JobFlowExecutor.executeStep(FlowJob.java:135)\n\tat org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:60)\n\tat org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:144)\n\tat org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:124)\n\tat org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:103)\n\tat org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:250)\n\tat org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:110)\n\tat org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)\n\tat org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:105)\n\tat ch.vd.dse.sesa.adse.batch.common.util.AdseJobRunner.run(AdseJobRunner.java:69)\n\tat ch.vd.dse.sesa.adse.batch.common.util.AdseJobRunner.run(AdseJobRunner.java:100)\n\tat ch.vd.dse.sesa.adse.batch.procofiev.export.Main.main(Main.java:33)\nCaused by: java.io.IOException: Stream closed\n\tat sun.nio.cs.StreamEncoder.ensureOpen(Unknown Source)\n\tat sun.nio.cs.StreamEncoder.write(Unknown Source)\n\tat sun.nio.cs.StreamEncoder.write(Unknown Source)\n\tat java.io.Writer.write(Unknown Source)\n\tat org.springframework.batch.support.transaction.TransactionAwareBufferedWriter$1.afterCompletion(TransactionAwareBufferedWriter.java:67)\n\t... 26 more\n```\n\nI think this is a bug. Wierdly, the files are as follows:\n\nout.1:\n\n```\nfile header\nfoo1\nfoo2\n```\n\nout.2:\n\n```\nfile footer\n```\n\nIf I have two lines in the input file, everything works correctly, but more than two does not work. If I change the commit-interval to 200, then I get three lines in one file, which is not the behaviour wanted.\n\n\n---\n\n**Affects:** 2.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/683b4e7caacdaa2a7d556a7ab5ad051739ecc501\n", "url": "https://github.com/spring-projects/spring-batch/issues/2111", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2009-11-26 00:55:16", "closed": "2009-11-26 19:10:53", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "OraclePagingQueryProvider generates wrong queries for pages [BATCH-1453]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1453](https://jira.spring.io/browse/BATCH-1453?redirect=false)** and commented\n\nOraclePagingQueryProvider generates wrong queries for pages.  It should use a sub select to select the whole range first, e.g. `SELECT * FROM (SELECT ... WHERE ...) WHERE ROWNUM<=100`.\n\n\n---\n\n**Affects:** 2.0.4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/f5e515242a665affd97e0be31dbc83c6aaea91cb, https://github.com/spring-projects/spring-batch/commit/6d59d6fc2aaa4c0fc2f933de777a284268ed97a8\n", "url": "https://github.com/spring-projects/spring-batch/issues/2110", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2009-11-26 03:39:26", "closed": "2019-01-29 08:38:38", "commits": {}, "ttf": 3351.0002777777777, "commitsDetails": []}, {"title": "Components that create application contexts should look for *Aware in the infrastructure beans it copies down to the child context [BATCH-1473]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1473](https://jira.spring.io/browse/BATCH-1473?redirect=false)** and commented\n\nWas: ClassPathXmlJobLoader should look for *Aware in the infrastructure beans it copies down to the child context, otherwise they will look in the wrong place for their beans etc.\n\n\n---\n\n**Affects:** 2.1.0.M4\n", "url": "https://github.com/spring-projects/spring-batch/issues/2109", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2009-12-31 03:29:04", "closed": "2010-01-03 18:33:44", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "Filter counts too high when write skips happen [BATCH-1476]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1476](https://jira.spring.io/browse/BATCH-1476?redirect=false)** and commented\n\nFilter counts look too high when write skips happen\n\n\n---\n\n**Affects:** 2.1.0.M4\n", "url": "https://github.com/spring-projects/spring-batch/issues/2108", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-01-03 19:33:47", "closed": "2010-01-03 20:18:08", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Allow excludes (as well as includes) in retryable exceptions [BATCH-1477]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1477](https://jira.spring.io/browse/BATCH-1477?redirect=false)** and commented\n\nAllow excludes (as well as includes) in retryable exceptions\n\n\n---\n\n**Affects:** 2.1.0.M4\n", "url": "https://github.com/spring-projects/spring-batch/issues/2107", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-01-04 03:09:01", "closed": "2010-01-04 03:09:26", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "SaveState default value wrong in reference guide [BATCH-1482]", "body": "**[S\u00e9bastien G\u00e9rard](https://jira.spring.io/secure/ViewProfile.jspa?name=sebge2)** opened **[BATCH-1482](https://jira.spring.io/browse/BATCH-1482?redirect=false)** and commented\n\nThe default value of saveState (data base item stream readers) is not false (according to the documentation), but true (written in code files).\n\nhttp://static.springsource.org/spring-batch/reference/html/readersAndWriters.html#itemReader\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/e8c8f21522186f2d8503ad9488c92853cd8061f6\n", "url": "https://github.com/spring-projects/spring-batch/issues/2102", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2010-01-06 20:07:16", "closed": "2010-01-06 20:17:33", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Could not customize grid-size element [BATCH-1489]", "body": "**[St\u00e9phane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[BATCH-1489](https://jira.spring.io/browse/BATCH-1489?redirect=false)** and commented\n\nI am trying to create a simple partitioner implementation and my grid size is always 6 no matter what. I realized that it was the default value and that my configuration was not taken into account.\n\nMy config is based on the jdbcPartitionJob in the samples. Something like\n\n```xml\n<step id=\"partitionStep\" xmlns=\"http://www.springframework.org/schema/batch\">\n    <partition step=\"mainStep\" partitioner=\"partitioner\">\n        <handler grid-size=\"10\" task-executor=\"myTaskExecutor\"/>\n    </partition>\n</step>\n```\n\nAccording to the AbstractStepParser, it expects the grid-size on the partition element and not the handler element. Unfortunately, setting that value on the partition violates the schema.\n\nIt's probably a bad copy/paste since this code is surrounded by `if (handlerElement != null) {` :)\n\n\n---\n\n**Affects:** 2.1.0.RC1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2095", "user": "spring-issuemaster", "labels": ["in: core", "in: samples", "type: bug"], "created": "2010-01-18 02:59:16", "closed": "2010-05-27 18:54:24", "commits": {}, "ttf": 129.00027777777777, "commitsDetails": []}, {"title": "StaxEventItemWriter outputs invalid xml if step handling is failed and retried when handling the first chunk of data [BATCH-1490]", "body": "**[Esa Sepp\u00e4l\u00e4](https://jira.spring.io/secure/ViewProfile.jspa?name=_es)** opened **[BATCH-1490](https://jira.spring.io/browse/BATCH-1490?redirect=false)** and commented\n\nWhen reader fails handling the data of the first chunk defined by step commitInterval and the step is retried the writer starts the writing from wrong place in xml output file. The JUnit testcase to repeat the problem can be found from the Spring Batch forum post (http://forum.springsource.org/showthread.php?t=71239).\n\n\n---\n\n**Affects:** 2.1.0.RC1\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=71239\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/7c19e7aef36cc3ab1f49e0b1d755dbae0065b1b2\n", "url": "https://github.com/spring-projects/spring-batch/issues/2094", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2010-01-18 17:59:38", "closed": "2010-01-18 20:08:01", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Step execution context is not refreshed in memory [BATCH-1492]", "body": "**[Michal Mikula](https://jira.spring.io/secure/ViewProfile.jspa?name=mmikula)** opened **[BATCH-1492](https://jira.spring.io/browse/BATCH-1492?redirect=false)** and commented\n\nIn case there is an error while writing item, DB transaction would need to be rolled back. DB transaction is rolled back, but step execution context is not refreshed.\n\nThis may cause inconsistence when context contains item processing related data - f.e. context may contain information about written records, but no records are written after DB rollback execution. The incorrect information may be used accidentally later on. (Even restart scenario would not be working properly if it relies on context information.)\n\nShort log of DB statements:\nstatement|INSERT...  DB statement of item 1 in chunk - item successfully written\nstatement| INSERT...  DB statement of item 2 in chunk - statement successfully executed, context is modified, but exception is thrown later on in writer\nrollback|the exception causes rollback, java instance context still contains incorrect information\nstatement| DB statement of item 1 in chunk - item successfully written - BUT context contains incorrect information about item which was not processed correctly\nstatement| UPDATE BATCH_STEP_EXECUTION_CONTEXT SET ... - incorrect information in context is persisted\ncommit| commit\n\n\n---\n\n**Affects:** 2.0.4\n", "url": "https://github.com/spring-projects/spring-batch/issues/2089", "user": "spring-issuemaster", "labels": ["status: invalid", "type: bug"], "created": "2010-01-25 20:51:52", "closed": "2010-01-26 02:30:07", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "FetchSize not accessible in HibernateCursorItemReader [BATCH-1494]", "body": "**[Force Majeure](https://jira.spring.io/secure/ViewProfile.jspa?name=force.majeure81)** opened **[BATCH-1494](https://jira.spring.io/browse/BATCH-1494?redirect=false)** and commented\n\nIn 2.1.0.RC1, 'setFetchSize' is no longer an accessible property on 'HibernateCursorItemReader'.  Appears to now be a private variable (defaulting to 0) encapsulated on 'HibernateItemReaderHelper'.\n\n\n---\n\n**Affects:** 2.1.0.RC1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/5d5ce07c8aae13ddb16424af36e23ef0f8a22d48\n", "url": "https://github.com/spring-projects/spring-batch/issues/2088", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2010-01-27 01:27:41", "closed": "2010-01-27 21:36:03", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "SqlServerPagingQueryProvider should use an alias for the inner query in a jump-to-item query [BATCH-1497]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1497](https://jira.spring.io/browse/BATCH-1497?redirect=false)** and commented\n\n\n---\n\n**Affects:** 2.0.4, 2.1.0.RC1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/96e6286beb9de25a32a935982c6d987a29da48ac\n", "url": "https://github.com/spring-projects/spring-batch/issues/2086", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: duplicate", "type: bug"], "created": "2010-01-29 18:22:06", "closed": "2019-01-29 08:38:51", "commits": {}, "ttf": 3286.0002777777777, "commitsDetails": []}, {"title": "JdbcPagingItemReader does not apply parameter values correctly on restart [BATCH-1498]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1498](https://jira.spring.io/browse/BATCH-1498?redirect=false)** and commented\n\nJdbcPagingItemReader does not apply parameter values correctly on restart\n\n\n---\n\n**Affects:** 2.1.0.RC1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/a699c5c4bd96eec93f59ac107a7af432ab4534cc, https://github.com/spring-projects/spring-batch/commit/a71c4b0ad0e4c0dcb558cc3179d668f9546f9cf7\n", "url": "https://github.com/spring-projects/spring-batch/issues/2085", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-01-31 04:11:15", "closed": "2010-01-31 04:26:21", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "SqlServerPagingQueryProvider needs an alias in the jump to subquery [BATCH-1499]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1499](https://jira.spring.io/browse/BATCH-1499?redirect=false)** and commented\n\nSqlServerPagingQueryProvider needs an alias in the jump to subquery.  Derby already has one; maybe Sybase needs it (someone will have to tell us if so).\n\n\n---\n\n**Affects:** 2.0.4, 2.1.0.M4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/96e6286beb9de25a32a935982c6d987a29da48ac\n", "url": "https://github.com/spring-projects/spring-batch/issues/2084", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-01-31 04:38:57", "closed": "2010-01-31 04:41:09", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "SqlServerPagingQueryProvider needs an alias in the jump to subquery [BATCH-1500]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1500](https://jira.spring.io/browse/BATCH-1500?redirect=false)** and commented\n\nCloned from: [BATCH-1499](https://jira.spring.io/browse/BATCH-1499): SqlServerPagingQueryProvider needs an alias in the jump to subquery\nhttp://jira.springframework.org/browse/BATCH-1499\n\nDuplicate for 2.0.x branch.\n\n\n---\n\n**Affects:** 2.0.4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/4f0bfe4d1239f607054d822556af2a3c34b98180\n", "url": "https://github.com/spring-projects/spring-batch/issues/2083", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-01-31 04:40:28", "closed": "2019-01-29 08:42:11", "commits": {}, "ttf": 3285.0002777777777, "commitsDetails": []}, {"title": "JdbcPagingItemReader failing with order key other than first column in select [BATCH-1501]", "body": "**[S\u00e9bastien G\u00e9rard](https://jira.spring.io/secure/ViewProfile.jspa?name=sebge2)** opened **[BATCH-1501](https://jira.spring.io/browse/BATCH-1501?redirect=false)** and commented\n\nWhen I made tests on JdbcPagingItemReader, I face the following problems: I throws an exception while I process an item returned by JdbcPagingItemReader. The jobs is in failure. When I restart the job, JdbcPagingItemReader becomes unstable and infinitely returns objects (objects rightly extracted from the database).\n\nThis problems appears when I sort items by something else than the identifier (the account balance for example).\n\n```\n\t<bean id=\"queryProvider\" class=\"org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean\" scope=\"step\">\n\t\t<property name=\"dataSource\" ref=\"dataSource\" />\n\t\t<property name=\"selectClause\" value=\"select OBJECTID, VERSION, ACCOUNTID, BALANCE\" />\n\t\t<property name=\"fromClause\" value=\"from Account\" />\n\t\t<property name=\"whereClause\" value=\"#{jobParameters[query.where]}\" />\n\t\t<property name=\"sortKey\" value=\"Balance\" />\n\t</bean>\t\n\n\t<bean id=\"jdbcPagingItemReader\"\n\t\tclass=\"org.springframework.batch.item.database.JdbcPagingItemReader\" scope=\"step\">\n\t\t<property name=\"dataSource\" ref=\"dataSource\" />\n\t\t<property name=\"queryProvider\" ref=\"queryProvider\" />\n\t\t<property name=\"rowMapper\">\n\t\t\t<bean class=\"com.bsb.sf.incubator.batch.model.AccountRowMapper\" />\n\t\t</property>\n\t\t<property name=\"pageSize\" value=\"5\"/>\t\t\t\t\n\t\t<property name=\"saveState\" value=\"true\" />\n\t</bean>\n```\n\n\n\n---\n\n**Affects:** 2.1.0.M4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/164b3221738a4b2f26d3821154f7f939d7a1b8d7\n", "url": "https://github.com/spring-projects/spring-batch/issues/2082", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-01-31 20:41:13", "closed": "2010-02-03 20:18:33", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "HibernatePagingItemReader doesn't close sessions [BATCH-1502]", "body": "**[Force Majeure](https://jira.spring.io/secure/ViewProfile.jspa?name=force.majeure81)** opened **[BATCH-1502](https://jira.spring.io/browse/BATCH-1502?redirect=false)** and commented\n\nHibernatePagingItemReader is exhausting DB connections by never closing sessions.\n\nIt appears to open a new session for each chunk in 'createQuery', overwriting the previous in 'statefulSession', but never closes it.\n\n\n---\n\n**Affects:** 2.1.0.RC1\n\n**Attachments:**\n- [example-job.xml](https://jira.spring.io/secure/attachment/16131/example-job.xml) (_1.11 kB_)\n- [job-context.xml](https://jira.spring.io/secure/attachment/16132/job-context.xml) (_1.80 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/b5abf1f352cfd1e36e21b960746b54616526276c\n", "url": "https://github.com/spring-projects/spring-batch/issues/2081", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2010-02-01 00:25:24", "closed": "2010-02-02 08:03:37", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "All threads hangs up when a DB exception occurs in job while using SimpleAsyncTaskExecutor [BATCH-1504]", "body": "**[Praveen Kumar Battu](https://jira.spring.io/secure/ViewProfile.jspa?name=praveen)** opened **[BATCH-1504](https://jira.spring.io/browse/BATCH-1504?redirect=false)** and commented\n\nHi,\n\nI am writing a simple batch application which reads from the xml file and writes to the database. It works fine on a single threaded model(i.e., if i don't add a task-executor to chunk processor) and when i change the table name in db it throw the exception and system terminates.\n\nwhen I add a SimpleAsyncTaskExecutor as the task-executor to the chunk processor system works fine in the normal conditions, but when i rename the table name to test a exceptional case on that particular thread ends all the other start threads go in a wait state.\n\nI am attaching the entire eclipse project and the snapshot of the Thread Dump when the system got hang up(Thread_Dump.html).\n\nThanks\n\n\n---\n\n**Affects:** 2.0.3\n\n**Attachments:**\n- [Project.zip](https://jira.spring.io/secure/attachment/16135/Project.zip) (_6.02 MB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2080", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2010-02-02 01:42:09", "closed": "2010-02-27 00:02:33", "commits": {}, "ttf": 24.00027777777778, "commitsDetails": []}, {"title": "JobRepository configuration sample uses incorrect attribute names [BATCH-1505]", "body": "**[Erik Granse](https://jira.spring.io/secure/ViewProfile.jspa?name=ickster)** opened **[BATCH-1505](https://jira.spring.io/browse/BATCH-1505?redirect=false)** and commented\n\nConfiguration sample in section 4.2 specifies the dataSource and transactionManager attributes of the jobRepository element incorrectly.\n\nThe sample displays them as 'dataSource' and 'transactionManager'; they should be 'data-source' and 'transaction-manager' respectively.\n\n\n---\n\n**Affects:** 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.1.0.M1, 2.1.0.M2, 2.1.0.M3, 2.1.0.M4, 2.1.0.RC1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/5ed6f03756602e2d80a0e38aac6e43ff89605a89\n", "url": "https://github.com/spring-projects/spring-batch/issues/2079", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2010-02-03 06:32:05", "closed": "2010-02-03 18:08:35", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "problem when using refcursor in StoredProcedureItemReader [BATCH-1506]", "body": "**[Rino Ong](https://jira.spring.io/secure/ViewProfile.jspa?name=rino)** opened **[BATCH-1506](https://jira.spring.io/browse/BATCH-1506?redirect=false)** and commented\n\nWhen using the StoredProcedureItemReader, as I understand it, in order to use a refcursor, the \"refCursorPosition\" property must be set to a value greater than zero -- pointing to the position of the declared parameter that is intended to be a ref cursor.  However, when I set the said property to 3 (i had 2 IN parameters and 1 OUT parameter), an exception is thrown saying:\n\n\"refCursorPosition specified as 3 but there are only 3 parameters defined\"\n\nSame exception is thrown if I specify \"2\" and move my out parameter as the 2nd parameter -- this time saying:\n\n\"refCursorPosition specified as 2 but there are only 3 parameters defined\"\n\nLooking at the code, it looks like the culprit is this assert statement in the openCursor method:\n\n    Assert.state(refCursorPosition == 0 || refCursorPosition > parameters.length, \n    \t\t\"refCursorPosition specified as \" + refCursorPosition + \" but there are only \" + \n    \t\tparameters.length + \" parameters defined.\");\n\nThe 2nd condition should have been:  refCursorPosition <= parameters.length\n\n\n---\n\n**Affects:** 2.1.0.RC1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/8f70ed8a31dc108204baabbc92026c5a0ee36f99\n", "url": "https://github.com/spring-projects/spring-batch/issues/2078", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2010-02-03 08:19:41", "closed": "2010-02-03 14:28:12", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "FlowJob.getStep() only looks at state names, not step names [BATCH-1507]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1507](https://jira.spring.io/browse/BATCH-1507?redirect=false)** and commented\n\nFlowJob.getStep() only looks at state names, not step names, so anyone using the StepLocator interface is in for a surprise.  The state name happens to be the same as the step name in the existing uint tests (irony), but when created by the XML namespace parsers they are different.\n\n\n---\n\n**Affects:** 2.1.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2076", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-02-07 20:20:18", "closed": "2010-02-07 20:38:02", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "List of stepnames incomplete for nested flow job [BATCH-1510]", "body": "**[Harald Gro\u00df](https://jira.spring.io/secure/ViewProfile.jspa?name=grossh)** opened **[BATCH-1510](https://jira.spring.io/browse/BATCH-1510?redirect=false)** and commented\n\nThe function  getStepNames on a job returns only those step names from a FlowJob, whose steps are defined directly within the flow.\nBut if the job contains nested flows the list of stepnames is incomplete. Only those of the outermost flow (the job itself) are returned but none of the nested flow(s).\nIf the job does only reference sub flows the list will be empty at all.\nThe function should return the complete list of steps, including nested flows within subflows (recursively)\n\n\n---\n\n**Affects:** 2.1.0\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=84577\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/466449250917940d84ccb60c87d7df5a0ce41dce\n", "url": "https://github.com/spring-projects/spring-batch/issues/2072", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2010-02-11 18:02:13", "closed": "2010-02-28 22:54:36", "commits": {}, "ttf": 17.00027777777778, "commitsDetails": []}, {"title": "JobExecution marked COMPLETE on failure to save step execution metadata [BATCH-1503]", "body": "**[Nitty](https://jira.spring.io/secure/ViewProfile.jspa?name=nitty)** opened **[BATCH-1503](https://jira.spring.io/browse/BATCH-1503?redirect=false)** and commented\n\nException occurs in the writer, there's a failure in persisting step context- the job status is set to COMPLETE instead of FAILED.\n\nSteps to create\n1. Change the batch schema EXIT_MESSAGE VARCHAR(2500) to EXIT_MESSAGE VARCHAR(25).\n2. Force the writer to throw some exception.\n3. Error occurs while persisting the step context but the job context gets updated to COMPLETE.\n\n\n\n---\n\n**Affects:** 2.0.4, 2.1.0.RC1\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=83827\n\n**Attachments:**\n- [hello_batch.zip](https://jira.spring.io/secure/attachment/16168/hello_batch.zip) (_10.72 kB_)\n- [hello_batch.zipx](https://jira.spring.io/secure/attachment/16149/hello_batch.zipx) (_10.44 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/025828fa4cbb8a82929a3d8b1a46d6063038f0ea\n", "url": "https://github.com/spring-projects/spring-batch/issues/2070", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-02-01 00:52:14", "closed": "2010-02-10 10:27:32", "commits": {}, "ttf": 9.000277777777777, "commitsDetails": []}, {"title": "HibernateItemReaderHelper requires queryProvider field to be an instance of AbstractHibernateQueryProvider [BATCH-1513]", "body": "**[Alexander Tokarev](https://jira.spring.io/secure/ViewProfile.jspa?name=alext)** opened **[BATCH-1513](https://jira.spring.io/browse/BATCH-1513?redirect=false)** and commented\n\nHibernateItemReaderHelper.afterPropertiesSet() method contains the following code:\n\nAssert.state(queryProvider instanceof AbstractHibernateQueryProvider,\n\"Hibernate query provider must be set\");\n\nI think this is not needed as the queryProvider field is not cast to AbstractHibernateQueryProvider within HibernateItemReaderHelper.\nAlso if query provider defined as a scoped bean:\n\\<bean id=\"myQueryProvider\" class=\"MyQueryProvider\" scope=\"step\" />\nproxy is not an instance of AbstractHibernateQueryProvider even though MyQueryProvider extends AbstractHibernateQueryProvider\n\n\n---\n\n**Affects:** 2.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/598301de8d474a8072f9c855a655451c9e17ee1c\n", "url": "https://github.com/spring-projects/spring-batch/issues/2069", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2010-02-14 21:52:52", "closed": "2010-02-26 23:49:59", "commits": {}, "ttf": 12.000277777777777, "commitsDetails": []}, {"title": "tablePrefix in AbstractJdbcBatchMetadataDao cannot be set [BATCH-1516]", "body": "**[Lorenz Beyeler](https://jira.spring.io/secure/ViewProfile.jspa?name=lorenzo)** opened **[BATCH-1516](https://jira.spring.io/browse/BATCH-1516?redirect=false)** and commented\n\nIn some cases, e.g. when using Spring-Batch-Admin or the sample jUnit-test DatabaseShutdownFunctionalTests,\nthe tablePrefix cannot be set properly.\n\nSpring-Batch then uses the DB2 default prefix (username), which is not correct.\nIn other jUnit-Tests, the tablePrefix can be set with a property in the jobRepository-Bean.\n\nFor now, I've changed the class AbstractJdbcBatchMetadataDao to use a tablePrefix like DB2UTST.BATCH_, but\nI think there should be another way to do this.\n\nThanks a lot\nLorenzo\n\n\n---\n\n**Affects:** 2.1.0.RC1\n\n**Reference URL:** http://forum.springsource.org/showthread.php?p=285604#post285604\n\n**Attachments:**\n- [spring-batch-stacktrace.txt](https://jira.spring.io/secure/attachment/16238/spring-batch-stacktrace.txt) (_2.59 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2066", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2010-02-24 19:00:24", "closed": "2010-03-02 22:12:00", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "Step Scope problem in TaskletStep [BATCH-1521]", "body": "**[Kai Hemme-Unger](https://jira.spring.io/secure/ViewProfile.jspa?name=kai_77)** opened **[BATCH-1521](https://jira.spring.io/browse/BATCH-1521?redirect=false)** and commented\n\n\\<snip/> (removed cloned description of different issue [BATCH-380](https://jira.spring.io/browse/BATCH-380)).\n\n\n---\n\n**Affects:** 1.0.0.m4\n", "url": "https://github.com/spring-projects/spring-batch/issues/2061", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2010-02-28 21:30:34", "closed": "2010-03-02 19:02:34", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Intermittent failure of FaultTolerantStepFactoryBean in multi-threaded test [BATCH-1522]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1522](https://jira.spring.io/browse/BATCH-1522?redirect=false)** and commented\n\nIntermittent failure of FaultTolerantStepFactoryBean in multi-threaded test.  Could be nothing (because the test FaultTolerantStepFactoryBeanRollbackTests uses a MapJobRepositoryFactoryBean).\n\n\n---\n\n**Affects:** 2.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/cfca1a9296ac9094c80aeacb2afaf146cb344dee, https://github.com/spring-projects/spring-batch/commit/4aaa88b76de2c8951aa76645e142514398ea6d12, https://github.com/spring-projects/spring-batch/commit/9f37db9f394a5b91a895ae62cc01a0f3e91f463b\n", "url": "https://github.com/spring-projects/spring-batch/issues/2059", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-03-01 00:07:36", "closed": "2010-03-02 22:48:03", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "ExitStatus description can be null when re-hyrated from  Oracle [BATCH-1525]", "body": "**[St\u00e9phane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[BATCH-1525](https://jira.spring.io/browse/BATCH-1525?redirect=false)** and commented\n\nThe equals implementation (or the toString) of ExitStatus may not work legitimately in all cases.\n\nIn Oracle, an empty String is considered as null and fails our build because we assert the exit status matched the expected (that is, a given exit code and an empty exit description).\n\nWe got this\n\njava.lang.AssertionError: expected:<exitCode=COMPLETED WITH ERROR;exitDescription=> but was:<exitCode=COMPLETED WITH ERROR;exitDescription=null>\n\nIt's not a big deal and we can deal with that in our test utilities but if the equals supported that use case, that would be great since we don't really want to put a 'null' exit description. Besides the default constructor does this\n\npublic ExitStatus(String exitCode) {\nthis(exitCode, \"\");\n}\n\n\n\n---\n\n**Affects:** 2.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/14f39abcbd8235c500565b252a11354f90745928\n", "url": "https://github.com/spring-projects/spring-batch/issues/2056", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2010-03-01 20:24:59", "closed": "2010-03-02 03:18:06", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Memory leak in web deployments because ThreadLocal is not nulled out in ChunkMonitor [BATCH-1526]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1526](https://jira.spring.io/browse/BATCH-1526?redirect=false)** and commented\n\nThe Tomcat leak detection in 6.0.24 caught this one: it's a tiny leak but the thread local in ChunkMonitor is not nulled out so re-deployment of a web application can result in a memory leak.  Tomcat fixes it (from 6.0.24) so it's probably not a big deal for existing users.\n\n\n---\n\n**Affects:** 2.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/03b8880cfca549f94ec541f4c83d24719a65feb5\n", "url": "https://github.com/spring-projects/spring-batch/issues/2055", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-03-04 00:38:03", "closed": "2010-03-04 00:59:46", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Namespace context partition element requires bean with name \"transactionManager\" [BATCH-1528]", "body": "**[Michael Pilone](https://jira.spring.io/secure/ViewProfile.jspa?name=mpilone)** opened **[BATCH-1528](https://jira.spring.io/browse/BATCH-1528?redirect=false)** and commented\n\nWhen trying to use the batch:partition context element, I get the error:\nCaused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'transactionManager' is defined\n\nLooking at the code, it looks like a problem in CoreNamespacePostProcessor.injectDefaults at line 136. The processor checks for a transactionManager and if not found, uses the default. However the AbstractStepParser.parsePartition method never looks for or sets a transaction manager. This results in a lookup to the default transaction manager which fails.\n\nThe bean configuration is:\n<batch:job id=\"simpleJob\" job-repository=\"jobRepository\">\n<batch:step id=\"step1.master\">\n<batch:partition step=\"step1\" partitioner=\"partitioner\">\n<batch:handler grid-size=\"10\" task-executor=\"keyValueExtractionTaskExecutor\"/>\n</batch:partition>\n</batch:step>\n</batch:job>\n\n    <batch:step id=\"step1\">\n        <batch:tasklet transaction-manager=\"catalogTransactionManager\">\n            <batch:chunk reader=\"granuleStaleItemReader\" writer=\"keyValueItemWriter\"\n                commit-interval=\"20\" processor=\"granuleKeyValueExtractionProcessor\"/>\n        </batch:tasklet>\n    </batch:step>\n\nThe stack trace is attached.\n\n\n---\n\n**Affects:** 2.1.0\n\n**Attachments:**\n- [stacktrace.txt](https://jira.spring.io/secure/attachment/16264/stacktrace.txt) (_11.11 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2054", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2010-03-08 12:01:38", "closed": "2010-03-09 18:31:29", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "API change and is not reflected in API and documentation examples [BATCH-1533]", "body": "**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[BATCH-1533](https://jira.spring.io/browse/BATCH-1533?redirect=false)** and commented\n\nThe variable name changed from itemProcessors to delegates through the versions from \"spring-batch-2.0.1.RELEASE\" to \"spring-batch-2.1.0.RELEASE\" for the class\norg\\springframework\\batch\\item\\support\\CompositeItemProcessor<I, O>\nAPI documentation and documentation sample not updated\n\nFor the sections 8.6. Declarative Iteration and  9.5. Declarative Retry, about\nits pointcut expressions both are wrong, because \"* com...**\" has three points and must be two \"** com..*\"\n\n\n\n---\n\n**Affects:** 2.1.0\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=86134\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/2468a51eab17a0ec42f4c16b01cdc78ec4b73606\n", "url": "https://github.com/spring-projects/spring-batch/issues/2049", "user": "spring-issuemaster", "labels": ["in: documentation", "in: samples", "type: bug"], "created": "2010-03-14 17:57:35", "closed": "2010-03-22 04:07:39", "commits": {}, "ttf": 7.000277777777778, "commitsDetails": []}, {"title": "composite item writer does not honour the item stream interface [BATCH-1539]", "body": "**[St\u00e9phane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[BATCH-1539](https://jira.spring.io/browse/BATCH-1539?redirect=false)** and commented\n\nIf you use a composite item writer with a writer that implements the iteam stream interface, you get a org.springframework.batch.item.WriterNotOpenException: Writer must be open before it can be written to\n\n\n---\n\n**Affects:** 2.1.0\n\n**Issue Links:**\n- [BATCH-836](https://jira.spring.io/browse/BATCH-836) CompositeItemWriter should also implement ItemStream\n (_**\"duplicates\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2043", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2010-03-24 22:56:18", "closed": "2010-09-07 23:49:05", "commits": {}, "ttf": 167.00027777777777, "commitsDetails": []}, {"title": "Typo in the user guide: \"directlory\" [BATCH-1540]", "body": "**[St\u00e9phane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[BATCH-1540](https://jira.spring.io/browse/BATCH-1540?redirect=false)** and commented\n\nSection 7.4.3. Binding Input Data to Steps has a typo\n\ndirectlory\n\n\n---\n\n**Affects:** 2.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/a390ff1efd7c400a4942c21ef06c28d0f3f3fc23\n", "url": "https://github.com/spring-projects/spring-batch/issues/2042", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2010-03-25 00:53:02", "closed": "2010-03-25 01:05:10", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Thread safety in JobExecution and StepExecution collections [BATCH-1542]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1542](https://jira.spring.io/browse/BATCH-1542?redirect=false)** and commented\n\nThe collections inside JobExecution and StepExecution should have copy-on-write concurrency protection.  The only place we are likely to see the effect is in really fast step and job executions using the MapJobRepository (which is only thread safe since [BATCH-1541](https://jira.spring.io/browse/BATCH-1541) anyway).\n\n\n---\n\n**Affects:** 2.0.0, 2.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/8ffebc3e66933da1341580fdd90eb0245fd90e37\n", "url": "https://github.com/spring-projects/spring-batch/issues/2040", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-03-27 19:22:32", "closed": "2010-03-27 19:23:05", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "OrderedComposite cannot register two items with the same order [BATCH-1543]", "body": "**[St\u00e9phane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[BATCH-1543](https://jira.spring.io/browse/BATCH-1543?redirect=false)** and commented\n\nWe have added a custom listener that extends StepListener and OrderedComposite is very handy to use when multiple listeners are involved. Unfortunately, it's not public.\n\nCan you make it public or part of the API?\n\n\n---\n\n**Affects:** 2.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/89f3cd7ac9b66f9f7d230f0bd65eb56aaae12301\n", "url": "https://github.com/spring-projects/spring-batch/issues/2039", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2010-03-30 01:18:47", "closed": "2010-06-23 20:33:12", "commits": {}, "ttf": 85.00027777777778, "commitsDetails": []}, {"title": "HibernateCursorItemReader does not fetch many-to-many collections [BATCH-1544]", "body": "**[J\u00e9r\u00f4me Van Der Linden](https://jira.spring.io/secure/ViewProfile.jspa?name=jeromevdl)** opened **[BATCH-1544](https://jira.spring.io/browse/BATCH-1544?redirect=false)** and commented\n\nI have a many-to-many relation between two objects :\n\n```\n@Entity\npublic class Project {\n\tprivate List<Viperson> managers;\n\n\t@ManyToMany(targetEntity = Viperson.class)\n\t@JoinTable(name = \"PRJMANAGER\", joinColumns = @JoinColumn(name = \"PROJECTID\", nullable = false), inverseJoinColumns = @JoinColumn(name = \"VIPID\", nullable = false))\n\tpublic List<Viperson> getManagers() {\n\t\treturn managers;\n\t}\n}\n```\n\n```\n@Entity\npublic class Viperson {\n\tprivate List<Project> projects;\n\n\t@ManyToMany(mappedBy = \"managers\", targetEntity = Project.class)\n\tpublic List<Project> getProjects() {\n\t\treturn projects;\n\t}\n}\n```\n\nUsing HibernateCursorItemReader does not set the managers field (it still null), even if I use FetchType.EAGER. This provoke a deletion of all the data in my join table when the writer do its job (in org.hibernate.event.def.OnUpdateVisitor#processCollection).\n\nI've tested in unit test the code used by hibernateCursorItemReader :\n\n```\nStatelessSession statelessSession = sessionFactory.openStatelessSession();\nScrollableResults cursor = statelessSession.createQuery(\"from com.myproject.model.Project\").scroll();\nObject[] data = null;\nif (cursor.next()) {\n\tdata = cursor.get();\n}\n```\n\nIndeed, the Project I get has a null managers field.\n\nAlthough using the following code give me some result (I have a PersistentBag object) :\ngetHibernateTemplate().find(\"from com.myproject.model.Project\").\n\nTested with Spring Batch 1.01 (but I have a look at uper versions, the code is nearly the same in the HibernateCursorItemReader), Spring 2.0.8, Hibernate 3.3.2.GA.\n\n\n---\n\n**Affects:** 1.0.1, 1.1.0, 1.1.1, 1.1.2, 1.1.3, 1.1.4, 2.0.0.M1, 2.0.0.M2, 2.0.0.M3, 2.0.0.M4, 2.0.0.RC1, 2.0.0.RC2, 2.0.0.RC3, 2.0.0, 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.1.0.M1, 2.1.0.M2, 2.1.0.M3, 2.1.0.M4, 2.1.0.RC1, 2.1.0\n\n**Attachments:**\n- [issue_spring_batch.jpg](https://jira.spring.io/secure/attachment/16358/issue_spring_batch.jpg) (_160.51 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2038", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2010-03-30 19:48:56", "closed": "2010-04-03 07:59:30", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "FlatFileItemWriter logs as JdbcBatchItemWriter [BATCH-1545]", "body": "**[Drew Repasky](https://jira.spring.io/secure/ViewProfile.jspa?name=bgsu_drew)** opened **[BATCH-1545](https://jira.spring.io/browse/BATCH-1545?redirect=false)** and commented\n\nUpdating your log configuration (log4j.properties) to see logs specifically from org.springframework.batch.item.file.FlatFileItemWriter does not work because that class incorrectly identifies itself as org.springframework.batch.item.database.JdbcBatchItemWriter.\n\nA patch is attached, which has been verified with a full maven build against the trunk.\n\n\n---\n\n**Affects:** 2.1.0\n\n**Attachments:**\n- [fix_bug_file_writer_logging.diff](https://jira.spring.io/secure/attachment/16371/fix_bug_file_writer_logging.diff) (_1.21 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/1a18a3dd7396453ab9f24bf975c03ced255e8907\n", "url": "https://github.com/spring-projects/spring-batch/issues/2037", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2010-04-03 02:29:31", "closed": "2010-04-03 03:09:39", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "ExecutionContextPromotionListener strict flag misinterpreted in listener code [BATCH-1547]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1547](https://jira.spring.io/browse/BATCH-1547?redirect=false)** and commented\n\nSee [BATCH-1309](https://jira.spring.io/browse/BATCH-1309) for the original issue.\n\n\n---\n\n**Affects:** 2.0.3\n\n**Attachments:**\n- [ExecutionContextPromotionListenerFix2.patch](https://jira.spring.io/secure/attachment/16374/ExecutionContextPromotionListenerFix2.patch) (_2.50 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/e38764797b02a84fc554c6130d183d07864be824\n", "url": "https://github.com/spring-projects/spring-batch/issues/2036", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-04-03 20:25:48", "closed": "2010-04-04 03:05:26", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Job not restarting on the line number expected in particular instances [BATCH-1549]", "body": "**[Sanjeevkumar](https://jira.spring.io/secure/ViewProfile.jspa?name=sanjeev.tarnal@gmail.com)** opened **[BATCH-1549](https://jira.spring.io/browse/BATCH-1549?redirect=false)** and commented\n\nI am encountering a strange problem during the job restart. This is happening in one of the strange scenarios and i am not able to figure out the root cause of the problem.\n\nI am reading from a flat file, processing it and inserting into database using the itemwriter. I am skipping the records irrespective of the exception thrown and the skip-limit has been set to 1000. The commit interval is set to 10.\n\nOnce the skip limit is reached the job is terminated. When i restart the job it is not starting at the point as expected. It starts two rows ahead from where it is expected to start from.\n\nFor example if the job terminates at row number 210. When I restart the job it is supposed to start reading from row 211. But it starts from row number 213. However if i set the commit interval to 1 it restarts from where it is expected to start from. This is happening only for this particular scenario and hence i am finding it difficult to isolate the problem.\n\nMore details are in the forum link provided above.\n\n\n---\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=87143\n\n**Attachments:**\n- [Record Count for failed and completed.jpg](https://jira.spring.io/secure/attachment/16389/Record+Count+for+failed+and+completed.jpg) (_39.36 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/2034", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-04-06 08:21:43", "closed": "2010-07-26 20:06:54", "commits": {}, "ttf": 111.00027777777778, "commitsDetails": []}, {"title": "Db2PagingQueryProvider needs an alias in the jump to subquery  [BATCH-1551]", "body": "**[Lorenz Beyeler](https://jira.spring.io/secure/ViewProfile.jspa?name=lorenzo)** opened **[BATCH-1551](https://jira.spring.io/browse/BATCH-1551?redirect=false)** and commented\n\nsame Problem as in [BATCH-1499](https://jira.spring.io/browse/BATCH-1499) but for DB2\n\n\n---\n\n**Affects:** 2.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/e42d50008b848fc8a07379e90738580a9683baf6\n", "url": "https://github.com/spring-projects/spring-batch/issues/2033", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2010-04-11 17:48:51", "closed": "2010-04-22 20:33:26", "commits": {}, "ttf": 11.000277777777777, "commitsDetails": []}, {"title": "Typo on Use Case page of website [BATCH-1552]", "body": "**[Matthew Sowders](https://jira.spring.io/secure/ViewProfile.jspa?name=matthewsowders)** opened **[BATCH-1552](https://jira.spring.io/browse/BATCH-1552?redirect=false)** and commented\n\nI found a typo on the spring batch website. http://static.springsource.org/spring-batch/cases/index.html\n\nScheduled Processing: Batch Jobs controlled by scheduler (e.g. start, stop, suspend, kill). Spring Batch does not intend to implement the scheduler concerns, but needs toprovide enough information that a scheduler can act appropriately.\n\ntoprovide is missing a space.\n\nHope this is helpful, keep up the great work.\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/83b2e759179553183313e8c81c0ff6e3e21b23e3\n", "url": "https://github.com/spring-projects/spring-batch/issues/2032", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2010-04-13 17:38:54", "closed": "2010-04-14 02:34:30", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "XStreamMarshaller does not support unmarshalling using SAX XMLReaders when using StaxEventItemReader [BATCH-1563]", "body": "**[Stijn Vranckx](https://jira.spring.io/secure/ViewProfile.jspa?name=bassegio14)** opened **[BATCH-1563](https://jira.spring.io/browse/BATCH-1563?redirect=false)** and commented\n\nUsing the following Spring Release :\n\nSpring Core 3.0.1\nSpring Batch 2.1.1 or 2.0.2\nSpring XML 1.5.9\n\nRunning the following code taken from the Spring Batch Manual :\n\nStaxEventItemReader\\<CustomerCredit> xmlStaxEventItemReader = new StaxEventItemReader();\nResource resource = new FileSystemResource(\"c:\\\\test.xml\");\n\n    \tMap aliases = new HashMap();\n    \taliases.put(\"customer\",\"org.springframework.batch.sample.domain.CustomerCredit\");\n    \taliases.put(\"price\",\"java.math.BigDecimal\");\n    \taliases.put(\"name\",\"java.lang.String\");\n    \tXStreamMarshaller marshaller = new XStreamMarshaller();\n    \tmarshaller.setAliases(aliases);\n    \txmlStaxEventItemReader.setUnmarshaller(marshaller);\n    \txmlStaxEventItemReader.setResource(resource);\n    \txmlStaxEventItemReader.setFragmentRootElementName(\"customer\");\n    \txmlStaxEventItemReader.open(new ExecutionContext());\n    \n    \tboolean hasNext = true;\n    \n    \tCustomerCredit credit = null;\n    \n    \twhile (hasNext) {\n    \t    credit = xmlStaxEventItemReader.read();\n    \t    if (credit == null) {\n    \t        hasNext = false;\n    \t    }\n    \t    else {\n    \t        System.out.println(credit);\n    \t    }\n\nGives the following error :\n\nException in thread \"main\" java.lang.UnsupportedOperationException: XStreamMarshaller does not support unmarshalling using SAX XMLReaders\nat org.springframework.oxm.xstream.XStreamMarshaller.unmarshalSaxReader(XStreamMarshaller.java:460)\nat org.springframework.oxm.support.AbstractMarshaller.unmarshalSaxSource(AbstractMarshaller.java:341)\nat org.springframework.oxm.support.AbstractMarshaller.unmarshal(AbstractMarshaller.java:131)\nat org.springframework.batch.item.xml.StaxEventItemReader.doRead(StaxEventItemReader.java:222)\nat org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:85)\n\nThis wasn't a problem using the same version of Spring Batch together with Spring WS 1.5.9 and Spring Core 2.5.6\n\n\n---\n\n**Affects:** 2.0.2, 2.1.1\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=87640\n", "url": "https://github.com/spring-projects/spring-batch/issues/2023", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2010-04-28 18:19:41", "closed": "2010-06-23 20:40:26", "commits": {}, "ttf": 56.000277777777775, "commitsDetails": []}, {"title": "incorrect apachemq artifactId [BATCH-1564]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-1564](https://jira.spring.io/browse/BATCH-1564?redirect=false)** and commented\n\ninfrastructure-tests/pom.xml declares apachemq dependency with artifactId \"com.springsource.org.apache.activemq\" which cannot be resolved after fresh checkout from repository. Using \"apachemq-core\" instead works fine.\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/9d30389eceb8cb822d3f19d0455570088fdaab76\n", "url": "https://github.com/spring-projects/spring-batch/issues/2022", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-04-28 20:41:14", "closed": "2010-04-29 00:18:07", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Locking problem in taskletstep [BATCH-1565]", "body": "**[Jeroen van 't Hert](https://jira.spring.io/secure/ViewProfile.jspa?name=jvthert)** opened **[BATCH-1565](https://jira.spring.io/browse/BATCH-1565?redirect=false)** and commented\n\nOne of my unit tests hangs on a deadlock situation. My issue is identical to the one posted on the Spring forum.\n\nIt seems to be related to the chunksize. There is no problem as long as the entire batch can be processed in a single chunk. 2.1.0 works without issues.\n\nmain@1672, prio=5, in group 'main', status: 'WAIT'\nat sun.misc.Unsafe.park(Unsafe.java:-1)\nat java.util.concurrent.locks.LockSupport.park(LockSupport.java:173)\nat java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:758)\nat java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:916)\nat java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1228)\nat java.util.concurrent.Semaphore.acquire(Semaphore.java:297)\nat org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:372)\nat org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:128)\nat org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:261)\nat org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:76)\nat org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:367)\nat org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:214)\nat org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:143)\nat org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:247)\nat org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:196)\nat org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:135)\nat org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:61)\nat org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:60)\nat org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:144)\nat org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:124)\nat org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:135)\nat org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:281)\nat org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:120)\nat org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)\nat org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:114)\nat nl.schadegarant.exchange.batch.integration.PBIStepTests.testPBIStep(PBIStepTests.java:52)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-1)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)\nat java.lang.reflect.Method.invoke(Method.java:599)\nat org.springframework.test.context.junit4.SpringTestMethod.invoke(SpringTestMethod.java:160)\nat org.springframework.test.context.junit4.SpringMethodRoadie.runTestMethod(SpringMethodRoadie.java:233)\nat org.springframework.test.context.junit4.SpringMethodRoadie$RunBeforesThenTestThenAfters.run(SpringMethodRoadie.java:333)\nat org.springframework.test.context.junit4.SpringMethodRoadie.runWithRepetitions(SpringMethodRoadie.java:217)\nat org.springframework.test.context.junit4.SpringMethodRoadie.runTest(SpringMethodRoadie.java:197)\nat org.springframework.test.context.junit4.SpringMethodRoadie.run(SpringMethodRoadie.java:143)\nat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.invokeTestMethod(SpringJUnit4ClassRunner.java:160)\nat org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)\nat org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)\nat org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)\nat org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)\nat org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)\nat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:97)\nat org.junit.runner.JUnitCore.run(JUnitCore.java:130)\nat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:94)\nat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:192)\nat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:64)\n\n\n---\n\n**Affects:** 2.1.1\n\n**Reference URL:** http://forum.springsource.org/showthread.php?p=298410\n", "url": "https://github.com/spring-projects/spring-batch/issues/2021", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2010-05-11 20:39:51", "closed": "2010-06-15 22:14:15", "commits": {}, "ttf": 35.000277777777775, "commitsDetails": []}, {"title": "ExecutionContext.isDirty() is not very accurate [BATCH-1566]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1566](https://jira.spring.io/browse/BATCH-1566?redirect=false)** and commented\n\nA context is only dirty if a **new** value is put or an old one is removed, but the implementation sets dirty on all puts.\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/963142cfa837e5d766013510ea4063bce8167dd2\n", "url": "https://github.com/spring-projects/spring-batch/issues/2020", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2010-05-12 18:31:41", "closed": "2013-04-04 20:59:06", "commits": {}, "ttf": 1058.0002777777777, "commitsDetails": []}, {"title": "When step encounters error saving ExecutionContext it tries to stop the job but fails [BATCH-1567]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1567](https://jira.spring.io/browse/BATCH-1567?redirect=false)** and commented\n\nWhen step encounters error saving ExecutionContext it tries to stop the job but fails.  An error in the JobRepository is always fatal, so the step marks itself as status=UNKNOWN and sends a stop signal to the job.  But the latter is ignored and subsequent steps execute normally!\n\n\n---\n\n**Affects:** 2.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/ee79629415a87c15176e24e0f69de8d48d28fc74\n", "url": "https://github.com/spring-projects/spring-batch/issues/2019", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-05-13 18:38:43", "closed": "2010-05-13 18:58:46", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "MultiResourceItemReader.getCurrentResource cause java.lang.ArrayIndexOutOfBoundsException when .read() was not called [BATCH-1569]", "body": "**[Alessandro Gerlinger Romero](https://jira.spring.io/secure/ViewProfile.jspa?name=romgerale)** opened **[BATCH-1569](https://jira.spring.io/browse/BATCH-1569?redirect=false)** and commented\n\nOnly after first .read(), variable currentResource got a value greather or equal to zero(0). So if stream was openned, or not read yet, one activation on getCurrentResource method generates ArrayIndexOutOfBoundsException.\n\nBelow a proposed fix:\n\n    public Resource getCurrentResource() {\n    \tif (currentResource >= resources.length ) { //proposed: || currentResource  < 0\n    \t\treturn null;\n    \t}\n    \treturn resources[currentResource];\n    }\n\n\n\n---\n\n**Affects:** 2.1.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/3ba024d3764fa0f075150743eee31feffd88de66\n", "url": "https://github.com/spring-projects/spring-batch/issues/2017", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2010-05-17 05:42:14", "closed": "2010-05-17 22:12:56", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "PostgresPagingQueryProvider generateJumpToItemQuery generates bad SQL [BATCH-1571]", "body": "**[Eng](https://jira.spring.io/secure/ViewProfile.jspa?name=ergopro1)** opened **[BATCH-1571](https://jira.spring.io/browse/BATCH-1571?redirect=false)** and commented\n\nUsing the Spring Batch Admin (1.0.1.BUILD-SNAPSHOT), click EXECUTIONS, select NEXT page (the numbers of EXECUTIONS is exceeding 20) ,generate following error:\n\norg.springframework.jdbc.BadSqlGrammarException: StatementCallback; bad SQL grammar [SELECT E.JOB_EXECUTION_ID AS SORT_KEY FROM BATCH_JOB_EXECUTION E, BATCH_JOB_INSTANCE I WHERE E.JOB_INSTANCE_ID=I.JOB_INSTANCE_ID ORDER BY E.JOB_EXECUTION_ID DESC LIMIT 19 1]; nested exception is org.postgresql.util.PSQLException: ERROR: syntax error at or near \"1\"\n\nThe problem is due to the generated SQL based on the code below. I have suggested a minor fix for the problem.\n\nIn addition, I believe the offset value does not need to be minus one as Postgres will automatically get the start value for next page correctly. (unless you have another reason for it)\n\n\\<code>\n\tpublic String generateJumpToItemQuery(int itemIndex, int pageSize) {\n\t\tint page = itemIndex / pageSize;\n-->\t\tint offset = (page * pageSize) - 1;\n-->\t\toffset = offset\\<0 ? 0 : offset;\n\n-->\t\tString limitClause = new StringBuilder().append(\"LIMIT \").append(offset).append(\" 1\").toString();\nreturn SqlPagingQueryUtils.generateLimitJumpToQuery(this, limitClause);\n}\n\\</code>\n\nNote: debug variables:\nitemIndex = 20\npageSize = 20\npage = 1\noffset = 1\nlimitClause = LIMIT 19 1\n\nCode Fix suggestion:\nint offset = (page * pageSize);\nString limitClause = new StringBuilder().append(\"LIMIT \").append(pageSize).append(\" OFFSET \").append(offset).toString();\n\nThanks,\nEng\n\n\n---\n\n**Affects:** 2.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/90c63f71dcdff75a3283ce9401c102e61dcf50ae\n", "url": "https://github.com/spring-projects/spring-batch/issues/2015", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2010-05-18 14:15:25", "closed": "2010-05-18 21:09:06", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Step not failing on org.springframework.transaction.UnexpectedRollbackException [BATCH-1572]", "body": "**[Srinivas Arava](https://jira.spring.io/secure/ViewProfile.jspa?name=springilu)** opened **[BATCH-1572](https://jira.spring.io/browse/BATCH-1572?redirect=false)** and commented\n\nThe transaction is timing out for a read by the reader in a step due to a lock. The transaction manager marks the out come of the transaction to be rollback only. Once the lock is released and the reader returns  a org.springframework.transaction.UnexpectedRollbackException is thrown while updating the chunk to database. Batch is considering this exception to be a non fatal exception and is continuing with the next chunk just by logging the exception at a debug level. Instead ity should fail the step I guess.\n\nProblem : I am loosing all the records in that chunk.\n\nI changed the org.springframework.batch.core.step.item.SimpleRetryExceptionHandler.java's constructor like\n\npublic SimpleRetryExceptionHandler(RetryPolicy retryPolicy, ExceptionHandler exceptionHandler, Collection<Class<? extends Throwable>> fatalExceptionClasses) {\nthis.retryPolicy = retryPolicy;\nthis.exceptionHandler = exceptionHandler;\nfatalExceptionClasses.add(org.springframework.transaction.UnexpectedRollbackException.class);\nthis.fatalExceptionClassifier = new BinaryExceptionClassifier(fatalExceptionClasses);\n}\n\nand tested. Now it is failing the step.\n\n\n\n---\n\n**Affects:** 2.1.1\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=89000\n\n**Attachments:**\n- [test.zip](https://jira.spring.io/secure/attachment/16581/test.zip) (_1.68 MB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/6b139f796b294728eab7de3754eb851c74472dc7, https://github.com/spring-projects/spring-batch/commit/2ac38f678110d81463824c8f9072b4946ab76df9, https://github.com/spring-projects/spring-batch/commit/b8ad9c7005833d39759c83ffefc029f328251f3e\n", "url": "https://github.com/spring-projects/spring-batch/issues/2014", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2010-05-20 02:20:50", "closed": "2010-09-27 01:17:31", "commits": {}, "ttf": 129.00027777777777, "commitsDetails": []}, {"title": "End transition states will cause the batch job to finish with an Unknown status if the namespace prefix is used. [BATCH-1573]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-1573](https://jira.spring.io/browse/BATCH-1573?redirect=false)** and commented\n\nIf you run the following job:\n\n<batch:job id=\"job1\">\n<batch:step id=\"noopStep\" parent=\"noopStep1\">\n<batch:next on=\"COMPLETED\" to=\"step4\" />\n<batch:end on=\"NOOP\" />\n<batch:fail on=\"*\" />\n</batch:step>\n<batch:step id=\"step4\" parent=\"step45\" />\n</batch:job>\n\n    <batch:step id=\"noopStep1\">\n        <batch:tasklet ref=\"noopTasklet\" />\n    </batch:step>\n\nAnd the first step returns an exit status of NOOP, the job will finish with a BatchStatus of UNKNOWN, and an ExitStatus of NOOP.  If you remove the batch namespace from the element, it will complete with a BatchStatus of COMPLETED and an Exit status of the same.\n\nThis is because in AbstractFlowParser.getBatchStatusFromEndTransitionName() line 393, the element name is checked to see if it is an 'End transition'.  However, this check doesn't strip out the batch: from the front of the element first.\n\nI have attached a failing unit test as well.\n\n\n---\n\n**Affects:** 2.1.1\n\n**Attachments:**\n- [namespace-error.patch](https://jira.spring.io/secure/attachment/16582/namespace-error.patch) (_6.14 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/f8a0e903470021bea6813079f354bcb28b8537a8\n", "url": "https://github.com/spring-projects/spring-batch/issues/2013", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2010-05-21 09:12:14", "closed": "2010-05-23 15:20:40", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "TaskExecutor configuration ignored in 2.1 namespace for <tasklet/> with no <chunk/> [BATCH-1574]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1574](https://jira.spring.io/browse/BATCH-1574?redirect=false)** and commented\n\nThe task-executor attribute moved in the schema and the factory bean didn't accommodate the change.\n\n\n---\n\n**Affects:** 2.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/9ed3d4da428a714141ba128e75b39df2bd88ebfc\n", "url": "https://github.com/spring-projects/spring-batch/issues/2012", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-05-25 03:05:03", "closed": "2010-05-25 03:32:58", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "@BeforeStep annotation ignored on MultiResourceItemReader.delegate [BATCH-1577]", "body": "**[drekbour](https://jira.spring.io/secure/ViewProfile.jspa?name=drekbour)** opened **[BATCH-1577](https://jira.spring.io/browse/BATCH-1577?redirect=false)** and commented\n\nIf I add a simple execution listener annotation onto an ItemReader, it gets detected and called automatically without any explicit registration.\n`@BeforeStep`\npublic void doSomething( StepExecution exec )\n\nIf I add the same onto the delegate ItemReader of a MultiResourceItemReader it does not.\n\n\n---\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=89486\n", "url": "https://github.com/spring-projects/spring-batch/issues/2010", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: declined", "type: bug"], "created": "2010-05-26 00:32:58", "closed": "2010-06-23 19:49:08", "commits": {}, "ttf": 28.00027777777778, "commitsDetails": []}, {"title": "Problems with null job parameters and late binding [BATCH-1579]", "body": "**[Holger Dunst](https://jira.spring.io/secure/ViewProfile.jspa?name=hdunst)** opened **[BATCH-1579](https://jira.spring.io/browse/BATCH-1579?redirect=false)** and commented\n\nAn optional parameter or a parameter with a key and without a value causes this error:\n\njava.lang.IllegalStateException: Cannot bind to placeholder: jobParameters['DOMAIN']\n\ne.g. with this definition:\n\\<property name=\"domain\" value=\"#{jobParameters['DOMAIN']}\" />\n\nTrace:\n: Initialization of bean failed; nested exception is java.lang.IllegalStateException: Cannot bind to placeholder: jobParameters['DOMAIN']\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:480)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)\nat java.security.AccessController.doPrivileged(AccessController.java:214)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)\nat org.springframework.beans.factory.support.AbstractBeanFactory$2.getObject(AbstractBeanFactory.java:302)\nat org.springframework.batch.core.scope.StepScope.get(StepScope.java:150)\nat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)\nat org.springframework.batch.core.scope.util.PlaceholderTargetSource.getTarget(PlaceholderTargetSource.java:185)\nat org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.getTarget(Cglib2AopProxy.java:666)\nat org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:616)\nat de.mazda.mets.scheduler.tasks.printinvoice.PrintInvoiceTasklet$$EnhancerByCGLIB$$33b22891.beforeStep(\\<generated>)\nat org.springframework.batch.core.listener.CompositeStepExecutionListener.beforeStep(CompositeStepExecutionListener.java:76)\nat org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:192)\n\n\n---\n\n**Affects:** 2.1.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/8b96e46500b96509843430b202671622dc1d4bdb\n", "url": "https://github.com/spring-projects/spring-batch/issues/2008", "user": "spring-issuemaster", "labels": ["status: invalid", "type: bug"], "created": "2010-06-10 20:22:35", "closed": "2010-08-29 00:52:22", "commits": {}, "ttf": 79.00027777777778, "commitsDetails": []}, {"title": "Some issues with pagination in Oracle [BATCH-1546]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1546](https://jira.spring.io/browse/BATCH-1546?redirect=false)** and commented\n\nSome issues with pagination in Oracle were reported in the forum, but not raised in JIRA.  Here is a ticket to track the investigation...  http://forum.springsource.org/showthread.php?t=85919\n\n\n---\n\n**Affects:** 2.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d04a904eaf72cc2f589329a1cfd9c70e88280622, https://github.com/spring-projects/spring-batch/commit/f38c05567a392a925319336eed3cda87a501b065, https://github.com/spring-projects/spring-batch/commit/8160cb1f1cffdb51fd32e95ffe1c8bfd90a549ed\n", "url": "https://github.com/spring-projects/spring-batch/issues/2006", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-04-03 03:15:57", "closed": "2010-04-05 18:50:28", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "DefaultStepExecutionAggregator can simply ignore null or empty input [BATCH-1582]", "body": "**[Tomasz Blachowicz](https://jira.spring.io/secure/ViewProfile.jspa?name=tblachowicz)** opened **[BATCH-1582](https://jira.spring.io/browse/BATCH-1582?redirect=false)** and commented\n\nCurrent implementation of DefaultStepExecutionAggregator validates the arguments and restricts null or empty sets of executions. In my opinion the validation is too strict and prohibit usage of DefaultStepExecutionAggregator in various cases when using namespace support for partitions (there is no possibility to set the aggregator when using batch namespace). I have implementation of the partitioner that ignores gridSize and in certain occasions return empty map of executions. I believe the framework should be able to deal with such situations.\n\nThe strict validation seems odd to me also in context of other default components provided by the framework to deal with partitioning. For instance, TaskExecutorPartitionHandler can process empty collections of executions returned by the splitter. SimpleStepExecutionSplitter is also fine.\n\n\n---\n\n**Affects:** 2.1.1\n\n**Attachments:**\n- [DefaultStepExecutionAggregator.patch](https://jira.spring.io/secure/attachment/16711/DefaultStepExecutionAggregator.patch) (_3.33 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d794a62ac2ce6fbca9874f7c668e65771df501d6\n", "url": "https://github.com/spring-projects/spring-batch/issues/2005", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2010-06-15 08:01:54", "closed": "2010-06-23 19:44:03", "commits": {}, "ttf": 8.000277777777777, "commitsDetails": []}, {"title": "Section 5.2.1 references TaskletAdapter class, but it should be MethodInvokingTaskletAdapter [BATCH-1550]", "body": "**[Murilo Rodrigues](https://jira.spring.io/secure/ViewProfile.jspa?name=figura)** opened **[BATCH-1550](https://jira.spring.io/browse/BATCH-1550?redirect=false)** and commented\n\nThe example in section 5.2.1 of the documentation references TaskletAdapter class, but it should be MethodInvokingTaskletAdapter. Also, the FooDao bean declaration is missing closing slash.\n\nThe example should be:\n\n\\<bean id=\"myTasklet\" class=\"org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter\">\n\\<property name=\"targetObject\">\n\\<bean class=\"org.mycompany.FooDao\"/>\n\\</property>\n\\<property name=\"targetMethod\" value=\"updateFoo\" />\n\\</bean>\n\n\n---\n\n**Affects:** 2.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/f71f61d30c4f10b05730470d2981315e952dd8e8\n", "url": "https://github.com/spring-projects/spring-batch/issues/2003", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2010-04-08 11:24:06", "closed": "2010-04-08 19:14:39", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "OraclePagingQueryProvider.generateJumpToItemQuery generates incorrect query for offset > 1 [BATCH-1584]", "body": "**[Andy Neilson](https://jira.spring.io/secure/ViewProfile.jspa?name=aneilson)** opened **[BATCH-1584](https://jira.spring.io/browse/BATCH-1584?redirect=false)** and commented\n\nOraclePagingQueryProvider.generateJumpToItemQuery generates a query such as the following:\n\nSELECT * FROM (\nSELECT ROWID AS SORT_KEY\nFROM mytable\nORDER BY ROWID ASC\n)\nWHERE ROWNUM = \\<offset>\n\nThis will only work correctly when \\<offset> is 1 -- which is the one place where AbstractPagingItemReader.generateJumpToItemQuery is not used.\n\nIn my case, the problem shows up where I have partitioned a set of items to process. The partition that starts at offset 0 works correctly. All the rest of the partitions fail when they attempt to find the startAfterValue by executing this query since the query will always return zero rows for offset > 1. Something like the following will be on the stack:\n\n[6/21/10 10:47:17:201 EDT] 0000306c AbstractStep  E org.springframework.batch.core.step.AbstractStep execute Encountered an error executing the step\norg.springframework.batch.item.ItemStreamException: Could not move to stored position on restart\nat org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:155)\n[deletia]\nCaused by: org.springframework.dao.EmptyResultDataAccessException: Incorrect result size: expected 1, actual 0\nat org.springframework.dao.support.DataAccessUtils.requiredSingleResult(DataAccessUtils.java:71)\nat org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:717)\nat org.springframework.batch.item.database.JdbcPagingItemReader.doJumpToPage(JdbcPagingItemReader.java:241)\nat org.springframework.batch.item.database.AbstractPagingItemReader.jumpToItem(AbstractPagingItemReader.java:157)\nat org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:153)\n\nThe fix is very simple. The ROWNUM column in the inner query MUST be aliased:\n\nSELECT * FROM (\nSELECT ROWID AS SORT_KEY, ROWNUM AS ROWNUM_\nFROM mytable\nORDER BY ROWID ASC\n)\nWHERE ROWNUM_ = \\<offset>\n\n\n---\n\n**Affects:** 2.1.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/2002", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2010-06-21 06:47:26", "closed": "2010-06-23 19:51:49", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "FlatFileItemReader not calling RecordSeparatorPolicy [BATCH-1585]", "body": "**[Lakshmanan Venkatachalam](https://jira.spring.io/secure/ViewProfile.jspa?name=vlakshm)** opened **[BATCH-1585](https://jira.spring.io/browse/BATCH-1585?redirect=false)** and commented\n\nFlatFileItemReader not calling RecordSeparatorPolicy's PostProcess after last record. When the bufferedReader return null, code is not calling the PostProcess.\n\nIt causes problem when the application has the custom RecordSepartorPolicy implementation and has business login in the postProcess() method assuming it will always be called.\n\nI found the following piece of code which causes this issue.\n\nprivate String applyRecordSeparatorPolicy(String line) throws IOException{\n\n    \tString record = line;\n    \twhile (line != null && !recordSeparatorPolicy.isEndOfRecord(record)) {\n    \t\tline = this.reader.readLine();\n    \t\tif (line == null) {\n    \t\t\tif (StringUtils.hasText(record)) {\n    \t\t\t\t// A record was partially complete since it hasn't ended but\n    \t\t\t\t// the line is null\n    \t\t\t\tthrow new FlatFileParseException(\"Unexpected end of file before record complete\", record, lineCount);\n    \t\t\t}\n    \t\t\telse {\n    \t\t\t\t// Record has no text but it might still be post processed\n    \t\t\t\t// to something (skipping preProcess since that was already done)\n    \t\t\t\tbreak;\n    \t\t\t}\n    \t\t} else {\n    \t\t\tlineCount++;\n            }\n    \t\trecord = recordSeparatorPolicy.preProcess(record) + line;\n    \t}\n    \t\n    \treturn recordSeparatorPolicy.postProcess(record);\n    \t\n    }\n\nI would suggest to move the recordSeparatorPolicy.postProcess(record) from applyRecordSeparatorPolicy(String line) to doRead() method, after reading a line using readLine(). This works in my application.\n\nprotected T doRead() throws Exception {\nif (noInput) {\nreturn null;\n}\n\n    \tString line = readLine();\n    \trecordSeparatorPolicy.postProcess(line) ;\n    \tif (line == null) {\n    \t\treturn null;\n    \t}\n    \telse {\n    \t\ttry{\n    \t\t\treturn lineMapper.mapLine(line, lineCount);\n    \t\t}\n    \t\tcatch(Exception ex){\n    \t\t\tlogger.error(\"Parsing error at line: \" + lineCount + \" in resource=\" + \n    \t\t\t\t\tresource.getDescription() + \", input=[\" + line + \"]\", ex);\n    \t\t\tthrow ex;\n    \t\t}\n    \t}\n    }\n\nPlease kindly suggest if you have a reason to break the lifecycle in case of last record. I put some workaround in my application handle the situation. Undoubtedly the dirty fix.\n\n\n---\n\n**Affects:** 2.1.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/2001", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: invalid", "type: bug"], "created": "2010-06-23 01:12:35", "closed": "2010-06-23 20:36:21", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "DefaultFieldSetFactory is not setting the numberFormat in the enhance() call [BATCH-1587]", "body": "**[Martin Ahrer](https://jira.spring.io/secure/ViewProfile.jspa?name=martinahrer)** opened **[BATCH-1587](https://jira.spring.io/browse/BATCH-1587?redirect=false)** and commented\n\nenhance is testing for (numberFormat!=null) but then calling fieldSet.setDateFormat(dateFormat);\n\n    private FieldSet enhance(DefaultFieldSet fieldSet) {\n    \tif (dateFormat!=null) {\n    \t\tfieldSet.setDateFormat(dateFormat);\n    \t}\n    \tif (numberFormat!=null) {\n    \t\tfieldSet.setDateFormat(dateFormat);\n    \t}\t\n    \treturn fieldSet;\n    }\n\n\n\n---\n\n**Affects:** 2.1.1\n\n**Attachments:**\n- [NumberFormatSupportingDefaultFieldSetFactory.java](https://jira.spring.io/secure/attachment/16782/NumberFormatSupportingDefaultFieldSetFactory.java) (_1.79 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/4ef5de36b796054fe20124c2b6ea162f3e829d21\n", "url": "https://github.com/spring-projects/spring-batch/issues/1999", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2010-06-24 03:15:06", "closed": "2010-06-24 23:26:43", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Error in Programmatic Flow Decisions documentation [BATCH-1558]", "body": "**[Thomas Bjorge](https://jira.spring.io/secure/ViewProfile.jspa?name=tbjorge)** opened **[BATCH-1558](https://jira.spring.io/browse/BATCH-1558?redirect=false)** and commented\n\nUnder 5.3.4. Programmatic Flow Decisions the class MyDecider's decide method has the wrong signature:\n\npublic String decide(JobExecution jobExecution, StepExecution stepExecution) {\n\nIt should be:\n\npublic FlowExecutionStatus decide(JobExecution jobExecution, StepExecution stepExecution) {\n\n\n---\n\n**Affects:** 2.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/1e03e161235ac65f0a775133e9a9790000d60a24\n", "url": "https://github.com/spring-projects/spring-batch/issues/1998", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2010-04-18 21:17:58", "closed": "2010-05-24 02:35:11", "commits": {}, "ttf": 35.000277777777775, "commitsDetails": []}, {"title": "Job Excecution Listener - XML Namespace parsing fails for methods named different to \"beforeJob\", \"afterJob\" [BATCH-1588]", "body": "**[Daniel Soneira](https://jira.spring.io/secure/ViewProfile.jspa?name=daniel.soneira)** opened **[BATCH-1588](https://jira.spring.io/browse/BATCH-1588?redirect=false)** and commented\n\nThe following XML configuration for a job listener does not work as the two configured methods are not called:\n\n-------- XML - Configuration --------\n\\<job id=\"...\">\n...\n\\<listener ref=\"pojoListener\" before-job-method=\"before\" after-job-method=\"after\"/>\n\\</job>\n\n\\<bean id=\"pojoListener\" class=\"com.example.MyListener\"/>\n--------\n\nMyListener is a simple POJO and does not implement JobExecutionListener and has no annotated methods either.\n\nI've debugged the problem and it seems the offending code is in the private method\nAbstractListenerParser#getMethodNameAttributes\n\nThat method returns {\"beforeJob\", \"afterJob\"} instead of the XML attribute names {\"before-job-method\", \"after-job-method\"}.\n\nThe unit test \"JobExecutionListenerParserTests\" does not seem to test this case.\n\nI suspect that the same problem exists for Step Listeners as they share the same code base.\n\n\n---\n\n**Affects:** 2.1.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/1997", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2010-06-28 00:24:35", "closed": "2010-06-28 03:56:51", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Exception during rollback hides root cause [BATCH-1562]", "body": "**[Gerson](https://jira.spring.io/secure/ViewProfile.jspa?name=gersonk)** opened **[BATCH-1562](https://jira.spring.io/browse/BATCH-1562?redirect=false)** and commented\n\nIf an exception is thrown while processing a rollback the root exception fails to be logged.\n\nIn ItemOrientedStep it catches Exception then calls processRollback but if processRollback throws an exception the original cause is never even logged, making it very difficult to track down the root cause of the exception. Perhaps changing the code from:\n\ncatch (Exception e) {\nprocessRollback(stepExecution, contribution, fatalException, transaction);\nthrow e;\n}\n\nto:\n\ncatch (Exception e) {\ntry {\nprocessRollback(stepExecution, contribution, fatalException, transaction);\nthrow e;\n}\ncatch (Exception rollbackException) {\nlogger.error(\"Exception thrown during processRollback will be propegated, exception that caused the rollback follows\", e);\nthrow rollbackException;\n}\n}\n\nAn example stack trace for this problem is:\norg.springframework.batch.core.step.AbstractStep$FatalException: Failed while processing rollback\nat org.springframework.batch.core.step.item.ItemOrientedStep.processRollback(ItemOrientedStep.java:428)\nat org.springframework.batch.core.step.item.ItemOrientedStep.access$1000(ItemOrientedStep.java:68)\nat org.springframework.batch.core.step.item.ItemOrientedStep$1.doInIteration(ItemOrientedStep.java:347)\nat org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:346)\nat org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:212)\nat org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:143)\nat org.springframework.batch.core.step.item.ItemOrientedStep.doExecute(ItemOrientedStep.java:231)\nat org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:172)\nat org.springframework.batch.core.job.SimpleJob.execute(SimpleJob.java:100)\nat org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:86)\nat org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)\nat org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:81)\nat org.jasig.portal.stats.quartz.JobLauncherDetails.executeInternal(JobLauncherDetails.java:71)\nat org.springframework.scheduling.quartz.QuartzJobBean.execute(QuartzJobBean.java:86)\nat org.quartz.core.JobRunShell.run(JobRunShell.java:203)\nat org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:520)\nCaused by: org.springframework.transaction.TransactionSystemException: Could not roll back JDBC transaction; nested exception is java.sql.SQLException: Protocol violation\nat org.springframework.jdbc.datasource.DataSourceTransactionManager.doRollback(DataSourceTransactionManager.java:279)\nat org.springframework.transaction.support.AbstractPlatformTransactionManager.processRollback(AbstractPlatformTransactionManager.java:800)\nat org.springframework.transaction.support.AbstractPlatformTransactionManager.rollback(AbstractPlatformTransactionManager.java:777)\nat org.springframework.batch.core.step.item.ItemOrientedStep.processRollback(ItemOrientedStep.java:419)\n... 15 more\nCaused by: java.sql.SQLException: Protocol violation\nat oracle.jdbc.driver.SQLStateMapping.newSQLException(SQLStateMapping.java:70)\nat oracle.jdbc.driver.DatabaseError.newSQLException(DatabaseError.java:110)\nat oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:171)\nat oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:227)\nat oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:439)\nat oracle.jdbc.driver.T4C7Ocommoncall.receive(T4C7Ocommoncall.java:130)\nat oracle.jdbc.driver.T4CConnection.doRollback(T4CConnection.java:613)\nat oracle.jdbc.driver.PhysicalConnection.rollback(PhysicalConnection.java:3389)\nat org.apache.commons.dbcp.DelegatingConnection.rollback(DelegatingConnection.java:328)\nat org.apache.commons.dbcp.PoolingDataSource$PoolGuardConnectionWrapper.rollback(PoolingDataSource.java:312)\nat org.springframework.jdbc.datasource.DataSourceTransactionManager.doRollback(DataSourceTransactionManager.java:276)\n... 18 more\n\n\n---\n\n**Affects:** 1.1.3, 2.0.0.M3\n", "url": "https://github.com/spring-projects/spring-batch/issues/1995", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2010-04-28 07:51:30", "closed": "2010-09-06 04:33:01", "commits": {}, "ttf": 130.00027777777777, "commitsDetails": []}, {"title": "OraclePagingQueryProvider.generateJumpToItemQuery generates an incorrect query [BATCH-1590]", "body": "**[Andy Neilson](https://jira.spring.io/secure/ViewProfile.jspa?name=aneilson)** opened **[BATCH-1590](https://jira.spring.io/browse/BATCH-1590?redirect=false)** and commented\n\nWhen running a partitioned job that uses JdbcPagingItemReader as the input, some input rows are being omitted and some are being processed twice. This is happening as a result of JdbcPagingItemReader.doJumpToPage attempting to position the reader at the start of that partition (the 'read.count' and 'read.count.max' properties have been set in the step execution context to delimit the partitions).\n\nThis problem is only seen when the sortKey will cause the rows to be sorted in an order other than the underlying database storage engine returns them (e.g., not the primary clustering key or query-covering index).\n\nThe jumpToItemSql that is generated by the query provider looks something like the following:\n\nSELECT * FROM (SELECT customer AS SORT_KEY, ROWNUM as TMP_ROW_NUM FROM batch_input ORDER BY customer ASC) WHERE TMP_ROW_NUM = 30\n\nThis does not return the intended result because the assignment of the TMP_ROW_NUM values happens before the sort, so the effect is exactly the same as if the ORDER BY clause was omitted.\n\nA possible workaround is to add another select level so that the sort happens before TMP_ROW_NUM values are assigned:\n\nSELECT * FROM (SELECT SORT_KEY, ROWNUM AS TMP_ROW_NUM FROM (SELECT customer AS SORT_KEY FROM batch_input ORDER BY SORT_KEY ASC)) WHERE TMP_ROW_NUM = 30\n\n\n---\n\n**Affects:** 2.1.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/c918e770f0a110e90452e91fbc367d091efb1ec0, https://github.com/spring-projects/spring-batch/commit/3984ba1791c6054e5fcb87a3857df9a13e3b9786\n", "url": "https://github.com/spring-projects/spring-batch/issues/1994", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2010-06-28 04:45:38", "closed": "2010-06-29 02:56:39", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Documentation: StepListener is a marker interface so it cannot be applied directly to a step [BATCH-1591]", "body": "**[Daniel Soneira](https://jira.spring.io/secure/ViewProfile.jspa?name=daniel.soneira)** opened **[BATCH-1591](https://jira.spring.io/browse/BATCH-1591?redirect=false)** and commented\n\nWas: StepParserStepFactoryBean - ClassCastException when using POJO listener\n\n```\n<step>\n  <tasklet>\n    <listeners>\n       <listener ref=\"pojoListener\" before-step-method=\"before\" after-stop-method=\"after\"/>\n    </listeners>\n  </tasklet>\n</step>\n\n<bean id=\"pojoListener\" class=\"com.example.MyListener\"/>\n```\n\nMyListener is a POJO class and does not implement any specific interface.\n\nA ClassCastException occurs in StepParserStepFactoryBean#configureAbstractStep on the following line:\nnewListeners[i++] = (StepExecutionListener) listener;\n\nThe listener is of type StepListener (behind AOP proxy).\n\nIn contrast to [BATCH-1588](https://jira.spring.io/browse/BATCH-1588) the listener is not ignored but the exception prevents the application to start up.\nThe problem does not occur for listeners implementing the Interface directly or annotated listeners.\n\n--------- Possible documentation error ----------\nIn chapter \"5.1.10. Intercepting Step Execution\" the following is stated:\n\n\"Any class that implements the StepListener interface (or an extension thereof) can be applied to a step via the listeners element\"\n\nThat seems to contradict the code - the same ClassCastException occurs when the using a listener that implements StepListener directly.\n\n\n---\n\n**Affects:** 2.1.1\n\n**Attachments:**\n- [batch_1591.zip](https://jira.spring.io/secure/attachment/16810/batch_1591.zip) (_3.52 kB_)\n- [stacktrace.txt](https://jira.spring.io/secure/attachment/16808/stacktrace.txt) (_12.21 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1993", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2010-06-28 22:36:16", "closed": "2010-07-08 02:46:38", "commits": {}, "ttf": 9.000277777777777, "commitsDetails": []}, {"title": "StepListenerSupport implements method onErrorInStep which is not declared in any of the implemented interfaces [BATCH-1594]", "body": "**[Morten Andersen-Gott](https://jira.spring.io/secure/ViewProfile.jspa?name=magott)** opened **[BATCH-1594](https://jira.spring.io/browse/BATCH-1594?redirect=false)** and commented\n\nThe onErrorInStep method is not declared in any of the listener interfaces, nor is it called as far as I can see from the code executing steps. onErrorInStep was removed from the StepExecutionListener in changeset 2338 and jira [BATCH-825](https://jira.spring.io/browse/BATCH-825).\n\nWhile the onErrorInStep method in StepListenerSupport will not cause problems directly, it is misleading for developers extending StepListenerSupport.\n\n(When editing the StepListenerSupport, you might want to update the non-javadoc referencing StepListener to reference StepExecutionListener instead as well)\n\n\n---\n\n**Affects:** 2.1.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/6aa92efa14e8ddb5a7f1fabefa2fd492ed9739fb, https://github.com/spring-projects/spring-batch/commit/46bff7fbc1bb0e88653e33ad5aac64cc8efe1325, https://github.com/spring-projects/spring-batch/commit/8efa6124807a2f28fd1dfb12a21606bc258cfb46\n", "url": "https://github.com/spring-projects/spring-batch/issues/1990", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2010-07-08 20:46:12", "closed": "2010-07-08 22:04:18", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "OraclePagingQueryProvider has inconsistent names for columns in jumpToItemQuery [BATCH-1595]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1595](https://jira.spring.io/browse/BATCH-1595?redirect=false)** and commented\n\nOraclePagingQueryProvider has inconsistent namesfor columns in jumpToItemQuery.  It only matters if you use the column names (e.g. queryForLong() which is more common wouldn't be affected), but all the other query providers have \"SORT_KEY\" as a column name alias, whereas the Oracle version doesn't use an alias.\n\n\n---\n\n**Affects:** 2.1.2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d22bc927a2b70689d65d7cb57645226895db2f43\n", "url": "https://github.com/spring-projects/spring-batch/issues/1989", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-07-10 17:12:37", "closed": "2010-08-13 06:11:39", "commits": {}, "ttf": 33.000277777777775, "commitsDetails": []}, {"title": "DirectPoller only works with timeout in milliseconds [BATCH-1597]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1597](https://jira.spring.io/browse/BATCH-1597?redirect=false)** and commented\n\nDirectPoller only works with timeout in milliseconds.  Doesn't have any effect on mainstream Batch use, only if the poller is used and only if the timeout is not in millisecs.\n\n\n---\n\n**Affects:** 2.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/e4344f303f9c1e1c571e155a939575aa0c6ac0fc\n", "url": "https://github.com/spring-projects/spring-batch/issues/1987", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-07-19 19:56:18", "closed": "2010-08-13 03:22:03", "commits": {}, "ttf": 24.00027777777778, "commitsDetails": []}, {"title": "JobRepositoryTestUtils delete job execution fails if there is another execution with the same job instance [BATCH-1598]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1598](https://jira.spring.io/browse/BATCH-1598?redirect=false)** and commented\n\nJobRepositoryTestUtils delete job execution fails if there is another execution with the same job instance\n\n\n---\n\n**Affects:** 2.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/59bd81740d2ec28ac6f3fcb1db214f736d4c55b4\n", "url": "https://github.com/spring-projects/spring-batch/issues/1986", "user": "spring-issuemaster", "labels": ["in: test", "type: bug"], "created": "2010-07-19 19:58:42", "closed": "2010-08-29 00:38:22", "commits": {}, "ttf": 40.000277777777775, "commitsDetails": []}, {"title": "log4j:ERROR Failed to write,  SimpleJobLauncher java.io.IOException: Stream closed [BATCH-1599]", "body": "**[Davide](https://jira.spring.io/secure/ViewProfile.jspa?name=carned)** opened **[BATCH-1599](https://jira.spring.io/browse/BATCH-1599?redirect=false)** and commented\n\nIn my application I define a Job with a step, during the start of job occurs this exception:\n\n[7/19/10 20:00:02:849 CEST] 000000bc SystemErr     R log4j:ERROR Failed to write [[2010-07-19 20:00:02,848],   INFO,org.springframework.batch.core.launch.support.SimpleJobLauncher,user[],sessionid[], Job: [FlowJob: [name=racoBalanceJob]] failed unexpectedly and fatally with the following parameters: [{message=racoBalanceJob, currTime=1279562402820}]\n].\n[7/19/10 20:00:02:857 CEST] 000000bc SystemErr     R java.io.IOException: Stream closed\n[7/19/10 20:00:02:858 CEST] 000000bc SystemErr     R \tat sun.nio.cs.StreamEncoder.ensureOpen(StreamEncoder.java:66)\n[7/19/10 20:00:02:858 CEST] 000000bc SystemErr     R \tat sun.nio.cs.StreamEncoder.write(StreamEncoder.java:179)\n[7/19/10 20:00:02:858 CEST] 000000bc SystemErr     R \tat sun.nio.cs.StreamEncoder.write(StreamEncoder.java:196)\n[7/19/10 20:00:02:858 CEST] 000000bc SystemErr     R \tat java.io.OutputStreamWriter.write(OutputStreamWriter.java:227)\n[7/19/10 20:00:02:858 CEST] 000000bc SystemErr     R \tat java.io.Writer.write(Writer.java:147)\n[7/19/10 20:00:02:858 CEST] 000000bc SystemErr     R \tat org.apache.log4j.helpers.QuietWriter.write(QuietWriter.java:39)\n[7/19/10 20:00:02:858 CEST] 000000bc SystemErr     R \tat org.apache.log4j.WriterAppender.subAppend(WriterAppender.java:297)\n[7/19/10 20:00:02:858 CEST] 000000bc SystemErr     R \tat org.apache.log4j.DailyRollingFileAppender.subAppend(DailyRollingFileAppender.java:343)\n[7/19/10 20:00:02:858 CEST] 000000bc SystemErr     R \tat org.apache.log4j.WriterAppender.append(WriterAppender.java:150)\n[7/19/10 20:00:02:858 CEST] 000000bc SystemErr     R \tat org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:222)\n[7/19/10 20:00:02:859 CEST] 000000bc SystemErr     R \tat org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:57)\n[7/19/10 20:00:02:859 CEST] 000000bc SystemErr     R \tat org.apache.log4j.Category.callAppenders(Category.java:190)\n[7/19/10 20:00:02:859 CEST] 000000bc SystemErr     R \tat org.apache.log4j.Category.forcedLog(Category.java:375)\n[7/19/10 20:00:02:859 CEST] 000000bc SystemErr     R \tat org.apache.log4j.Category.log(Category.java:868)\n[7/19/10 20:00:02:859 CEST] 000000bc SystemErr     R \tat org.apache.commons.logging.impl.Log4JLogger.info(Log4JLogger.java:160)\n[7/19/10 20:00:02:859 CEST] 000000bc SystemErr     R \tat org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:115)\n[7/19/10 20:00:02:859 CEST] 000000bc SystemErr     R \tat org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)\n[7/19/10 20:00:02:859 CEST] 000000bc SystemErr     R \tat org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:105)\n[7/19/10 20:00:02:859 CEST] 000000bc SystemErr     R \tat it.vtfinance.vtpie.commons.scheduledJobs.JobStarter.start(JobStarter.java:56)\n[7/19/10 20:00:02:859 CEST] 000000bc SystemErr     R \tat it.vtfinance.vtpie.go.jms.GONotificaEventiListener.execBatch(GONotificaEventiListener.java:196)\n[7/19/10 20:00:02:859 CEST] 000000bc SystemErr     R \tat it.vtfinance.vtpie.go.jms.GONotificaEventiListener.onMessage(GONotificaEventiListener.java:139)\n[7/19/10 20:00:02:859 CEST] 000000bc SystemErr     R \tat org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:543)\n[7/19/10 20:00:02:859 CEST] 000000bc SystemErr     R \tat org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:482)\n[7/19/10 20:00:02:860 CEST] 000000bc SystemErr     R \tat org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:451)\n[7/19/10 20:00:02:860 CEST] 000000bc SystemErr     R \tat org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:323)\n[7/19/10 20:00:02:860 CEST] 000000bc SystemErr     R \tat org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:261)\n[7/19/10 20:00:02:860 CEST] 000000bc SystemErr     R \tat org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:982)\n[7/19/10 20:00:02:860 CEST] 000000bc SystemErr     R \tat org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:974)\n[7/19/10 20:00:02:860 CEST] 000000bc SystemErr     R \tat org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:876)\n\n\n\n---\n\n**Affects:** 2.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/1984", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2010-07-20 02:21:05", "closed": "2019-10-21 09:26:07", "commits": {}, "ttf": 3380.0002777777777, "commitsDetails": []}, {"title": "CommandLineJobRunner cannot stop a Job execution that was restarted [BATCH-1600]", "body": "**[Paolo Amorim](https://jira.spring.io/secure/ViewProfile.jspa?name=paolo)** opened **[BATCH-1600](https://jira.spring.io/browse/BATCH-1600?redirect=false)** and commented\n\nMode execution restarting is not stopped with mode execution stop:\n\nThe error is this line from the file:\n* Class: org.springframework.batch.core.launch.support. CommandLineJobRunner\n* method: private List\\<JobExecution> getJobExecutionsWithStatusGreaterThan(String jobIdentifier, BatchStatus minStatus){}.\n* line: 344: JobExecution jobExecution = jobExecutions.get(jobExecutions.size() - 1);\n\nPossible fix:\n* line: 344: JobExecution jobExecution = jobExecutions.get(0);\n\n\n\n---\n\n**Affects:** 2.1.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/0771bcbb613abc1587a30c113d5c4979c8282d9a\n", "url": "https://github.com/spring-projects/spring-batch/issues/1982", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2010-07-22 02:34:21", "closed": "2010-07-23 08:10:27", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "The \"initialized\" field in org.springframework.batch.test.DataSourceInitializer shouldn't be static. [BATCH-1601]", "body": "**[Faisal Feroz](https://jira.spring.io/secure/ViewProfile.jspa?name=faisalferoz)** opened **[BATCH-1601](https://jira.spring.io/browse/BATCH-1601?redirect=false)** and commented\n\nThe initialized field in org.springframework.batch.test.DataSourceInitializer is declared as:\n\nprivate static boolean initialized = false;\n\nThis shouldn't be static as this causes issues when the DataSourceInitializer class is used more than once for initializing more than one DataSources.\n\n\n---\n\n**Affects:** 2.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/cdc7feb184a114e00d9fe7b85b30d3269ccba48f\n", "url": "https://github.com/spring-projects/spring-batch/issues/1981", "user": "spring-issuemaster", "labels": ["in: test", "type: bug"], "created": "2010-07-23 18:33:10", "closed": "2010-08-29 00:46:20", "commits": {}, "ttf": 36.000277777777775, "commitsDetails": []}, {"title": "Empty string JobParameter would be re-hydrated as null by Oracle [BATCH-1602]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1602](https://jira.spring.io/browse/BATCH-1602?redirect=false)** and commented\n\nEmpty string JobParameter would be re-hydrated as null by Oracle.  Probably not a very common scenario, but it's a feature of Oracle that isn't taken into account in the JdbcJobInstanceDao.\n\n\n---\n\n**Affects:** 2.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/01d1000f99c0bd4ef9fb37a92118535021993d1c\n", "url": "https://github.com/spring-projects/spring-batch/issues/1980", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-07-25 07:27:56", "closed": "2010-08-13 03:17:40", "commits": {}, "ttf": 18.00027777777778, "commitsDetails": []}, {"title": "MultiResourceItemReader infinite read/exception loop after a failed delegate.open() when skip policy is very lax [BATCH-1603]", "body": "**[drekbour](https://jira.spring.io/secure/ViewProfile.jspa?name=drekbour)** opened **[BATCH-1603](https://jira.spring.io/browse/BATCH-1603?redirect=false)** and commented\n\nThe behaviour of MRIR \"resource jumping\" relies on the following contract from ItemReader : \"Implementations must return null at the end of the input data set\".\n\nThe handling code is optimistically based on the packaged Reader and Resource implementations.  After a failed delegate.open() it will throw an exception and the next read call will call delegate.read() expecting a nice \"null\" to be returned.  When I used a custom Resource, I found it quite easy to end up in a loop such that delegate.open() on a StaxEventItemReader failed leaving it fundamentally uninitialised and throwing exceptions on each read() call. MRIR won't \"jump to the next resource\" unless it reads a \"null\" and therefore the step looped infinitely until we added some skip logic to contain the problem.\n\nI am working on a patch (will attach when ready) to make ResourceAwareItemReaders a bit more pessimistic in their use of \"noInput = true\".  They erroneously assume resource.exists()=true means there will be no exception thrown in resource.getInputStream()\n\n[\nPS. I'm not 100% sold on the open->exception/loop/read->null pattern of fallback but have not fully thought through the implications. \n]\n\n\n---\n\n**Affects:** 2.1.2\n\n**Attachments:**\n- [BATCH-1603.svnpatch.txt](https://jira.spring.io/secure/attachment/16938/BATCH-1603.svnpatch.txt) (_7.39 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/94d4437555a1059d15d16a55f2137734492d3a26\n", "url": "https://github.com/spring-projects/spring-batch/issues/1979", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2010-07-25 23:53:49", "closed": "2010-08-03 00:14:26", "commits": {}, "ttf": 8.000277777777777, "commitsDetails": []}, {"title": "HippyMethodInvoker candidate arguments repeated [BATCH-1605]", "body": "**[Jason Lindquist](https://jira.spring.io/secure/ViewProfile.jspa?name=jason.lindquist)** opened **[BATCH-1605](https://jira.spring.io/browse/BATCH-1605?redirect=false)** and commented\n\nI'm trying out the PropertyExtractingDelegatingItemWriter, and I'm seeing that if the arguments are not of the exact types as the targetMethod, then HippyMethodInvoker#findMatchingMethod is called.\n\nWhen finding candidate arguments, the findMatchingMethod method will populate all fields with the first possible match.\n\nThe following is the sample I'm using:\n\n```xml\n<bean id=\"adaptedItemWriter\" class=\"org.springframework.batch.item.adapter.PropertyExtractingDelegatingItemWriter\">\n    <property name=\"targetObject\" ref=\"myWriter\" />\n    <property name=\"targetMethod\" value=\"doIt\" />\n    <property name=\"fieldsUsedAsTargetMethodArguments\">\n        <list>\n            <value>firstName</value>\n            <value>lastName</value>\n            <value>network</value>\n        </list>\n    </property>\n</bean>\n\t\n<bean id=\"myWriter\" class=\"com.mycom.writers.MyWriter\"/>\n```\n\nThe item being passed has three properties: firstName, lastName, and network. All are Strings. In order to make MyWriter more reusable, I had the doIt(...) method use Object for one of the parameters:\n\n```java\npublic class MyWriter {\n\tpublic void doIt(String a, String b, Object c) {\n\t\tSystem.out.println(a + \", \" + b + \", and \" + c); \n\t}\n}\n```\n\nIf the \"c\" argument is a String \"public void doIt(String a, String b, String c)\", then the output is as expected (i.e., firstName, lastName and network are printed out). When \"c\" is an Object \"public void doIt(String a, String b, Object c)\", then HippyMethodInvoker tries to find a method and selects candidate arguments. All three candidate arguments are the first value passed in (i.e., the result is firstName, firstName and firstName printed out).\n\nAny ideas on how to use more generic argument types?\n\n\n---\n\n**Affects:** 2.1.1\n\n**Reference URL:** http://forum.springsource.org/showthread.php?p=309867\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/b37dbd2c06ee6c09bc6747fc3abadcac44c5b678\n", "url": "https://github.com/spring-projects/spring-batch/issues/1977", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2010-07-29 01:24:30", "closed": "2010-08-13 03:47:38", "commits": {}, "ttf": 15.000277777777777, "commitsDetails": []}, {"title": "Broken link on Changelog page [BATCH-1606]", "body": "**[Joni Nousiainen](https://jira.spring.io/secure/ViewProfile.jspa?name=joni.nousiainen)** opened **[BATCH-1606](https://jira.spring.io/browse/BATCH-1606?redirect=false)** and commented\n\nURL of the page where the link is located: http://static.springsource.org/spring-batch/migration/\nLink text: 2.0.x to 2.1.0.M1\nURL the link is pointing to: http://static.springsource.org/spring-batch/migration/2.0.x-2.1.0.M1.html\n\n\n---\nNo further details from [BATCH-1606](https://jira.spring.io/browse/BATCH-1606?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/1970", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2010-07-30 04:40:39", "closed": "2010-08-28 06:44:57", "commits": {}, "ttf": 29.00027777777778, "commitsDetails": []}, {"title": "A custom partitioner no longer restart the job properly upon failure [BATCH-1616]", "body": "**[St\u00e9phane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[BATCH-1616](https://jira.spring.io/browse/BATCH-1616?redirect=false)** and commented\n\nThe changes in [BATCH-1531](https://jira.spring.io/browse/BATCH-1531) introduced a regression. If the partitions are not named partition0, partition1, partition2, Spring Batch considers that the execution does not exist and start a fresh new instance without calling the partitioner, which fails since the partitioner sets mandatory value for the partition to run properly.\n\nFor the record we use the following\n\npublic static final String PARTITION_PREFIX = \"partition-\";\n// ...\nfinal String partitionNumberFormat = \"%0\" + String.valueOf(gridSize).length() + \"d\";\n// for partition i\nfinal String partitionName = PARTITION_PREFIX + String.format(partitionNumberFormat, i);\n\n\n---\n\n**Affects:** 2.1.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/8fe407b37901f651c41887d10a3304dc432e996e, https://github.com/spring-projects/spring-batch/commit/926fcf9ac005d0e6de4dbccdfdba8537475b3bc8\n", "url": "https://github.com/spring-projects/spring-batch/issues/1968", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-08-12 07:56:15", "closed": "2010-08-13 02:12:49", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "DefaultJobLoader registers Jobs hard coded with ReferenceJobFactory [BATCH-1617]", "body": "**[J\u00f6rg Gottschling](https://jira.spring.io/secure/ViewProfile.jspa?name=jgottschling)** opened **[BATCH-1617](https://jira.spring.io/browse/BATCH-1617?redirect=false)** and commented\n\norg.springframework.batch.core.configuration.support.DefaultJobLoader registers Jobs with a org.springframework.batch.core.configuration.support.ReferenceJobFactory instead of org.springframework.batch.core.configuration.support.ApplicationContextJobFactory. A ReferenceJobFactory does not make any sense in all our use cases. I can't even think of any use case where this is working or I'm doing something wrong.\n\nNow we have to restart the whole system or reloading the parent context of the system to get a fresh context for every Job. As far as I understand Spring Batch, it is necessary to have a new context for each job. May be this is not the case in 2.1.2, but I can not find some documentation about it.\n\nFor me it seams that we need to be able to choose which type of JobFactory the DefaultJobLoader uses to register a job. (Hopefully this does not involve a JobFactoryFactory.)\n\n\n---\n\n**Affects:** 2.1.2\n", "url": "https://github.com/spring-projects/spring-batch/issues/1967", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2010-08-16 06:25:27", "closed": "2011-01-05 06:30:58", "commits": {}, "ttf": 142.00027777777777, "commitsDetails": []}, {"title": "MultiResourceItemWriter creates an empty file if the number of item to write is a multiple of itemCountLimitPerResource [BATCH-1618]", "body": "**[Christian Gossart](https://jira.spring.io/secure/ViewProfile.jspa?name=christian%20gossart)** opened **[BATCH-1618](https://jira.spring.io/browse/BATCH-1618?redirect=false)** and commented\n\nMultiResourceItemWriter creates files on the filesystem when setting the resource to the delegate. If the number of items to write is a multiple of itemCountLimitPerResource, the last file will be created, but nothing will be written into it.\n\nThe attached patch defers the file creation in the write method.\n\n\n---\n\n**Affects:** 2.1.2\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=93974\n\n**Attachments:**\n- [MultiResourceItemWriter.java.patch](https://jira.spring.io/secure/attachment/17023/MultiResourceItemWriter.java.patch) (_1.25 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/51e03e8c294d28b0d9e447c38b91e74b2658354c\n", "url": "https://github.com/spring-projects/spring-batch/issues/1965", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2010-08-24 09:54:59", "closed": "2010-08-28 06:41:44", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "MultiResourceItemReader infinite read/exception loop after NonTransientDataAccessResourceException [BATCH-1615]", "body": "**[drekbour](https://jira.spring.io/secure/ViewProfile.jspa?name=drekbour)** opened **[BATCH-1615](https://jira.spring.io/browse/BATCH-1615?redirect=false)** and commented\n\nScenario MRIR with a StaxEventItemReader as the delegate and several resources to loop through.\n\nSimplest failure scenario is if one of the XML files is truncated. A call to MRIR.read() gets the following exception:\n\norg.springframework.dao.DataAccessResourceFailureException: Error while reading from event reader; nested exception is javax.xml.stream.XMLStreamException: ParseError at [row,col]:[8,2]\nMessage: Element type \"thing\" must be followed by either attribute specifications, \">\" or \"/>\".\nat org.springframework.batch.item.xml.StaxEventItemReader.moveCursorToNextFragment(OXMStaxEventItemReader.java:198)\nat org.springframework.batch.item.xml.StaxEventItemReader.doRead(OXMStaxEventItemReader.java:336)\nat org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:85)\nat org.springframework.batch.item.file.MultiResourceItemReader.readNextItem(MultiResourceItemReader.java:111)\nat org.springframework.batch.item.file.MultiResourceItemReader.read(MultiResourceItemReader.java:99)\n\nWithout any particular handling of the scenario, MRIR treats this as an item-specific problem and will keep retrying to reaD() the delegate without ever giving up.\n\nDataAccessResourceException javadoc : \"Data access exception thrown when a resource fails completely: for example, if we can't connect to a database using JDBC.\"\n\nA) MRIR should recognise the resource has failed completely and \"jump\" to the next on the next call to read().\nB) I'm not sure what exception to base this behaviour upon because the Exception inheritance is topsy-turvy.  The generated exception is actually a child of NonTransientDataAccessResourceException (though the classname hints that it is more specific) with identical javadoc \"Data access exception thrown when a resource fails completely and the failure is permanent.\"\n\nI'll be attaching a proposed patch for handling of this.\n\n\n---\n\n**Affects:** 2.1.2\n\n**Attachments:**\n- [patch.txt](https://jira.spring.io/secure/attachment/16996/patch.txt) (_1.21 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/45a1982dfeffbff2acbcb6dd34e556feee86cc62, https://github.com/spring-projects/spring-batch/commit/b78c0db130c4cf6f2d31480a520e58aca261cf71\n", "url": "https://github.com/spring-projects/spring-batch/issues/1964", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2010-08-11 08:37:49", "closed": "2010-09-07 04:56:40", "commits": {}, "ttf": 26.00027777777778, "commitsDetails": []}, {"title": "BadSqlGrammarException accessing Executions page with Apache Derby 10.6 datasource [BATCH-1619]", "body": "**[Dan Anderson](https://jira.spring.io/secure/ViewProfile.jspa?name=dannozrx)** opened **[BATCH-1619](https://jira.spring.io/browse/BATCH-1619?redirect=false)** and commented\n\nWhen attempting to access the executions page of the sample admin batch web app, I revcieve the following exception:\n\nSEVERE: Servlet.service() for servlet Batch Servlet threw exception\norg.apache.derby.client.am.SqlException: Syntax error: Encountered \"<=\" at line 1, column 337.\n\nThe generated sql statement is below:\nSELECT * FROM ( SELECT E.JOB_EXECUTION_ID, E.START_TIME, E.END_TIME, E.STATUS, E.EXIT_CODE, E.EXIT_MESSAGE, E.CREATE_TIME, E.LAST_UPDATED, E.VERSION, I.JOB_INSTANCE_ID, I.JOB_NAME, ROW_NUMBER() OVER () AS ROW_NUMBER FROM BATCH_JOB_EXECUTION E, BATCH_JOB_INSTANCE I WHERE E.JOB_INSTANCE_ID=I.JOB_INSTANCE_ID) AS TMP_SUB WHERE ROW_NUMBER <= 20\n\nThe problem is that the reference the to column alias 'ROW_NUMBER' in the where clause is missing the proper query alias. The where clause should reference the column as 'TMP_SUB.ROW_NUMBER'.\n\nThe correct sql is below: ( BTW - I verified that the first one fails in my sql client and that the statement, with the correction applied, below does indeed work.)\nSELECT * FROM ( SELECT E.JOB_EXECUTION_ID, E.START_TIME, E.END_TIME, E.STATUS, E.EXIT_CODE, E.EXIT_MESSAGE, E.CREATE_TIME, E.LAST_UPDATED, E.VERSION, I.JOB_INSTANCE_ID, I.JOB_NAME, ROW_NUMBER() OVER () AS ROW_NUMBER FROM BATCH_JOB_EXECUTION E, BATCH_JOB_INSTANCE I WHERE E.JOB_INSTANCE_ID=I.JOB_INSTANCE_ID) AS TMP_SUB WHERE TMP_SUB.ROW_NUMBER <= 20\n\n\n---\n\n**Affects:** 2.1.2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/8902e314d40c07179b66cf498ddc77e943faf2d2\n", "url": "https://github.com/spring-projects/spring-batch/issues/1963", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-08-25 12:30:24", "closed": "2010-08-25 23:08:12", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Add <step flow=\"...\"/> attribute [BATCH-1621]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1621](https://jira.spring.io/browse/BATCH-1621?redirect=false)** and commented\n\n\n---\n\n**Affects:** 2.1.0\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=94050\n", "url": "https://github.com/spring-projects/spring-batch/issues/1962", "user": "spring-issuemaster", "labels": ["status: invalid", "type: bug"], "created": "2010-08-27 00:15:39", "closed": "2010-08-28 00:33:12", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "FlowStep never fails [BATCH-1620]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1620](https://jira.spring.io/browse/BATCH-1620?redirect=false)** and commented\n\n\n---\n\n**Affects:** 2.1.0\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=94050\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/da6b67ee2e915be9ee64d62c165647b86b419e82, https://github.com/spring-projects/spring-batch/commit/48ce91f5d07660dcd627886d098aa4779d11e8ae, https://github.com/spring-projects/spring-batch/commit/ab7f7390d1607b19e6e3d2da6d917994a0aaa08d\n", "url": "https://github.com/spring-projects/spring-batch/issues/1960", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-08-27 00:12:10", "closed": "2010-08-27 00:43:51", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "A chunk configured with processor-transactional=\"true\" shouldn't require a retry- or skip-limit [BATCH-1623]", "body": "**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[BATCH-1623](https://jira.spring.io/browse/BATCH-1623?redirect=false)** and commented\n\nAt the moment when you configure `processor-transactional=\"true\"` on a chunk the framework's validation forces you to also specify a retry-limit or skip-limit. First of all, when you specify a `<retry-policy>` element this requirement still exists, even though the policy overrules the configured retry-limit, so that's an error in the validation (StepParserStepFactoryBean.java:466).\nSecond of all, it might not really be necessary to enforce this requirement at all.\nFrom the brief private discussion on Skype with Dave about this:\n\n```\n[12:33:45 PM] David Syer: I guess it makes sense that processor-transactional=\"true\" requires one or the other.  But maybe we should lift that restriction too (allow the middleware to deal with retry)?\n[12:35:20 PM] Joris Kuipers: could be, but wouldn't that only be the case if your ItemReader was transactional as well? I cannot easily imagine a scenario where a non-transactional reader would be followed by a transactional processor where middleware would take care of retries for the processor...\n[12:35:46 PM] Joris Kuipers: but maybe I haven't thought enough about what (non-)transactional processors really cause the framework to do\n[12:36:09 PM] Joris Kuipers: it's just a way to prevent caching the items, right?\n[12:36:26 PM] Joris Kuipers: since a rollback on error won't lose items for tx-al processing\n[12:38:27 PM] David Syer: Right, I was mixing it up with reader-transactional\n[12:38:34 PM] David Syer: So there's no obvious link to retry.\n[12:38:55 PM] David Syer: You could set it true if you want and if there is no retry there is no re-processing either, but it's harmless.\n[12:39:18 PM] Joris Kuipers: that's what I thought as well, yes\n[12:39:41 PM] David Syer: OK.  Mention that in the JIRA and I'll remove the restriction completely.\n```\n\n\n\n---\n\n**Affects:** 2.1.2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/85f721424aaf59a26e4b16560514b22d1fa28bd8, https://github.com/spring-projects/spring-batch/commit/c7491971ebf5ba1490a56da3368401a2b3583dd0\n", "url": "https://github.com/spring-projects/spring-batch/issues/1959", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2010-09-03 04:36:44", "closed": "2010-09-06 06:56:02", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "Spring Batch Website documentation - fix link to Spring Integration [BATCH-1624]", "body": "**[Neil Laurance](https://jira.spring.io/secure/ViewProfile.jspa?name=toolkit)** opened **[BATCH-1624](https://jira.spring.io/browse/BATCH-1624?redirect=false)** and commented\n\nOn the Spring Batch homepage http://static.springsource.org/spring-batch/\n\nThe link to Spring Integration points to http://www.springframework.org/projects/spring-integration when it should be http://www.springframework.org/spring-integration\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/984a254fed75c8ef22894d0a8530b7952f8781e0\n", "url": "https://github.com/spring-projects/spring-batch/issues/1958", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2010-09-03 09:47:33", "closed": "2010-09-04 04:31:07", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "<batch:listener /> XSD/Parser Issues [BATCH-1625]", "body": "**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[BATCH-1625](https://jira.spring.io/browse/BATCH-1625?redirect=false)** and commented\n\nThis works...\n\n    <batch:listeners>\n        <batch:listener>\n            <bean class=\"rewards.batch.DiningSkipListener\"/>\n        </batch:listener>\n    </batch:listeners>\n\nbut STS gives a syntax error...\n\nNeither 'ref' or 'class' specified for <batch:listener> element    system-test-config.xml    /batch-1-solution/src/test/resources    line 45    Spring Beans Problem\n\nERROR: rewards.batch.DiningSkipListener - Skipped item:Parsing error at line: 123, input=[1234123412340002, 1234567890, 120.00, 2009-05-03, some extra column]\n\nThe error implies this will work...\n\n    <batch:listeners>\n        <batch:listener class=\"rewards.batch.DiningSkipListener\"/>\n    </batch:listeners>\n\nBut we get\n\nThe <batch:listener/> element must have exactly one of: 'ref' attribute, \\<bean/> attribute, or \\<ref/> element.  Found: None.    batch-job-config.xml    /batch-1-solution/src/main/resources    line 45    Spring Beans Problem\n\n(Notice \\<bean /> 'attribute' - should be \\<bean /> element).\n\nThis works with no syntax errors...\n\n    <batch:listeners>\n        <batch:listener ref=\"skipListener\"/>\n    </batch:listeners>\n\n\n\n---\n\n**Affects:** 2.1.2\n", "url": "https://github.com/spring-projects/spring-batch/issues/1957", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2010-09-03 10:15:32", "closed": "2010-09-04 04:32:17", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "FaultTolerantChunkProcessor contains dangerous log statements [BATCH-1629]", "body": "**[Kyrill Alyoshin](https://jira.spring.io/secure/ViewProfile.jspa?name=kyrill007)** opened **[BATCH-1629](https://jira.spring.io/browse/BATCH-1629?redirect=false)** and commented\n\nI've just profiled an application that is making an extensive use of Spring Batch. And believe the biggest performance hog was.......\n\nthe StringBuilder conversions in FaultTolerantChunkProcessor class. There are couple of log statements there that do this:\n\nlogger.debug(\"Attempting to write: \" + inputs);\n\nwithout\n\nif(logger.isDebugEnabled()).\n\nI mean, guys, come on, inputs can be pretty wacky. In this case it was a list of Hibernate entities containing a lot of properties and all of them are in the toString() implementation. This \"innocent\" logging statement was the biggest performance hog in the app.\n\nIt probably would make sense to do an audit and see if there are any other places where such debug statement are not safe. I suppose I could do that. Would you take a patch?\n\n\n---\n\n**Affects:** 2.1.3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/95cc70df4f08fe5a4f9cc5b41141bbfa64973927\n", "url": "https://github.com/spring-projects/spring-batch/issues/1953", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2010-09-17 12:43:05", "closed": "2010-09-18 00:59:29", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Typos on Spring Batch home page [BATCH-1631]", "body": "**[Andrew Swan](https://jira.spring.io/secure/ViewProfile.jspa?name=aswan)** opened **[BATCH-1631](https://jira.spring.io/browse/BATCH-1631?redirect=false)** and commented\n\n1. The word \"advance\" should be replaced with \"advanced\" in two places.\n2. The word \"though\" should be replaced with \"through\" in the following sentence:\n\n> It also provides more advance technical services and features that will enable extremely high-volume and high performance batch jobs though optimization and partitioning techniques.\n\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/c1e65ce077e9a0f9b27301cd0f6ccfa942a05f24\n", "url": "https://github.com/spring-projects/spring-batch/issues/1951", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2010-09-19 21:54:11", "closed": "2010-09-20 22:22:08", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "DefaultFieldSet#readBigDecimal(String, BigDecimal) and NumberFormatException [BATCH-1632]", "body": "**[J\u00e9r\u00f4me Delagnes](https://jira.spring.io/secure/ViewProfile.jspa?name=jerome.delagnes)** opened **[BATCH-1632](https://jira.spring.io/browse/BATCH-1632?redirect=false)** and commented\n\nHere the code of DefaultFieldSet#readBigDecimal(String, BigDecimal):\n\n```java\n466\t        public BigDecimal readBigDecimal(String name, BigDecimal defaultValue) {\n467\t                try {\n468\t                        return readBigDecimal(indexOf(name), defaultValue);\n469\t                }\n470\t                catch (IllegalArgumentException e) {\n471\t                        throw new IllegalArgumentException(e.getMessage() + \", name: [\" + name + \"]\");\n472\t                }\n473\t        }\n```\n\nThe problem is that a NumberFormatException is also an IllegalArgumentException.\n\nSo at this point, we can not make the difference between between indexOf failure and BigDecimal conversion failure.\n\nThe fix:\n\n```java\n466\t        public BigDecimal readBigDecimal(String name, BigDecimal defaultValue) {\n467\t                try {\n468\t                        return readBigDecimal(indexOf(name), defaultValue);\n469\t                }\n470\t                catch (NumberFormatException e) {\n471\t                        throw new NumberFormatException(e.getMessage() + \", name: [\" + name + \"]\");\n472\t                }\n473\t                catch (IllegalArgumentException e) {\n474\t                        throw new IllegalArgumentException(e.getMessage() + \", name: [\" + name + \"]\");\n475\t                }\n476\t        }\n```\n\n\n\n---\n\n**Affects:** 2.1.0, 2.1.1, 2.1.2, 2.1.3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/2c174da070c90efbd864c568b661cae9ec4b16ff\n", "url": "https://github.com/spring-projects/spring-batch/issues/1950", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2010-09-24 04:40:18", "closed": "2010-09-26 23:06:24", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "Dependency injection problem with step scoped anonymous inner bean [BATCH-1633]", "body": "**[J\u00e9r\u00f4me Delagnes](https://jira.spring.io/secure/ViewProfile.jspa?name=jerome.delagnes)** opened **[BATCH-1633](https://jira.spring.io/browse/BATCH-1633?redirect=false)** and commented\n\nXML spring context sample :\n\n    <bean id=\"john\" class=\"java.lang.String\">\n        <constructor-arg index=\"0\" value=\"John\"/>\n    </bean>\n    \n    <bean id=\"jane\" class=\"java.lang.String\">\n        <constructor-arg index=\"0\" value=\"Jane\"/>\n    </bean>\n    \n    <batch:job id=\"firstJob\" job-repository=\"jobRepository\">\n        <batch:step id=\"firstJobFirstStep\" next=\"firstJobSecondStep\">\n            <batch:tasklet>\n                <bean class=\"spring.batch.test.InnerBeanStepScopedTest$Hello\" scope=\"step\">\n                    <property name=\"name\" ref=\"jane\"/>\n                </bean>\n            </batch:tasklet>\n        </batch:step>\n    \n        <batch:step id=\"firstJobSecondStep\">\n            <batch:tasklet>\n                <bean class=\"spring.batch.test.InnerBeanStepScopedTest$Hello\" scope=\"step\">\n                    <property name=\"name\" ref=\"john\"/>\n                </bean>\n            </batch:tasklet>\n        </batch:step>\n    </batch:job>\n\nThe output produced is:\n\n    19:08:03.885 [main] INFO  s.b.t.InnerBeanStepScopedTest$Hello - Hello John!\n    19:08:03.975 [main] INFO  s.b.t.InnerBeanStepScopedTest$Hello - Hello John!\n\nNow, the question is: where is Jane? :o)\n\nIf the two tasklets are unscoped (just remove scope=\"step\") then the ouput is:\n\n    19:13:20.801 [main] INFO  s.b.t.InnerBeanStepScopedTest$Hello - Hello Jane!\n    19:13:20.921 [main] INFO  s.b.t.InnerBeanStepScopedTest$Hello - Hello John!\n\nYes, Jan is back!\n\nSo, dependency injection fails on step scoped inner anonymous beans.\n\nWorkaround: name inner beans with an id attribute... but it's boring (me).\n\n\n---\n\n**Affects:** 2.1.3\n\n**Attachments:**\n- [my-spring-batch-test.zip](https://jira.spring.io/secure/attachment/17140/my-spring-batch-test.zip) (_5.81 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/6685e26b6a40b406de2fe74105ebf5a96d209914\n", "url": "https://github.com/spring-projects/spring-batch/issues/1949", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-09-26 10:27:29", "closed": "2010-09-26 23:31:19", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Spring Batch and Hibernate Search do not work together [BATCH-1635]", "body": "**[Damien Hollis](https://jira.spring.io/secure/ViewProfile.jspa?name=damien.hollis)** opened **[BATCH-1635](https://jira.spring.io/browse/BATCH-1635?redirect=false)** and commented\n\nWe are having a problem when using spring batch and hibernate search together.   Basically when hibernate search needs to lazy load a entity using indexing (which occurs during the commit processing) we get a lazy load exception (org.hibernate.LazyInitializationException: could not initialize proxy - no Session).\n\nI'm pretty sure this problem is caused by the call to hibernateTemplate.clear() in HibernateItemWriter:\n\n    public final void write(List<? extends T> items) {\n    \tdoWrite(hibernateTemplate, items);\n    \ttry {\n    \t\thibernateTemplate.flush();\n    \t}\n    \tfinally {\n    \t\t// This should happen when the transaction commits anyway, but to be\n    \t\t// sure...\n    \t\thibernateTemplate.clear();\n    \t}\n    }\n\nAs the affect of this is also to clear the session on any hibernate proxies.\n\nAs the comment says, the clear should not be needed and I would suggest either removing it or at least making it configurable.\n\n\n---\n\n**Affects:** 2.1.3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/1e1edb8ff907d3f934dea4340bf3ca9fef3d57ba\n", "url": "https://github.com/spring-projects/spring-batch/issues/1947", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2010-09-27 22:22:29", "closed": "2011-06-01 02:42:42", "commits": {}, "ttf": 246.00027777777777, "commitsDetails": []}, {"title": "OraclePagingQueryProvider adds an extra column to the jump to page query [BATCH-1637]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1637](https://jira.spring.io/browse/BATCH-1637?redirect=false)** and commented\n\nOraclePagingQueryProvider adds an extra column to the jump to page query (ROWNUM), which confuses clients if they are expecting only one column to be returned.  This isn't a problem for existing internal clients of the query provider but it affects Spring Batch Admin ([BATCHADM-74](https://jira.spring.io/browse/BATCHADM-74)).\n\n\n---\n\n**Affects:** 2.1.3\n", "url": "https://github.com/spring-projects/spring-batch/issues/1945", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-10-07 10:34:31", "closed": "2010-10-09 12:17:59", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "Possible NullPointerException when using no-rollback [BATCH-1638]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1638](https://jira.spring.io/browse/BATCH-1638?redirect=false)** and commented\n\nPossible NullPointerException when using no-rollback: the ChunkTransactionCallback in TaskletStep might return null if there is an exception that is marked as no rollback.\n\n\n---\n\n**Affects:** 2.1.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/1944", "user": "spring-issuemaster", "labels": ["status: invalid", "type: bug"], "created": "2010-10-07 16:44:06", "closed": "2010-10-10 13:31:50", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "Oracle jumpToItemQuery needs a tweak (again) [BATCH-1639]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1639](https://jira.spring.io/browse/BATCH-1639?redirect=false)** and commented\n\nOraclePagingQueryProvider.generateJumpToItemQuery generates an incorrect query, see [BATCHADM-74](https://jira.spring.io/browse/BATCHADM-74).  It doesn't affect Batch users much, but it has a n impact on Spring Batch Admin with Oracle.\n\n\n---\n\n**Affects:** 2.1.3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/abd66edb30294bb6be3fce9d586ec431517e4d51\n", "url": "https://github.com/spring-projects/spring-batch/issues/1943", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-10-09 09:11:14", "closed": "2010-10-09 09:11:33", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "File writers do not behave correctly on rollback [BATCH-1640]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1640](https://jira.spring.io/browse/BATCH-1640?redirect=false)** and commented\n\nFile writers do not behave correctly on rollback.  It doesn't seem to affect regular users of FlatFileItemWriter (and XML) but if you write one item at a time instead of all at once in a transaction which rolls back, then no data are ever written by the writer.\n\nThe bug is in TransactionAwareBufferedWriter which fails to clear its transaction resource on rollback.\n\n\n---\n\n**Affects:** 2.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/2b21e39556d9576acb399cd1b1b8dd258ea81b42\n", "url": "https://github.com/spring-projects/spring-batch/issues/1942", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2010-10-13 17:55:52", "closed": "2010-10-13 18:01:25", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Unpredictable binding in BeanWrapperFieldSetMapper because of \"fuzzy\" property matching [BATCH-1643]", "body": "**[Tom Green](https://jira.spring.io/secure/ViewProfile.jspa?name=skelf)** opened **[BATCH-1643](https://jira.spring.io/browse/BATCH-1643?redirect=false)** and commented\n\nThis bug has two distinct symptoms, due to the permissiveness of the fuzzy matching in BeanWrapperFieldSetMapper#findPropertyName().  See the attached Unit test and included javadocs.  Basically, the fuzzy matching can cause multiple columns of the input to match the same target bean property, thus wrongly failing to throw NotWritablePropertyException in some cases, and this also makes it unpredictable which competing {`@link` FieldSet} value will actually be set into the target bean property.\n\nAs a **minimal** work-around it would be nice to be able to turn off fuzzy matching (e.g. by exposing distanceLimit as a configurable property).  I would also suggest  defaulting its value to 0 instead of 5, as it is pretty dangerous.\n\n\n---\n\n**Affects:** 2.1.3\n\n**Attachments:**\n- [BeanWrapperFieldSetMapperFuzzyMatchingTest.java](https://jira.spring.io/secure/attachment/17207/BeanWrapperFieldSetMapperFuzzyMatchingTest.java) (_2.03 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/24bfddeb1a240ae1149d15f826262a9e13b7a2ab, https://github.com/spring-projects/spring-batch/commit/f1667b7d8fdae0e365a39a774d4e01b16a782676\n\n1 votes, 0 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1939", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2010-10-16 16:51:47", "closed": "2010-10-28 09:43:52", "commits": {}, "ttf": 11.000277777777777, "commitsDetails": []}, {"title": "Can not reuse the same ItemReader class in 2 steps of a job if scope=step is used [BATCH-1646]", "body": "**[christophe blin](https://jira.spring.io/secure/ViewProfile.jspa?name=cblin)** opened **[BATCH-1646](https://jira.spring.io/browse/BATCH-1646?redirect=false)** and commented\n\n<batch:job id=\"job1\">\n<batch:step id=\"step1\" parent=\"simpleStep\" next=\"step2\">\n<batch:tasklet>\n<batch:chunk>\n<batch:reader>\n\\<bean class=\"mypackage.AReader\" scope=\"step\">\n\\<constructor-arg index=\"0\" value=\"#{jobParameters[AFileName]}\" />\n\\</bean>\n</batch:reader>\n<batch:writer>\n<bean class=\"mypackage.AWriter scope=\"step\">\n\\</bean>                    \n</batch:writer>\n</batch:chunk>\n</batch:tasklet>\n</batch:step>\n\n        <batch:step id=\"step2\" parent=\"simpleStep\">\n            <batch:tasklet>\n                <batch:chunk>\n                    <batch:reader>\n                        <bean class=\"mypackage.AReader\" scope=\"step\">\n                            <constructor-arg index=\"0\" value=\"#{jobParameters[AnotherFileName]}\" />\n                        </bean>\n                    </batch:reader>\n                    <batch:writer>\n                        <bean class=\"mypackage.AnotherWriter\" scope=\"step\">                          \n                        </bean>                    \n                    </batch:writer>\n                </batch:chunk>\n            </batch:tasklet>\n        </batch:step>\n    </batch:job>\n\nJobParametersBuilder params = new JobParametersBuilder();\nparams.addString(\"AFileName\", \"classpath:/unimarcimport/file1\");\nparams.addString(\"AnotherFileName\", \"classpath:/unimarcimport/file2\");\nJobExecution exec = jobLauncher.run(job, params.toJobParameters());\n\nSet a breakpoint in the constructor of AReader.\nThe constructor is rightly called twice, but twice with arg0 == 'classpath:/unimarcimport/file2' (wheread it is expected that it is called with classpath:/unimarcimport/file1 the first time...)\n\nWorkaround : naming the beans for the beans with className=AReader (ex: \"r0\" and \"r1\" )\n\nI think the problem is inside the scope=step mechanism because if you remove scope=step and you replace the value of arg0 by a hardcoded value, then it works as expected without renaming the beans\n\n\n---\nNo further details from [BATCH-1646](https://jira.spring.io/browse/BATCH-1646?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/1936", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2010-10-26 03:11:54", "closed": "2010-10-27 10:23:31", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Inner bean with a late binding parameter in the constructor does not work [BATCH-1647]", "body": "**[christophe blin](https://jira.spring.io/secure/ViewProfile.jspa?name=cblin)** opened **[BATCH-1647](https://jira.spring.io/browse/BATCH-1647?redirect=false)** and commented\n\nI think this is related to [BATCH-1633](https://jira.spring.io/browse/BATCH-1633) (and [BATCH-1646](https://jira.spring.io/browse/BATCH-1646)) but WITH A DIFFERENT CAUSE\n\nTake the same example as in [BATCH-1633](https://jira.spring.io/browse/BATCH-1633) BUT replace the setName method with a constructor injection.\n\n    <batch:job id=\"firstJob\" job-repository=\"jobRepository\">\n      <batch:step id=\"firstJobFirstStep\">\n          <batch:tasklet>\n              <bean id=\"uniqid\" class=\"spring.batch.test.InnerBeanStepScopedTest$Hello\" scope=\"step\">\n                  <constructor-arg index=\"0\" value=\"#{jobParameters[AFileName]}\"/>\n              </bean>\n          </batch:tasklet>\n      </batch:step>\n\nAs you can note, the inner bean has an id (== 'uniqid') so this is not the same bug as in the 2 previous bug reports.\n\nNow, execute the job twice with AFileName being different for the 2 executions\njobLauncher.launch(job, params1); //params1.AFileName == firstfile\njobLauncher.launch(job, params2); //params2.AFileName == secondfile\n\nThe constructor is rightly called twice but twice with the value 'firstfile' !!!!\n\nI think the parameters evaluation is re-done ONLY for properties, not for constructors.\n\nWorkaround : use property injection instead of constructor injection\n\n\n---\n\n**Affects:** 2.1.3\n", "url": "https://github.com/spring-projects/spring-batch/issues/1935", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-10-27 08:35:38", "closed": "2010-11-04 08:03:51", "commits": {}, "ttf": 7.000277777777778, "commitsDetails": []}, {"title": "Paging query for IbatisPagingItemReader in reference documentation is incorrect [BATCH-1648]", "body": "**[Anand Chittanuri](https://jira.spring.io/secure/ViewProfile.jspa?name=anandchittanuri)** opened **[BATCH-1648](https://jira.spring.io/browse/BATCH-1648?redirect=false)** and commented\n\nIn the documentation for IbatisPagingItemReader, (http://static.springsource.org/spring-batch/reference/html/readersAndWriters.html#IbatisPagingItemReader)\n\nthe paging query is given as\n\n\\<select id=\"getPagedCustomerCredits\" resultMap=\"customerCreditResult\">\nselect * from (\nselect * from (\nselect t.id, t.name, t.credit, ROWNUM ROWNUM_ from customer t order by id\n) where ROWNUM_ \\<![CDATA[ > ]]> ( #_page# * #_pagesize# )\n) where ROWNUM \\<![CDATA[ \\<= ]]> #_pagesize#\n\\</select>\n\nBut it should be\n\n\\<select id=\"getPagedCustomerCredits\" resultMap=\"customerCreditResult\">\nselect * from (\nselect * from (\nselect id,name,credit, ROWNUM rownum_ from (\nselect t.id, t.name, t.credit, ROWNUM ROWNUM_ from customer t order by id\n) )  where ROWNUM_ \\<![CDATA[ > ]]> ( #_page# * #_pagesize# )\n) where ROWNUM \\<![CDATA[ \\<= ]]> #_pagesize#\n\\</select>\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/51eefc70af0c108459a6660cf5da35684e774273\n", "url": "https://github.com/spring-projects/spring-batch/issues/1934", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2010-10-28 00:48:57", "closed": "2010-10-28 08:32:02", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "CommandLineJobRunner hangs [BATCH-1652]", "body": "**[Stijn Maller](https://jira.spring.io/secure/ViewProfile.jspa?name=smaller)** opened **[BATCH-1652](https://jira.spring.io/browse/BATCH-1652?redirect=false)** and commented\n\nAfter upgrading spring-batch to 2.1.4 all of our batch jobs stopped doing anything when launched. The processes just hang and even the spring-batch db tables are not accessed. When debugging I noticed that the process was stuck waiting for input on line 518.\n\n\n---\n\n**Affects:** 2.1.4\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=97903\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/acf234a849048f44f0fb3e5faa9e5f8c2dc67b81, https://github.com/spring-projects/spring-batch/commit/1e36f1c6559c3f3eabbedce65d902d781ad79694\n", "url": "https://github.com/spring-projects/spring-batch/issues/1931", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2010-11-10 02:04:18", "closed": "2010-11-12 02:53:39", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "using batch core leads to java.lang.NoClassDefFoundError: com/thoughtworks/xstream/io/HierarchicalStreamDriver [BATCH-1653]", "body": "**[Marius Cristian Vulpe](https://jira.spring.io/secure/ViewProfile.jspa?name=cristiv)** opened **[BATCH-1653](https://jira.spring.io/browse/BATCH-1653?redirect=false)** and commented\n\nI have created a sample application (based on spring template selection in STS 2.5.0 -> Simple spring batch project). I have switched from the default HSQL to SQLServer and when initializing the beans I get the following:\n\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jobRepository': Invocation of init method failed; nested exception is java.lang.NoClassDefFoundError: com/thoughtworks/xstream/io/HierarchicalStreamDriver\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1420) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE]\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE]\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE]\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE]\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE]\nat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE]\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE]\nat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:322) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE]\n... 40 common frames omitted\nCaused by: java.lang.NoClassDefFoundError: com/thoughtworks/xstream/io/HierarchicalStreamDriver\nat org.springframework.batch.core.repository.dao.JdbcExecutionContextDao.afterPropertiesSet(JdbcExecutionContextDao.java:169) ~[spring-batch-core-2.1.4.RELEASE.jar:na]\nat org.springframework.batch.core.repository.support.JobRepositoryFactoryBean.createExecutionContextDao(JobRepositoryFactoryBean.java:205) ~[spring-batch-core-2.1.4.RELEASE.jar:na]\nat org.springframework.batch.core.repository.support.AbstractJobRepositoryFactoryBean.getTarget(AbstractJobRepositoryFactoryBean.java:161) ~[spring-batch-core-2.1.4.RELEASE.jar:na]\nat org.springframework.batch.core.repository.support.AbstractJobRepositoryFactoryBean.initializeProxy(AbstractJobRepositoryFactoryBean.java:150) ~[spring-batch-core-2.1.4.RELEASE.jar:na]\nat org.springframework.batch.core.repository.support.AbstractJobRepositoryFactoryBean.afterPropertiesSet(AbstractJobRepositoryFactoryBean.java:157) ~[spring-batch-core-2.1.4.RELEASE.jar:na]\nat org.springframework.batch.core.repository.support.JobRepositoryFactoryBean.afterPropertiesSet(JobRepositoryFactoryBean.java:156) ~[spring-batch-core-2.1.4.RELEASE.jar:na]\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1477) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE]\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1417) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE]\n... 47 common frames omitted\nCaused by: java.lang.ClassNotFoundException: com.thoughtworks.xstream.io.HierarchicalStreamDriver\nat java.net.URLClassLoader$1.run(URLClassLoader.java:202) ~[na:1.6.0_22]\nat java.security.AccessController.doPrivileged(Native Method) ~[na:1.6.0_22]\nat java.net.URLClassLoader.findClass(URLClassLoader.java:190) ~[na:1.6.0_22]\nat java.lang.ClassLoader.loadClass(ClassLoader.java:307) ~[na:1.6.0_22]\nat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301) ~[na:1.6.0_22]\nat java.lang.ClassLoader.loadClass(ClassLoader.java:248) ~[na:1.6.0_22]\n... 55 common frames omitted\n\nThis problem doesn't appear in 2.1.3 (going back to that at this moment).\nApparently the problem is because the POM doesn't refer in any way the XStream. I guess this is not a problem related to the code itself but rather to the way the POMs are curently configured.\nLet me know if further details are needed.\n\n\n---\n\n**Affects:** 2.1.4\n", "url": "https://github.com/spring-projects/spring-batch/issues/1930", "user": "spring-issuemaster", "labels": ["in: samples", "status: invalid", "type: bug"], "created": "2010-11-11 14:22:27", "closed": "2010-11-12 00:49:31", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "StepExecution.equals() should consider id as well as name and jobExecution [BATCH-1654]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1654](https://jira.spring.io/browse/BATCH-1654?redirect=false)** and commented\n\nStepExecution.equals() should consider id as well as name and jobExecution: a step can be executed multiple times in the same JobExecution.\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/b4cdc4ab9fdc3dd90a43263e1daaf90da9894d51, https://github.com/spring-projects/spring-batch/commit/7f41b4dab2e60b4c70238b01f939c92bee3eea0b\n", "url": "https://github.com/spring-projects/spring-batch/issues/1929", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-11-16 08:39:16", "closed": "2010-11-18 04:37:13", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Infinite loop on no-rollback-for exception when skipLimit is reached due to exception in ItemProcessor [BATCH-1656]", "body": "**[Haasip Satang](https://jira.spring.io/secure/ViewProfile.jspa?name=haasip.satang)** opened **[BATCH-1656](https://jira.spring.io/browse/BATCH-1656?redirect=false)** and commented\n\nIf java.lang.Exception is configured in the \"no-rollback-exception-classes\" this leads to an infinite loop when the skipLimit is reached, caused by an exception thrown in the ItemProcessor.\n\nExceptions thrown in the writer are handled  just fine.\n\nIt seems like this was introduced in 2.1 only (tested with 2.1.1 and 2.1.5) as it is working fine in 2.0.1.\n\n\n\n---\n\n**Affects:** 2.1.5\n\n**Attachments:**\n- [test.zip](https://jira.spring.io/secure/attachment/17377/test.zip) (_2.47 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/f55bc5e44f84efab08ba37d9580400ab033b3450\n", "url": "https://github.com/spring-projects/spring-batch/issues/1928", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-11-18 14:32:35", "closed": "2010-11-22 03:02:25", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "ORDER BY clause missing from paging queries for Derby [BATCH-1657]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1657](https://jira.spring.io/browse/BATCH-1657?redirect=false)** and commented\n\nORDER BY clause missing from paging queries for DB2, Derby, SQL Server, Sybase.  Paging JDBC readers probably broken or unrelaiable as a result.\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/28eb5b02d3d39ee7e10b26c7c603e58000f834fb\n", "url": "https://github.com/spring-projects/spring-batch/issues/1927", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-11-19 03:28:37", "closed": "2010-11-22 03:40:57", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "FileUtils setUpOutputFile fails on NAS from linux [BATCH-1659]", "body": "**[Anders Holmgren](https://jira.spring.io/secure/ViewProfile.jspa?name=andersmholmgren)** opened **[BATCH-1659](https://jira.spring.io/browse/BATCH-1659?redirect=false)** and commented\n\nFlatFileItemWriter is failing on a NAS running on linux. It fails in FileUtils.setUpOutputFile where it calls file.createNewFile();\n\nA simple test program reproduces the problem. If I run this once I get the exception, but it successfully creates the file. If I run it a second time it works.\n\npublic class TestNAS\n{\npublic static void main( String[] args ) throws IOException\n{\nFile file = new File(\"./test.txt\");\nfile.createNewFile();\n}\n}\n\nThe exception is\n\nException in thread \"main\" java.lang.reflect.InvocationTargetException\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:597)\nat com.simontuffs.onejar.Boot.run(Boot.java:329)\nat com.simontuffs.onejar.Boot.main(Boot.java:164)\nCaused by: java.io.IOException: Permission denied\nat java.io.UnixFileSystem.createFileExclusively(Native Method)\nat java.io.File.createNewFile(File.java:883)\nat com.jpmorgan.wss.test.TestNAS.main(TestNAS.java:16)\n... 6 more\n\n\n---\n\n**Affects:** 2.1.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/25b899b83d33fab882a64a1bf616a115be884181, https://github.com/spring-projects/spring-batch/commit/a3702694cdbe27d8a744abcca4578cca976ea10b\n", "url": "https://github.com/spring-projects/spring-batch/issues/1925", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2010-11-23 23:21:42", "closed": "2010-11-28 15:18:40", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "StaxEventItemWriter uses other StaxResult than Jaxb2Marshaller [BATCH-1660]", "body": "**[Holger Zahnleiter](https://jira.spring.io/secure/ViewProfile.jspa?name=hzahnlei)** opened **[BATCH-1660](https://jira.spring.io/browse/BATCH-1660?redirect=false)** and commented\n\nWe use an MDA approach.\nTherefore our entity classes are generated and annotated with JAXB annotations.\nWe also have to develop various batches which read or write XML files.\nTherefore I wanted to use Spring Batch's StaxEventItemWriter.\nBecause of the JAXB annotations I decided to use Spring OXM's Jaxb2Marshaller.\nAs a result I got an XML file which was overloaded with repeated namespace definitions.\nI did not find a way to tell StaxEvenItemWriter or Jaxb2Marshaller to suppress namespaces by configuration.\nHence, I was debugging the marshalling process.\nI was hoping to find a way to influence the serialization result they way I wanted it to look like.\nThereby I discovered that StaxEventItemWriter uses its own version of a StAX result (org.springframework.xml.transform.StaxResult).\nWhereas the Jaxb2Marshaller uses two other types of StAX results (org.springframework.util.xml.StaxResult and javax.xml.transform.stax.StAXResult).\n\nIf you debug into Jaxb2Marshaller.marshal(Object object, Result result, MimeContainer mimeContainer) then you will see that the marshaller tries to find out whether result is a StAX result or not.\nTherefore it uses StaxUtils.isStaxResult(Result result).\nThis routine only checks for org.springframework.util.xml.StaxResult and javax.xml.transform.stax.StAXResult but not for org.springframework.xml.transform.StaxResult.\nTherefore result is not marshalled using Jaxb2Marshaller.marshalStaxResult(Marshaller jaxbMarshaller, Object graph, Result staxResult).\n\nI'm not very familiar with Spring Batch nor with JAXB.\nNever the less I think this behaviour might be an error.\nI assume that it is expected that a StAX result is beeing serialized by Jaxb2Marshaller.marshalStaxResult().\nI have patched StaxEvenItemWriter.write(List<? extends T> items) to use javax.xml.transform.stax.StAXResult instead of org.springframework.xml.transform.StaxResult.\nThe XML produced looks fine.\nThe number of namespace declarations has decreased dramatically.\n\nThank you for your effort in advance.\n\n\n---\n\n**Affects:** 2.0.4\n", "url": "https://github.com/spring-projects/spring-batch/issues/1924", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2010-11-24 08:35:36", "closed": "2010-11-29 02:15:00", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "Nested splits lead to invalid flow definition [BATCH-1670]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1670](https://jira.spring.io/browse/BATCH-1670?redirect=false)** and commented\n\n\n---\n\n**Affects:** 2.1.5\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=99626\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/63e1e1b60824db8e3e1d1399cc4a6f12f0cb35b6\n", "url": "https://github.com/spring-projects/spring-batch/issues/1915", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2010-12-20 01:11:34", "closed": "2011-02-07 00:45:09", "commits": {}, "ttf": 48.000277777777775, "commitsDetails": []}, {"title": "static methods are not public in ExecutionContextTestUtils [BATCH-1671]", "body": "**[Tadaya Tsuyukubo](https://jira.spring.io/secure/ViewProfile.jspa?name=tadaya)** opened **[BATCH-1671](https://jira.spring.io/browse/BATCH-1671?redirect=false)** and commented\n\nCurrently all methods in org.springframework.batch.test.ExecutionContextTestUtils are not public(default/package scope now).\nCan you make them public, so that test class can have access to them.\n\nThanks,\n\n\n---\n\n**Affects:** 2.1.4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/599891fd45b1859a97804bf7d9621eca4616c260\n", "url": "https://github.com/spring-projects/spring-batch/issues/1914", "user": "spring-issuemaster", "labels": ["in: test", "type: bug"], "created": "2010-12-20 11:45:17", "closed": "2010-12-21 03:14:59", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Class extends SkipListenerSupport<T, S>. onSkipInProcess with FlatFileItemWriter. File is empty when job is finished. [BATCH-1673]", "body": "**[Tanya Koganov](https://jira.spring.io/secure/ViewProfile.jspa?name=koganovt)** opened **[BATCH-1673](https://jira.spring.io/browse/BATCH-1673?redirect=false)** and commented\r\n\r\nI have a job, where I want to skip a certain type of Exception. When that exception is thrown, I want to invoke a listener. that listener would write bad record, using FlatFileItemWriter, to a file.\r\nEverything works fine. Listener is called. Effected item is written to the  error file.\r\nBut, when job is finished -- the  error file became empty. JOB is finished successfully (the same outcome\r\nno matter what is the completion status of the job)\r\n\r\nBelow is the job declaration, errorRecordWritingSkiplistner (declaration and class) and exceptionItemWriter\r\ndeclaration.\r\n\r\nThis is the job declaration (I simplified the snippets):\r\n\r\n```xml\r\n<batch:job id=\"wmsMatchingJob\">\r\n<batch:step id=\"call_changeListsProc\"  next=\"call_batchLoadPrep\">\r\n<batch:tasklet>\r\n<batch:listeners>\r\n<batch:listener ref=\"changeListsProcessorWriter\"/>\r\n<batch:listener ref=\"exceptionItemWriter\"/>\r\n<batch:listener ref=\"errorRecordWritingSkipListener\"/>\r\n</batch:listeners>\r\n<batch:chunk reader=\"changeListsProcessorReader\" processor=\"ChangeListsProcessor\" writer=\"changeListsProcessorWriter\"\r\ncommit-interval=\"${job.commit.interval}\" skip-limit=\"${skip.limit}\">\r\n<batch:skippable-exception-classes>\r\n<batch:include class=\"org.oclc.TradingPartnerPreprocessor.ChangeListProcesorException\"/>\r\n</batch:skippable-exception-classes>    \r\n<batch:streams>\r\n<batch:stream ref=\"changeListsProcessorWriter\"/>\r\n<batch:stream ref=\"exceptionItemWriter\"/>\r\n</batch:streams>\r\n</batch:chunk>\r\n</batch:tasklet>\r\n</batch:step>\r\n    </batch:job>\r\n```\r\n\r\nExceptionItemWriter:\r\n\r\n```xml\r\n<bean id=\"exceptionItemWriter\" class=\"org.springframework.batch.item.file.FlatFileItemWriter\" scope=\"step\">\r\n<property name=\"resource\" value=\"file:#{jobParameters['dataload.input.file.name']}.ERR.xml\"/>\r\n<property name=\"lineAggregator\">\r\n<bean class=\"org.springframework.batch.item.file.transform.PassThroughLineAggregator\"/>\r\n</property>\r\n<property name=\"shouldDeleteIfExists\" value=\"true\" />\r\n</bean>\r\n<bean id=\"errorRecordWritingSkipListener\" class=\"org.oclc.TradingPartnerPreprocessor.ErrorItemStepListener\" scope=\"step\">\r\n<property name=\"badItemWriter\" ref=\"exceptionItemWriter\"/>\r\n</bean>\r\n```\r\n\r\nErrorItemStepListener class:\r\n\r\n```java\r\npublic class ErrorItemStepListener<T, S> extends SkipListenerSupport<T, S>\r\n{\r\nprivate ItemWriter<String> badItemWriter;\r\nprivate static final Log logger = LogFactory.getLog(ErrorItemStepListener.class);\r\n\r\n@Override\r\npublic void onSkipInProcess(T item, Throwable t)  {\r\nlogger.debug(\"In ErrorItemStepListener\" );\r\ntry {\r\nif (t instanceof ChangeListProcesorException){\r\nList items=new ArrayList<String>();\r\nitems.add(item);\r\nlogger.debug(\"Item to be written in the ERR file: \"  + item);\r\nbadItemWriter.write(items);\r\n}\r\n} catch(Throwable t2) {\r\nlogger.error(\"Exception is throws in ErrorItemStepListener\" + t2.getMessage());\r\n\r\n      }\r\n    }\r\n    \r\n    public void setBadItemWriter(ItemWriter<String> badItemWriter) {\r\n        this.badItemWriter = badItemWriter;\r\n    }\r\n```\r\n\r\nI looked in the log files, the following statement was NOT FOUND \"Exception is throws in ErrorItemStepListener\"\r\n\r\nOutput files:\r\n\r\nWhile job is running. CHANGE.SVC.BBCA.ERR.xml -- is the error file and it has size >0\r\n\r\n```\r\nkoganovt@wmstppap01dxdu:/batchdata_stable/dataload/wmstest/in> ls -l\r\ntotal 78880\r\n-rwxr-xr-x 1 koganovt bsdata   140048 2010-12-21 11:36 CHANGE.SVC.BBCA\r\n\r\n-rw-r--r-- 1 koganovt bsdata    41136 2010-12-23 13:59 CHANGE.SVC.BBCA.CHANGESVC.xml\r\n-rw-r--r-- 1 koganovt bsdata        0 2010-12-23 13:56 CHANGE.SVC.BBCA.DESELECT.xml\r\n-rw-r--r-- 1 koganovt bsdata     4086 2010-12-23 13:59 CHANGE.SVC.BBCA.ERR.xml\r\n```\r\nAfter job is completed: CHANGE.SVC.BBCA.ERR.xml , the size of file is 0\r\n\r\n```\r\nkoganovt@wmstppap01dxdu:/batchdata_stable/dataload/wmstest/in> ls -l\r\ntotal 79168\r\n-rwxr-xr-x 1 koganovt bsdata   140048 2010-12-21 11:36 CHANGE.SVC.BBCA\r\n-rwxr--r-- 1 koganovt bsdata   167038 2010-12-21 11:36 CHANGE.SVC.BBCA1\r\n-rwxr--r-- 1 koganovt bsdata   167038 2010-12-21 11:36 CHANGE.SVC.BBCA2\r\n-rw-r--r-- 1 koganovt bsdata   183571 2010-12-23 14:06 CHANGE.SVC.BBCA.BLINPUT.DATAREC.xml\r\n-rw-r--r-- 1 koganovt bsdata   159697 2010-12-23 14:05 CHANGE.SVC.BBCA.CHANGESVC.xml\r\n-rw-r--r-- 1 koganovt bsdata        0 2010-12-23 14:05 CHANGE.SVC.BBCA.DESELECT.xml\r\n-rw-r--r-- 1 koganovt bsdata        0 2010-12-23 14:05 CHANGE.SVC.BBCA.ERR.xml\r\n```\r\n\r\nAm I missing something? Is is limited to FlatFileItemWriter Only.\r\nDo you need to see tomcat.err file (log file)\r\n\r\nThanks,\r\nTanya.\r\n\r\n\r\n---\r\n\r\n**Affects:** 2.1.2\r\n", "url": "https://github.com/spring-projects/spring-batch/issues/1912", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: declined", "type: bug"], "created": "2010-12-23 12:12:53", "closed": "2020-01-16 12:25:49", "commits": {}, "ttf": 3311.0002777777777, "commitsDetails": []}, {"title": " Inconsistencies in XSD and documentation for Listeners within Step [BATCH-1676]", "body": "**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[BATCH-1676](https://jira.spring.io/browse/BATCH-1676?redirect=false)** and commented\n\n\\<listeners> tag does not work how should be if is located directly within the  \\<step> tag\n\n\n---\n\n**Affects:** 2.1.3\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=99834\n\n**Sub-tasks:**\n- [BATCH-1687](https://jira.spring.io/browse/BATCH-1687) Fix documentation for Step Listeners\n\n- [BATCH-1688](https://jira.spring.io/browse/BATCH-1688) Add \\<listeners/> to \\<step/> and \\<chunk/>\n\n\n**Backported to:** [2.2.0 - Sprint 20](https://github.com/spring-projects/spring-batch/milestone/63?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1910", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "in: documentation", "type: bug"], "created": "2011-01-03 17:39:14", "closed": "2013-03-27 13:24:02", "commits": {}, "ttf": 813.0002777777778, "commitsDetails": []}, {"title": "Error Documentation in pointcut expression declaration [BATCH-1677]", "body": "**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[BATCH-1677](https://jira.spring.io/browse/BATCH-1677?redirect=false)** and commented\n\nIn section\n\n8.6. Declarative Iteration\nshown\nCode:\n<aop:config>\n<aop:pointcut id=\"transactional\"\nexpression=\"execution(* com...*Service.processMessage(..))\" />\n<aop:advisor pointcut-ref=\"transactional\"\nadvice-ref=\"retryAdvice\" order=\"-1\"/>\n</aop:config>\n\nis wrong because * com...* has three points and must be two * com..*\n\n\n---\n\n**Affects:** 2.1.5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/677c0be4650e3b2e0bea1e8d8447e5c1749d0ee2\n", "url": "https://github.com/spring-projects/spring-batch/issues/1909", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2011-01-03 17:51:05", "closed": "2011-01-05 06:28:47", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Inheriting from a Parent Job [BATCH-1678]", "body": "**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[BATCH-1678](https://jira.spring.io/browse/BATCH-1678?redirect=false)** and commented\n\nIn section 4.1.3. Inheriting from a Parent Job we have\n\nCode:\n\\<job id=\"baseJob\" abstract=\"true\">\n\\<listeners>\n\\<listener ref=\"listenerOne\"/>\n\\<listeners>\n\\</job>\n\n\\<job id=\"job1\" parent=\"baseJob3\">\n\\<step id=\"step1\" parent=\"standaloneStep\"/>\n\n    <listeners merge=\"true\">\n        <listener ref=\"listenerTwo\"/>\n    <listeners>\n\n\\</job>\nMust be only parent=\"baseJob\"\n\n\n---\n\n**Affects:** 2.1.5\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=99697\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/724de9d30b27695abc5b76630f8e2c8b3d4d5ac3\n", "url": "https://github.com/spring-projects/spring-batch/issues/1908", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2011-01-03 18:09:02", "closed": "2011-01-05 06:28:27", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Simple cli sample hangs because of wrong dependency [BATCH-1680]", "body": "**[Olivier Bazoud](https://jira.spring.io/secure/ViewProfile.jspa?name=obazoud)** opened **[BATCH-1680](https://jira.spring.io/browse/BATCH-1680?redirect=false)** and commented\n\nSimple cli seems to hang on master :\n% git clone git://github.com/SpringSource/spring-batch.git\n% cd archetypes/simple-cli\n% mvn exec:java\n\n```\n[INFO] Scanning for projects...\n[WARNING] \n[WARNING] Some problems were encountered while building the effective model for org.springframework.batch:spring-batch-simple-cli:jar:2.1.6.CI-SNAPSHOT\n[WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-compiler-plugin is missing. @ line 166, column 12\n[WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-surefire-plugin is missing. @ line 188, column 12\n[WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-jar-plugin is missing. @ line 229, column 12\n[WARNING] The expression ${pom.artifactId} is deprecated. Please use ${project.artifactId} instead.\n[WARNING] \n[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.\n[WARNING] \n[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.\n[WARNING] \n[INFO]                                                                         \n[INFO] ------------------------------------------------------------------------\n[INFO] Building Commandline 2.1.6.CI-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO] \n[INFO] >>> exec-maven-plugin:1.1:java (default-cli) @ spring-batch-simple-cli >>>\n[INFO] \n[INFO] <<< exec-maven-plugin:1.1:java (default-cli) @ spring-batch-simple-cli <<<\n[INFO] \n[INFO] --- exec-maven-plugin:1.1:java (default-cli) @ spring-batch-simple-cli ---\n```\n\nWorks fine on 2.1.5.RELEASE tag.\n% git co 2.1.5.RELEASE\n% mvn exec:java\n\n```\n...\n...\n2011-01-19 09:50:28,367 INFO org.springframework.batch.core.launch.support.CommandLineJobRunner.main() [org.springframework.batch.core.launch.support.SimpleJobLauncher] - <Job: [FlowJob: [name=job1]] completed with the following parameters: [{}] and the following status: [COMPLETED]>\n...\n```\n\nOn master, I apply this patch, and it works again.\n\n```\n% git diff\ndiff --git a/archetypes/simple-cli/pom.xml b/archetypes/simple-cli/pom.xml\nindex 10236b8..8e0474a 100644\n--- a/archetypes/simple-cli/pom.xml\n+++ b/archetypes/simple-cli/pom.xml\n@@ -15,7 +15,7 @@\n        <properties>\n                <maven.test.failure.ignore>true</maven.test.failure.ignore>\n                <spring.framework.version>2.5.6</spring.framework.version>\n-               <spring.batch.version>2.1.4.RELEASE</spring.batch.version>\n+              <spring.batch.version>2.1.5.RELEASE</spring.batch.version>\n                <dependency.locations.enabled>false</dependency.locations.enabled>\n        </properties>\n        <profiles>\n```\n\n\n\n---\n\n**Affects:** 2.1.5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/19953626d4cb1f0e4e492ccbec3f0c3d76545f33\n", "url": "https://github.com/spring-projects/spring-batch/issues/1906", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2011-01-19 01:03:36", "closed": "2011-02-07 00:47:59", "commits": {}, "ttf": 18.00027777777778, "commitsDetails": []}, {"title": "Restarting a job that generates XML output using StaxEventItemWriter with Woodstox fails [BATCH-1681]", "body": "**[Andy Neilson](https://jira.spring.io/secure/ViewProfile.jspa?name=aneilson)** opened **[BATCH-1681](https://jira.spring.io/browse/BATCH-1681?redirect=false)** and commented\n\nWhen restarting a job that generates XML output using StaxEventItemWriter, the restart will fail if the Woodstox implementation of Stax is used. The problem is that by default, the Woodstox implementation of XMLEventWriter validates the XML structure as it is written. Since on a restart the root element is not written, when the second output item is written, the Woodstox implementation detects this as an invalid XML structure and throws:\n\njavax.xml.stream.XMLStreamException: Trying to output second root, \\<item>\n\nThe solution is to turn off structure validation in StaxEventItemWriter.open(long, boolean) in much the same way that the \"com.ctx.wstx.automaticEndElements\" feature is disabled:\n\nif (outputFactory.isPropertySupported(\"com.ctc.wstx.outputValidateStructure\")) {\noutputFactory.setProperty(\"com.ctc.wstx.outputValidateStructure\", Boolean.FALSE);\n}\n\n\n\n---\n\n**Affects:** 2.1.5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/167067b6112eff03e487dbd3acfbb1e2675c7bab, https://github.com/spring-projects/spring-batch/commit/60182ff81a802c78b43f2e1e0a3a3f665b47ea79, https://github.com/spring-projects/spring-batch/commit/758e6f30de82a17f4fe3fbf1b1eb57414c3c075e, https://github.com/spring-projects/spring-batch/commit/8b06574c8ed4314e1a7cc4c067dc91924c3b4994\n", "url": "https://github.com/spring-projects/spring-batch/issues/1905", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2011-01-20 13:07:00", "closed": "2011-02-07 01:12:52", "commits": {}, "ttf": 17.00027777777778, "commitsDetails": []}, {"title": "CommandLineJobRunner hangs waiting for input on stdin [BATCH-1683]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1683](https://jira.spring.io/browse/BATCH-1683?redirect=false)** and commented\n\nCommandLineJobRunner hangs waiting for input on stdin\n\n\n---\n\n**Affects:** 2.1.4\n", "url": "https://github.com/spring-projects/spring-batch/issues/1903", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2011-01-23 01:51:50", "closed": "2011-02-07 00:47:11", "commits": {}, "ttf": 14.000277777777777, "commitsDetails": []}, {"title": "Spring Batch failed with exceptions. Unable to translate SQLException with Error code '0', will now try the fall back translator . Participating transaction failed - marking existing transaction as rollback -only [BATCH-1669]", "body": "**[Tanya Koganov](https://jira.spring.io/secure/ViewProfile.jspa?name=koganovt)** opened **[BATCH-1669](https://jira.spring.io/browse/BATCH-1669?redirect=false)** and commented\n\nI tested the job execution with 3 job instances at the same time. When I do that, it throws an exception. One job instance works fine.\nI think it tried to update job step status when step completes.\n\nI am attaching Spring Batch job declaration and datasource declaration.\n\nExecuting prepared SQL statement [UPDATE BATCH_STEP_EXECUTION_CONTEXT SET S\nHORT_CONTEXT = ?, SERIALIZED_CONTEXT = ? WHERE STEP_EXECUTION_ID = ?]\nDEBUG [asyncDelivery2][2010-12-16 15:48:26,580] - Unable to translate SQLException with Error code '0', will now try the fall\nback translator\nDEBUG [asyncDelivery2][2010-12-16 15:48:26,581] - Participating transaction failed - marking existing transaction as rollback\n-only\nDEBUG [asyncDelivery2][2010-12-16 15:48:26,581] - Setting JDBC transaction [connection is closed] rollback-only\nERROR [asyncDelivery2][2010-12-16 15:48:26,581] - JobRepository failure forcing exit with unknown status\norg.springframework.dao.RecoverableDataAccessException: PreparedStatementCallback; SQL [UPDATE BATCH_STEP_EXECUTION_CONTEXT S\nET SHORT_CONTEXT = ?, SERIALIZED_CONTEXT = ? WHERE STEP_EXECUTION_ID = ?]; Communications link failure\n\nERROR [asyncDelivery2][2010-12-16 15:48:26,679] - Encountered interruption executing job\norg.springframework.batch.core.JobInterruptedException: Step requested termination: StepExecution: id=59, name=call_changeLis\ntsProc, status=UNKNOWN, exitStatus=STOPPED, readCount=35, filterCount=0, writeCount=35 readSkipCount=0, writeSkipCount=0, pro\ncessSkipCount=0, commitCount=0, rollbackCount=1, exitDescription=org.springframework.batch.core.JobInterruptedException\n\nEncountered an error executing the step\norg.springframework.batch.core.JobInterruptedException: Job interrupted status detected.\nat org.springframework.batch.core.step.ThreadStepInterruptionPolicy.checkInterrupted(ThreadStepInterruptionPolicy.jav\na:42)\nat org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:257)\nat org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.jav\na:76)\nat org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:367)\nat org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:214)\nat org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:143)\nat org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:247)\nat org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:196)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:597)\nat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)\nat org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:42)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:161)\nat org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:55)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:161)\nat org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:\n50)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:161)\nat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:89)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)\nat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)\nat $Proxy13.execute(Unknown Source)\nat org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:135)\nat org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:61)\nat org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:60)\nat org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:144)\nat org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:124)\nat org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:135)\nat org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:281)\nat org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:120)\nat org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:48)\n\nat java.lang.Thread.run(Thread.java:619)\nERROR [asyncDelivery2][2010-12-16 15:48:26,599] - Application exception overridden by rollback exception\norg.springframework.dao.RecoverableDataAccessException: PreparedStatementCallback; SQL [UPDATE BATCH_STEP_EXECUTION_CONTEXT S\nET SHORT_CONTEXT = ?, SERIALIZED_CONTEXT = ? WHERE STEP_EXECUTION_ID = ?]; Communications link failure\n\nThe last packet successfully received from the server was 1,257,606 milliseconds ago. The last packet sent successfully to t\nhe server was 1,257,607 milliseconds ago.; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Commu\nnications link failure\n\nThe last packet successfully received from the server was 1,257,606 milliseconds ago. The last packet sent successfully to t\nhe server was 1,257,607 milliseconds ago.\nat org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:98\n)\nat org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTran\nslator.java:72)\nat org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTran\nslator.java:80)\nat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:602)\nat org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:811)\nat org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:867)\nat org.springframework.batch.core.repository.dao.JdbcExecutionContextDao.persistSerializedContext(JdbcExecutionContex\ntDao.java:193)\nat org.springframework.batch.core.repository.dao.JdbcExecutionContextDao.updateExecutionContext(JdbcExecutionContextD\nao.java:136)\n\nat org.springframework.batch.core.repository.dao.JdbcExecutionContextDao.persistSerializedContext(JdbcExecutionContex\ntDao.java:193)\nat org.springframework.batch.core.repository.dao.JdbcExecutionContextDao.updateExecutionContext(JdbcExecutionContextD\nao.java:136)\nat org.springframework.batch.core.repository.support.SimpleJobRepository.updateExecutionContext(SimpleJobRepository.j\nava:184)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:597)\nat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)\nat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:110)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)\nat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)\nat $Proxy11.updateExecutionContext(Unknown Source)\nat org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:\n403)\nat org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)\nat org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:261)\nat org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.jav\na:76)\nat org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:367)\nat org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:214)\nat org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:143)\nat org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:247)\nat org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:196)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:597)\nat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)\n\nat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)\nat org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:42)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:161)\nat org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:55)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:161)\nat org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:\n50)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:161)\nat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:89)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)\nat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)\nat $Proxy13.execute(Unknown Source)\nat org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:135)\nat org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:61)\nat org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:60)\nat org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:144)\nat org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:124)\nat org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:135)\nat org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:281)\nat org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:120)\nat org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:48)\nat org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:114)\nat org.oclc.TradingPartnerPreprocessor.mule.launch.MuleJobLauncher.launchJob(MuleJobLauncher.java:62)\nat org.oclc.TradingPartnerPreprocessor.mule.si.JmsMessageUnwrapper.unwrapMessage(JmsMessageUnwrapper.java:39)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:597)\nat org.mule.model.resolvers.AbstractEntryPointResolver.invokeMethod(AbstractEntryPointResolver.java:141)\nat org.mule.model.resolvers.ExplicitMethodEntryPointResolver.invoke(ExplicitMethodEntryPointResolver.java:93)\nat org.mule.model.resolvers.DefaultEntryPointResolverSet.invoke(DefaultEntryPointResolverSet.java:48)\nat org.mule.component.DefaultComponentLifecycleAdapter.invoke(DefaultComponentLifecycleAdapter.java:350)\nat org.mule.component.AbstractJavaComponent.invokeComponentInstance(AbstractJavaComponent.java:90)\nat org.mule.component.AbstractJavaComponent.doInvoke(AbstractJavaComponent.java:81)\nat org.mule.component.AbstractComponent.invokeInternal(AbstractComponent.java:113)\nat org.mule.component.AbstractComponent.access$000(AbstractComponent.java:51)\nat org.mule.component.AbstractComponent$1.process(AbstractComponent.java:241)\nat org.mule.processor.builder.InterceptingChainMessageProcessorBuilder$InterceptingMessageProcessorAdapter.process(In\nterceptingChainMessageProcessorBuilder.java:185)\nat org.mule.processor.builder.InterceptingChainCompositeMessageProcessor.process(InterceptingChainCompositeMessagePro\n\nThe last packet successfully received from the server was 1,257,606 milliseconds ago. The last packet sent successfully to t\nhe server was 1,257,607 milliseconds ago.\nat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\nat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)\nat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)\nat java.lang.reflect.Constructor.newInstance(Constructor.java:513)\nat com.mysql.jdbc.Util.handleNewInstance(Util.java:406)\nat com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1074)\nat com.mysql.jdbc.MysqlIO.send(MysqlIO.java:3313)\nat com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:1940)\nat com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2109)\nat com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2643)\nat com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:2077)\nat com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:2362)\nat com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:2280)\nat com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:2265)\nat org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:102)\nat org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:817)\nat org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:1)\nat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:586)\n... 119 more\nCaused by: java.net.SocketException: Connection reset\nat java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:96)\nat java.net.SocketOutputStream.write(SocketOutputStream.java:136)\nat java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:65)\nat java.io.BufferedOutputStream.flush(BufferedOutputStream.java:123)\nat com.mysql.jdbc.MysqlIO.send(MysqlIO.java:3294)\n... 130 more\n\nDEBUG [asyncDelivery2][2010-12-16 15:48:26,593] - Initiating transaction rollback\nDEBUG [asyncDelivery2][2010-12-16 15:48:26,593] - Rolling back JDBC transaction on Connection [connection is closed]\nERROR [asyncDelivery2][2010-12-16 15:48:26,593] - Rolling back with transaction in unknown state\nDEBUG [asyncDelivery2][2010-12-16 15:48:26,594] - Could not reset JDBC Connection after transaction\ncom.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: No operations allowed after connection closed.Connectio\nn was implicitly closed by the driver.\nat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\nat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)\nat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)\nat java.lang.reflect.Constructor.newInstance(Constructor.java:513)\nat com.mysql.jdbc.Util.handleNewInstance(Util.java:406)\nat com.mysql.jdbc.Util.getInstance(Util.java:381)\nat com.mysql.jdbc.SQLError.createSQLException(SQLError.java:984)\n\n\n---\n\n**Affects:** 2.1.2\n\n**Attachments:**\n- [data-source-context.txt](https://jira.spring.io/secure/attachment/17457/data-source-context.txt) (_5.09 kB_)\n- [wmsMatchingJob.txt](https://jira.spring.io/secure/attachment/17456/wmsMatchingJob.txt) (_13.95 kB_)\n- [wmsMatchingJobNew.xml](https://jira.spring.io/secure/attachment/17495/wmsMatchingJobNew.xml) (_13.67 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1901", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2010-12-16 14:20:40", "closed": "2011-01-05 06:37:44", "commits": {}, "ttf": 19.00027777777778, "commitsDetails": []}, {"title": "Spring Batch step with transition elements does not work as expected. Issue with \"STOPPED\" and \"UNKNOWN\" [BATCH-1675]", "body": "**[Tanya Koganov](https://jira.spring.io/secure/ViewProfile.jspa?name=koganovt)** opened **[BATCH-1675](https://jira.spring.io/browse/BATCH-1675?redirect=false)** and commented\n\nI have the following job definition. When step is failed with EXIT_CODE=\"STOPPED\" , STATUS=\"UNKNOWN\",\nthe flow does not invoke next step that is being configured. Next step supposed to be \"mdcHandOff\" (according to the configuration). But, instead job stops. I could not test \"FAILED\" yet.\n\nThis one works fine:\n<batch:next on=\"*\" to=\"call_batchLoadPrep\"/>. If step successful, it does go to the next step specified.\n\nI am not sure what is the problem. Do I use wrong value in my configuration? Or is it a bug?\n\n<batch:job id=\"wmsMatchingJob\">\n<batch:step id=\"call_changeListsProc\">\n<batch:tasklet>\n<batch:listeners>\n<batch:listener ref=\"changeListsProcessorWriter\"/>\n<batch:listener ref=\"deselectedItemWriter\"/>\n<batch:listener ref=\"exceptionItemWriter\"/>\n<batch:listener ref=\"errorRecordWritingSkipListener\"/>\n<batch:listener ref=\"deselectedRecordWritingSkipListener\"/>\n<batch:listener ref=\"detailLogSkipListener\"/>\n<batch:listener ref=\"statsLoggingStepListener\"/>\n</batch:listeners>\n<batch:chunk reader=\"changeListsProcessorReader\" processor=\"ChangeListsProcessor\" writer=\"changeListsProcessorWriter\"\ncommit-interval=\"${job.commit.interval}\" skip-limit=\"${skip.limit}\" retry-limit=\"3\">\n<batch:skippable-exception-classes>\n<batch:include class=\"org.oclc.TradingPartnerPreprocessor.ChangeListProcessorDeselectedException\"/>\n<batch:include class=\"org.oclc.TradingPartnerPreprocessor.ChangeListProcesorException\"/>\n</batch:skippable-exception-classes>\n<batch:retryable-exception-classes>\n<batch:include class=\"org.springframework.dao.DeadlockLoserDataAccessException\"/>\n<batch:include class=\"java.net.SocketTimeoutException\"/>\n<batch:include class=\"java.net.ConnectException\"/>\n<batch:include class=\"java.rmi.ConnectException\"/>\n<batch:include class=\"java.io.IOException\"/>\n</batch:retryable-exception-classes>\n\n                    <batch:streams>\n                        <batch:stream ref=\"changeListsProcessorWriter\"/>\n                        <batch:stream ref=\"deselectedItemWriter\"/>\n                        <batch:stream ref=\"exceptionItemWriter\"/>\n                    </batch:streams>\n                </batch:chunk>\n            </batch:tasklet>\n            <batch:next on=\"*\" to=\"call_batchLoadPrep\"/>\n            <batch:next on=\"FAILED\" to=\"mdcHandOff\"/>\n            <batch:next on=\"STOPPED\" to=\"mdcHandOff\"/>\n        </batch:step>\n        <batch:step id=\"call_batchLoadPrep\">\n            <batch:tasklet>\n                <batch:listeners>\n                    <batch:listener ref=\"WMSBatchLoadPreparationWriter\"/>\n                    <batch:listener ref=\"promotionListner\"/>\n                    <batch:listener ref=\"deselectedItemWriter\"/>\n                    <batch:listener ref=\"exceptionItemWriter\"/>\n                    <batch:listener ref=\"errorRecordWritingSkipListener\"/>\n                    <batch:listener ref=\"deselectedRecordWritingSkipListener\"/>\n                    <batch:listener ref=\"detailLogSkipListener\"/>\n                    <batch:listener ref=\"statsLoggingStepListener\"/>\n                </batch:listeners>\n                <batch:chunk reader=\"batchLoadPreparationReader\" processor=\"WMSBatchLoadPreparationProcessor\" writer=\"WMSBatchLoadPreparationWriter\"\n                             commit-interval=\"${job.commit.interval}\" skip-limit=\"${skip.limit}\"  retry-limit=\"3\">\n                    <batch:skippable-exception-classes>\n                         <batch:include class=\"org.oclc.TradingPartnerPreprocessor.ChangeListProcessorDeselectedException\"/>\n                         <batch:include class=\"org.oclc.TradingPartnerPreprocessor.ChangeListProcesorException\"/>\n                    </batch:skippable-exception-classes>\n                    <batch:retryable-exception-classes>\n                                <batch:include class=\"org.springframework.dao.DeadlockLoserDataAccessException\"/>\n                                <batch:include class=\"java.net.SocketTimeoutException\"/>\n                                <batch:include class=\"java.net.ConnectException\"/>\n                                <batch:include class=\"java.rmi.ConnectException\"/>\n                                <batch:include class=\"java.io.IOException\"/>\n                    </batch:retryable-exception-classes>\n                    <batch:streams>\n                        <batch:stream ref=\"WMSBatchLoadPreparationWriter\"/>\n                        <batch:stream ref=\"deselectedItemWriter\"/>\n                        <batch:stream ref=\"exceptionItemWriter\"/>\n                    </batch:streams>\n                </batch:chunk>\n            </batch:tasklet>\n            <batch:next on=\"*\" to=\"mdcHandOff\"/>\n            <batch:next on=\"FAILED\" to=\"mdcHandOff\"/>\n    \n        </batch:step>\n        <batch:step id=\"mdcHandOff\">\n            <batch:tasklet ref=\"mdcHandOffProcessor\" />\n        </batch:step>\n    </batch:job>\n\nThank you,\nTanya.\n\n\n---\n\n**Affects:** 2.1.2\n", "url": "https://github.com/spring-projects/spring-batch/issues/1897", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: invalid", "type: bug"], "created": "2010-12-28 12:57:58", "closed": "2011-01-20 23:30:01", "commits": {}, "ttf": 23.00027777777778, "commitsDetails": []}, {"title": "BATCH_JOB_EXECUTION_CONTEXT is not properly updated [BATCH-1698]", "body": "**[Moose99](https://jira.spring.io/secure/ViewProfile.jspa?name=mrahimi99)** opened **[BATCH-1698](https://jira.spring.io/browse/BATCH-1698?redirect=false)** and commented\n\nDuring a batch job run, a FlowExecutionException is thrown during the 'resume' method of the Simple Flow.  The nested exception shows that the Batch Execution Context is not updated properly.\n\nThe following error is displayed:\n\nCaused by: org.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL [UPDATE SBATCH.BATCH_JOB_EXECUTION_CONTEXT SET SHORT_CONTEXT = ?, SERIALIZED_CONTEXT = ? WHERE JOB_EXECUTION_ID = ?]; SQL state [72000]; error code [1461]; ORA-01461: can bind a LONG value only for insert into a LONG column\n; nested exception is java.sql.SQLException: ORA-01461: can bind a LONG value only for insert into a LONG column.\n\nThe batch framework is responsible for updating the database repository, but it is placing a LONG value into the SHORT CONTEXT or the SERIALIZED CONTEXT.  If this problem has been solved, please let me know the bug number and version of the core jars that has this issue resolved.\n\n\n---\n\n**Affects:** 2.1.0\n\n**Attachments:**\n- [defect data.zip](https://jira.spring.io/secure/attachment/17631/defect+data.zip) (_4.95 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1889", "user": "spring-issuemaster", "labels": ["status: duplicate", "type: bug"], "created": "2011-02-18 17:58:47", "closed": "2011-02-20 08:30:07", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Collection of StepExecutions inside a JobExecution not stable if there are duplicate step names [BATCH-1700]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1700](https://jira.spring.io/browse/BATCH-1700?redirect=false)** and commented\n\nCollection of StepExecutions inside a JobExecution not stable if there are duplicate step names\n\n\n---\n\n**Affects:** 2.1.5\n", "url": "https://github.com/spring-projects/spring-batch/issues/1886", "user": "spring-issuemaster", "labels": ["status: duplicate", "type: bug"], "created": "2011-02-22 04:41:28", "closed": "2011-02-22 05:13:16", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "CommandLineJobRunner and lack of standard input exception handling [BATCH-1705]", "body": "**[Mage Khim-Young](https://jira.spring.io/secure/ViewProfile.jspa?name=mageky)** opened **[BATCH-1705](https://jira.spring.io/browse/BATCH-1705?redirect=false)** and commented\n\nI've noticed a problem with the org.springframework.batch.core.launch.support.Comm andLineJobRunner when using an environment without stdin available. In my case, launching an AutoSys job to run the CommandLineJobRunner, and standard input is not available. The code in question in the main method:\n\nif (System.in.available() > 0) {\nBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\nString line = \" \";\nwhile (StringUtils.hasLength(line)) {\nif (!line.startsWith(\"#\") && StringUtils.hasText(line)) {\nlogger.debug(\"Stdin arg: \"+line);\nnewargs.add(line);\n}\nline = reader.readLine();\n}\n}\n\nLine 517 (the first line quoted) throws an exception instead of gracefully continuing if standard input is not available:\n\nException in thread \"main\" Exception in thread \"main\" java.io.IOException: Incorrect function\nat java.io.FileInputStream.available(Native Method)\nat java.io.BufferedInputStream.available(BufferedInputStream.java:381)\nat org.springframework.batch.core.launch.support.Com\n\n\n---\n\n**Affects:** 2.1.6\n\n**Reference URL:** http://forum.springframework.org/showthread.php?t=104761\n", "url": "https://github.com/spring-projects/spring-batch/issues/1881", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2011-03-07 07:33:50", "closed": "2011-03-15 02:17:23", "commits": {}, "ttf": 7.000277777777778, "commitsDetails": []}, {"title": "TaskletStep not marked as FAILED when FlatFileItemWriter fails to append footer [BATCH-1697]", "body": "**[Stu Armitage](https://jira.spring.io/secure/ViewProfile.jspa?name=shanksy)** opened **[BATCH-1697](https://jira.spring.io/browse/BATCH-1697?redirect=false)** and commented\n\nThe FlatFileItemWriter writes the footer when the ItemStream is closed.\n\nHowever, for an TaskletStep the StepExecution is written to the JobRepository before the ItemStream is closed.\n\nThis means that any IOException from the FlatFileFooterCallback leaves the StepExecution marked as complete.\n\nDave suggests implementing the header/footer functionality via the StepExecutionListener interface in the forum post; this would mean that any exception would mark the Step as failed.\n\n\n---\n\n**Affects:** 2.1.0\n\n**Reference URL:** http://forum.springsource.org/showthread.php?p=345767\n", "url": "https://github.com/spring-projects/spring-batch/issues/1880", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2011-02-18 06:50:19", "closed": "2012-09-21 01:27:33", "commits": {}, "ttf": 580.0002777777778, "commitsDetails": []}, {"title": "BeanWrapperFieldSetMapper race condition in cache [BATCH-1709]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1709](https://jira.spring.io/browse/BATCH-1709?redirect=false)** and commented\n\nBeanWrapperFieldSetMapper occasionally fails in a concurrent setting with strange messages about duplicate properties and the distance limit, even if the column names are exact.  Must be a concurrency bug in the caching.\n\n\n---\n\n**Affects:** 2.0.0\n\n1 votes, 1 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1877", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2011-03-11 07:09:11", "closed": "2011-03-11 09:46:32", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "MapStepExecutionDao does not add StepExecutions to a JobExecution correctly [BATCH-1703]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1703](https://jira.spring.io/browse/BATCH-1703?redirect=false)** and commented\n\nMapStepExecutionDao does not add StepExecutions to a JobExecution correctly.  Since the JobExecution has a hash-based collection of step executions, if you add more with the same ID they do not overwrite.\n\n\n---\n\n**Affects:** 2.1.6\n\n**Attachments:**\n- [BATCH-1703.patch](https://jira.spring.io/secure/attachment/18122/BATCH-1703.patch) (_12.50 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1876", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2011-03-02 01:13:07", "closed": "2011-05-08 00:44:02", "commits": {}, "ttf": 66.00027777777778, "commitsDetails": []}, {"title": "Inline step definitions clash if multiple instances share a TaskExecutorPartitionHandler [BATCH-1712]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1712](https://jira.spring.io/browse/BATCH-1712?redirect=false)** and commented\n\nChanges for [BATCH-1509](https://jira.spring.io/browse/BATCH-1509) introduced this bug - the same TaskExecutorPartitionHandler can be shared across many steps, but if the business step is defined inline it can clash with another step in the same context.\n\n\n---\n\n**Affects:** 2.1.5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/4f17e1673824ff2b2ce2d112afb25bb9149bb4d7, https://github.com/spring-projects/spring-batch/commit/46b8fcac1f47ada297d68c305f90ee8abfea6041\n", "url": "https://github.com/spring-projects/spring-batch/issues/1873", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2011-03-15 04:36:27", "closed": "2011-05-08 00:15:32", "commits": {}, "ttf": 53.000277777777775, "commitsDetails": []}, {"title": "MapJobInstanceDao.getJobInstances(String jobName, int start, int count) does not work [BATCH-1707]", "body": "**[christophe blin](https://jira.spring.io/secure/ViewProfile.jspa?name=cblin)** opened **[BATCH-1707](https://jira.spring.io/browse/BATCH-1707?redirect=false)** and commented\n\nIn the code of MapJobInstanceDao :\npublic List\\<JobInstance> getJobInstances(String jobName, int start, int count) {\n...\nreturn result.subList(start, count); // ERROR : should be result.subList(start, start+count) because subList parameters are fromIndex, toIndex\n}\n\nWORKAROUND = define a subclass with a correct implementation for this method :\npublic class MyMapJobInstanceDao extends MapJobInstanceDao {\n`@Override`\npublic List\\<JobInstance> getJobInstances(String jobName, int start, int count) {\nint nbJobs = getJobNames().size();\nList\\<JobInstance> instances = super.getJobInstances(jobName, 0, nbJobs);\nreturn instances.subList(start, Math.min(nbJobs, start+count));\n}\n}\n\nand in the applicationContext, use the new class instead of the spring one\n\n\n---\n\n**Affects:** 2.1.3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/9ccb4c022f50759559736b12a7b6ce3d75d64869, https://github.com/spring-projects/spring-batch/commit/da7fb4aba39d4a49ac29e826fab4bae15698aae9\n", "url": "https://github.com/spring-projects/spring-batch/issues/1872", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2011-03-11 01:02:44", "closed": "2011-03-11 03:25:02", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Failure in RetryPolicy leads to infinite loop in Step [BATCH-1717]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1717](https://jira.spring.io/browse/BATCH-1717?redirect=false)** and commented\n\nFailure in RetryPolicy leads to infinite loop in Step.  Really this is a corner case because none of the retry policies supplied by the framework should have this problem, but one provided by a user might.  The problem arises if a RetryPolicy throws an exception which according to it's own rules in retryable. In particular the problem is if registerThrowable() itself fails.\n\n\n---\n\n**Affects:** 2.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/aeadf8b02ed2ca021714390615cd12e1ca201930\n", "url": "https://github.com/spring-projects/spring-batch/issues/1868", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2011-03-21 02:23:42", "closed": "2011-03-21 02:25:28", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Remote steps should not be consulted for isAllowedStartIfComplete() etc. [BATCH-1720]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1720](https://jira.spring.io/browse/BATCH-1720?redirect=false)** and commented\n\nStepParserStepFactoryBean consults the step it is given if any and tries to be robust.  Eventually it will time out if the remote step is not available, but it would better simply not to consult it in the first place.\n\n\n---\n\n**Affects:** 2.1.7\n\n**Backported to:** [2.2.0 - Sprint 17](https://github.com/spring-projects/spring-batch/milestone/60?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1864", "user": "spring-issuemaster", "labels": ["has: backports", "type: bug"], "created": "2011-03-30 03:26:01", "closed": "2013-03-06 11:59:21", "commits": {}, "ttf": 707.0002777777778, "commitsDetails": []}, {"title": "Multithreaded step re-processing chunk without skip or retry limit [BATCH-1724]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1724](https://jira.spring.io/browse/BATCH-1724?redirect=false)** and commented\n\nI sort of understand this, and it's quite an amusing little bug (if rather irritating).  I doubt if it critical at all, since the outcome of the step is still failure.\n\nIn a multi-threaded step we can only check for the failure one thread at a time, and by the time we have checked it, the failed chunk can have gone back in the queue for processing.  Oddly, though, even with a single background thread it still fails the same way, so maybe we can actually fix this at least for some special cases.\n\n\n---\n\n**Affects:** 2.1.7\n\n**Reference URL:** http://forum.springsource.org/showthread.php?p=355342\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d8c85036abc5297a15dba30a54db32aea1015afd\n", "url": "https://github.com/spring-projects/spring-batch/issues/1860", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2011-04-05 02:19:47", "closed": "2011-04-05 04:02:43", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "SubclassClassifier should use ConcurrentHashMap [BATCH-1725]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1725](https://jira.spring.io/browse/BATCH-1725?redirect=false)** and commented\n\nSubclassClassifier should use ConcurrentHashMap, otherwise there can be concurrent modification exceptions when it is used concurrently.\n\n\n---\n\n**Affects:** 2.1.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/1859", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2011-04-05 03:52:59", "closed": "2011-04-05 03:54:15", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Child contexts created by AutomaticJobRegistrar cannot easily use PropertyPlaceholderConfigurer [BATCH-1727]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1727](https://jira.spring.io/browse/BATCH-1727?redirect=false)** and commented\n\nSee also [BATCHADM-110](https://jira.spring.io/browse/BATCHADM-110).  ClassPathXmlApplicationContextFactory registers the parent PPC as a singleton (internal) BFPP using addBeanFactoryPostProcessor(), and those BFPP take precedence over those defined using bean definitions.   A workaround is to use SpEL instead of PPC in the child context.\n\n\n---\n\n**Affects:** 2.1.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/1857", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2011-04-15 01:36:23", "closed": "2011-04-15 03:27:27", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "StaxEventItemReader stops reading when exception occurs during unmarshalling [BATCH-1738]", "body": "**[Pepijn Opsteegh](https://jira.spring.io/secure/ViewProfile.jspa?name=popsteegh)** opened **[BATCH-1738](https://jira.spring.io/browse/BATCH-1738?redirect=false)** and commented\n\nWhen an exception occurs during unmarshalling the reader stops reading even though there are still items / fragments to read. I think I have found the reason as well and I'll try to explain below. I'm very surprised that nobody has come across this before.\n\nSpring batch version used: 2.1.7\nSpring version used: 3.0.5\nJava version: 6\n\nHappy flow:\n1.1. In the StaxEventItemReader.doRead() method, the StaxEventItemReader first tries to move the cursor to the next fragment using the moveCursorToNextFragment(..) method;\n1.2. If a next fragment is found, a call is made to the marshaller to unmarshall the xml fragment;\n1.3. If the unmarshalling is ok, the reader calls 'markFragmentProcessed()' on the fragment event reader (DefaultFragmentEventReader). At this stage, the fragment event reader members are 'endFragmentFollows=true' and 'insideFragment=true'. This is important to note, because these flags play a big part in this issue;\n1.4. The markFragmentProcessed() method reads all the unread events using the nextEvent() method until EndDocument is found (which is in fact the end of the fragment). Somewhere down the line, the fragment reader members 'endFragmentFollows' and 'insideFragment' are reset to false (which is good).\n2.1. When the next item is read, the StaxEventItemReader tries to move the cursor to the next fragment. And so on...\n\nProblem flow:\n1.1. In the doRead() method, the StaxEventItemReader first tries to move the cursor to the next fragment using the moveCursorToNextFragment(..) method;\n1.2. If a next fragment is found, a call is made to the marshaller to umarshall the xml fragment;\n1.3. Exception occurs during unmarshalling and therefore the call to 'markFragmentProcessed()' is never done. The members of the fragment event reader are therefore NOT reset and keep the values 'endFragmentFollows=true' and 'insideFragment=true'.\n2.1. When the next item is read, the StaxEventItemReader tries to move the cursor to the next fragment. This method will call nextEvent() on the fragment event reader, returning EndDocument because the internal state of the fragment event reader was not reset due to the exception earlier\n(i.e. 'endFragmentFollows' and 'insidedFragment' are still both true). Therefore, the moveCursorToNextFragment() method will return false indicating NO next fragment was found and stops the reading.\n\nTo prove the analysis above, I have modified the StaxEventItemReader class and ran some tests. I have moved the call to fragmentReader.markFragmentProcessed() into a finally block, making sure it will always get called (whether the unmarshalling fails or not). After this modification, the StaxEventItemReader works as expected, continuing reading and skipping input when unmarshalling fails for an item.\n\nSee the code modification below. Perhaps this is not the best way to solve this issue, but it proves the problem.\n\nprotected T doRead() throws Exception {\n\n    if (noInput) {\n        return null;\n    }\n    \n    T item = null;\n    \n    boolean success = false;\n    try {\n        success = moveCursorToNextFragment(fragmentReader);\n    }\n    catch (NonTransientResourceException e) {\n        // Prevent caller from retrying indefinitely since this is fatal\n        noInput = true;\n        throw e;\n    }\n    \n    if (success) {\n        fragmentReader.markStartFragment();\n    \n        try { // Added by Pepijn Opsteegh\n            @SuppressWarnings(\"unchecked\")\n            T mappedFragment = (T) unmarshaller.unmarshal(StaxUtils.getSource(fragmen tReader));\n            item = mappedFragment;\n        } finally { // Added by Pepijn Opsteegh\n            fragmentReader.markFragmentProcessed();\n        } // Added by Pepijn Opsteegh\n    }\n    \n    return item;\n\n}\n\n\n---\n\n**Affects:** 2.1.7\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=108377\n", "url": "https://github.com/spring-projects/spring-batch/issues/1851", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2011-04-26 01:28:38", "closed": "2011-05-02 14:36:37", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "Inheriting from parent step with skip-limit/retry-limit causes IllegalArgumentException when the inheriting bean doesn't define exception-classes. [BATCH-1739]", "body": "**[Robin Krom](https://jira.spring.io/secure/ViewProfile.jspa?name=robink)** opened **[BATCH-1739](https://jira.spring.io/browse/BATCH-1739?redirect=false)** and commented\n\nThe error for the supplied example job (needs infrastructure) is:\n\"IllegalArgumentException: The field 'skip-limit' is not permitted on the step [myStep] because there is no 'skippable-exception-classes'\"\n\n\n---\n\n**Affects:** 2.1.7\n\n**Reference URL:** http://forum.springsource.org/showthread.php?t=108452\n\n**Attachments:**\n- [exampleJob.xml](https://jira.spring.io/secure/attachment/18093/exampleJob.xml) (_1.07 kB_)\n- [exampleJob.xml](https://jira.spring.io/secure/attachment/18092/exampleJob.xml) (_1.07 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1850", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2011-04-28 08:17:32", "closed": "2011-05-27 08:20:40", "commits": {}, "ttf": 29.00027777777778, "commitsDetails": []}, {"title": "Use step scope for PartitionHandler (so gridSize can be a job parameter) - broken in 2.1.7. [BATCH-1743]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1743](https://jira.spring.io/browse/BATCH-1743?redirect=false)** and commented\n\nCloned from: [BATCH-1612](https://jira.spring.io/browse/BATCH-1612): Pull gridSize from job parameters\nhttps://jira.springsource.org/browse/BATCH-1612\n\n\n---\n\n**Affects:** 2.1.7\n", "url": "https://github.com/spring-projects/spring-batch/issues/1848", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2011-05-04 01:47:50", "closed": "2011-05-09 01:23:05", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "Revert retry-limit and skip-limit changes from BATCH-1396. [BATCH-1744]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1744](https://jira.spring.io/browse/BATCH-1744?redirect=false)** and commented\n\nThe changes in [BATCH-1396](https://jira.spring.io/browse/BATCH-1396) for retry-limit and skip-limit caused too many problems with step inheritance (parent=\"...\" in a step).  This task is to track the release of a new version that reverts those changes.  You can still do late binding of those values by injecting a retry-policy or skip-policy, and that might be as far as we ever go.\n\n\n---\n\n**Affects:** 2.1.7\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/e666f4e6cfc4eda447e82a495b6a431fa059389e, https://github.com/spring-projects/spring-batch/commit/8efa4f418974ecf0aa5d93e68993c2aa45ba28d1\n", "url": "https://github.com/spring-projects/spring-batch/issues/1847", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2011-05-04 04:02:47", "closed": "2011-05-05 01:06:34", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "XSD inconsistency: allow-start-if-complete is not allowed on non-tasklet step [BATCH-1745]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1745](https://jira.spring.io/browse/BATCH-1745?redirect=false)** and commented\n\nXSD inconsistency: allow-start-if-complete is not allowed on non-tasklet step.  There is a workaround, but it's a bit awkward, e.g. here is a flow step which is startable if complete:\n\n```\n\t<step id=\"step1\" parent=\"startable\">\n\t\t<flow parent=\"flow\" />\n\t</step>\n\n\t<beans:bean id=\"startable\" abstract=\"true\">\n\t\t<beans:property name=\"allowStartIfComplete\" value=\"true\" />\n\t</beans:bean>\n\t\n\t<flow id=\"flow>...</flow>\n```\n\n\n\n---\n\n**Affects:** 2.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/4c9204759d4b36cd68744230270e47cb04579df4, https://github.com/spring-projects/spring-batch/commit/9d53631ce93d34e1270a9134b987092acbb2f369, https://github.com/spring-projects/spring-batch/commit/e86dd4685ae21d2e5e24c859a5eb48fbbcd36f24, https://github.com/spring-projects/spring-batch/commit/85c1d06a7d8c9fe11210d115a04e410104915c6e, https://github.com/spring-projects/spring-batch/commit/4433e2bd198f28c850a1b61b8c12160ccb81d8cb\n\n**Backported to:** [2.2.0 - Sprint 12](https://github.com/spring-projects/spring-batch/milestone/55?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1846", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2011-05-04 09:18:44", "closed": "2013-02-05 06:57:21", "commits": {}, "ttf": 642.0002777777778, "commitsDetails": []}, {"title": "Not possible to use property-placeholder values in batch-attributes [BATCH-1751]", "body": "**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** opened **[BATCH-1751](https://jira.spring.io/browse/BATCH-1751?redirect=false)** and commented\n\n<batch:transaction-attributes timeout=\"${batch.tx.timeout}\" />\ngives:\nCaused by: org.xml.sax.SAXParseException: cvc-datatype-valid.1.2.1: '${batch.tx.timeout}' is not a valid value for 'integer'.\n\nThe prop. placeholder is present and contains the placeholder value.\n\n\n---\n\n**Affects:** 2.1.7\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/ffc09f6468b9a80336cbafa5922c3fa8adfdbd12, https://github.com/spring-projects/spring-batch/commit/165779ecba9b0764c0f68f1b696aeab03567e995\n", "url": "https://github.com/spring-projects/spring-batch/issues/1840", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2011-05-16 05:35:14", "closed": "2019-12-07 08:42:57", "commits": {}, "ttf": 3127.0002777777777, "commitsDetails": []}, {"title": "Version 2.1.8 - class file has wrong version 50.0 [BATCH-1754]", "body": "**[Tom Leccese](https://jira.spring.io/secure/ViewProfile.jspa?name=tleccese)** opened **[BATCH-1754](https://jira.spring.io/browse/BATCH-1754?redirect=false)** and commented\n\nI am compiling in a java 5 environment and when I use spring batch 2.1.8 I get javac error: class file has wrong version 50.0 (see full error below)\nIt seems that the 2.1.8 version was built for java 6 byte code compatibility not java 5.\n\nWe downloaded the 2.1.8 version from the http://static.springsource.org/downloads/nightly/release-download.php?project=BATCH page.\nThis is the download link: http://s3.amazonaws.com/dist.springframework.org/release/BATCH/spring-batch-2.1.8.RELEASE-no-dependencies.zip\n\nThe 2.1.7 version of spring batch downloaded from the same site works fine in our same java 5 environment.\n\ne.g.\n-doJavaCompile:\n[javac] Compiling 5660 source files to E:\\wfm3\\vmcs\\build\\weblogic9\\wfm3\\classes\n[javac] E:\\wfm3\\vmcs\\orion\\principal\\development\\source\\com\\mycompany\\apps\\wfm\\modules\\modulea\\writer\\DailySalesWriter.java:18: cannot access org.springframework.batch.item.ItemWriter\n[javac] bad class file: E:\\wfm3\\vmcs\\orion\\build2\\lib\\spring-batch-infrastructure-2.1.8.RELEASE.jar(org/springframework/batch/item/ItemWriter.class)\n[javac] class file has wrong version 50.0, should be 49.0\n[javac] Please remove or make sure it appears in the correct subdirectory of the classpath.\n[javac] import org.springframework.batch.item.ItemWriter;\n\n\n---\n\n**Affects:** 2.1.8\n\n1 votes, 1 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1838", "user": "spring-issuemaster", "labels": ["in: build", "type: bug"], "created": "2011-05-19 11:20:10", "closed": "2011-05-19 14:30:43", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Make  round-trip JobParameters->Properties->JobParameters work for double parameters [BATCH-1756]", "body": "**[Shahid Shahiduzzaman](https://jira.spring.io/secure/ViewProfile.jspa?name=sshahid)** opened **[BATCH-1756](https://jira.spring.io/browse/BATCH-1756?redirect=false)** and commented\n\nMake  round-trip JobParameters->Properties->JobParameters work for double parameters. Here is the customer's use case for this - \"I want to use the JobOperator interface to start jobs and that requires passing the parameters in the string format. So I need a way to generate a correct string representation of JobParameters that will be accepted by JobOperator. I assumed DefaultJobParametersConverter is the way to go. But to be even more specific I'm trying to build a mechanism for starting jobs in a clustered environment and the approach is to use JMS messages. The client would invoke an API (passing JobParameters) which behind the scenes will take the JobParameters, convert it to the String format and put it in a JMS messages that gets placed on a queue. On the other side of the queue a component receives the message, extracts the String of job parameters and calls JobOperator. I don't want to be responsible for creating the correct string format of JobParameters so I'm counting on classes provided by the framework.\"\n\nCode snippet for demonstration:\n\n`@Test`\npublic void testDefaultJobParametersConverter() {\nDefaultJobParametersConverter converter = new DefaultJobParametersConverter();\nJobParametersBuilder builder = new JobParametersBuilder();\nDouble val = Double.valueOf(222);\nbuilder.addDouble(\"doubleParam\", val);\nJobParameters params = builder.toJobParameters();\nMap<String, JobParameter> map = params.getParameters();\nJobParameter jp = map.get(\"doubleParam\");\nassertNotNull(jp);\nassertEquals(ParameterType.DOUBLE, jp.getType());\n\nProperties props = converter.getProperties(params);\nparams = converter.getJobParameters(props);\nmap = params.getParameters();\njp = map.get(\"doubleParam\");\nassertNotNull(jp);\nassertEquals(ParameterType.DOUBLE, jp.getType());\nassertEquals(val, jp.getValue());\n}\n\n\n---\n\n**Affects:** 2.1.7\n", "url": "https://github.com/spring-projects/spring-batch/issues/1836", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2011-05-24 18:41:50", "closed": "2012-06-26 07:15:42", "commits": {}, "ttf": 398.0002777777778, "commitsDetails": []}, {"title": "MinMaxPartitioner sets incorrect max value [BATCH-1757]", "body": "**[Matt Painter](https://jira.spring.io/secure/ViewProfile.jspa?name=nullpainter)** opened **[BATCH-1757](https://jira.spring.io/browse/BATCH-1757?redirect=false)** and commented\n\nThe max value in MinMaxPartitioner is incorrect set, as min is effectively being multiplied twice by range:\n\n    int min = (i++)*range;\n    int max = Math.min(total, (min+1)*range);\n\nThe max line should presumably be:\n\n    int max = Math.min(total, i * range);\n\n(I am assuming that this is what the partitioner is supposed to be doing)\n\n\n---\n\n**Affects:** 2.1.0\n\n**Backported to:** [2.2.0 - Sprint 14](https://github.com/spring-projects/spring-batch/milestone/57?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1835", "user": "spring-issuemaster", "labels": ["has: backports", "in: test", "type: bug"], "created": "2011-05-29 16:09:27", "closed": "2013-02-05 08:03:58", "commits": {}, "ttf": 617.0002777777778, "commitsDetails": []}, {"title": "Could not create a custom PartitionHandler implementation with a reference to the underlying Step [BATCH-1762]", "body": "**[St\u00e9phane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[BATCH-1762](https://jira.spring.io/browse/BATCH-1762?redirect=false)** and commented\n\nFor one of our use cases, we need to build a `PartitionHandler`. We use the name of the `Step` to inject some metadata and to figure out what the name of the partitions will be. This is working fine so far with SpringBatch's `TaskExecutorPartitionHandler`.\n\n```xml\n<batch:partition handler=\"step1.partitionHandler\" partitioner=\"step1.partitioner\" step=\"step1\" />\n```\n\nThe problem is that since we started to use our own `PartitionHandler` we cannot use the `step` attribute on the namespace anymore and the name we got is the name of the partition step (step1.partition), not the name of the actual step (step1).\n\nAs an awful hack, our custom `PartitionHandler` extends the Spring Batch one and it works again.\n\nI don't think we are far from a solution that would work with other use cases. I would suggest to create an interface, something like `StepAwarePartitionHandler` with only one method `public void setStep(Step step)` and change the instanceof logic to take this new partition into account.\n\nWe really would like to get this soon. If that is not possible, could you please let us know how we can use the namespace with a more clean solution than extending a class we're not supposed to extend (our implementation does not have a task executor).\n\nThanks.\n\n\n---\n\n**Affects:** 2.1.7\n", "url": "https://github.com/spring-projects/spring-batch/issues/1831", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2011-06-27 06:35:33", "closed": "2011-06-28 01:28:13", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "missing closing xml tag in spring batch html user guide: 5.1.1. Configuring a Step [BATCH-1772]", "body": "**[Michael Pralow](https://jira.spring.io/secure/ViewProfile.jspa?name=daywalker2000@gmx.net)** opened **[BATCH-1772](https://jira.spring.io/browse/BATCH-1772?redirect=false)** and commented\n\nXML config from http://static.springsource.org/spring-batch/reference/html-single/index.html#configureStep (5.1.1 Configuring a Step)\n\n\\<job id=\"sampleJob\" job-repository=\"jobRepository\">\n\\<step id=\"step1\">\n\\<tasklet transaction-manager=\"transactionManager\">\n\\<chunk reader=\"itemReader\" writer=\"itemWriter\" commit-interval=\"10\"/>\n\\<tasklet>\n\\</step>\n\\</job>\nthe tasklet tag misses a slash\n\n\n---\n\n**Affects:** 2.1.8\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/93ade2b5f6afa922d08110ec4d44076ad33d6d91\n", "url": "https://github.com/spring-projects/spring-batch/issues/1821", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2011-07-15 07:24:35", "closed": "2012-06-26 07:15:42", "commits": {}, "ttf": 346.0002777777778, "commitsDetails": []}, {"title": "Step-scoped annotation based listener is not called [BATCH-1773]", "body": "**[Michael Pralow](https://jira.spring.io/secure/ViewProfile.jspa?name=daywalker2000@gmx.net)** opened **[BATCH-1773](https://jira.spring.io/browse/BATCH-1773?redirect=false)** and commented\n\nWhilst playing around with some spring batch examples, i noticed a strange behaviour, if you use a step scoped stepexecutionlistener with annotation e.g. `@AfterStep`, the method won't be used.\n\nTo be sure i tested the 4 possibilities:\n\n* interface based listener\n* interface based listener scope=\"step\"\n* annotation based listener\n* annotation based listener scope=\"step\"\n\nthe afterstep method of the last one annotation based listener scope=\"step\" is not called\n\nit smells like a bug, but i might miss something here\n\nif you want to see the source, i created a simple listeners project in my github repo https://github.com/langmi/spring-batch-examples, listener projects lives in https://github.com/langmi/spring-batch-examples/tree/master/listeners\n\n\n---\n\n**Affects:** 2.1.8\n\n**Reference URL:** http://forum.springsource.org/showthread.php?112448-stepscoped-listeners-annotation-based-listener-does-not-work\n\n**Backported to:** [2.2.0 - Sprint 11](https://github.com/spring-projects/spring-batch/milestone/54?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1820", "user": "spring-issuemaster", "labels": ["has: backports", "type: bug"], "created": "2011-07-26 01:00:10", "closed": "2013-02-05 06:56:37", "commits": {}, "ttf": 560.0002777777778, "commitsDetails": []}, {"title": "HippyMethodInvoker fails when target uses method overloading and there is no exact match for arguments [BATCH-1742]", "body": "**[Morten Andersen-Gott](https://jira.spring.io/secure/ViewProfile.jspa?name=magott)** opened **[BATCH-1742](https://jira.spring.io/browse/BATCH-1742?redirect=false)** and commented\n\nSee the failing test (testOverloadedMethodUsingInputWithoutExactMatch) at https://github.com/magott/spring-batch/blob/master/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/adapter/HippyMethodInvokerTests.java\n\nThe issue is that if you have an overloaded method where one of the methods is a match, but not an exact match (ie: foo(Set) and foo(List) with TreeSet being passed as the argument). An IllegalArgumentException is thrown.\n\n\n---\n\n**Affects:** 2.1.7\n", "url": "https://github.com/spring-projects/spring-batch/issues/1818", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2011-05-04 00:43:40", "closed": "2011-05-04 01:19:24", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "NullPointerException on RepeatTemplate [BATCH-1774]", "body": "**[Yann Moisan](https://jira.spring.io/secure/ViewProfile.jspa?name=yamo93)** opened **[BATCH-1774](https://jira.spring.io/browse/BATCH-1774?redirect=false)** and commented\n\nI encountered the following error : the class RepeatTemplate throws a NullPointerException (cf stacktrace below)\n\nThe step uses a ThreadPoolTaskExecutor, and i implemented a synchronized delegate reader.\n\nAnother person seems to have encountered the same problem in the past : http://forum.springsource.org/archive/index.php/t-61715.html\n\nHere is an extract from the log with the stack trace.\n\n```\n2011-07-06 14:43:05,844 INFO [org.springframework.batch.core.job.SimpleStepHandler] - Executing step: [buildStep]\n2011-07-06 14:43:10,672 WARN [org.springframework.batch.core.step.item.ChunkMonitor] - No ItemReader set (must be concurrent step), so ignoring offset data.\n2011-07-06 14:43:11,396 WARN [org.springframework.batch.core.step.item.ChunkMonitor] - ItemStream was opened in a different thread.  Restart data could be compromised.\n2011-07-06 14:52:21,721 ERROR [org.springframework.batch.core.step.AbstractStep] - Encountered an error executing the step\njava.lang.NullPointerException\n\tat org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:231)\n\tat org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:143)\n\tat org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:250)\n\tat org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:195)\n\tat org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:135)\n\tat org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:61)\n\tat org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:60)\n\tat org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:144)\n\tat org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:124)\n\tat org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:135)\n\tat org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:281)\n\tat org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:120)\n\tat org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:48)\n\tat org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:114)\n\tat org.springframework.batch.core.launch.support.CommandLineJobRunner.start(CommandLineJobRunner.java:349)\n\tat org.springframework.batch.core.launch.support.CommandLineJobRunner.main(CommandLineJobRunner.java:574)\n```\n\n\n\n---\n\n**Affects:** 2.1.7\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/22894ada90e9e25345c3e6c62ed392ed6fc702e1, https://github.com/spring-projects/spring-batch/commit/0580e337600c59d9ec53bee2dc0df33313adf348, https://github.com/spring-projects/spring-batch/commit/8525afc5c5018141211eca4e13358ea59fbd4db8\n\n**Backported to:** [2.2.0 - Sprint 6](https://github.com/spring-projects/spring-batch/milestone/49?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1817", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2011-07-26 06:36:23", "closed": "2013-07-05 10:16:07", "commits": {}, "ttf": 710.0002777777778, "commitsDetails": []}, {"title": "Inner beans of same type inside <chunk/> elements with scope =\"step\" leads to mistaken override of bean definitions [BATCH-1775]", "body": "**[Thomas Vanstals](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasvst)** opened **[BATCH-1775](https://jira.spring.io/browse/BATCH-1775?redirect=false)** and commented\n\nI'v the following job configuration:\n\n```xml\n<batch:job id=\"file2fileJob\">\n\t<batch:step id=\"file2fileJobStep1\">\n\t\t<batch:tasklet>\n\t\t\t<batch:chunk commit-interval=\"1\" writer=\"itemToStringFlatFileItemWriter\">\n\t\t\t\t<batch:reader>\n\t\t\t\t\t<bean class=\"org.springframework.batch.item.file.FlatFileItemReader\" scope=\"step\">\n\t\t\t\t\t\t<property name=\"resource\" value=\"#{jobParameters['input.file.name']}\" />\n\t\t\t\t\t\t<property name=\"lineMapper\">\n\t\t\t\t\t\t\t<bean class=\"org.springframework.batch.item.file.mapping.PassThroughLineMapper\" />\n\t\t\t\t\t\t</property>\n\t\t\t\t\t</bean>\n\t\t\t\t</batch:reader>\n\t\t\t</batch:chunk>\n\t\t</batch:tasklet>\n\t</batch:step>\n</batch:job>\n```\n\nand the following test:\n\n```java\n@Test\npublic void file2fileJob() throws Exception {\n\t/* setup */\n\tMap<String, JobParameter> parameters = new HashMap<String, JobParameter>();\n\tparameters.put(\"input.file.name\", new JobParameter(\"users.csv\"));\n\tFile output = testFolder.newFile(\"output.txt\");\n\toutput.createNewFile();\n\tparameters.put(\"output.file.name\", new JobParameter(\"file:\" + output.getAbsolutePath()));\n\t/* exercise */\n\tlauncher.run(file2fileJob, new JobParameters(parameters));\n\t/* verify */\n\tResource input = new ClassPathResource(\"users.csv\");\n\tassertEquals(\"Input and output should be equal\", FileUtils.readLines(input.getFile()), FileUtils.readLines(output));\n}\n```\n\nThe test is successful.\n\nBut if I had the following job configuration:\n\n```xml\n<batch:job id=\"file2DatabaseJob\">\n\t<batch:step id=\"file2DatabaseJobStep1\">\n\t\t<batch:tasklet>\n\t\t\t<batch:chunk commit-interval=\"1\" writer=\"itemToStringFlatFileItemWriter\">\n\t\t\t<!-- TODO - save the User in the database -->\n\t\t\t\t<batch:reader>\n\t\t\t\t\t<bean class=\"org.springframework.batch.item.file.FlatFileItemReader\" scope=\"step\">\n\t\t\t\t\t\t<property name=\"resource\" value=\"#{jobParameters['input.file.name']}\" />\n\t\t\t\t\t\t<property name=\"lineMapper\">\n\t\t\t\t\t\t\t<bean class=\"org.springframework.batch.item.file.mapping.DefaultLineMapper\">\n\t\t\t\t\t\t\t\t<property name=\"lineTokenizer\">\n\t\t\t\t\t\t\t\t\t<bean class=\"org.springframework.batch.item.file.transform.DelimitedLineTokenizer\" />\n\t\t\t\t\t\t\t\t</property>\n\t\t\t\t\t\t\t\t<property name=\"fieldSetMapper\">\n\t\t\t\t\t\t\t\t\t<bean class=\"org.springframework.batch.UserFieldSetMapper\" />\n\t\t\t\t\t\t\t\t</property>\n\t\t\t\t\t\t\t</bean>\n\t\t\t\t\t\t</property>\n\t\t\t\t\t</bean>\n\t\t\t\t</batch:reader>\n\t\t\t</batch:chunk>\n\t\t</batch:tasklet>\n\t</batch:step>\n</batch:job>\n```\n\nthe same test fails because the 'file2fileJobStep1' lineMapper is no more a PassThroughLineMapper but the same as the file2DatabaseJobStep1 lineMapper...\n\nIf I remove the scope attribute (and update the resource value to an hard-coded value) of the file2fileJobStep1 reader, the test is successful again.\n\n\n---\n\n**Affects:** 2.1.8\n\n**Attachments:**\n- [SpringBatchDocumentationTest.java](https://jira.spring.io/secure/attachment/18501/SpringBatchDocumentationTest.java) (_2.68 kB_)\n- [spring-beans.xml](https://jira.spring.io/secure/attachment/18502/spring-beans.xml) (_3.15 kB_)\n- [User.java](https://jira.spring.io/secure/attachment/18503/User.java) (_1.56 kB_)\n- [UserFieldSetMapper.java](https://jira.spring.io/secure/attachment/18500/UserFieldSetMapper.java) (_524 bytes_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/c321a1dc0784ffc631e9ba31610764e647ead836\n", "url": "https://github.com/spring-projects/spring-batch/issues/1816", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2011-07-27 00:03:46", "closed": "2012-06-26 07:15:42", "commits": {}, "ttf": 335.0002777777778, "commitsDetails": []}, {"title": "Batch Src Build unable to find FoundryLogic.vpp [BATCH-1776]", "body": "**[Gordon Dickens](https://jira.spring.io/secure/ViewProfile.jspa?name=gordonad)** opened **[BATCH-1776](https://jira.spring.io/browse/BATCH-1776?redirect=false)** and commented\n\nI cloned the Batch source from Git.  When building (as per readme.md file) with Maven 3.0.3 I was unable to locate FoundryLogic.vpp:vpp:2.2.1.  I searched both Maven Central (http://mvnrepository.com/) and Sonatypes repository (https://repository.sonatype.org/) and it did not appear to be available in any public repository.\n\nI was however able to locate it manually and put it in my repository.\n\n\n---\n\n**Affects:** 2.1.8\n\n**Attachments:**\n- [buildresults.txt](https://jira.spring.io/secure/attachment/18696/buildresults.txt) (_590.95 kB_)\n- [buildresults.txt](https://jira.spring.io/secure/attachment/18695/buildresults.txt) (_590.95 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1815", "user": "spring-issuemaster", "labels": ["in: build", "type: bug"], "created": "2011-07-28 05:43:17", "closed": "2014-07-28 07:22:36", "commits": {}, "ttf": 1096.0002777777777, "commitsDetails": []}, {"title": "Problems With FlatFileItemWriter: error while trying to restart an execution  [BATCH-1753]", "body": "**[Allan Barrach Guerra](https://jira.spring.io/secure/ViewProfile.jspa?name=allan.guerra)** opened **[BATCH-1753](https://jira.spring.io/browse/BATCH-1753?redirect=false)** and commented\n\nWe are having problems with property \"shouldDeleteIfEmpty\" from FlatFileItemWriter.\n\nIf an error occurs during an execution, we are unable to restart application because the re-execution cannot find the files created at first time. For example:\n\nApplication functionality:\nWe have an application which receive an input file \"INPUT.TXT\". The invalid data from input file gets a \"rejected\" status and are recorded in a file named \"INPUT.TXT.REJ\". The valid data are processed and generate an output file \"OUTPUT.TXT\".\nBoth files, output and rejected, are generated by FlatFileItemWriter, and they have property \"shouldDeleteIfEmpty\" with value=true.\n\nError scenario:\nIf we didn't give reading permission and execute the application, it will not be able to read INPUT.TXT file. So an exception is thrown. Then we give reading permission, and try to re-execute the application. Another Exception is thrown because the application cannot read the output file or the rejected file that were created at first execution. The files were deleted because when the error occurred both files were empty.\n\nBecause of these problems we can't execute reprocessing. I believe the re-execution should be able to create a new file if it doesn't exists.\n\n\n---\n\n**Affects:** 2.1.7\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/8865bb69aa490c9804ab6109f1676d605ad94baa\n\n3 votes, 7 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1814", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2011-05-19 09:36:12", "closed": "2012-06-27 02:34:38", "commits": {}, "ttf": 404.0002777777778, "commitsDetails": []}, {"title": "Spring Batch xsd loading problem with custom schema locations  [BATCH-1779]", "body": "**[Eldar](https://jira.spring.io/secure/ViewProfile.jspa?name=eldariof)** opened **[BATCH-1779](https://jira.spring.io/browse/BATCH-1779?redirect=false)** and commented\n\nspring-batch-2.1.xsd in src/main/resources/META-INF/schema, spring.schemas in src/main/resources/META-INF.\nspring.schemas defined xsd scheme for the local load, but for sping batch xsd downloads from the Internet.\nSpring.schemas in attache.\n\nWhich algorithm to load the xsd to a spring batch and how to solve this problem? Help please ...\n\n\n---\n\n**Affects:** 2.1.8\n\n**Attachments:**\n- [spring.schemas](https://jira.spring.io/secure/attachment/18534/spring.schemas) (_1.24 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/19bf9804280e6f46cf38e1c1bd8b7b1e67e00648\n", "url": "https://github.com/spring-projects/spring-batch/issues/1811", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2011-08-03 02:45:38", "closed": "2011-08-04 00:27:46", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Only first item in chunk is re-processed on retry of failed write [BATCH-1761]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1761](https://jira.spring.io/browse/BATCH-1761?redirect=false)** and commented\n\nhttp://forum.springsource.org/showthread.php?110196-itemprocessor-recalled-only-for-first-item-in-chunk-when-retryable-exception\n\nAll items are eventually re-processed if the chunk fails the same way deterministically, or if retry is not used (skip may be though).\n\n\n---\n\n**Affects:** 2.1.8\n\n**Attachments:**\n- [BATCH-1761.patch](https://jira.spring.io/secure/attachment/19264/BATCH-1761.patch) (_811 bytes_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/bbb2a3ca39d5a04a28c726f23cb88d1b86007b1f, https://github.com/spring-projects/spring-batch/commit/a0a02b237ff946f79a337547f5741e89b4d8e6db, https://github.com/spring-projects/spring-batch/commit/d043fa9e30573ede75156c3c771759e5145f117c\n\n2 votes, 6 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1810", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2011-06-17 06:25:26", "closed": "2012-06-28 07:26:02", "commits": {}, "ttf": 377.0002777777778, "commitsDetails": []}, {"title": "Code exception is masked by a batch exception [BATCH-1780]", "body": "**[Wolfgang Winter](https://jira.spring.io/secure/ViewProfile.jspa?name=wolfgang%20winter)** opened **[BATCH-1780](https://jira.spring.io/browse/BATCH-1780?redirect=false)** and commented\n\nI use a listener class like this:\n\n`@Transactional`(value = CreditorServicesConstants.TRANSACTION_MANAGER, propagation = Propagation.REQUIRES_NEW)\npublic class AlertOnErrorItemReadListener implements ItemReadListener\\<Object> {\n\npublic void onReadError(Exception ex) {\n... some code\n\n     FileIn myFileIn = (FileIn) dao.findFileByFileName(filename);\n    \n     ... some other code\n\n}\n\nWhen I import a test file which contains an error in one record the onReadError method is called with a FlatFileParseException.  \nNow the dao call throws a JPA NonUniqueResultException which is translated into org.springframework.dao.IncorrectResultSizeDataAccessException.\nThis last exception however is never seen nor reported in log output. Only the FlatFileParseException is logged and the code after the dao call is silently\nnot executed:\n\n[03/08/2011 09:52:49][DEBUG] (AlertOnErrorItemReadListener.java:onReadError:81) EmddItemReadListener.onReadError(class org.springframework.batch.item.file.FlatFileParseException)\n[03/08/2011 09:52:49][INFO ] (AlertOnErrorItemReadListener.java:onReadError:116) A technical failure event is raised with the following error message: Parsing error at line: 3 in resource=[URL [file:./target/test-classes/data//dom80/work/dom80MigrationTestfile_readError.dat]], input=[200000001reference3334445556BE44445555666677111222333446000000 ...\nHibernate: select filein0_.id as id58_, filein0_.creationdate as creation3_58_, filein0_.creditororganization_id as credito15_58_, filein0_.errorcode as errorcode58_, filein0_.errordescription as errordes5_58_, filein0_.fileformat as fileformat58_, filein0_.filename as filename58_, filein0_.lastupdate as lastupdate58_, filein0_.nbofoperations as nbofoper9_58_, filein0_.status as status58_, filein0_.answered as answered58_, filein0_.nbofokrequests as nbofokr12_58_ from File filein0_ where filein0_.DTYPE='FileIn' and filein0_.filename=? limit ?\n[03/08/2011 09:52:49][ERROR] (AbstractStep.java:execute:212) Encountered an error executing the step\norg.springframework.batch.core.listener.StepListenerFailedException: Error in onReadError.\njava.lang.IllegalArgumentException: Unable to invoke method: [public final void $Proxy61.onReadError(java.lang.Exception)] on object: [net.awl.emdd.creditor.files.in.chunk.dom80.AlertOnErrorListener@11a4e9b] with arguments: [[org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 3 in resource=[URL [file:./target/test-classes/data//dom80/work/dom80MigrationTestfile_readError.dat]], input=[200000001reference3334445556BE4444555566667711122233344600000001012010Erwin Lindemann                    125, rue de Bouton 4748 Hergenrath 4748      Hergenrath               KREDBEBB   3334445556614122010]]]\nat org.springframework.batch.core.listener.MulticasterBatchListener.onReadError(MulticasterBatchListener.java:232) ~[spring-batch-core-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:95) ~[spring-batch-core-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:148) ~[spring-batch-core-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:108) ~[spring-batch-core-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:367) ~[spring-batch-infrastructure-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:214) ~[spring-batch-infrastructure-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:143) ~[spring-batch-infrastructure-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:103) ~[spring-batch-core-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:68) ~[spring-batch-core-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:386) ~[spring-batch-core-2.1.8.RELEASE.jar:na]\nat org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130) ~[spring-tx-3.0.4.RELEASE.jar:3.0.4.RELEASE]\nat org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:264) ~[spring-batch-core-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:76) ~[spring-batch-core-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:367) ~[spring-batch-infrastructure-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:214) ~[spring-batch-infrastructure-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:143) ~[spring-batch-infrastructure-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:250) ~[spring-batch-core-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:195) ~[spring-batch-core-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:135) [spring-batch-core-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:61) [spring-batch-core-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:60) [spring-batch-core-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:144) [spring-batch-core-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:124) [spring-batch-core-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:135) [spring-batch-core-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:281) [spring-batch-core-2.1.8.RELEASE.jar:na]\nat org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:120) [spring-batch-core-2.1.8.RELEASE.jar:na]\nat org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:48) [spring-core-3.0.4.RELEASE.jar:3.0.4.RELEASE]\nat org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:114) [spring-batch-core-2.1.8.RELEASE.jar:na]\nat net.awl.emdd.creditor.files.in.chunk.dom80.TestDom80Migration.runJob(TestDom80Migration.java:100) [test-classes/:na]\n\nAfter analysing the Spring Batch sources I found the location why this happened:\n\nThe Javadoc of StepListenerFailedException constructor says about the two Exception parameters:\n\npublic StepListenerFailedException(String message,\nThrowable ex,\nRuntimeException e)\n\nParameters:\nmessage - describes the error to the user\nex - the exception that was thrown by a listener\ne - the exception that caused the skip\n\nFollowing the documentation, in MulticasterBatchListener.onReadError(Exception) the two Exceptions in StepListenerFailedException constructor should be set vice versa:\n\npublic void onReadError(Exception ex) {\ntry {\nitemReadListener.onReadError(ex);\n}\ncatch (RuntimeException e) {\nthrow new StepListenerFailedException(\"Error in onReadError.\", e, ex);\n}\n}\n\ninstead of\n\npublic void onReadError(Exception ex) {\ntry {\nitemReadListener.onReadError(ex);\n}\ncatch (RuntimeException e) {\nthrow new StepListenerFailedException(\"Error in onReadError.\", ex, e);\n}\n}\n\n\n---\n\n**Affects:** 2.1.8\n\n**Backported to:** [2.2.0 - Sprint 3](https://github.com/spring-projects/spring-batch/milestone/46?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1809", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2011-08-03 03:56:06", "closed": "2013-02-05 06:51:10", "commits": {}, "ttf": 552.0002777777778, "commitsDetails": []}, {"title": "Parsing xml for a FlowStep is apparently very inefficient [BATCH-1782]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1782](https://jira.spring.io/browse/BATCH-1782?redirect=false)** and commented\n\nhttp://forum.springsource.org/showthread.php?106573\n\n\n---\n\n**Affects:** 2.1.6\n\n**Attachments:**\n- [bigJob.xml](https://jira.spring.io/secure/attachment/20936/bigJob.xml) (_26.37 kB_)\n\n**Backported to:** [2.2.0 - Sprint 14](https://github.com/spring-projects/spring-batch/milestone/57?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1807", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2011-08-05 00:41:20", "closed": "2013-02-06 09:41:15", "commits": {}, "ttf": 551.0002777777778, "commitsDetails": []}, {"title": "Throwing exceptions inside a ChunkListener results in endless loop [BATCH-1783]", "body": "**[Morten Andersen-Gott](https://jira.spring.io/secure/ViewProfile.jspa?name=magott)** opened **[BATCH-1783](https://jira.spring.io/browse/BATCH-1783?redirect=false)** and commented\n\nIf an exception is thrown in beforeChunk in a ChunkListener and the job is configured with skips (but not to skip the exception that is thrown from the ChunkListener) it will result in an endless loop. Same will happen if you have configured your job for retries.\n\nIf neither retry nor skip is configured, the job will end with ExitStatus.FAILED, as expected. Which makes me suspect the issue is in the exception handling in some of the components added when skip or retry comes into play.\n\nI've attached two files based on the Spring Batch template from STS that can be dropped in to reproduce the issue.\n\n\n---\n\n**Affects:** 2.1.8\n\n**Attachments:**\n- [ExceptionThrowingChunkListener.java](https://jira.spring.io/secure/attachment/18545/ExceptionThrowingChunkListener.java) (_355 bytes_)\n- [module-context.xml](https://jira.spring.io/secure/attachment/18544/module-context.xml) (_1.20 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/b075851184861dedc8a2b5a895cb8f93e84d443e, https://github.com/spring-projects/spring-batch/commit/af84be4f75010597277c5ce04bb42d532d10b6c4\n", "url": "https://github.com/spring-projects/spring-batch/issues/1806", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2011-08-10 06:21:53", "closed": "2012-06-26 07:15:42", "commits": {}, "ttf": 321.0002777777778, "commitsDetails": []}, {"title": "Don't import provided libs in your compile-configuration in ivy.xml [BATCH-1787]", "body": "**[Klaus Lehner](https://jira.spring.io/secure/ViewProfile.jspa?name=klu2)** opened **[BATCH-1787](https://jira.spring.io/browse/BATCH-1787?redirect=false)** and commented\n\nIn your ivy.xml (e.g. in spring-batch-core) I see lines like:\n\n\\<dependency org=\"org.aspectj\" name=\"com.springsource.org.aspectj.runtime\" rev=\"1.5.4\" conf=\"compile->runtime,provided\"/>\n\nThe import of provided libs here is false as this e.g. causes JARs like javax.servlet.jar to be included in the compile configuration which is wrong here. Never include provided libs from other libraries in your compile-configuration, this can lead to classpath issues when e.g. deploying to a web container.\n\nTherefore, I'd suggest to remove all \",provided\" imports in your ivy.xml files.\n\n\n---\n\n**Backported to:** [2.2.0.RC2](https://github.com/spring-projects/spring-batch/milestone/66?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1802", "user": "spring-issuemaster", "labels": ["has: backports", "status: declined", "type: bug"], "created": "2011-08-31 00:57:11", "closed": "2013-05-14 08:11:34", "commits": {}, "ttf": 622.0002777777778, "commitsDetails": []}, {"title": "Update chapter 4.5.6 on aborting jobs in documentation [BATCH-1788]", "body": "**[Morten Andersen-Gott](https://jira.spring.io/secure/ViewProfile.jspa?name=magott)** opened **[BATCH-1788](https://jira.spring.io/browse/BATCH-1788?redirect=false)** and commented\n\nChapter 4.5.6 [1] says that a killed job (kill -9) can be set to be either aborted or failed. Where failed will allow restart by the framework, while aborted will not.\n\nFirst of, there is no BatchStatus.ABORTED, there is however a BatchStatus.ABANDONED, I guess this is what the documentation should say?\n\nSecond, the BatchStatus.ABANDONED can be restarted by the CommandLineJobRunner by providing the -restart flag. The CLJR will restart any job where status greater than STOPPING. STOPPED, FAILED, ABANDONED and UNKNOWN are greater than STOPPING and will thus be restartable, provided that the job is restartable=true.\n\nIf you try to restart an abandoned batch by supplying the identical jobparameters and job name for an abandoned job, the SimpleJobRepository will throw an exception saying \"A job instance already exists and is complete for parameters...\"\n\nIn other words, there is a discrepancy in how what the CommandLineJobRunner and the SimpleJobRepository allows to be restarted.\n\n[1] http://static.springsource.org/spring-batch/reference/html-single/index.html#d0e2450\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/a06f4ad38958f844226ab4bd2205ca1ba841800f, https://github.com/spring-projects/spring-batch/commit/9efb3c0dac9ef59ac9fb2dcafd9f0e8ecc4a6901\n\n**Backported to:** [2.2.0 - Sprint 14](https://github.com/spring-projects/spring-batch/milestone/57?closed=1)\n\n1 votes, 2 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1801", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "in: documentation", "type: bug"], "created": "2011-09-02 05:00:31", "closed": "2013-02-07 11:20:47", "commits": {}, "ttf": 524.0002777777778, "commitsDetails": []}, {"title": "JobExecution instance returned by StepExecution does not contain JobInstance or JobInstanceId [BATCH-1789]", "body": "**[Joshua Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=jmoore_aus)** opened **[BATCH-1789](https://jira.spring.io/browse/BATCH-1789?redirect=false)** and commented\n\nThe step execution returned from the `SimpleJobExplorer` does not return a job execution instance with any reference to the job instance. Both `getJobInstance()` and `getJobInstanceId()` return null. The constructor called for creating the job execution is calling the `JobExecution(Long id)` constructor which according to the comments within the source should only be used for transient instances.\n\nI am not sure if this is a defect or if this is by design.\n\nIt would be helpful if the Javadocs noted that the `StepExecution` returned by the `SimpleJobExplorer.getStepExecution(Long jobExecutionId, Long stepExecutionId)` only includes a transient instance of the `JobExecution`. To obtain an non-transient instance one should use `SimpleJobExplorer.getJobExecution(Long jobExecutionId)`.\n\n\n---\n\n**Affects:** 2.1.8\n", "url": "https://github.com/spring-projects/spring-batch/issues/1800", "user": "spring-issuemaster", "labels": ["in: core", "in: documentation", "status: declined", "type: bug"], "created": "2011-09-02 10:30:40", "closed": "2011-10-17 01:18:48", "commits": {}, "ttf": 44.000277777777775, "commitsDetails": []}, {"title": "DB2 Version 10 on Z OS Issue with Spring Batch 2.1.8 [BATCH-1790]", "body": "**[Hema Math](https://jira.spring.io/secure/ViewProfile.jspa?name=hema)** opened **[BATCH-1790](https://jira.spring.io/browse/BATCH-1790?redirect=false)** and commented\n\nWhen Spring batch is connected to DB2 z os , it has issues when trying to read the sequences created from the db2.schema given in the spring batch.\nMy Configuration file is as below.\n\n```\n<bean id=\"jobRepository\"\t\tclass=\"org.springframework.batch.core.repository.support.JobRepositoryFactoryBean\">\n<property name=\"dataSource\" ref=\"dataSource\" />\n<property name=\"transactionManager\" ref=\"transactionManager\" />\n<property name=\"databaseType\" value=\"DB2ZOS\" />\n</bean>\n```\n\nAll the metadata tables that sprin gbatch uses to loge job instances and step details are created in DB2 z os and also the three sequences. All these schema are taken from the db2.schema.\n\nThe error what i am getting is.\n\n```\norg.springframework.dao.DataIntegrityViolationException: PreparedStatementCallback; SQL [INSERT into BATCH_JOB_INSTANCE(JOB_INSTANCE_ID, JOB_NAME, JOB_KEY, VERSION) values (?, ?, ?, ?)]; DB2 SQL Error: SQLCODE=-803, SQLSTATE=23505, SQLERRMC=IVA204X1;0000000202, DRIVER=3.53.70; nested exception is com.ibm.db2.jcc.b.zn: DB2 SQL Error: SQLCODE=-803, SQLSTATE=23505, SQLERRMC=IVA204X1;0000000202, DRIVER=3.53.70\n\tat org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:228)\n\tat org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)\n\tat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:607)\n\tat org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:792)\n\tat org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:850)\n\tat org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:854)\n\tat org.springframework.batch.core.repository.dao.JdbcJobInstanceDao.createJobInstance(JdbcJobInstanceDao.java:117)\n\tat org.springframework.batch.core.repository.support.SimpleJobRepository.createJobExecution(SimpleJobRepository.java:131)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n```\n\nDoes it mean that its not able to make call to the sequences created in DB2 z os ?\n\n\n---\n\n**Affects:** 2.1.8\n", "url": "https://github.com/spring-projects/spring-batch/issues/1799", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2011-09-07 06:47:16", "closed": "2020-01-16 13:55:33", "commits": {}, "ttf": 3053.0002777777777, "commitsDetails": []}, {"title": "The job never finishes when the skip-limit is larger than the commit-interval [BATCH-1794]", "body": "**[Albert Espelt Pons](https://jira.spring.io/secure/ViewProfile.jspa?name=alespo)** opened **[BATCH-1794](https://jira.spring.io/browse/BATCH-1794?redirect=false)** and commented\n\nWhen the skip-limit is larger than the commit-interval and we arrive to the commit-interval value, the job gets in a infinite loop and the job never finishes.\n\n\n---\n\n**Affects:** 2.1.8\n\n**Attachments:**\n- [BATCH-1794.tar.gz](https://jira.spring.io/secure/attachment/21150/BATCH-1794.tar.gz) (_3.64 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1795", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2011-09-19 01:36:50", "closed": "2014-05-15 18:58:26", "commits": {}, "ttf": 969.0002777777778, "commitsDetails": []}, {"title": "ExponentialBackOffPolicy and BackOffContext [BATCH-1795]", "body": "**[Kevin Chan](https://jira.spring.io/secure/ViewProfile.jspa?name=kevin.chan)** opened **[BATCH-1795](https://jira.spring.io/browse/BATCH-1795?redirect=false)** and commented\n\nHi,\n\nI configure a ExponentialBackOffPolicy like this:\n\n```xml\n<bean id=\"exponentialBackOffPolicy\" class=\"org.springframework.batch.retry.backoff.ExponentialBackOffPolicy\"\n    p:initialInterval=\"500\" p:maxInterval=\"30000\" p:multiplier=\"2\" />\n```\n\nand use it for DeadLockLoserDataAccessException. Then I intentionally throw a DeadLockLoserDataAccessException in the main part of my item processor code and observe the behaviour. However, the retry never backoffs exponentially. I trace through the RetryTemplate class (in particulary lines 197 - 256 in 2.1.7 release), and the backOffPolicy and its context seem stateless in runtime:\n\n```java\n \n\tprotected <T> T doExecute(RetryCallback<T> retryCallback, RecoveryCallback<T> recoveryCallback, RetryState state)\n\t\t\tthrows Exception, ExhaustedRetryException {\n\n\t\tRetryPolicy retryPolicy = this.retryPolicy;\n\t\tBackOffPolicy backOffPolicy = this.backOffPolicy;\n\n...\n\t\t// Start the backoff context...\n\t\tBackOffContext backOffContext = backOffPolicy.start(context);\n...\n\t\tbackOffPolicy.backOff(backOffContext);\n...\n```\n\nThat is, the backOffPolicy is never updated and the backOffContext is never saved after the call to backoff, hence the interval stays the same value.\n\nI submitted the same issue to the Spring forum and StackOverflow and no answer, hence created this issue.\n\nThanks, Kev\n\n\n\n---\n\n**Affects:** 2.1.7\n\n**Reference URL:** http://forum.springsource.org/showthread.php?114517-ExponentialBackOffPolicy-and-BackOffContext&p=379544#post379544\n\n**Issue Links:**\n- [AMQP-226](https://jira.spring.io/browse/AMQP-226) Retry Exponential BackOff Policy Doesn't Back Off\n\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/b850021187ff7503ed02ef715949c2be26ae920e\n\n**Backported to:** [2.2.0 - Sprint 9](https://github.com/spring-projects/spring-batch/milestone/52?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1794", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2011-09-19 20:29:18", "closed": "2013-02-05 06:55:20", "commits": {}, "ttf": 504.0002777777778, "commitsDetails": []}, {"title": "Incorrect description of AggregateItemReader in \"Appendix A\"", "body": "**[Michael Pralow](https://jira.spring.io/secure/ViewProfile.jspa?name=daywalker2000@gmx.net)** opened **[BATCH-1796](https://jira.spring.io/browse/BATCH-1796?redirect=false)** and commented\n\nIn Appendix A. List of ItemReaders and ItemWriters from Spring Batch Documentation the reader list mentions an AggregateItemReader.\n\nThis AggregateItemReader does not exist in core or infrastructure, but can be found in samples.\n\n\n---\n\n**Affects:** 2.1.8\n", "url": "https://github.com/spring-projects/spring-batch/issues/1793", "user": "spring-issuemaster", "labels": ["has: backports", "in: documentation", "type: bug"], "created": "2011-09-25 08:44:01", "closed": "2020-03-13 10:37:33", "commits": {}, "ttf": 3092.0002777777777, "commitsDetails": []}, {"title": "MultiResourceItemReader fails on Restart if read() method was not called. [BATCH-1798]", "body": "**[sonwar](https://jira.spring.io/secure/ViewProfile.jspa?name=sonwar)** opened **[BATCH-1798](https://jira.spring.io/browse/BATCH-1798?redirect=false)** and commented\n\nThe MultiResourceItemReader starts with -1 as currentResource. If the ItemProcessor fails on first commit (I tested with a \"throw new RuntimeException()\"), this index remains -1 on ExecutionContext. Then, on restart, we get:\n\njava.lang.ArrayIndexOutOfBoundsException: -1\nat org.springframework.batch.item.file.MultiResourceItemReader.open(MultiResourceItemReader.java:171)\n\nThe fix is something like:\n\nif (executionContext.containsKey(executionContextUserSupport.getKey(RESOURCE_KEY))) {\ncurrentResource = executionContext.getInt(executionContextUserSupport.getKey(RESOURCE_KEY));\n\n    // begin fix block\n    if (currentResource == -1) {\n    \tcurrentResource = 0;\n    }\n        // end fix block\n    \n        delegate.setResource(resources[currentResource]);\n    delegate.open(executionContext);\n\n}\n\n\n---\n\n**Affects:** 2.1.8\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/6832201363ecf5bcaa3b7cd798e01e89e7c9baaf\n", "url": "https://github.com/spring-projects/spring-batch/issues/1791", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2011-10-07 13:40:57", "closed": "2012-06-26 07:15:43", "commits": {}, "ttf": 262.0002777777778, "commitsDetails": []}, {"title": "Exception in flush of file output ItemWriters does not abort a step/job [BATCH-1799]", "body": "**[Hansjoerg Wingeier](https://jira.spring.io/secure/ViewProfile.jspa?name=hansjoerg)** opened **[BATCH-1799](https://jira.spring.io/browse/BATCH-1799?redirect=false)** and commented\n\nScenario:\nUsing a FlatFileItemWriter to write into a file on full diks/memorystick. (note: there must be enough space on the disk/memorystik to create the file during the call of open() ).\n\nWhat would I expect:\nThe step and also the job should fail, since the data could not be written into the fail, because missing space.\n\nWhat happens:\nThe IOException is simply logged, but the step is not failing.\n\nWhat is the result:\nThe written file is corrupt, since not complete. A restart is not possible, since the failing step actually ends with state COMPLETED.\n\nWhat causes the problem:\nDescribed in http://forum.springsource.org/showthread.php?115739-DiskFull-IOException-does-not-result-in-a-failed-job-when-writing-to-a-file\n\n\n---\n\n**Reference URL:** http://forum.springsource.org/showthread.php?115739-DiskFull-IOException-does-not-result-in-a-failed-job-when-writing-to-a-file\n\n**Attachments:**\n- [diskfull.zip](https://jira.spring.io/secure/attachment/19097/diskfull.zip) (_126.49 kB_)\n\n**Backported to:** [2.2.0 - Sprint 6](https://github.com/spring-projects/spring-batch/milestone/49?closed=1)\n\n0 votes, 5 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1790", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2011-10-12 05:53:51", "closed": "2013-02-05 06:52:54", "commits": {}, "ttf": 482.0002777777778, "commitsDetails": []}, {"title": "Retry does not work if additional exception occurs in the ItemWriter during scan for failure [BATCH-1804]", "body": "**[Per Otto Bergum Christensen](https://jira.spring.io/secure/ViewProfile.jspa?name=perottobc)** opened **[BATCH-1804](https://jira.spring.io/browse/BATCH-1804?redirect=false)** and commented\n\nI expect the configuration \\<chunk commit-interval=\"5\" retry-limit=\"5\" skip-limit=\"5\"> to be applied for both processor and writer. This does not seem to work as expected with the writer, where retry is non at all, if the writer runs in \"recoverer\".\n\nThe attachment contains a maven-project that demonstrates the issue:\n\n1. springbatch.test.components.batch.retry_in_writer.RetryInWriterTest\n2. springbatch.test.components.batch.retry_in_processor.RetryInProcessorTest\n\nThe first test will do all work in the writer and the batch fails because a functional error causes the writer to be run in recoverer. The first item will be skipped. The second item will get a deadlock on the first try, this is not handled with a retry and causes the batch to fail.\n\nThe second test does the work in the processor (which seems like the right thing to do, but that is not the point:-). The first item will be skipped. The second item will get the deadlock, retried and the processor will continue to process the rest of the chunk.\n\nIt seems that the errorhandling works as expected in the processor, but not in the writer. Our solution is to use the processor and just do flush in the writer, but it would be nice to have the same errorhandling in the writer or an explanation on why not.\n\n\n---\n\n**Affects:** 2.1.8\n\n**Attachments:**\n- [spring-retry-test-batch-simple.zip](https://jira.spring.io/secure/attachment/19023/spring-retry-test-batch-simple.zip) (_19.30 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/2d4363e89322bc89f6ada908b10f843336a50b26\n", "url": "https://github.com/spring-projects/spring-batch/issues/1785", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2011-10-28 07:39:15", "closed": "2012-06-27 07:52:00", "commits": {}, "ttf": 243.00027777777777, "commitsDetails": []}, {"title": "Documentation TimeoutRetryPolicy code sample  [BATCH-1809]", "body": "**[Gordon Dickens](https://jira.spring.io/secure/ViewProfile.jspa?name=gordonad)** opened **[BATCH-1809](https://jira.spring.io/browse/BATCH-1809?redirect=false)** and commented\n\nIn the Spring Batch documentation (section 9.1) http://static.springsource.org/spring-batch/reference/html-single/index.html#retryPolicies\n\nThe use of TimeoutRetryPolicy in the following code example is invalid:\nRetryTemplate template = new RetryTemplate();\ntemplate.setRetryPolicy(new TimeoutRetryPolicy(30000L));\nFoo result = template.execute(new RetryCallback\\<Foo>() {\npublic Foo doWithRetry(RetryContext context) {\n// Do stuff that might fail, e.g. webservice operation\nreturn result;\n}\n});\n\nTimeoutRetryPolicy does not use constructor injection for the value, this should change to:\n...\nTimeoutRetryPolicy retry = new TimeoutRetryPolicy();\nretry.setTimeout(3000L);\n...\n\n\n---\n\n**Affects:** 2.1.8, 2.2.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/e90dbddd4b9a7e184adba485cf5d4ed322b91bc6, https://github.com/spring-projects/spring-batch/commit/588a3e44f10e1767a4bd28e3db5ab4d40a8bcfdc\n\n**Backported to:** [2.2.0 - Sprint 21](https://github.com/spring-projects/spring-batch/milestone/64?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1780", "user": "spring-issuemaster", "labels": ["has: backports", "in: documentation", "type: bug"], "created": "2011-11-08 16:06:30", "closed": "2013-04-04 14:31:42", "commits": {}, "ttf": 512.0002777777778, "commitsDetails": []}, {"title": "BeanWrapperFieldSetMapper properties caching is broken [BATCH-1813]", "body": "**[lee worrall](https://jira.spring.io/secure/ViewProfile.jspa?name=leewo)** opened **[BATCH-1813](https://jira.spring.io/browse/BATCH-1813?redirect=false)** and commented\n\nThe fix for [BATCH-1709](https://jira.spring.io/browse/BATCH-1709) broke the caching of the property name mapping cache in getBeanProperties().\n\nOn the first run through an empty ConcurrentHashMap is put in \"propertiesMatched\" at the top of getBeanProperties(), the \"matches\" Map is then seeded with this empty ConcurrentHashMap but at the bottom of getBeanProperties the updated \"matches\" Map isn't written back to that ConcurrentHashMap.\n\nOn large numbers of items with a lot of properties, this _really_ hurts performance.\n\n\n---\n\n**Affects:** 2.1.8\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/91780bef1e5dda71a91331ecfdff5c2a818a484a\n\n1 votes, 3 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1778", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2011-11-11 10:05:13", "closed": "2012-08-05 05:49:28", "commits": {}, "ttf": 267.0002777777778, "commitsDetails": []}, {"title": "Problem facing while launching job from a tasklet step [BATCH-1819]", "body": "**[Sanjaya Kumar Sahoo](https://jira.spring.io/secure/ViewProfile.jspa?name=sanjayak)** opened **[BATCH-1819](https://jira.spring.io/browse/BATCH-1819?redirect=false)** and commented\n\nHi,\nI am launching a job within from a tasklet step. The job is hanging and going for infinitive started state. Due to lock on the JobRepository. I have attached the sample sources.  It seems that the lock is not getting released once the current chunk is complete and going for next chunk. Request your intervention on this.\n\nThanks,\nSanjayaK\n\n\n---\n\n**Affects:** 2.1.8\n\n**Reference URL:** http://forum.springsource.org/showthread.php?117939-Lock-acquired-in-jobRepository-before-processing-chunk-does-not-release\n\n**Attachments:**\n- [SpringBatch Tasklet.zip](https://jira.spring.io/secure/attachment/19124/SpringBatch+Tasklet.zip) (_4.59 kB_)\n\n1 votes, 1 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1774", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2011-11-19 00:57:20", "closed": "2012-07-17 01:14:21", "commits": {}, "ttf": 241.00027777777777, "commitsDetails": []}, {"title": "Documentation SimpleRetryPolicy code sample  [BATCH-1810]", "body": "**[Gordon Dickens](https://jira.spring.io/secure/ViewProfile.jspa?name=gordonad)** opened **[BATCH-1810](https://jira.spring.io/browse/BATCH-1810?redirect=false)** and commented\n\nSpring Batch documentation contains an invalid use of SimpleRetryPolicy in the code example (section 9.2) http://static.springsource.org/spring-batch/reference/html-single/index.html#retryPolicies\n\nInstantiation of SimpleRetryPolicy either uses the default no-arg constructor or SimpleRetryPolicy(int maxAttempts, Map<Class<? extends Throwable>, Boolean> retryableExceptions);\n\nInvalid Code Example:\nSimpleRetryPolicy policy = new SimpleRetryPolicy(5);\n\n\n---\n\n**Affects:** 2.1.8, 2.2.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/e167f3015365cf006394882b6e743fc81f2aa7f5, https://github.com/spring-projects/spring-batch/commit/7a672267efa914e4cefca6aab3592788f438b2d4\n\n**Backported to:** [2.2.0 - Sprint 21](https://github.com/spring-projects/spring-batch/milestone/64?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1773", "user": "spring-issuemaster", "labels": ["has: backports", "in: documentation", "type: bug"], "created": "2011-11-08 16:11:27", "closed": "2013-04-04 11:56:08", "commits": {}, "ttf": 512.0002777777778, "commitsDetails": []}, {"title": "ItemWriteListener does not work as expected, not called when writer runs in \"recoverer\" [BATCH-1812]", "body": "**[Per Otto Bergum Christensen](https://jira.spring.io/secure/ViewProfile.jspa?name=perottobc)** opened **[BATCH-1812](https://jira.spring.io/browse/BATCH-1812?redirect=false)** and commented\n\nConfiguring a chunk with an ItemWriteListener I expect a call to the 'onWriteError' every time an exception is thrown from the writer. This does not seem to be the case when the writer runs in \"recoverer\". The consequence being that if logging is done in the 'onWriteError', only the error causing the chunk to fail will be logged, not any errors occurring when the writer handles items one by one.\n\nOur solution was to introduce a processor and an ItemProcessListener, where the call to the service is done in the processor and logging is put in 'onProcessError'.\n\nI would suggest to fix this, or make it clear in the javadoc for ItemWriteListener how it works regarding writer running in \"recoverer\".\n\nThis issue is illustrated with unittests in the attached exampleproject.\n\n\n\n---\n\n**Affects:** 2.1.8\n\n**Attachments:**\n- [spring-writer-listener-test-batch.zip](https://jira.spring.io/secure/attachment/19111/spring-writer-listener-test-batch.zip) (_20.82 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1771", "user": "spring-issuemaster", "labels": ["in: core", "in: documentation", "type: bug"], "created": "2011-11-11 00:32:41", "closed": "2012-06-30 23:14:56", "commits": {}, "ttf": 232.00027777777777, "commitsDetails": []}, {"title": "Possible mistake in current batch documentation [BATCH-1821]", "body": "**[Javier Esteve](https://jira.spring.io/secure/ViewProfile.jspa?name=jaesgar)** opened **[BATCH-1821](https://jira.spring.io/browse/BATCH-1821?redirect=false)** and commented\n\nThere is a possible mistake in spring batch documentation in section 5.1:\n\n> Chunk oriented processing refers to reading the data one at a time, and creating 'chunks' that will be written out, within a transaction boundary. One item is read in from an ItemReader, handed to an -ItemWriter- +ItemProcessor+, and aggregated. Once the number of items read equals the commit interval, the entire chunk is written out via the ItemWriter, and then the transaction is committed.\n\n\n\n---\n\n**Affects:** 2.1.6, 2.1.8\n", "url": "https://github.com/spring-projects/spring-batch/issues/1770", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2011-11-25 11:19:59", "closed": "2012-07-17 01:07:12", "commits": {}, "ttf": 234.00027777777777, "commitsDetails": []}, {"title": "Job execution marked as STOPPED when exception occurs while committing StepExecution [BATCH-1822]", "body": "**[Jimmy Praet](https://jira.spring.io/secure/ViewProfile.jspa?name=jpraet)** opened **[BATCH-1822](https://jira.spring.io/browse/BATCH-1822?redirect=false)** and commented\n\nWhen an exception occurs while committing StepExecution (in org.springframework.batch.core.step.tasklet.TaskletStep.ChunkTransactionCallback#doInTransaction()) setTerminateOnly is being called on the step execution. This results in the job execution being marked as STOPPED. I think it's better to mark the job execution as FAILED? The STOPPED status in general indicates the job has been stopped in a controlled way (via spring-batch gui, programmatically via the JobOperator API, ...).\n\n\n---\n\n**Affects:** 2.1.8\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/60dfdf87bcc1b965e1b69ffa0be674a46188f9fa\n", "url": "https://github.com/spring-projects/spring-batch/issues/1767", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2011-12-09 10:33:25", "closed": "2012-07-23 03:52:15", "commits": {}, "ttf": 226.00027777777777, "commitsDetails": []}, {"title": "Method threw 'org.springframework.beans.factory.BeanCreationException' exception, when injecting list elements that contain jobParameters  [BATCH-1824]", "body": "**[Giridhar D](https://jira.spring.io/secure/ViewProfile.jspa?name=dgiridhar)** opened **[BATCH-1824](https://jira.spring.io/browse/BATCH-1824?redirect=false)** and commented\n\nHere is a scenario you can use:\n\n```xml\n<bean id=\"deleteEmpTasklet\"\n          class=\"com.xxx.MultiDeleteTasklet\"\n          lazy-init=\"true\"\n          autowire=\"byName\"\n          scope=\"step\">\n        <property name=\"sqlsList\"  >\n            <list>\n                <ref bean=\"deleteEmpRecs\" />\n                <ref bean=\"deleteMgrRecs\" />\n            </list>\n        </property>\n    </bean>\n\n    <bean id=\"deleteEmpRecs\" class=\"java.land.String\" scope=\"step\">\n        <constructor-arg index=\"0\">\n            <value >\n                <![CDATA[\n                    DELETE FROM EMP_TABLE\n                    WHERE EMP_UID = '#{jobParameters[empUid]}'\n                ]]>\n            </value>\n        </constructor-arg>\n    </bean>\n\n    <bean id=\"deleteMgrRecs\" class=\"java.land.String\" scope=\"step\">\n        <constructor-arg index=\"0\">\n            <value>\n                <![CDATA[\n                    DELETE FROM EMP_MGR_TABLE\n                    WHERE EMP_UID = '#{jobParameters[empUid]}'\n                ]]>\n            </value>\n        </constructor-arg>\n    </bean>\n```\n\nNow if you call this tasklet you will that the first element of the list has a BeanCreationException but the second elemnt in the list (i.e, DELETE FROM EMP_MGR_TABLE) is successfuly created.\n\n\n---\nNo further details from [BATCH-1824](https://jira.spring.io/browse/BATCH-1824?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/1765", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2011-12-14 12:05:44", "closed": "2019-10-31 14:10:37", "commits": {}, "ttf": 2878.0002777777777, "commitsDetails": []}, {"title": "Null pointer exception if optional parameter of type DATE is null [BATCH-1826]", "body": "**[Gayathri Muralidharan](https://jira.spring.io/secure/ViewProfile.jspa?name=muralidh)** opened **[BATCH-1826](https://jira.spring.io/browse/BATCH-1826?redirect=false)** and commented\n\nSelecting some of the jobs in spring-batch-admin leads to the following exception:\n\n(Issue occurs when we use spring-batch-admin latest release version which internally uses spring-batch-core 2.1.5)\n\njava.lang.IllegalArgumentException: Cannot format given Object as a Date\njava.text.DateFormat.format(DateFormat.java:301)\njava.text.Format.format(Format.java:157)  \norg.springframework.batch.core.converter.DefaultJobParametersConverter\n.getProperties(DefaultJobParametersConverter.java:159)\norg.springframework.batch.admin.web.JobInstanceInfo.\\<init>(JobInstanceInfo.java:42)\norg.springframework.batch.admin.web.JobController.details(JobController.java:171)\n\nFound that the exception occurs in : DefaultJobParametersConverter.java line no:158 (in spring batch core v2.1.5)\n\nif (jobParameter.getType() == ParameterType.DATE) {\nresult.setProperty(key + DATE_TYPE, dateFormat.format(value));\n}\n\nwhen \"value\" is null.\nIdeally there should be check to ignore null valued parameters.\n\nThis can be fixed by :\n158 : if(value != null) {\n\n168 : }\n\nCan someone check this?\n\nThanks,\nGayathri\n\n\n---\n\n**Affects:** 2.1.5\n\n**Reference URL:** http://forum.springsource.org/showthread.php?120139-Spring-Batch-Admin-IllegalArgumentException-Cannot-format-given-Object-as-Date\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/60340e75b0e23b23a4b5a42966ecf8a612c91da2, https://github.com/spring-projects/spring-batch/commit/c1f3b9cbc4bfb9ed28fe7ba290a659a533ace895\n", "url": "https://github.com/spring-projects/spring-batch/issues/1763", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2011-12-18 22:36:51", "closed": "2012-06-26 07:15:43", "commits": {}, "ttf": 190.00027777777777, "commitsDetails": []}, {"title": "SimpleStepExecutionSplitter loses order of ExecutionContext map [BATCH-1827]", "body": "**[Alex Beggs](https://jira.spring.io/secure/ViewProfile.jspa?name=sunyal)** opened **[BATCH-1827](https://jira.spring.io/browse/BATCH-1827?redirect=false)** and commented\n\nThe org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter.java split method creates a Set of StepExecutions from the passed in Map<String, ExecutionContext> contexts on line 174.  We were passing a LinkedHashMap and because this is then put into a HashSet and not a LinkedHashSet the order is lost, which is important to us.\n\nA simple change from the\nSet\\<StepExecution> set = new HashSet\nto\nSet\\<StepExecution> set = new LinkedHashSet\n\nwill solve this problem.\n\n\n---\n\n**Affects:** 2.1.8\n\n**Attachments:**\n- [screenshot-1.jpg](https://jira.spring.io/secure/attachment/19239/screenshot-1.jpg) (_221.51 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1762", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2011-12-21 15:48:06", "closed": "2012-07-17 01:24:40", "commits": {}, "ttf": 208.00027777777777, "commitsDetails": []}, {"title": "Spring 3 Compatibility Tests Failing [BATCH-1837]", "body": "**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[BATCH-1837](https://jira.spring.io/browse/BATCH-1837?redirect=false)** and commented\n\nCompile errors in 2 tests.\n\n\n---\n\n**Affects:** 2.1.8\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/1ce4cb1e9534a41d0b720a9feba383f6994ea556\n", "url": "https://github.com/spring-projects/spring-batch/issues/1752", "user": "spring-issuemaster", "labels": ["in: build", "type: bug"], "created": "2012-02-21 16:46:48", "closed": "2012-02-22 08:24:36", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Move Spring Batch retry functionality to Spring Retry project. [BATCH-1839]", "body": "**[Kyrill Alyoshin](https://jira.spring.io/secure/ViewProfile.jspa?name=kyrill007)** opened **[BATCH-1839](https://jira.spring.io/browse/BATCH-1839?redirect=false)** and commented\n\nThis has to do with [SPR-9170](https://jira.spring.io/browse/SPR-9170). It looks like there has been an effort to migrate Spring Batch retry APIs to Spring Retry project (at least the project is there). But Spring Batch itself is not dependent on it, which means that the code base is effectively forked. Spring Batch retry APIs already look a bit more comprehensive than what is in Spring Retry.\n\nThe retry APIs are very well implemented and it is important that they get more visibility than it is now. I advocate for moving current Spring Batch retry package completely to Spring Retry.\n\n\n---\n\n**Affects:** 2.1.8\n\n**Backported to:** [2.2.0 - Sprint 21](https://github.com/spring-projects/spring-batch/milestone/64?closed=1)\n\n1 votes, 3 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1750", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "status: duplicate", "type: bug"], "created": "2012-02-28 07:58:43", "closed": "2013-04-04 15:07:06", "commits": {}, "ttf": 401.0002777777778, "commitsDetails": []}, {"title": "job execution continues when step is in status unknown [BATCH-1840]", "body": "**[Jimmy Praet](https://jira.spring.io/secure/ViewProfile.jspa?name=jpraet)** opened **[BATCH-1840](https://jira.spring.io/browse/BATCH-1840?redirect=false)** and commented\n\nWhen org.springframework.batch.core.step.AbstractStep fails to persist the step execution to the job repository, the step execution is set to status 'UNKNOWN'. The framework continues with the other steps of the job as if nothing happened. We ran into this issue in production: the datasource connection pool was configured insiffuciently to handle the number of parallel running batch jobs. If the step execution status was originally COMPLETED than it's probably no big deal that it's changed to UNKNOWN and the job continues with remaining steps. However in our case the steps had FAILED, and because the step execution could not be persisted to the job repository, the status was changed to UNKNOWN which causes the job to continue instead of fail.\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/10c3a8cbeb36666a9fc9cb80de2ecc97ea4f23e8\n", "url": "https://github.com/spring-projects/spring-batch/issues/1749", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2012-03-01 11:42:10", "closed": "2012-07-17 02:52:00", "commits": {}, "ttf": 137.00027777777777, "commitsDetails": []}, {"title": "Upgrading to spring batch 2.1.8 causes error in processing xml configuration [BATCH-1841]", "body": "**[Damien Hollis](https://jira.spring.io/secure/ViewProfile.jspa?name=dphollis)** opened **[BATCH-1841](https://jira.spring.io/browse/BATCH-1841?redirect=false)** and commented\n\nWe are just upgrading to 2.1.8 and our existing xml batch configuration will no longer load.\n\nHere is a snippet of the configuration that is failing:\n\n```\n    <bean id=\"simpleStep\" class=\"org.springframework.batch.core.step.item.FaultTolerantStepFactoryBean\"\n          abstract=\"true\">\n        <property name=\"transactionManager\" ref=\"transactionManager\"/>\n        <property name=\"jobRepository\" ref=\"jobRepository\"/>\n        <property name=\"startLimit\" value=\"100\"/>\n        <property name=\"commitInterval\" value=\"1\"/>\n        <property name=\"backOffPolicy\">\n            <bean class=\"org.springframework.batch.retry.backoff.ExponentialBackOffPolicy\">\n                <property name=\"initialInterval\" value=\"1000\"/>\n            </bean>\n        </property>\n        <property name=\"retryLimit\" value=\"5\"/>\n        <property name=\"retryableExceptionClasses\">\n            <map>\n                <entry key=\"org.springframework.dao.ConcurrencyFailureException\" value=\"true\"/>\n            </map>\n        </property>\n    </bean>\n\n    <step id=\"createCatalogueValidateStep\" parent=\"simpleStep\" next=\"createCataloguePostValidateStep\">\n         <tasklet transaction-manager=\"transactionManager\">\n             <chunk reader=\"csvStagedProductReader\" writer=\"hibernateStagedProductWriter\" commit-interval=\"10\"/>\n             <listeners>\n                 <listener ref=\"createCatalogueValidateItemListener\"/>\n             </listeners>\n         </tasklet>\n    </step>\n```\n\nAnd we are getting the error:\n\nThe field 'retry-limit' is not permitted on the step [createCatalogueValidateStep] because there is no 'retryable-exception-classes'.\n\nWhen I debug the code, I can see that the StepParserStepFactoryBean has a retryLimit which it got from the parent bean but no retryableExceptionClasses.  Further investigation lead me to this code in ChunkElementParser:\n\n```\n// Even if there is no retryLimit, we can still accept exception\n// classes for an abstract parent bean definition\npropertyValues.addPropertyValue(\"retryableExceptionClasses\", retryableExceptions);\n```\n\nThe problem is that this always sets the retryableExceptionClasses property even if it is not provided.  When the bean definitions are merged, the parent bean's definition of retryableExceptionClasses is overridden by an empty definition.\n\n\n---\n\n**Affects:** 2.1.8\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/4b552d0113794797282d1ed7fb26416b5901e7cc, https://github.com/spring-projects/spring-batch/commit/c5675b23a5ce23917cd3e09ad094fe923d4dfb05, https://github.com/spring-projects/spring-batch/commit/49645285d4434d7f7e48d246cbdc7f2ee76f81fd\n", "url": "https://github.com/spring-projects/spring-batch/issues/1748", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2012-03-01 17:50:58", "closed": "2012-06-26 07:15:42", "commits": {}, "ttf": 116.00027777777778, "commitsDetails": []}, {"title": "Deadlock on the beanDefinitionMap and singletonObjects [BATCH-1842]", "body": "**[LiangFei](https://jira.spring.io/secure/ViewProfile.jspa?name=liangfei0201)** opened **[BATCH-1842](https://jira.spring.io/browse/BATCH-1842?redirect=false)** and commented\n\n1. init BeanX (a RPC bean)\n2. RPC -> BeanX -> getBean() // get bean thread\n3. init BeanY // init context thread\n\nThe \"get bean thread\" and the \"init context thread\" deadlock.\n\n1. get bean thread:\n   (a) DefaultSingletonBeanRegistry.getSingleton(): synchronized(singletonObjects)\n   (b) -> getObject() -> DefaultListableBeanFactory.getBeanNames(): synchronized(beanDefinitionMap)\n\n2. init context thread:\n   (a) DefaultListableBeanFactory.preInstantiateSingletons(): synchronized(beanDefinitionMap)\n   (b) -> getBean() -> DefaultSingletonBeanRegistry.getSingleton(): synchronized(singletonObjects)\n\n\n\n---\n\n**Affects:** 2.0.0\n\n**Attachments:**\n- [lock-get-bean.jpg](https://jira.spring.io/secure/attachment/19472/lock-get-bean.jpg) (_107.23 kB_)\n- [lock-init-context.jpg](https://jira.spring.io/secure/attachment/19473/lock-init-context.jpg) (_38.31 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1747", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2012-03-05 04:41:57", "closed": "2012-03-05 05:03:57", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "OraclePagingQueryProvider reads incorrect number of rows based on Sort Key and PageSize [BATCH-1845]", "body": "**[David Leo King](https://jira.spring.io/secure/ViewProfile.jspa?name=davidlking)** opened **[BATCH-1845](https://jira.spring.io/browse/BATCH-1845?redirect=false)** and commented\n\nI listed this as critical because it causes a loss of data.\n\nThe situation that I am runnning into occurs when the sort key value has less rows than the page size.\nThe number of rows I obtain are significantly less as the page size for the job decreases.\n\nI have a Table called CITY with columns CTY_NME and ST_CDE (Agency Code is just a random value).\nUsing the query \"SELECT c.* FROM \\<Schema Name>.CITY c WHERE c.CTY_NME LIKE 'M%' AND c.ST_CDE LIKE 'C%' ORDER BY \\<Sort Key> ASC;\" there are a total of 3 states (CA, CO, CT) and each CTY_NME and CTY_CDE are unique for all records.\nFor ST_CDE = CA there are 94 rows\nFor ST_CDE = CO there are 28 rows\nFor ST_CDE = CT there are 20 rows\nFor at total of 142 rows.\n\nNow if I have the sort key be CTY_NME, there is a total of 142 rows returned no matter what the page size is (for this case I tested 93 and 29).\n\nWhen I use ST_CDE as the Sort Key (having only 3 values) the number of rows I get are variable.\nPage Size =  93 |  94 |  28 |  29\nRow Count = 141 | 142 |  76 |  58\n\nFor page size 93 and 94, there are two pages.  One where it picks up CA with 93 of its rows (missing the final CA row) and then CO and CT together (28 + 20 = 48 < 93).  For a page size of 94, all 94 of CA rows are printed and so are CO (28) and CT (20).  Again, it took two pages.\n\nFor page size of 28, the first 28 rows of CA are given, all of the 28 rows of CO are given with the 20 rows of CT is also given for a total of 28+28+20 = 76 (three pages total).\nFor page size of 29, the first 29 rows of CA are given, all of the 28 rows of CO are given with the first of the rows for CT given for a total of 29+28+1 = 58. (three pages total)\n\nAt this time I am unsure if this is at the OracleQueryProvider level or much deeper.  I couldn't find where the error would occur.\n\nI also tested the Oracle JDBC by itself and also obtained the correct number of rows.\n\nI've attached several documents of my personal troubleshooting.  The names that start with ST_CDE are results from a sort key of ST_CDE and the CTY_NME, CTY_NME.  The numbers are the page size used.  JDBCExperiment was the class I used to test the driver.  Logs contain the values printed to the console.\n\n\n---\n\n**Affects:** 2.1.8\n\n**Attachments:**\n- [CTY_NME 29.pdf](https://jira.spring.io/secure/attachment/19527/CTY_NME+29.pdf) (_28.17 kB_)\n- [CTY_NME 29 Log.txt](https://jira.spring.io/secure/attachment/19528/CTY_NME+29+Log.txt) (_44.05 kB_)\n- [CTY_NME 94.pdf](https://jira.spring.io/secure/attachment/19530/CTY_NME+94.pdf) (_28.18 kB_)\n- [CTY_NME 94 Log.txt](https://jira.spring.io/secure/attachment/19529/CTY_NME+94+Log.txt) (_42.35 kB_)\n- [JDBCExperiment.java](https://jira.spring.io/secure/attachment/19532/JDBCExperiment.java) (_1.47 kB_)\n- [JDBCExperiment Log.txt](https://jira.spring.io/secure/attachment/19531/JDBCExperiment+Log.txt) (_3.67 kB_)\n- [ST_CDE 28.pdf](https://jira.spring.io/secure/attachment/19525/ST_CDE+28.pdf) (_15.63 kB_)\n- [ST_CDE 28 Log.txt](https://jira.spring.io/secure/attachment/19526/ST_CDE+28+Log.txt) (_30.67 kB_)\n- [ST_CDE 29.pdf](https://jira.spring.io/secure/attachment/19523/ST_CDE+29.pdf) (_11.95 kB_)\n- [ST_CDE 29 Log.txt](https://jira.spring.io/secure/attachment/19524/ST_CDE+29+Log.txt) (_26.57 kB_)\n- [ST_CDE 93.pdf](https://jira.spring.io/secure/attachment/19521/ST_CDE+93.pdf) (_27.78 kB_)\n- [ST_CDE 93 Log.txt](https://jira.spring.io/secure/attachment/19522/ST_CDE+93+Log.txt) (_42.21 kB_)\n- [ST_CDE 94.pdf](https://jira.spring.io/secure/attachment/19519/ST_CDE+94.pdf) (_28.15 kB_)\n- [ST_CDE 94 Log.txt](https://jira.spring.io/secure/attachment/19520/ST_CDE+94+Log.txt) (_42.34 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1744", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2012-03-16 11:36:17", "closed": "2014-03-18 13:35:11", "commits": {}, "ttf": 732.0002777777778, "commitsDetails": []}, {"title": "scope=\"step\" inheritance from parent bean definitions causes odd effects [BATCH-1847]", "body": "**[David Thexton](https://jira.spring.io/secure/ViewProfile.jspa?name=david@consultants.co.nz)** opened **[BATCH-1847](https://jira.spring.io/browse/BATCH-1847?redirect=false)** and commented\n\nIn a Spring Batch project we (Ewan Benfield and myself) found that Spring Batch was attempting to instantiate a bean defined as abstract in its context (abstract=\"true\") when marked with step scope (scope=\"step\").  Note that scope should be inheritable).\n\nIn an attempt to reproduce the issue outside of the project an odd error was instead noted that the child bean cannot be instantiated due to not having a matching constructor (despite the abstract bean and its child having only default constructors).  The project for this attempt is included.  The exact error given is \"BeanCreationException: Error creating bean with name 'concrete' defined in class path resource [abstractstepscope/AbstractStepScopeTest-context.xml]: 1 constructor arguments specified but no matching constructor found in bean 'concrete' (hint: specify index and/or type arguments for simple parameters to avoid type ambiguities)\".\n\nNote that if the Spring Batch beans are removed or if the scope is defined on the child (also or instead of the parent) no error is given when running the provided test \"AbstractStepScopeTest\".\n\nAlthough tested only against Spring Batch 2.1.8 I assume this affects subsequent releases as nothing in org.springframework.batch.core.scope appears to have changed for a while.\n\nWe've worked around the issue by placing the attribute scope=\"step\" on the child bean definitions instead.\n\n\n---\n\n**Affects:** 2.1.8\n\n**Attachments:**\n- [abstractstepscope.zip](https://jira.spring.io/secure/attachment/19557/abstractstepscope.zip) (_4.16 kB_)\n- [abstractstepscope-updated.tgz](https://jira.spring.io/secure/attachment/20831/abstractstepscope-updated.tgz) (_2.22 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/b1bd3d3d1eb0774cc900aa6d428b5085d026da71\n\n**Backported to:** [2.2.0 - Sprint 16](https://github.com/spring-projects/spring-batch/milestone/59?closed=1)\n\n1 votes, 5 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1742", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2012-03-30 06:37:53", "closed": "2013-03-01 16:17:04", "commits": {}, "ttf": 336.0002777777778, "commitsDetails": []}, {"title": "JdbcPagingItemReader does not support table or column aliases due to sortKey being used in where clause, order by clause and for retrieval of result set column [BATCH-1848]", "body": "**[David Thexton](https://jira.spring.io/secure/ViewProfile.jspa?name=david@consultants.co.nz)** opened **[BATCH-1848](https://jira.spring.io/browse/BATCH-1848?redirect=false)** and commented\n\nThe SqlPagingQueryProviderFactoryBean class takes a parameter sortKey used to enable paged queries.  This is used in the where clause (to select skip rows already selected in subsequent queries), in an order by clause and to retrieve the result set value for the last item read.  The exact use is determined by the database type, but the general pattern remains the same.\n\nThe examples in the tutorial appear fairly simple, involving a single table only.  We have a use case where two aliased tables are involved.  As the table alias prefix is required in the where clause, appears to be optional in the order by clause and cannot be present when retrieving the result set column by name we have a problem as sortKey is used in all three cases.\n\nFor a page size of 2 we set the reader's queryProvider properties set as follows:\n\n    <property name=\"queryProvider\">\n         <bean class=\"org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean\">\n              <property name=\"selectClause\" value=\"select  t1.id, t1.field, t2.other_field\" />\n              <property name=\"dataSource\" ref=\"dataSource\" />\n              <property name=\"fromClause\" value=\"from TABLE_1 t1, TABLE_2 t2 \" />\n              <property name=\"whereClause\" value=\"t1.id = t2.id\" />\n              <property name=\"sortKey\" value=\"t1.id\" />\n         </bean>\n    </property>\n\nThe Derby query resulting for the first page is:\n\nSELECT * FROM ( SELECT t1.id, t1.field, t2.other_field, ROW_NUMBER() OVER () AS ROW_NUMBER FROM TABLE_1 t1, TABLE_2 t2 WHERE t1.id = t2.id ORDER BY t1.id ASC) AS TMP_SUB WHERE TMP_SUB.ROW_NUMBER <= 2\n\nAnd queries for subsequent pages are:\n\nSELECT * FROM ( SELECT t1.id, t1.field, t2.other_field, ROW_NUMBER() OVER () AS ROW_NUMBER FROM TABLE_1 t1, TABLE_2 t2 WHERE t1.id = t2.id  AND t1.id > ? ORDER BY t1.id ASC) AS TMP_SUB WHERE TMP_SUB.ROW_NUMBER <= 2\n\nIn H2 the query for the initial page is:\n\nSELECT TOP 2 t1.id, t1.field, t2.other_field FROM TABLE_1 t1, TABLE_2 t2 WHERE t1.id = t2.id ORDER BY t1.id ASC\n\nAnd queries for sebsequent pages are:\n\nSELECT TOP 2 t1.id, t1.field, t2.other_field FROM TABLE_1 t1, TABLE_2 t2 WHERE t1.id = t2.id AND t1.id > :_sortKey ORDER BY id ASC\n\nIn both Derby and H2 the result set column retrieval fails.\n\nWe've worked around the problem by subclassing JdbcPagingItemReader and with tricks with reflection effectively changing the line in the inner class JdbcPagingItemReader.PagingRowMapper \"startAfterValue = rs.getObject(queryProvider.getSortKey());\" to \"startAfterValue = rs.getObject(stripAlias(queryProvider.getSortKey()));\" where the method stripAlias is defined as:\n\n    private String stripAlias(String column) {\n        int separator = column.indexOf('.');\n        if(separator > 0) {\n            int columnIndex = separator + 1;\n            if(columnIndex < column.length()) {\n                column = column.substring(columnIndex);\n            }\n        }\n        return column;\n    }\n\nWe'd like this change made to this class directly or something else with similar effect.\n\nAnother issue you might wish to consider is that a column alias would further confuse things (as it would be required to be used for the order by clause and to retrieve the value from the result set, but not for the where clause).  Perhaps an additional optional property \"sortKeyAlias\"?\n\n\n---\n\n**Affects:** 2.1.8\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/3f58444926f2566047a1487ff09cf4bf28a28bf2\n", "url": "https://github.com/spring-projects/spring-batch/issues/1741", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2012-04-03 06:37:22", "closed": "2016-09-26 19:50:54", "commits": {}, "ttf": 1637.0002777777777, "commitsDetails": []}, {"title": "Item was not picked up after restarting a failed job!!! [BATCH-1849]", "body": "**[Ramkumar Kirhsnan](https://jira.spring.io/secure/ViewProfile.jspa?name=ramkumar)** opened **[BATCH-1849](https://jira.spring.io/browse/BATCH-1849?redirect=false)** and commented\n\nWe have got 2 items needs to be processed by the job. Their keys are 3000000001659 and 3000000001661.\n\nPage size was set to 20 and commit-interval was set to 1 in the job configuration. At the first run, job failed but processed one of the items and second item rolledback due to RuntimeException. Again when we restarted the job, job reported as completed. We later realized the second item was not picked up by the job when we restarted it. We could see it in the batch tables.\n\nBelow are the entries from the batch_step_execution table for the both the failed and successful executions\n\nSTEP_EXECUTION_ID STATUS COMMIT_COUNT READ_COUNT WRITE_COUNT ROLLBACK_COUNT\n752510 FAILED 1 2 1 1\n752511 COMPLETED 1 0 0 0\n\nBelow are the entries from the batch_step_execution_context table for the both the failed and successful executions\n\nSTEP_EXECUTION_ID short_context\n\n752510 {\"map\":{\"entry\":[{\"string\":\"JdbcPagingItemReader.read.count\",\"int\": 1},{\"string\":\"JdbcPagingItemReader.start.after\",\"l ong\":3000000001661}]}}\n\n752511 {\"map\":{\"entry\":[{\"string\":\"JdbcPagingItemReader.read.count\",\"int\": 2},{\"string\":\"JdbcPagingItemReader.start.after\",\"l ong\":3000000001661}]}}\n\nI suspect the value for JdbcPagingItemReader.start.after should be 3000000001659 and not 3000000001661. But I am not sure.\n\nBut it works well if the size of commit-interval and page-size matches. I don't remember reading in doc that they should match.\n\nFollowing is the Job configuration but not a complete one\n<batch:job id=\"corporateActionEODJob\" parent=\"simpleJob\">\n<batch:step id=\"processCorporateActions\" parent=\"simpleStep\">\n<batch:tasklet>\n<batch:chunk reader =\"corporateActionEODItemReader\"\nwriter =\"corporateActionEODItemWriter\"\ncommit-interval=\"1\" />\n</batch:tasklet>\n</batch:step>\n</batch:job>\n\n\\<bean id=\"corporateActionEODItemReader\" class=\"org.springframework.batch.item.database.Jdb cPagingItemReader\">\n\\<property name=\"saveState\" value=\"true\"/>\n\\<property name=\"dataSource\" ref=\"dataSource\"/>\n\\<property name=\"pageSize\" value=\"20\"/>\n\\<property name=\"rowMapper\">\n\\<bean class=\"org.springframework.jdbc.core.simple.Parame terizedSingleColumnRowMapper\" factory-method=\"newInstance\">\n\\<constructor-arg>\n\\<null/>\n\\</constructor-arg>\n\\</bean>\n\\</property>\n\\<property name=\"queryProvider\">\n\\<bean class=\"org.springframework.batch.item.database.sup port.SqlPagingQueryProviderFactoryBean\">\n\\<property name=\"fromClause\" value=\"ca_corp_action ca\"/>\n\\<property name=\"selectClause\" value=\"ca.corp_action_id\"/>\n\\<property name=\"sortKey\" value=\"ca.corp_action_id\"/>\n\\<property name=\"whereClause\" value=\"ca.action_status = 'SCHEDULED' and ca.effective_date = :businessDay\"/>\n\\</bean>\n\\</property>\n\\<property name=\"parameterValues\">\n\\<map>\n\\<entry key=\"businessDay\" value=\"2012-04-09\"/>\n\\</map>\n\\</property>\n\\</bean>\n\\<bean id=\"corporateActionEODItemWriter\" class=\"com.om.dh.batch.item.adapter.DelegatingItem WriterAdapterFactoryBean\">\n\\<property name=\"targetObject\" ref =\"com.dh.ca.services.BatchAdapterService\"/>\n\\<property name=\"targetMethod\" value=\"processAction\" />\n\\</bean>\nWe use SB version 2.1.6.\n\n\n---\n\n**Affects:** 2.1.6\n\n**Reference URL:** http://forum.springsource.org/showthread.php?125254-Items-are-not-processed-when-restarting-a-failed-job!!!\n\n1 votes, 1 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1740", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2012-04-12 06:45:52", "closed": "2013-07-26 10:38:31", "commits": {}, "ttf": 470.0002777777778, "commitsDetails": []}, {"title": "StepExecutionContext: Truncated short context leads to deserialisation failure  [BATCH-1851]", "body": "**[David Victor](https://jira.spring.io/secure/ViewProfile.jspa?name=dvb123)** opened **[BATCH-1851](https://jira.spring.io/browse/BATCH-1851?redirect=false)** and commented\n\nThe `JdbcExecutionContextDao` truncates the StepExecution short context where overall serialized context length execeeds the 2,500 varchar limit in the schema.\n\n```\n\tprivate void persistSerializedContext(final Long executionId, String serializedContext, String sql) {\n\n\t\tfinal String shortContext;\n\t\tfinal String longContext;\n\t\tif (serializedContext.length() > shortContextLength) {\n\t\t\t// Overestimate length of ellipsis to be on the safe side with\n\t\t\t// 2-byte chars\n\t\t\tshortContext = serializedContext.substring(0, shortContextLength - 8) + \" ...\";\n\t\t\tlongContext = serializedContext;\n```\n\nThis means that an invalid JSON structure can be saved in the short context column.\n\nThe Javadoc explains that this is done for readability, however the consequence is that when we try to read back this row from the db some time later it can fail in _xstream_ with an exception when it attempts to \"unmarshal\" the short context.  E.g. `SimpleJobExplorer.getJobExecutions()`\n\n```\n\t/**\n\t * The maximum size that an execution context can have and still be stored\n\t * completely in short form in the column <code>SHORT_CONTEXT</code>.\n\t * Anything longer than this will overflow into large-object storage, and\n\t * the first part only will be retained in the short form for readability.\n\t * Default value is 2500. Clients using multi-bytes charsets on the database\n\t * server may need to reduce this value to as little as half the value of\n\t * the column size.\n\t * @param shortContextLength\n\t */\n\tpublic void setShortContextLength(int shortContextLength) {\n\t\tthis.shortContextLength = shortContextLength;\n\t}\n\n```\n\nWill try to add a backtrace when I get one.\n\n\n\n---\n\n**Affects:** 2.1.8\n\n**Reference URL:** http://forum.springsource.org/showthread.php?125329-BATCH_STEP_EXECUTION_CONTEXT-SHORT_CONTEXT-truncation-leads-to-invalid-serialisation\n", "url": "https://github.com/spring-projects/spring-batch/issues/1738", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2012-05-02 05:01:21", "closed": "2012-10-31 10:26:51", "commits": {}, "ttf": 182.00027777777777, "commitsDetails": []}, {"title": "Very quick (<1ms) jobs are poorly identified [BATCH-1852]", "body": "**[David Thexton](https://jira.spring.io/secure/ViewProfile.jspa?name=david@consultants.co.nz)** opened **[BATCH-1852](https://jira.spring.io/browse/BATCH-1852?redirect=false)** and commented\n\nVery quick (<1ms) jobs are generated with non-unique parameters by \"JobLauncherTestUtils.getUniqueJobParameters()\" and multiple executions are found by \"JdbcJobExecutionDao.getLastJobExecution(...)\".\n\nA unit test testing a quick running step with \"JobLauncherTestUtils.launchStep(...)\" was failing due to this issue.\n\nI amended an existing unit test to demonstrate the issue and then made changes to \"JobLauncherTestUtils.getUniqueJobParameters()\" (to instead use system time in nanoseconds instead of milliseconds) and \"JdbcJobExecutionDao.getLastJobExecution(...)\" (to use JOB_EXECUTION_ID instead of CREATE_TIME) to address these.\n\nA pull request will follow.\n\n\n---\nNo further details from [BATCH-1852](https://jira.spring.io/browse/BATCH-1852?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/1737", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2012-05-04 05:59:04", "closed": "2012-07-17 01:28:54", "commits": {}, "ttf": 73.00027777777778, "commitsDetails": []}, {"title": "JobParamters.getDate() throws NPE if no value exists for that date [BATCH-1853]", "body": "**[Lucas Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.l.ward)** opened **[BATCH-1853](https://jira.spring.io/browse/BATCH-1853?redirect=false)** and commented\n\nThe following test fails:\n\n`@Test`\npublic void testDateReturnsNullWhenKeyDoesntExit(){\nassertNull(new JobParameters().getDate(\"keythatdoesntexist\"));\n}\n\nIn the same scenario, if you ask for a key that doesn't have a corresponding parameter, you will get Null in the case of String, 0 for Long, 0.0 for double, and NPE for Date. Date should return null.\n\n\n---\n\n**Affects:** 2.1.8\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/aa1c382c4c1af9be070b2dd50779f3ee5fbe8253\n", "url": "https://github.com/spring-projects/spring-batch/issues/1736", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2012-05-04 07:49:39", "closed": "2012-07-17 01:33:55", "commits": {}, "ttf": 73.00027777777778, "commitsDetails": []}, {"title": "ExtendedConnectionDataSourceProxy compilation error in JDK 7 [BATCH-1856]", "body": "**[Robert Kasanicky](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.kasanicky)** opened **[BATCH-1856](https://jira.spring.io/browse/BATCH-1856?redirect=false)** and commented\n\nApparently a new method has been added to the DataSource interface in JDK 7:\n\n```\n[ERROR] /home/robo/work/sb/spring-batch/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/database/ExtendedConnectionDataSourceProxy.java:[83,7] error: ExtendedConnectionDataSourceProxy is not abstract and does not override abstract method getParentLogger() in CommonDataSource\n```\n\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/6dbf54330990390e1ec602bce2c04cfc7411b54c, https://github.com/spring-projects/spring-batch/commit/fd00ae62c17f3013e61805f43010a8796ba0cec7, https://github.com/spring-projects/spring-batch/commit/11add37b5c9d50d17f3ff7268ee556937c8823dc, https://github.com/spring-projects/spring-batch/commit/a07a8dae14cbba07afd0793104597f431eaa19e6\n\n**Backported to:** [2.2.0 - Sprint 16](https://github.com/spring-projects/spring-batch/milestone/59?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1733", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2012-05-06 11:35:40", "closed": "2013-03-01 12:33:07", "commits": {}, "ttf": 299.0002777777778, "commitsDetails": []}, {"title": "JdbcPagingItemReader can skip rows for Derby (and DB/2, SqlServer and Sybase?) due to paging by row number occuring before ordering [BATCH-1860]", "body": "**[David Thexton](https://jira.spring.io/secure/ViewProfile.jspa?name=david@consultants.co.nz)** opened **[BATCH-1860](https://jira.spring.io/browse/BATCH-1860?redirect=false)** and commented\n\nThe queries (generated by DerbyPagingQueryProvider) are of this form.\n\n- first page query\nSELECT * FROM (\nSELECT \\<select clause>, ROW_NUMBER() OVER () AS ROW_NUMBER\nFROM \\<from clause>\nWHERE \\<where clause>\nORDER BY \\<sort key> ASC\n) AS TMP_SUB\nWHERE TMP_SUB.ROW_NUMBER <= \\<page size>\n\n- remaining pages query\nSELECT * FROM (\nSELECT \\<select clause>, ROW_NUMBER() OVER () AS ROW_NUMBER\nFROM \\<from clause>\nWHERE \\<where clause> AND ID > \\<last sort key value>\nORDER BY ID ASC\n) AS TMP_SUB\nWHERE TMP_SUB.ROW_NUMBER <= \\<page size>\n\nMost of this is determined by the superclass SqlWindowingPagingQueryProvider, which is also extended by Db2PagingQueryProvider, SqlServerPagingQueryProvider and SybasePagingQueryProvider.\n\nUnfortunately (at least for Derby, I haven't verified for DB/2, SqlServer or Sybase) the row number is appended to the unordered rows before the ordering.  This results in rows sometimes being skipped when the page size is less than the total number of rows as the subsequent remaining rows queries will retrieve only rows with a sort key value > the last row's sort key value.\n\nTo illustrate this more clearly take this simple schema and data.\n\nCREATE TABLE SAMPLE (\nID VARCHAR(10) NOT NULL\n);\nINSERT INTO SAMPLE (ID) VALUES ('Z');\nINSERT INTO SAMPLE (ID) VALUES ('A');\n\nThis would involve two queries with the first query retrieving the wrong row (not the first by sort key) and second query no rows at all.\n\n- first page query\nSELECT * FROM (\nSELECT ID, ROW_NUMBER() OVER () AS ROW_NUMBER\nFROM SAMPLE\nORDER BY ID ASC\n) AS TMP_SUB\nWHERE TMP_SUB.ROW_NUMBER <= 1\n- returns 'Z', 1\n\n- remaining pages query\nSELECT * FROM (\nSELECT ID, ROW_NUMBER() OVER () AS ROW_NUMBER\nFROM SAMPLE\nWHERE ID > 'Z'\nORDER BY ID ASC\n) AS TMP_SUB\nWHERE TMP_SUB.ROW_NUMBER <= 1\n- returns (no rows)\n\nI suggest ensuring that the row number column is added after the ordering.\n\n- first page query\nSELECT * FROM (\nSELECT\n\\<select clause>,\nROW_NUMBER() OVER () AS ROW_NUMBER\nFROM (\nSELECT \\<select clause>\nFROM \\<from clause>\nWHERE \\<where clause>\nORDER BY \\<sort key>\n) AS TMP_ORDERED\n) AS TMP_SUB\nWHERE TMP_SUB.ROW_NUMBER <= \\<page size>\n\n- remaining pages query\nSELECT * FROM (\nSELECT\n\\<select clause>,\nROW_NUMBER() OVER () AS ROW_NUMBER\nFROM (\nSELECT \\<select clause>\nFROM \\<from clause>\nWHERE \\<where clause> AND \\<sort key> > \\<last sort key value>\nORDER BY \\<sort key>\n) AS TMP_ORDERED\n) AS TMP_SUB\nWHERE TMP_SUB.ROW_NUMBER <= \\<page size>\n\nAlternatively (although I don't wish to propose this), no ordering or sort key is required at all (for descendants of SqlWindowingPagingQueryProvider). A range of row numbers could be selected for each page.  I presume this is undesirable as the developer may be expecting order (even though it's only a side-effect of the paging):\n\n- first and remaining pages query (with \\<last row number> initialised to 0)\nSELECT * FROM (\nSELECT\n\\<select clause>,\nROW_NUMBER() OVER () AS ROW_NUMBER\nFROM (\nSELECT \\<select clause>\nFROM \\<from clause>\nWHERE \\<where clause>\n) AS TMP_ORDERED\n) AS TMP_SUB\nWHERE TMP_SUB.ROW_NUMBER > \\<last row number> AND TMP_SUB.ROW_NUMBER <= <last row number + page size>\n\nAlthough I've selected a priority of major, this issue doesn't currently affect us.  We shifted to HSQL from Derby for testing due to [BATCH-1848](https://jira.spring.io/browse/BATCH-1848) and I'm raising it only as I detected the problem when testing for regressions.\n\n\n---\n\n**Affects:** 2.1.8, 2.2.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/af0f960d8995b92fda201b86e30db50473cb671e, https://github.com/spring-projects/spring-batch/commit/8c445bcb0817fc1798ae2bf462b1a3ed1449d89b\n\n**Backported to:** [2.2.0 - Sprint 21](https://github.com/spring-projects/spring-batch/milestone/64?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1729", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2012-05-21 04:14:37", "closed": "2013-04-04 15:09:06", "commits": {}, "ttf": 318.0002777777778, "commitsDetails": []}, {"title": "The batch namespace can not be used with allowBeanDefinitionOverriding=false [BATCH-1863]", "body": "**[Gabriel Forro](https://jira.spring.io/secure/ViewProfile.jspa?name=gabriel.forro)** opened **[BATCH-1863](https://jira.spring.io/browse/BATCH-1863?redirect=false)** and commented\n\n### Problem description\n\nIt is not possible to use the batch namespace in spring configuration files if the `allowBeanDefinitionOverriding` is set to `false` in the application context. The application context loading fails with a `org.springframework.beans.factory.parsing.BeanDefinitionParsingException` exception.\nThis is caused by the `JobParser` and `InlineFlowParser` from package `org.springframework.batch.core.configuration.xml`. `JobParser` creates for non abstract job definition a `SimpleFlow` which is unfortunately registered under the same bean name as the job parsed by the `JobParser` - the problematic code is on line 120 of the `JobParser`. The application context loading fails as 2 beans with the same names are going to be registered. The first one is a factory bean for `SimpleFlow` and the second one is a factory bean for `FlowJob`.\nThis fact is visible also from logs when the `allowBeanDefinitionOverriding` is set to `true`:\n\n```\norg.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition\nINFO: Overriding bean definition for bean 'dummyJob': replacing [Generic bean: class [org.springframework.batch.core.configuration.xml.SimpleFlowFactoryBean]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] with [Generic bean: class [org.springframework.batch.core.configuration.xml.JobParserJobFactoryBean]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null]\n```\n\nI have attached a very simple application to this issue, which contains 2 unit tests. One with `allowBeanDefinitionOverriding=true` and another one with `allowBeanDefinitionOverriding=false`. The second one fails with the `org.springframework.beans.factory.parsing.BeanDefinitionParsingException` exception.\n\n### Possible fix\n\nThe factory bean for `SimpleFlow` could be represented by a random name (or by a prefix/suffix added to the bean name of the `FlowJob`'s factroy bean), as the `SimpleFlow` is just a bean which will be not used as a \"main\", standalone bean, but it is used only as the `flow` attribute of the `SimpleFlow`. So its bean name is not important, however it should named differently as its owner `FlowJob`. The current implementation of the `InlineFlowParser` uses the same value for the flow name and for the bean name. If flow name is important and it makes no sense to use a random name or a modified name, then an additional value should be provided for the `InlineFlowParser`'s constructor, which will be the bean name to use.\n\n\n\n---\n\n**Affects:** 2.1.8\n\n**Reference URL:** http://forum.springsource.org/showthread.php?107087-Jobparser-factory-throws-exception-if-AllowBeanDefinitionOverriding-set-to-false\n\n**Attachments:**\n- [unique-bean-name-fails.zip](https://jira.spring.io/secure/attachment/19700/unique-bean-name-fails.zip) (_17.28 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/47eba434d81fb14a4dd7add0f6393ceebf53f7a5, https://github.com/spring-projects/spring-batch/commit/918cfcb8bdef63e9186c57af80e6cba612109634\n\n5 votes, 6 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1727", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2012-05-25 06:54:30", "closed": "2014-09-15 13:29:12", "commits": {}, "ttf": 843.0002777777778, "commitsDetails": []}, {"title": "SimpleChunkProvider calls afterRead listener even if the file is finished [BATCH-1865]", "body": "**[Mike W](https://jira.spring.io/secure/ViewProfile.jspa?name=mikezx6r)** opened **[BATCH-1865](https://jira.spring.io/browse/BATCH-1865?redirect=false)** and commented\n\nthe doRead method of SimpleChunkProvider always calls listener.afterRead even if the returned item is null.\n\nA null returned item indicates the file is complete, so the doRead shouldn't be calling the afterRead listener.\n\n\n---\n\n**Affects:** 2.1.8\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/1854dfeb3aca8312255e398dbd0487a7481b6a11\n\n**Backported to:** [2.2.0 - Sprint 21](https://github.com/spring-projects/spring-batch/milestone/64?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1725", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2012-05-29 00:50:46", "closed": "2013-04-04 14:55:58", "commits": {}, "ttf": 310.0002777777778, "commitsDetails": []}, {"title": "IbatisPagingItemReaderAsyncTests fails when \"-Denvironment=derby\" set [BATCH-1866]", "body": "**[David Thexton](https://jira.spring.io/secure/ViewProfile.jspa?name=david@consultants.co.nz)** opened **[BATCH-1866](https://jira.spring.io/browse/BATCH-1866?redirect=false)** and commented\n\nWhen investigating amending infrastructure tests for [BATCH-1860](https://jira.spring.io/browse/BATCH-1860) (but prior to making any changes) I found that IbatisPagingItemReaderAsyncTests fails when \"-Denvironment=derby\" is set.\n\nI can reproduce this running \"mvn -Ptest -Denvironment=derby test\" within \"spring-batch-infrastructure-tests\" or by running the test IbatisPagingItemReaderAsyncTests (in either \"spring-batch-infrastructure-tests\" or \"spring-batch-infrastructure\") standalone with \"-Denvironment=derby\" set.\n\nI've attached the output (from the standalone test in \"spring-batch-infrastructure-tests\").\n\n\n---\n\n**Affects:** 2.2.0\n\n**Attachments:**\n- [derby.log](https://jira.spring.io/secure/attachment/19825/derby.log) (_859.49 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1724", "user": "spring-issuemaster", "labels": ["status: invalid", "type: bug"], "created": "2012-06-07 03:50:52", "closed": "2019-10-21 09:29:06", "commits": {}, "ttf": 2692.0002777777777, "commitsDetails": []}, {"title": "Retry problem with deferred write [BATCH-1873]", "body": "**[Giovanni Dall'Oglio Risso](https://jira.spring.io/secure/ViewProfile.jspa?name=giovanni.dalloglio)** opened **[BATCH-1873](https://jira.spring.io/browse/BATCH-1873?redirect=false)** and commented\n\nWe found a problem in a chunk with retry enabled.\n\nWe use MyBatis as writer\n* in older MyBatis versions, the \"add batch feature\" was not supported\n* so, we used \"for each item / write single item\" approach\n\nWe had production problems:\n* if an exception is thrown during the commit phase\n  * all the chunk is lost\n  * SB continues with the other chunks as nothing happened\n\nWe build a test case showing the problem (please: find attached).\n\nBackground: we have a table with **not-nullable columns**, and we have a job, with a chunk that\n* **Reader**: generates 500 values\n* **Writer**: at some moments, inject a null-value in the items-list to be writter (causing the error), then delegates the real write\n\nIn this test case, we tested 4 scenarios (= 4 delegates)\n* **`JdbcBatchItemWriter`** -> works fine\n* **`SingleUpdateItemWriter`** (the \"for each item / write single item\" approach, using JdbcTemplate) -> works fine\n* **`MyBatisBatchItemWriter`** (the JdbcBatchItemWriter for MyBatis, provided by MyBatis guys) -> works fine\n* **`MybatisItemWriter`** (the \"for each item / write single item\" using MyBatis) -> the broken one\n\nIt seems to me, that the three working scenarios shares the \"write immediatly\" approach: the error is detected while in `write(List l)` method, so the retry template is able to intercept the error, and manage it.\n\nThe failing one, defer the real write at the `TX.commit()` time, that is too late for being managed.\n\nTo better explain the idea, i attached the screenshot of my stack, i see:\n* **Repeat** (green)\n  * **TX** (red)\n  *** **Retry** (blue)\n\nThe first-level repeat explains why SB continues with the other chunks.\n\nA simple solution could be to have a \"simulated restart of a failed job\", so the itemstreams reposition the elaboration, and everything can be continued, but this way you loose the optimizations (the internal readed-items list).\n\nIn our case, we work-arounded the problem adopting the `MyBatisBatchItemWriter`, but i'm writing this issue because you can choose to investigate this problem: deferred write could be a common scenario (I remember something like that in the `FlatFileItemWriter`, that is ways more impacting)\n\n\n---\n\n**Affects:** 2.1.8\n\n**Attachments:**\n- [SB-retry problem stack.jpg](https://jira.spring.io/secure/attachment/20017/SB-retry+problem+stack.jpg) (_143.95 kB_)\n- [SB-Retry-Test.zip](https://jira.spring.io/secure/attachment/20015/SB-Retry-Test.zip) (_16.69 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1718", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: declined", "type: bug"], "created": "2012-07-02 05:53:28", "closed": "2014-05-21 20:00:15", "commits": {}, "ttf": 688.0002777777778, "commitsDetails": []}, {"title": "Dependency injection problem with multiple step scoped anonymous inner readers [BATCH-1879]", "body": "**[Holger Willebrandt](https://jira.spring.io/secure/ViewProfile.jspa?name=holger.willebrandt)** opened **[BATCH-1879](https://jira.spring.io/browse/BATCH-1879?redirect=false)** and commented\n\nThis issue is similar to [BATCH-1633](https://jira.spring.io/browse/BATCH-1633).\nIt is not possible to have two jobs with different anonymous step scoped readers.\n\nExample:\n\n```\n\n<bean id=\"john\" class=\"java.lang.String\">\n  <constructor-arg index=\"0\" value=\"John\" />\n</bean>\n\n<bean id=\"jane\" class=\"java.lang.String\">\n  <constructor-arg index=\"0\" value=\"Jane\" />\n</bean>\n\n<batch:job id=\"firstJob\" job-repository=\"jobRepository\">\n  <batch:step id=\"firstJobFirstStep\">\n    <batch:tasklet>\n      <batch:chunk commit-interval=\"1\">\n        <batch:reader>\n          <bean class=\"spring.batch.test.InnerBeanStepScopedTest$Read\"\n            scope=\"step\">\n            <property name=\"name\" ref=\"john\" />\n          </bean>\n        </batch:reader>\n        <batch:writer>\n          <bean class=\"spring.batch.test.InnerBeanStepScopedTest$Write\" />\n        </batch:writer>\n      </batch:chunk>\n    </batch:tasklet>\n  </batch:step>\n</batch:job>\n<batch:job id=\"secondJob\" job-repository=\"jobRepository\">\n  <batch:step id=\"secondJobFirstStep\">\n    <batch:tasklet>\n      <batch:chunk commit-interval=\"1\">\n        <batch:reader>\n          <bean class=\"spring.batch.test.InnerBeanStepScopedTest$Read\"\n            scope=\"step\">\n            <property name=\"name\" ref=\"jane\" />\n          </bean>\n        </batch:reader>\n        <batch:writer>\n          <bean class=\"spring.batch.test.InnerBeanStepScopedTest$Write\" />\n        </batch:writer>\n      </batch:chunk>\n    </batch:tasklet>\n  </batch:step>\n</batch:job>\n```\n\nWhen running the first job, it gets fed by the reader of the second job:\n\n```\n15:05:42.026 [main] INFO  s.b.t.InnerBeanStepScopedTest$Write - hello Jane\n```\n\nWorkaround: Assign an unique `id` to each reader.\n\n\n---\n\n**Affects:** 2.1.8\n\n**Attachments:**\n- [my-spring-batch-test.zip](https://jira.spring.io/secure/attachment/20127/my-spring-batch-test.zip) (_5.28 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1713", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2012-07-25 06:08:41", "closed": "2012-07-25 06:50:23", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "JobLauncherIntegrationTests failing [BATCH-1884]", "body": "**[Chris Schaefer](https://jira.spring.io/secure/ViewProfile.jspa?name=chrisschaefer)** opened **[BATCH-1884](https://jira.spring.io/browse/BATCH-1884?redirect=false)** and commented\n\nschema-hsqldb.sql wasn't being found, DataSourceInitializer.doExecuteScript will just return if the scriptResource does not exist. easy fix, pull request to come.\n\n```\norg.springframework.jdbc.BadSqlGrammarException: StatementCallback; bad SQL grammar [select count(*) from BATCH_JOB_INSTANCE]; nested exception is java.sql.SQLException: Table not found in statement [select count(*) from BATCH_JOB_INSTANCE]\n\tat org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:220)\n\tat org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)\n\tat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:407)\n\tat org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:458)\n\tat org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:466)\n\tat org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:474)\n\tat org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:479)\n\tat org.springframework.jdbc.core.JdbcTemplate.queryForInt(JdbcTemplate.java:488)\n\tat org.springframework.jdbc.core.simple.SimpleJdbcTemplate.queryForInt(SimpleJdbcTemplate.java:119)\n\tat org.springframework.batch.core.launch.JobLauncherIntegrationTests.testLaunchAndRelaunch(JobLauncherIntegrationTests.java:41)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat org.springframework.test.context.junit4.SpringTestMethod.invoke(SpringTestMethod.java:160)\n\tat org.springframework.test.context.junit4.SpringMethodRoadie.runTestMethod(SpringMethodRoadie.java:233)\n\tat org.springframework.test.context.junit4.SpringMethodRoadie$RunBeforesThenTestThenAfters.run(SpringMethodRoadie.java:333)\n\tat org.springframework.test.context.junit4.SpringMethodRoadie.runWithRepetitions(SpringMethodRoadie.java:217)\n\tat org.springframework.test.context.junit4.SpringMethodRoadie.runTest(SpringMethodRoadie.java:197)\n\tat org.springframework.test.context.junit4.SpringMethodRoadie.run(SpringMethodRoadie.java:143)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.invokeTestMethod(SpringJUnit4ClassRunner.java:160)\n\tat org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)\n\tat org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)\n\tat org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)\n\tat org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)\n\tat org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:97)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:130)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:76)\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:195)\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:63)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)\nCaused by: java.sql.SQLException: Table not found in statement [select count(*) from BATCH_JOB_INSTANCE]\n\tat org.hsqldb.jdbc.Util.sqlException(Unknown Source)\n\tat org.hsqldb.jdbc.jdbcStatement.fetchResult(Unknown Source)\n\tat org.hsqldb.jdbc.jdbcStatement.executeQuery(Unknown Source)\n\tat org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback.doInStatement(JdbcTemplate.java:443)\n\tat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:396)\n\t... 33 more\n```\n\n\n\n---\n\n**Affects:** 2.2.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/1430f3d7def6d958430dc97cd7ca9633d66da1c0\n\n**Backported to:** [2.2.0 - Sprint 12](https://github.com/spring-projects/spring-batch/milestone/55?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1709", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2012-08-30 12:59:13", "closed": "2013-04-04 11:14:44", "commits": {}, "ttf": 216.00027777777777, "commitsDetails": []}, {"title": "Documentation refers to batch 1.x classes [BATCH-1885]", "body": "**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** opened **[BATCH-1885](https://jira.spring.io/browse/BATCH-1885?redirect=false)** and commented\n\nDocumentation reads\n\n```\nTo be able to process the XML records the following is needed:\nRoot Element Name - Name of the root element of the fragment that constitutes the object to be mapped. The example configuration demonstrates this with the value of trade.\nResource - Spring Resource that represents the file to be read.\nFragmentDeserializer - Unmarshalling facility provided by Spring OXM for mapping the XML fragment to an object.\n```\n\nFragmentDeserializer is a batch 1.x class and not available in batch 2.1.x\n\n\n---\n\n**Affects:** 2.1.8\n\n**Reference URL:** http://static.springsource.org/spring-batch/reference/html-single/index.html#xmlReadingWriting\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/4d6e1c2ba36b69bc8ff1cb10e3e2e9f6dfccf566\n", "url": "https://github.com/spring-projects/spring-batch/issues/1708", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2012-09-05 02:42:29", "closed": "2012-09-05 05:36:39", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "afterStep method of StepExecutionListener getting called before writeFooter method of FlatFileFooterCallback [BATCH-1892]", "body": "**[Nikunj](https://jira.spring.io/secure/ViewProfile.jspa?name=nikunj_c)** opened **[BATCH-1892](https://jira.spring.io/browse/BATCH-1892?redirect=false)** and commented\n\nLogically, a step should be considered complete after call to footer callback is complete. And step execution listener should come into picture after that.\n\nstep execution listener beforeStep -> header call back writeHeader -> step -> footer call back writeFooter -> step execution listener afterStep\n\nHowever, afterStep is getting called before writeFooter call.\n\n\n---\n\n**Affects:** 2.1.8\n\n**Reference URL:** http://stackoverflow.com/q/12403751/887235\n", "url": "https://github.com/spring-projects/spring-batch/issues/1702", "user": "spring-issuemaster", "labels": ["in: build", "status: duplicate", "type: bug"], "created": "2012-09-13 21:11:19", "closed": "2012-09-21 01:35:46", "commits": {}, "ttf": 7.000277777777778, "commitsDetails": []}, {"title": "P-namespace and injecting resources in a StepScoped component [BATCH-1893]", "body": "**[Benny Goemans](https://jira.spring.io/secure/ViewProfile.jspa?name=malavon)** opened **[BATCH-1893](https://jira.spring.io/browse/BATCH-1893?redirect=false)** and commented\n\nWhen injecting resources with a wildcard inside a StepScoped component, the Resource array is created only on the first run when using the p-namespace.\n\nTake a look at the MultiResourcesWorkingTest and MultiResourcesNotWorkingTest for a nice explanation of the problem.\n\n```\n<!-- this one works correctly -->\n\t<bean id=\"multiReader\" class=\"org.springframework.batch.item.file.MultiResourceItemReader\" scope=\"step\">\n\t\t<property name=\"delegate\" ref=\"reader\" />\n\t\t<property name=\"resources\" value=\"file:./target/test-resources/*.txt\" />\n\t</bean>\n\n<!-- this one doesn't seem to work -->\n\t<bean id=\"multiReader\" class=\"org.springframework.batch.item.file.MultiResourceItemReader\" scope=\"step\"\n\t\tp:resources=\"file:./target/test-resources/*.txt\">\n\t\t<property name=\"delegate\" ref=\"reader\" />\n\t</bean>\n```\n\n\n\n---\n\n**Affects:** 2.1.5, 2.1.8\n\n**Attachments:**\n- [pnamespace.zip](https://jira.spring.io/secure/attachment/20509/pnamespace.zip) (_9.37 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1701", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2012-09-20 03:19:48", "closed": "2014-05-15 18:56:54", "commits": {}, "ttf": 602.0002777777778, "commitsDetails": []}, {"title": "DefaultFieldSet readDate - returns default value for invalid date [BATCH-1896]", "body": "**[Bieke Meeussen](https://jira.spring.io/secure/ViewProfile.jspa?name=biekem)** opened **[BATCH-1896](https://jira.spring.io/browse/BATCH-1896?redirect=false)** and commented\n\nAccording to the javadoc, DefaultFieldSet readDate implementations with a default value should return the default value \"if the field is blank\"\nIn practice, any invalid date causes the default value to be returned, instead of an exception indicating an invalid date, as demonstrated by the following unit tests:\n\n     @Test  (expected = IllegalArgumentException.class)\n    public void testReadDate1() {\n        DefaultFieldSet defaultFieldSet = new DefaultFieldSet(new String[]{\"bogusDate\"});\n        Date date = defaultFieldSet.readDate(0, \"yyyy-MM-dd\",null);\n    }\n    \n    @Test  \n    public void testReadDate2() {\n        DefaultFieldSet defaultFieldSet = new DefaultFieldSet(new String[]{\"bogusDate\"});\n        Date date = defaultFieldSet.readDate(0, \"yyyy-MM-dd\",null);\n        assertNotNull(date);\n    }\n\n\n\n---\n\n4 votes, 3 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1699", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2012-10-02 05:04:01", "closed": "2014-03-19 09:26:14", "commits": {}, "ttf": 533.0002777777778, "commitsDetails": []}, {"title": "SQL compatibility breakage with HSQL [BATCH-1903]", "body": "**[Cooper Blake](https://jira.spring.io/secure/ViewProfile.jspa?name=cmublake)** opened **[BATCH-1903](https://jira.spring.io/browse/BATCH-1903?redirect=false)** and commented\n\nI was testing Spring Batch for the first time with 2.1.9 and an HSQL database.  It was working fine until I tried to restart a failed job.  At that point, a NPE was thrown from the Spring Batch core code.  The reason was that a DAO query for fetching the last job execution details did not return any rows, even though there was a row in the database.\n\nI tried Spring Batch 2.1.8 and it worked fine.  I traced it down to the SQL query itself, which is defined here:\n\norg.springframework.batch.core.repository.dao.JdbcJobExecutionDao.GET_LAST_EXECUTION\n\nThis query was recently changed in commit 16e23fc on May 16, 2012.  While part of the change was good (changing to use an ID rather than timestamp to match rows), it broke compatibility with HSQLDB.  Here is the SQL that returns no results:\n\nSELECT JOB_EXECUTION_ID, START_TIME, END_TIME, STATUS, EXIT_CODE, EXIT_MESSAGE, CREATE_TIME, LAST_UPDATED, VERSION\nfrom BATCH_JOB_EXECUTION E where JOB_INSTANCE_ID = 6 and\nJOB_EXECUTION_ID = (SELECT max(JOB_EXECUTION_ID)\nfrom BATCH_JOB_EXECUTION E2 where E.JOB_INSTANCE_ID = E2.JOB_INSTANCE_ID)\n\nThe problem is that HSQLDB supports correlated subqueries, but apparently not when using the \"=\" operator.  This query works properly in HSQLDB when making one of the following changes:\n\n1. Change the comparison operator for JOB_EXECUTION_ID from \"=\" to \"IN\".  HSQLDB supports the IN clause w/ correlated subqueries.\n2. OR remove the subquery correlation by repeating the JDBC parameter instead of referencing E_JOB_INSTANCE_ID.  This is apparently how the query used to work.\n\nI do not know if either proposed change would cause issues in the other supported databases, but I would suspect not.  I also do not know if there are other SQL compatibility issues in 2.1.9, but I can say I didn't notice any problems when my jobs succeeded.\n\n\n---\n\n**Affects:** 2.1.9\n\n**Reference URL:** https://fisheye.springsource.org/changelog/spring-batch?showid=16e23fc919d89d429741b7b574d604a2f9139ca8\n\n**Backported to:** [2.2.0 - Sprint 3](https://github.com/spring-projects/spring-batch/milestone/46?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1693", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2012-10-25 18:42:00", "closed": "2013-02-05 06:51:10", "commits": {}, "ttf": 102.00027777777778, "commitsDetails": []}, {"title": "Cannot autowire a delegate ItemWriter defined with step scope [BATCH-1905]", "body": "**[MARTIN JUIZ](https://jira.spring.io/secure/ViewProfile.jspa?name=maxjuiz)** opened **[BATCH-1905](https://jira.spring.io/browse/BATCH-1905?redirect=false)** and commented\n\nI have a problem when I try to `@Autowired` a bean of type FlatFileItemWriter. I need to calculate a directory name in execution time and assign this value to the \"resource\" property using late-binding. There's no problem to achive this, but, when my batch runs, I receive an exception when Spring context tries to `@Autowired` this bean inside my ItemProcessor (I need to use it directly in the ItemProcessor for functional design)\n\nThe exception is: There are many candidates of type org.springframework...FlatFileItemWriter.\n\nIf I use the `@Qualifier` then the error refers to another bean that has no sense with that error.\n\nMy ItemWriter works as \"delegate\". I couldn't write items during the process because I need to process all the items first to do some operations.\n\nWhy do an ItemWriter cannot be autowired if this bean is defined with late-binding?\n\n==========================================================================\n==========================================================================\n\n==========================================================================\n\nThe code is:\n\nLISTENER TO BUILD THE DIRECTORY NAME:\n\n`@BeforeJob`\nvoid beforeJob(JobExecution jobExecution) {\nString dirTimestamp = BatchUtil.getInstance().getFormattedDate(new Date(), BatchConstants.DATE_FORMAT6);\nExecutionContext executionContext = jobExecution.getExecutionContext();\nexecutionContext.putString(batchConfig.nombreDirTi mestamp, dirTimestamp + \"/\");\n}\n\nTHE XML CONFIG OF THE JOB:\n\n\\<job id=\"job1\" xmlns=\"http://www.springframework.org/schema/batch\" incrementer=\"incrementer\">\n\\<!-- Main step -->\n\n<step id=\"step1\" ..../>\n\n\\<!-- Listener for the job -->\n\\<listeners>\n\\<listener ref=\"commonJobListener\" />\n\\</listeners>\n\\</job>\n\\<!-- ItemWriter -->\n\\<bean id=\"itemWriter1\" class=\"org.springframework.batch.item.file.FlatFil eItemWriter\" scope=\"step\">\n\\<property name=\"resource\" value=\"file:#{jobExecutionContext['timestampDir']}${output.file}\" />\n\n......................\n\n\\</bean>\n\nTHE ITEM PROCESS CODE:\n\n`@Autowired`\nFlatFileItemWriter\\<FicheroOperacionesFilaSalida> itemWriter1;\n\nIf I don't use the late-binding in the bean, there's no problem to autowired it.\n\n\n---\n\n**Affects:** 2.1.8\n\n**Reference URL:** http://forum.springsource.org/showthread.php?131462-Problem-autowiring-ItemWriter-defined-with-scope-quot-step-quot\n", "url": "https://github.com/spring-projects/spring-batch/issues/1691", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2012-11-06 10:53:50", "closed": "2014-03-18 12:35:45", "commits": {}, "ttf": 497.0002777777778, "commitsDetails": []}, {"title": "Inefficient storage of StepExecutionContexts when using partitioning [BATCH-1908]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-1908](https://jira.spring.io/browse/BATCH-1908?redirect=false)** and commented\n\nWhen using a PartitionStep, each StepExecutionContext created for the corresponding partitions are saved and committed individually.  When a job has a large number of partitions, this leads to large delays.  Look into batching the inserts of these records.\n\n\n---\n\n**Affects:** 2.1.9\n\n**Reference URL:** http://forum.springsource.org/showthread.php?132367-Spring-Batch-Meta-Data-Table-Insert-Slowing-down-the-Batch-Job\n\n**Backported to:** [2.2.0 - Sprint 17](https://github.com/spring-projects/spring-batch/milestone/60?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1688", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2012-11-19 14:10:39", "closed": "2013-03-19 12:19:56", "commits": {}, "ttf": 119.00027777777778, "commitsDetails": []}, {"title": "Fix broken JDK5 build after Spring 3.1.2 [BATCH-1890]", "body": "**[Chris Schaefer](https://jira.spring.io/secure/ViewProfile.jspa?name=chrisschaefer)** opened **[BATCH-1890](https://jira.spring.io/browse/BATCH-1890?redirect=false)** and commented\n\nAfter the 3.1.2 upgrade, the build broke as it was building with JDK5 and I was using JDK6 (and didn't notice stax issue). I've enabled the tiger profile in infrastructure and made a reflection fix in StaxUtils. getXMLEventReader/getXMLEventWriter are package private and getMethod returns public.\n\n\n---\n\n**Affects:** 2.2.0, 2.2.0 - Sprint 12\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/b1246f99b162d0a60938bdfdd96ec2ce518795d2\n", "url": "https://github.com/spring-projects/spring-batch/issues/1684", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2012-09-12 22:16:47", "closed": "2013-04-04 11:15:55", "commits": {}, "ttf": 203.00027777777777, "commitsDetails": []}, {"title": "RecordSeparatorPolicy#isEndOfRecord wrong javadoc? [BATCH-1916]", "body": "**[Valery Gavrilovets](https://jira.spring.io/secure/ViewProfile.jspa?name=valery)** opened **[BATCH-1916](https://jira.spring.io/browse/BATCH-1916?redirect=false)** and commented\n\nI have an issue using FlatFileItemReader with a custom RecordSeparatorPolicy. The javadoc of RecordSeparatorPolicy#isEndOfRecord  tells\n\n> Signal the end of a record based on the content of a line, being the latest line read from an input source. The input is what you would expect from BufferedReader.readLine() - i.e. no line separator character at the end. But it might have line separators embedded in it.\n\nI would think the parameter is last read line from file. If I see the code of\nFlatFileItemReader#applyRecordSeparatorPolicy\n\n```\n \nwhile (line != null && !recordSeparatorPolicy.isEndOfRecord(record)) {\n```\n\nActually this is not a line, this is whole record. It makes FlatFileItemReader unusable for my purposes.\n\n\n---\n\n**Affects:** 2.1.8\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/344c53e7184c126596a00bca72c5f7f8897d5df6, https://github.com/spring-projects/spring-batch/commit/a799f3926673bb310b946728a086ce770084cf8e\n\n**Backported to:** [2.2.0 - Sprint 8](https://github.com/spring-projects/spring-batch/milestone/51?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1678", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2012-12-05 08:16:10", "closed": "2013-02-05 06:54:34", "commits": {}, "ttf": 61.000277777777775, "commitsDetails": []}, {"title": "Add sample for new AMQPItemReader & Writer [BATCH-1920]", "body": "**[Wayne Lund](https://jira.spring.io/secure/ViewProfile.jspa?name=wxlund)** opened **[BATCH-1920](https://jira.spring.io/browse/BATCH-1920?redirect=false)** and commented\n\nPart of updating some spring-batch-samples.\n\n\n---\n\n**Affects:** 2.2.0\n\n**Reference URL:** http://blog.dtzq.com/2012/08/spring-batch-amqp-itemreader-itemwriter.html\n\n**Backported to:** [2.2.0 - Sprint 7](https://github.com/spring-projects/spring-batch/milestone/50?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1674", "user": "spring-issuemaster", "labels": ["has: backports", "in: samples", "type: bug"], "created": "2012-12-08 10:54:10", "closed": "2013-02-05 06:54:03", "commits": {}, "ttf": 58.000277777777775, "commitsDetails": []}, {"title": "Fix FaultTolerantStepFactoryBean package name in infiniteLoopJob sample [BATCH-1922]", "body": "**[Chris Schaefer](https://jira.spring.io/secure/ViewProfile.jspa?name=chrisschaefer)** opened **[BATCH-1922](https://jira.spring.io/browse/BATCH-1922?redirect=false)** and commented\n\nLooks like the package name changed from factory to item, some tests were failing. Pull request to follow.\n\n\n---\n\n**Affects:** 2.2.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/1672", "user": "spring-issuemaster", "labels": ["in: samples", "status: invalid", "type: bug"], "created": "2012-12-10 14:13:04", "closed": "2012-12-11 04:51:11", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Restarting a stopped job in COMPLETED state prevents progress [BATCH-1924]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-1924](https://jira.spring.io/browse/BATCH-1924?redirect=false)** and commented\n\nA job that is programatically stopped and restarted at a step prior to the step it was stopped in will not advance past the step it was previously stopped.  Below is an example of a job with the issue:\n\n```\n\n\t<job id=\"restart.job6\">\n\t\t<step id=\"job6.step1\" next=\"job6.step2\">\n\t\t\t<tasklet allow-start-if-complete=\"true\" >\n\t\t\t\t<chunk reader=\"customerFileReader\" writer=\"xmlOutputWriter\"\n\t\t\t\t\tcommit-interval=\"10\" />\n\t\t\t</tasklet>\n\t\t</step>\n\t\t<step id=\"job6.step2\"  parent=\"formatFileStep\" >\n\t\t\t<next on=\"ES3\" to=\"job6.step3\" />\n\t\t\t<stop on=\"ES4\" restart=\"job6.step4\" />\n\t\t\t<listeners>\n\t\t\t\t<listener ref=\"translator\"/>\n\t\t\t</listeners>\n\t\t</step>\n\t\t<step id=\"job6.step3\" next=\"job6.step4\"  parent=\"formatFileStep\"/>\n\t\t<step id=\"job6.step4\"  parent=\"formatFileStep\"/>\n\t</job>\n```\n\nThe full export of this job can be found here: https://gist.github.com/4259471\n\n\n---\n\n**Affects:** 2.1.9\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/0a1ae0b92c778f54bfa2725b3358969c9e89cf46, https://github.com/spring-projects/spring-batch/commit/a8e8505e772e545f32753a09cdebf62fa862e7b3\n\n**Backported to:** [2.2.0 - Sprint 21](https://github.com/spring-projects/spring-batch/milestone/64?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1670", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2012-12-11 13:49:20", "closed": "2013-04-04 09:17:41", "commits": {}, "ttf": 113.00027777777778, "commitsDetails": []}, {"title": "Commit Interval not working as intended when used in Late Binding [BATCH-1925]", "body": "**[Ramamurthi Iyer](https://jira.spring.io/secure/ViewProfile.jspa?name=ramiyer)** opened **[BATCH-1925](https://jira.spring.io/browse/BATCH-1925?redirect=false)** and commented\n\nI am currently using the following configuration for the commit interval.\n\n```\n<batch:job id=\"CasTransactionJob\">\n\t\t<batch:step id=\"uploadCasTransaction\" next=\"moveCasTransactionFiles\">\n\t\t<!--<batch:step id=\"processCasTransaction\">-->\n\t\t\t<batch:tasklet transaction-manager=\"batchTransactionManager\">\n\t\t\t\t<batch:chunk reader=\"MultipleCasTransactionFileReader\" processor=\"CasTransactionProcessor\"\n\t\t\t\t\t\twriter=\"casTransactionFileWriter\" \n\t\t\t\t\t\tcommit-interval=\"#{jobParameters['chunk.size']}\"\n\t\t\t\t\t\tskip-limit=\"2000000\">\n\t\t\t\t\t<batch:skippable-exception-classes merge=\"true\">\n\t\t\t\t\t\t<batch:include class=\"org.springframework.batch.item.file.FlatFileParseException\"/>\n\t\t\t\t\t</batch:skippable-exception-classes>\n\t\t\t\t </batch:chunk>\n\t\t\t    \t<batch:listeners>\n       \t\t\t\t \t<batch:listener ref=\"CasTransactionSkipListener\" />\n      \t\t\t\t</batch:listeners>\n\t\t    </batch:tasklet>\n\t\t</batch:step>\n\t\t<batch:step id=\"moveCasTransactionFiles\">\n\t\t\t<batch:tasklet ref = \"archiveCasTransactionFiles\" transaction-manager=\"batchTransactionManager\"/>\n\t\t</batch:step>\n\t</batch:job>\n\t\n\t\n\t<bean id=\"CasTransactionSkipListener\" class=\"com.americanexpress.endb.batch.CasTransactionSkipListener\"/>\n\t\t\n\t\t\n\t<!-- CAS Transaction Mapping File Reading Block starts -->\n\t<bean id=\"MultipleCasTransactionFileReader\" class=\"com.americanexpress.endb.batch.CasTransactionMultiResourceReader\" scope=\"step\">\n\t<!--<bean id=\"MultipleCasTransactionFileReader\" class=\"com.americanexpress.endb.batch.CasTransactionMultiResourceReader\">-->\n\t\t<property name=\"resources\" value=\"file:/amex/endbdev/data/cronjob/filetransfer_outbox/cas_trans_data/CAS_TRANS_DATA.*\"/>\n\t\t<property name=\"delegate\" ref=\"casTransactionFileReader\"/>\n\t</bean>\n\t\n\t<!-- CasTransaction File Reader --> \n\t\t<bean id=\"casTransactionFileReader\" class=\"com.americanexpress.endb.batch.CasTrasactionMultiResourceMapper\">\n\t\t<!--<bean id=\"casTransactionFileReader\" class=\"com.americanexpress.endb.batch.CasTrasactionMultiResourceMapper\" scope=\"step\">-->\n\t\t\t<property name=\"lineMapper\">\n\t\t\t\t<bean class=\"org.springframework.batch.item.file.mapping.DefaultLineMapper\">\n\t\t\t\t\t\t<property name=\"lineTokenizer\" ref=\"casTransactionTokenizer\" />\n\t\t\t\t\t\t<property name=\"fieldSetMapper\" ref=\"casTransactionMapper\" />\n\t\t\t\t</bean>\n\t\t\t</property>\n\t\t</bean>\n\t\n\t\n\t<!--  Cas Transaction Tokenizer Block -->\n\t\t<bean name=\"casTransactionTokenizer\" class=\"com.americanexpress.endb.batch.CompositeCasTransactionLineTokenizer\">\n\t\t\t<property name=\"casTransactionDetailsTokenizer\">\n\t\t\t\t<bean class=\"org.springframework.batch.item.file.transform.FixedLengthTokenizer\" >\n\t\t\t\t\t<property name=\"columns\" value=\"1-5,6-15,16-23,24-38,39-57,58-69,70-81,245-254,255-269,270-299,300-349,350-358,359-368,369-383,384-413,414-428,429-488,539-597,598-608\" />\n\t\t\t\t</bean>\n\t\t\t</property>\n\t\t\t<property name=\"footerTokenizer\" >\n\t\t\t\t<bean class=\"org.springframework.batch.item.file.transform.FixedLengthTokenizer\">\n\t\t\t\t\t<property name=\"columns\" value=\"1,2-13\" />\n\t\t\t\t</bean>\n\t\t\t</property>\n\t\t\t<property name=\"headerTokenizer\" >\n\t\t\t\t<bean class=\"org.springframework.batch.item.file.transform.FixedLengthTokenizer\">\n\t\t\t\t\t<property name=\"columns\" value=\"1,2-11,12-16,17\" />\n\t\t\t\t</bean>\n\t\t\t</property>\n\t</bean>\n\t\n\t<bean name=\"casTransactionMapper\" class=\"com.americanexpress.endb.batch.CasTransactionFieldSetMapper\" />\n\t\n\t<!-- CAS Transaction Mapping File Reading Block ends -->\n\t\n\t<!-- CAS Transaction Processing starts -->\n\t<bean id=\"CasTransactionProcessor\" class=\"com.americanexpress.endb.batch.CasTransactionProcessor\" />\n\t<!-- CAS Transaction Processing ends -->\n\t\n\t<!-- CAS Transaction Mapping File Writing Block starts -->\n\t<bean id=\"casTransactionFileWriter\" class=\"com.americanexpress.endb.batch.CasTransactionMapper\" scope=\"step\">\n\t\t<property name=\"casTransactionDAO\" ref=\"casTransactionDAO\" />\n\t</bean>\n\t<!-- CAS Transaction Mapping File Writing Block ends -->\n\n```\n\nI am setting the commit interval as a batch of 5k. What we found is the commit interval is not consistent with what is being set as the job Parameter. We see varying values suck as 3K, 100, 2K etc on the commit interval. Any help on this will really be appreciated.\n\nThanks!\n\n\n---\n\n1 votes, 3 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1669", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2012-12-12 07:25:18", "closed": "2019-10-18 16:59:03", "commits": {}, "ttf": 2501.0002777777777, "commitsDetails": []}, {"title": "Incorrect synchronization of SimpleDateFormatter and NumberFormat. [BATCH-1932]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-1932](https://jira.spring.io/browse/BATCH-1932?redirect=false)** and commented\n\nDefaultFieldSet creates instances of both SimpleDateFormat and NumberFormat as instance variables and uses them without synchronization when parsing a line.  Per the javadoc, neither of these formatters are thread-safe.\n\n\n---\n\n**Affects:** 2.1.9\n\n**Backported to:** [2.2.0 - Sprint 14](https://github.com/spring-projects/spring-batch/milestone/57?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1660", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "status: declined", "type: bug"], "created": "2012-12-14 06:48:59", "closed": "2013-02-05 07:27:48", "commits": {}, "ttf": 53.000277777777775, "commitsDetails": []}, {"title": "SimpleJobOperator#stop has different semantics then JobExecution#stop() [BATCH-1937]", "body": "**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[BATCH-1937](https://jira.spring.io/browse/BATCH-1937?redirect=false)** and commented\n\nFor some reason SimpleJobOperator#stop() does not call JobExecution#stop and tries to replicate some of its functionality.\nThis results not just in code duplication but also in different semantics as JobExecution properly calls the steps and updates their status while the operator does not.\n\n\n---\n\n**Affects:** 2.1.9\n\n**Backported to:** [2.2.0 - Sprint 20](https://github.com/spring-projects/spring-batch/milestone/63?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1655", "user": "spring-issuemaster", "labels": ["has: backports", "status: declined", "type: bug"], "created": "2012-12-20 10:03:52", "closed": "2013-03-26 09:36:13", "commits": {}, "ttf": 95.00027777777778, "commitsDetails": []}, {"title": "Storage of a LinkedList in ExecutionContext doesn't persist after a Job failed [BATCH-1942]", "body": "**[Peter Wippermann](https://jira.spring.io/secure/ViewProfile.jspa?name=peter.wippermann)** opened **[BATCH-1942](https://jira.spring.io/browse/BATCH-1942?redirect=false)** and commented\n\nIn the reader's update()-method I wanted to store a LinkedList of Longs (my items) in the executionContext. So when the job would restart the open()-method could read them from there and continue with these items.\n\nI wrote myself a JUnit test and simulated exceptions for certain calls to reader until the skip limit was reached to make the job fail. Before the job failed (I paused the execution in debugging mode) I could see that my LinkedList got persisted in the database. But when I continued and let the job fail, the LinkedList in the database's execution context was empty!\n\nEven after long debugging I couldn't find the coe which caused this. Furthermore I also stored some other context information as primitive integer and this worked fine!\nThe final workaround was to avoid the serialisation of the LinkedList and convert the List to a String by myself. Putting the String in the ExecutionContext worked fine.\n\n\n---\n\n**Affects:** 2.0.4\n\n**Reference URL:** http://forum.springsource.org/showthread.php?133874-ExecutionContext-isn-t-saved-completely&p=435037#post435037\n", "url": "https://github.com/spring-projects/spring-batch/issues/1650", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-01-07 07:42:01", "closed": "2013-01-23 07:11:11", "commits": {}, "ttf": 15.000277777777777, "commitsDetails": []}, {"title": "Signs of failed merge in HibernateItemWrite (and others?) [BATCH-1946]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1946](https://jira.spring.io/browse/BATCH-1946?redirect=false)** and commented\n\n\n---\n\n**Affects:** 2.2.0\n\n**Backported to:** [2.2.0 - Sprint 20](https://github.com/spring-projects/spring-batch/milestone/63?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1647", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2013-01-10 02:15:55", "closed": "2013-03-25 07:47:37", "commits": {}, "ttf": 74.00027777777778, "commitsDetails": []}, {"title": "StepScope doesn't work properly with proxyTargetClass=true in @Bean definitions [BATCH-1948]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1948](https://jira.spring.io/browse/BATCH-1948?redirect=false)** and commented\n\nI think this might be a problem that needs a fix in Spring Core, but we can start analysing it here first.  Here's a simple configuration that fails:\n\n```\n\t@Configuration\n\t@EnableBatchProcessing\n\tpublic static class StepScopeConfigurationWithInterface {\n\n\t\t@Bean\n\t\t@Scope(\"step\")\n\t\tprotected Callable<Date> date() {\n\t\t\treturn new Callable<Date>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Date call() throws Exception {\n\t\t\t\t\treturn new Date();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t@Bean\n\t\tprotected Tasklet tasklet(final Callable<Date> date) {\n\t\t\treturn new Tasklet() {\n\t\t\t\t@Override\n\t\t\t\tpublic RepeatStatus execute(StepContribution contribution, ChunkContext context) throws Exception {\n\t\t\t\t\tcontribution.incrementReadCount();\n\t\t\t\t\treturn RepeatStatus.FINISHED;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t}\n```\n\n\n\n---\nNo further details from [BATCH-1948](https://jira.spring.io/browse/BATCH-1948?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/1645", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-01-10 02:59:14", "closed": "2013-01-10 07:00:41", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Fix bootstrap process [BATCH-1950]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-1950](https://jira.spring.io/browse/BATCH-1950?redirect=false)** and commented\n\nWe should be able to checkout the github repository and execute a maven build successfully with Spring Batch.  The current documentation says that ```\nmvn install -P bootstrap\n\n```will work.  It does not.\n```\n\n\n\n---\n\n**Backported to:** [2.2.0 - Sprint 12](https://github.com/spring-projects/spring-batch/milestone/55?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1644", "user": "spring-issuemaster", "labels": ["has: backports", "type: bug"], "created": "2013-01-14 14:55:13", "closed": "2013-02-05 06:57:21", "commits": {}, "ttf": 21.00027777777778, "commitsDetails": []}, {"title": "StepScoped proxies not being created with proxyMode=TARGET_CLASS [BATCH-1951]", "body": "**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[BATCH-1951](https://jira.spring.io/browse/BATCH-1951?redirect=false)** and commented\n\nIt's still not possible to get a step scoped proxy with proxyTargetClass=true and `@EnableBatchProcessing`.  Should be easy to fix...\n\n\n---\n\n**Backported to:** [2.2.0 - Sprint 21](https://github.com/spring-projects/spring-batch/milestone/64?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1643", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2013-01-16 04:04:37", "closed": "2013-04-02 12:08:23", "commits": {}, "ttf": 76.00027777777778, "commitsDetails": []}, {"title": "Missing Import in spring-batch-infrastructure.jar [BATCH-1952]", "body": "**[Martin Baumgartner](https://jira.spring.io/secure/ViewProfile.jspa?name=baumgartner)** opened **[BATCH-1952](https://jira.spring.io/browse/BATCH-1952?redirect=false)** and commented\n\nUsing spring batch with quarz in an osgi-environment fails with a ClassNotFoundException.\nThe reason is a missing import-package-statement for org.springframework.batch.core /template.mf which causes an incomplete Manifest.MF.\n\n\n---\n\n**Affects:** 2.1.9\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/74efeb0a1c681b2cf6f499255cccb03f8853313a\n\n**Backported to:** [2.2.0 - Sprint 19](https://github.com/spring-projects/spring-batch/milestone/62?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1642", "user": "spring-issuemaster", "labels": ["has: backports", "in: build", "type: bug"], "created": "2013-01-23 01:58:59", "closed": "2013-03-21 10:07:44", "commits": {}, "ttf": 57.000277777777775, "commitsDetails": []}, {"title": "Problem with FlatFileItemWriter restart using multi-byte encoding [BATCH-1959]", "body": "**[Yoann GENDRE](https://jira.spring.io/secure/ViewProfile.jspa?name=ygendre)** opened **[BATCH-1959](https://jira.spring.io/browse/BATCH-1959?redirect=false)** and commented\n\nWith FlatFileItemWriter, size saved in the step_context on update (under current.count key) is the sum of fileChannel.size (current file size in bytes) and Buffered string length (see FlatFileItemWriter.OutputState.position() method)\n\nWith an out file encoded in UTF-8 and buffer string containing two bytes caracters, the saved position is wrong => restart will erase out file content.\n\nIn attachment, maven project with :\n- a first test case comparing real file size after a 1rst job run with failure and current.countsaved data\n- a second test case comparing in file size and out file size after a 1rst job run with failure and a 2nd job restart with no failure\n\n\n\n---\n\n**Affects:** 2.1.8\n\n**Attachments:**\n- [test-case-write-restart.zip](https://jira.spring.io/secure/attachment/20938/test-case-write-restart.zip) (_14.02 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/c8ce61d5987d4d2820fa795ace5873d252135e0d, https://github.com/spring-projects/spring-batch/commit/f01ef38e987be1786ae3d55ffe27f1581080928e, https://github.com/spring-projects/spring-batch/commit/47ef986be7d45fc409eb56774325bfa5262e3944\n\n**Backported to:** [2.2.0 - Sprint 19](https://github.com/spring-projects/spring-batch/milestone/62?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1636", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2013-02-08 03:02:22", "closed": "2013-03-21 08:17:33", "commits": {}, "ttf": 41.000277777777775, "commitsDetails": []}, {"title": "drop table not consistent across supported dbs [BATCH-1960]", "body": "**[Wayne Lund](https://jira.spring.io/secure/ViewProfile.jspa?name=wxlund)** opened **[BATCH-1960](https://jira.spring.io/browse/BATCH-1960?redirect=false)** and commented\n\nPoC reported trying to use SQLFire with spring-batch-2.1.9-RELEASE. Found some additional incomplete sqlfire issues in supporting the case.\n\n\n---\n\n**Affects:** 2.2.0 - Sprint 12\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/184e8990c7ca04a3b922bf473322c83b14e91b93, https://github.com/spring-projects/spring-batch/commit/d2549044b869b3ac3cbc397339640e0c537bbbb8\n\n**Backported to:** [2.2.0 - Sprint 15](https://github.com/spring-projects/spring-batch/milestone/58?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1635", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "in: samples", "type: bug"], "created": "2013-02-08 09:54:29", "closed": "2013-02-19 07:19:46", "commits": {}, "ttf": 10.000277777777777, "commitsDetails": []}, {"title": "List should be final in CompositeItemStream [BATCH-1969]", "body": "**[Dean de Bree](https://jira.spring.io/secure/ViewProfile.jspa?name=ddebree)** opened **[BATCH-1969](https://jira.spring.io/browse/BATCH-1969?redirect=false)** and commented\n\nThe CompositeItemStream class currently has a list of elements that it interacts with. This list is used in a synchronization block, and thus should be declared final to be 100% thread safe.\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/01cb91922ccd1c383150318b4e79269866e1bec4, https://github.com/spring-projects/spring-batch/commit/89e43cd2c3446e75673987dec7734004507e2dc6, https://github.com/spring-projects/spring-batch/commit/8d6340ceb8db3a1e24cfb5eb0ffbb3fd425baf34, https://github.com/spring-projects/spring-batch/commit/43b31ae89c9ad613a49cc89ef10a9f8e5f3f0955\n\n**Backported to:** [4.3.0.M1](https://github.com/spring-projects/spring-batch/milestone/109?closed=1), [4.2.1](https://github.com/spring-projects/spring-batch/milestone/108?closed=1), [4.1.3](https://github.com/spring-projects/spring-batch/milestone/103?closed=1), [4.0.4](https://github.com/spring-projects/spring-batch/milestone/102?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1628", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2013-02-20 01:54:28", "closed": "2019-10-21 10:01:15", "commits": {}, "ttf": 2434.0002777777777, "commitsDetails": []}, {"title": "StaxEventItemReader fails when restarted at end of file [BATCH-1972]", "body": "**[Jimmy Praet](https://jira.spring.io/secure/ViewProfile.jspa?name=jpraet)** opened **[BATCH-1972](https://jira.spring.io/browse/BATCH-1972?redirect=false)** and commented\n\nStaxEventItemReader fails with the following stacktrace when the job is restarted, but the reader was already at the end of file (for example when the job failed due to exception in ChunkListener.afterChunk):\n\njava.util.NoSuchElementException\nat org.codehaus.stax2.ri.Stax2EventReaderImpl.throwEndOfInput(Stax2EventReaderImpl.java:453)\nat org.codehaus.stax2.ri.Stax2EventReaderImpl.nextEvent(Stax2EventReaderImpl.java:242)\nat org.springframework.batch.item.xml.StaxEventItemReader.readToStartFragment(StaxEventItemReader.java:262)\nat org.springframework.batch.item.xml.StaxEventItemReader.jumpToItem(StaxEventItemReader.java:250)\nat org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:155)\n... 25 more\n\n\n\n---\n\n**Backported to:** [2.2.0 - Sprint 17](https://github.com/spring-projects/spring-batch/milestone/60?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1625", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2013-02-23 09:55:07", "closed": "2013-03-04 15:41:40", "commits": {}, "ttf": 9.000277777777777, "commitsDetails": []}, {"title": "processor-transactional=\"false\" in chunk definition does not have stable behavior [BATCH-1973]", "body": "**[Oleksiy Deliyev](https://jira.spring.io/secure/ViewProfile.jspa?name=oleksiy)** opened **[BATCH-1973](https://jira.spring.io/browse/BATCH-1973?redirect=false)** and commented\n\nPlease consider job definition (jobId from file job-definition.xml).\nIt has 2 steps defined: stepId1, stepId2 executed sequentially.\n\nAfter I run this job the output of stepId1 is:\n1. INFO  job.SimpleStepHandler  - Executing step: [stepId1]\n   throw processor: item = 1\n   throw processor: item = 2\n   throw processor: item = 3\n   throw processor: item = 4\n   throw processor: item = 5\n   throw processor: item = 6\n   throw processor: item = 7\n   throw processor: item = 8\n   throw processor: before exception for item = 9\n   throw processor: before exception for item = 10\n   throw processor: before exception for item = 11\n   throw processor: before exception for item = 12\n   throw processor: item = 13\n   throw processor: item = 14\n   throw processor: item = 15\n\n-----------------------\n\nwriting -> 1\nwriting -> 2\nwriting -> 3\nwriting -> 4\nwriting -> 5\nwriting -> 6\nwriting -> 7\nwriting -> 8\nwriting -> 13\nwriting -> 14\nwriting -> 15\n-------------------------------------------------------------------------------------------------------------------------------------------------\n\nAs expected each item has been processed once only due to presence of processor-transactional=\"false\" in chunk definition\n\n2. The output of stepId2 is:\n   INFO  job.SimpleStepHandler  - Executing step: [stepId2]\n   throw processor: item = 1\n   throw processor: item = 2\n   throw processor: item = 3\n   null processor: before skipping item = 4\n   null processor: before skipping item = 5\n   null processor: before skipping item = 6\n   null processor: before skipping item = 7\n   throw processor: item = 8\n   throw processor: before exception for item = 9\n   throw processor: item = 8\n   throw processor: before exception for item = 10\n   throw processor: item = 8\n   throw processor: before exception for item = 11\n   throw processor: item = 8\n   throw processor: before exception for item = 12\n   throw processor: item = 8\n   throw processor: item = 13\n   throw processor: item = 14\n   throw processor: item = 15\n\n-----------------------\n\nwriting -> 1\nwriting -> 2\nwriting -> 3\nwriting -> 8\nwriting -> 13\nwriting -> 14\nwriting -> 15\n---------------------------------------------------------------------------------------------\n\nThe difference between stepId1 and stepId2 is the NullReturnProcessor only, available in processor tag for chunk definition, however stepId2 has entirely different transactional behavior, which is something not being expected..\n\nAll source files attached.\n\nbug.csv : input file for FlatFileItemReader (15 items)\n\n\n---\n\n**Affects:** 2.1.9\n\n**Attachments:**\n- [bug.csv](https://jira.spring.io/secure/attachment/20983/bug.csv) (_49 bytes_)\n- [job-definition.xml](https://jira.spring.io/secure/attachment/20987/job-definition.xml) (_2.72 kB_)\n- [NullReturnProcessor.java](https://jira.spring.io/secure/attachment/20990/NullReturnProcessor.java) (_426 bytes_)\n- [PrintLnWriter.java](https://jira.spring.io/secure/attachment/20991/PrintLnWriter.java) (_439 bytes_)\n- [reader-definition.xml](https://jira.spring.io/secure/attachment/20988/reader-definition.xml) (_1.15 kB_)\n- [ThrowSkippableExceptionProcessor.java](https://jira.spring.io/secure/attachment/20992/ThrowSkippableExceptionProcessor.java) (_552 bytes_)\n- [ToIntegerMapper.java](https://jira.spring.io/secure/attachment/20993/ToIntegerMapper.java) (_396 bytes_)\n\n1 votes, 3 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1623", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2013-02-24 20:26:51", "closed": "2013-07-26 10:38:52", "commits": {}, "ttf": 151.00027777777777, "commitsDetails": []}, {"title": "StaxEventItemWriter namespace added to elements after restart [BATCH-1975]", "body": "**[Jimmy Praet](https://jira.spring.io/secure/ViewProfile.jspa?name=jpraet)** opened **[BATCH-1975](https://jira.spring.io/browse/BATCH-1975?redirect=false)** and commented\n\nThe StaxEventItemWriter does not initialize the namespaces on restart, causing the namespace to be added to each marshalled element.\n\ne.g. when job is restarted after the second element you get the following output:\n\n<t:root xmlns:t=\"http://test\">\n<t:test>value</t:test>\n<t:test>value</t:test>\n\\<test xmlns=\"http://test\">value\\</test>\n\\<test xmlns=\"http://test\">value\\</test>\n</t:root>\n\nSee attached unit test to reproduce the problem.\n\n\n---\n\n**Attachments:**\n- [StaxEventItemWriterJAXBNamespaceTest.java](https://jira.spring.io/secure/attachment/20995/StaxEventItemWriterJAXBNamespaceTest.java) (_3.72 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/02b4a66d45740c506e015e4741551862732f81fc, https://github.com/spring-projects/spring-batch/commit/39c5e221f8b961f81afd98695c1b408761151ab4, https://github.com/spring-projects/spring-batch/commit/3f12a0f9a455395b636e57c39db2d827d75bb773\n\n**Backported to:** [2.2.0 - Sprint 17](https://github.com/spring-projects/spring-batch/milestone/60?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1621", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2013-02-26 06:38:14", "closed": "2013-03-04 14:30:49", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "StepScopePerformanceTests fails when building with 1.7 even if the compile level is set to 1.6 in the POM [BATCH-1976]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-1976](https://jira.spring.io/browse/BATCH-1976?redirect=false)** and commented\n\nWhen building with JDK 1.7 (on a Mac using Oracle's distribution), StepScopePerformanceTests#testProxied fails with an IllegalStateException: No context holder available for step scope.\n\n\n---\n\n**Affects:** 2.2.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/1619", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-03-01 12:31:44", "closed": "2020-01-20 11:15:36", "commits": {}, "ttf": 2515.0002777777777, "commitsDetails": []}, {"title": "Upgrade dependent libs [BATCH-1986]", "body": "**[Jay Xu](https://jira.spring.io/secure/ViewProfile.jspa?name=mustangxu)** opened **[BATCH-1986](https://jira.spring.io/browse/BATCH-1986?redirect=false)** and commented\n\nSpring batch (and Spring batch admin) depends on a lot of libs defined in maven.  When I am trying to deploy batch (admin) with my proj using Spring 3.2.2 (and a lot of other libs), I need to exclude many libs in maven configuration or my proj fail to start\n\ne.g.\n*batch\nspring-core\nspring-beans\nslf4j as discussed in [BATCHADM-145](https://jira.spring.io/browse/BATCHADM-145)\n\n*batch admin\nehcache-core\ncommons-lang\n\nPls upgrade the dependent libs or, mark the optional ones \"provided\"\n\n\n---\n\n**Affects:** 2.1.9\n", "url": "https://github.com/spring-projects/spring-batch/issues/1606", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2013-03-26 05:06:56", "closed": "2019-10-30 14:55:44", "commits": {}, "ttf": 2409.0002777777777, "commitsDetails": []}, {"title": "Dead Lock - ORA-00060 [BATCH-1990]", "body": "**[Muhammad Waqas Khalid](https://jira.spring.io/secure/ViewProfile.jspa?name=waqaskhalid)** opened **[BATCH-1990](https://jira.spring.io/browse/BATCH-1990?redirect=false)** and commented\n\nHi,\n\nOur application is have deadlock exceptions while we are trying to process transactions using a thread count of 3.\n\nFollowing is the trace of the exception.\nat org.springframework.batch.core.step.item.FaultTolerantChunkProcessor$1.doWithRetry(FaultTolerantChunkProcessor.java:228)\nat org.springframework.batch.retry.support.RetryTemplate.doExecute(RetryTemplate.java:240)\nat org.springframework.batch.retry.support.RetryTemplate.execute(RetryTemplate.java:187)\nat org.springframework.batch.core.step.item.BatchRetryTemplate.execute(BatchRetryTemplate.java:213)\n\nWe have reviewed the partition logic of the records at application level. It seems to be okay,However from the application logs it seems dead lock is caused by the same thread and trace only shows its coming while retrying.Can anyone help me in this regards.\n\nRegards,\n--Waqas\n\n\n---\n\n**Affects:** 2.1.8\n", "url": "https://github.com/spring-projects/spring-batch/issues/1602", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-04-08 23:28:37", "closed": "2020-01-20 13:08:03", "commits": {}, "ttf": 2477.0002777777777, "commitsDetails": []}, {"title": "Line ending in multiline delimiter not being processed correctly [BATCH-1995]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-1995](https://jira.spring.io/browse/BATCH-1995?redirect=false)** and commented\n\n\n---\n\n**Affects:** 2.2.0.RC1\n\n**Reference URL:** http://forum.springsource.org/showthread.php?136203-Spring-Batch-2-2-0-RC1-is-Available&p=443363#post443363\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/1350a5ca22dae4d9a525081ad2306973c5a52049, https://github.com/spring-projects/spring-batch/commit/903f5060fbc25c684624d96e22a579ba4f31957d\n", "url": "https://github.com/spring-projects/spring-batch/issues/1597", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2013-04-19 15:17:14", "closed": "2013-05-14 08:11:55", "commits": {}, "ttf": 24.00027777777778, "commitsDetails": []}, {"title": "DelimitedLineTokenizer skips first token if it is empty. [BATCH-1996]", "body": "**[Jerome Jones](https://jira.spring.io/secure/ViewProfile.jspa?name=jerome)** opened **[BATCH-1996](https://jira.spring.io/browse/BATCH-1996?redirect=false)** and commented\n\nThe isDelimiter(...) method on line 235 checks first to see if the index we are checking is gte the delimiter lengh. like below.\n\nif(i >= token.length()) // where i is the index, and token is the delimiter.\n\nThis results in the first token being skipped if it is empty, resulting in the expected number of tokens not being meet.\n\nFor example, I have a file with the delimiter '~'. This has a length of 3. but when index is 3, it is the 4th character being read in. so I get a first token of \"'~'\\<first token>\".\n\nPerhaps we should be checking for (i >= token.length() -1).\n\n\n---\n\n**Affects:** 2.2.0.RC1\n", "url": "https://github.com/spring-projects/spring-batch/issues/1596", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: duplicate", "type: bug"], "created": "2013-04-22 07:35:24", "closed": "2013-05-14 08:12:15", "commits": {}, "ttf": 22.00027777777778, "commitsDetails": []}, {"title": "ExitStatus.compareTo() delivers result out of given range [-1,1] [BATCH-2011]", "body": "**[Martin Staan](https://jira.spring.io/secure/ViewProfile.jspa?name=staanie)** opened **[BATCH-2011](https://jira.spring.io/browse/BATCH-2011?redirect=false)** and commented\n\nIf compareTo is used to compare two ExitStatus with non-standard exitCodes the result may be different then {-1,0,1}. If user defined ExitStatuses are used, this may lead to unexpected behavior.\n\nI would expect the following test to pass:\n\n`@Test`\npublic void testCompareTo(){\nfinal ExitStatus someExitStatus = new ExitStatus(\"SOME_STATUS\");\nfinal ExitStatus otherExitStatus = new ExitStatus(\"OTHER_STATUS\");\nassertThat(someExitStatus.compareTo(otherExitStatus),\neither(equalTo(1)).or(equalTo(-1)));\n}\n\n\n---\n\n**Affects:** 2.2.0.RC1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/dfcb21b736ed979c2a0542d92b009a8a50ad37d4, https://github.com/spring-projects/spring-batch/commit/9cc5b6490b7ccd95149f6f81dee7c94090eb2c64\n", "url": "https://github.com/spring-projects/spring-batch/issues/1581", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-04-24 01:06:49", "closed": "2014-03-06 12:38:30", "commits": {}, "ttf": 316.0002777777778, "commitsDetails": []}, {"title": "Fix typo of the word delegate [BATCH-2017]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2017](https://jira.spring.io/browse/BATCH-2017?redirect=false)** and commented\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/0539634484957f002e898e5a56cb099962e16d1b\n", "url": "https://github.com/spring-projects/spring-batch/issues/1575", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-04-29 09:51:21", "closed": "2013-05-14 08:12:40", "commits": {}, "ttf": 14.000277777777777, "commitsDetails": []}, {"title": "TransactionAwareBufferedWriter uses hashcode as TransactionSynchronizationManager key [BATCH-2018]", "body": "**[Jimmy Praet](https://jira.spring.io/secure/ViewProfile.jspa?name=jpraet)** opened **[BATCH-2018](https://jira.spring.io/browse/BATCH-2018?redirect=false)** and commented\n\nTransactionAwareBufferedWriter binds a StringBuffer to the current transaction:\n\nTransactionSynchronizationManager.bindResource(bufferKey, new StringBuffer());\n\nThe bufferKey is computed as BUFFER_KEY_PREFIX + \".\" + hashCode();\n\nThe hashCode of the TransactionAwareBufferedWriter is not guaranteed to be unique, so it's possible 2 writers end up writing to the same StringBuffer.\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/9319639c4ebb341d31ab4f0875d85b022d1fd2e0\n", "url": "https://github.com/spring-projects/spring-batch/issues/1574", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2013-04-29 10:47:27", "closed": "2013-09-08 09:49:22", "commits": {}, "ttf": 131.00027777777777, "commitsDetails": []}, {"title": "Support PropertySourcesPlaceholderConfigurer delegation to job contexts [BATCH-2019]", "body": "**[Seth Weiner](https://jira.spring.io/secure/ViewProfile.jspa?name=seth.weiner@gmail.com)** opened **[BATCH-2019](https://jira.spring.io/browse/BATCH-2019?redirect=false)** and commented\n\nSpring Batch uses children of AbstractApplicationContextFactory to create child application contexts for each batch job. By default, it will pass PropertyPlaceholderConfigurer and CustomEditorConfigurer bean post processors to the child contexts as configured in the default constructor of AbstractApplicationContextFactory. However, it does not pass PropertySourcesPlaceholderConfigurer bean post processors by default. Therefore, using the Spring 3.1 Environment functionality in conjunction with <context:properties-placeholder/> does not work out of the box. You must manually add that class to the list of bean post processors. It would be great if this default behavior could be changed to support the Spring 3.1 convention.\n\n\n---\n\n**Affects:** 2.2.0.RC1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/c8a8890a90f873c8b789e80733536b552729d937, https://github.com/spring-projects/spring-batch/commit/80eb802658290ee4c150b04c561557d1730c2b17\n", "url": "https://github.com/spring-projects/spring-batch/issues/1573", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-04-29 12:47:01", "closed": "2013-05-14 08:12:59", "commits": {}, "ttf": 14.000277777777777, "commitsDetails": []}, {"title": "Making tasklet as non transactional not working [BATCH-2020]", "body": "**[Praveen Billakanti](https://jira.spring.io/secure/ViewProfile.jspa?name=bpraveen02)** opened **[BATCH-2020](https://jira.spring.io/browse/BATCH-2020?redirect=false)** and commented\n\nOur spring batch job(writer) calls an EJB which has `@TransactionAttribute`(TransactionAttributeType.NEVER).\n\nDue to this we are getting exception \"IllegalArgumentException \u2013 Transaction present on server in  NEVER call.\"\n\nFor some reason a transaction is started and that is propagated till the EJB.\n\nWe have tried the below ways but none of them worked.\n\n1.Added transaction attributes(NEVER and NOT_SUPPORTED)  to batch step and tasklet. <batch:transaction-attributes isolation=\"DEFAULT\" propagation=\"NEVER\"/>\n\nGetting the below exception when using NOT_SUPPORTED.\n\n\"Already value [org.springframework.orm.hibernate3.SessionHolder@2317a576] for key [org.hibernate.impl.SessionFactoryImpl@3a991adc] bound to thread [SimpleAsyncTaskExecutor-1]\"\n\n2.Created a new step that extends TaskletStep and in the execute method, called super.setTransactionAttrubute(new DefaultTransactionAttribute(4/5));, super.execute(); Added this new step as parentStep to the tasklet.\n\n3. \n\n<batch:chunk processor-transactional=\"false\" retry-limit=\"1\"\nreader=\"reader\"\nprocessor=\"processor\"\nwriter=\"writer\"\ncommit-interval=\"100\">\n<batch:retryable-exception-classes><batch:exclude class=\"java.lang.Exception\"/></batch:retryable-exception-classes>\n</batch:chunk>\n\nPlease suggest us if there is any other way of solving this issue.\n\n\n---\n\n**Affects:** 2.1.2\n", "url": "https://github.com/spring-projects/spring-batch/issues/1572", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-04-29 23:04:51", "closed": "2020-01-17 15:20:10", "commits": {}, "ttf": 2453.0002777777777, "commitsDetails": []}, {"title": "Drop script for Postgresql assumes that the tables are there when dropping constraints. [BATCH-2022]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2022](https://jira.spring.io/browse/BATCH-2022?redirect=false)** and commented\n\n\n---\n\n**Reference URL:** http://forum.springsource.org/showthread.php?136203-Spring-Batch-2-2-0-RC1-is-Available/page3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/45d02eee926f706f24d36add6c7b1af5482c2b88\n", "url": "https://github.com/spring-projects/spring-batch/issues/1570", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-05-03 07:45:15", "closed": "2013-05-14 08:13:17", "commits": {}, "ttf": 11.000277777777777, "commitsDetails": []}, {"title": "@StepScope should default to ScopedProxyMode.TARGET_CLASS [BATCH-2023]", "body": "**[Tobias Flohre](https://jira.spring.io/secure/ViewProfile.jspa?name=tobias79)** opened **[BATCH-2023](https://jira.spring.io/browse/BATCH-2023?redirect=false)** and commented\n\nIf I use `@StepScope` on a `@Bean` method that returns a FlatFileItemReader, I get a ClassCastException:  java.lang.ClassCastException: $Proxy16 cannot be cast to org.springframework.batch.item.file.FlatFileItemReader\n\nThat's because the ScopedProxyMode is INTERFACES, and the proxy created is based on of the interfaces of FlatFileItemReader, and not FlatFileItemReader itself. Since we always have CGLIB when using `@Configuration`, I see no reason for not changing the default proxyMode of `@StepScope` to TARGET_CLASS.\n\nOne more argument for the proxyMode TARGET_CLASS: when I change the return type of the `@Bean` method to ItemReader\\<xx>, but still return a FlatFileItemReader, I don't get a ClassCastException, but the ItemStream registration does not work, and the FlatFileItemReader throws an exception on the first read.\n\nAltogether those are serious stumble blocks for people not familiar with the proxying mechanisms in Spring, and we would avoid all of them with the default proxyMode TARGET_CLASS.\n\n\n---\n\n**Affects:** 2.2.0.RC1\n\n**Sub-tasks:**\n- [BATCH-2822](https://jira.spring.io/browse/BATCH-2822) Class cast exception when autowiring flat file writer\n\n\n**Issue Links:**\n- [BATCH-1988](https://jira.spring.io/browse/BATCH-1988) Refactor `@StepScope` to allow proxyMode = ScopedProxyMode.TARGET_CLASS\n (_**\"duplicates\"**_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/378006801aff397d03f11338896aefccac855eee\n\n**Backported to:** [2.2.0.RC2](https://github.com/spring-projects/spring-batch/milestone/66?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1569", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2013-05-04 03:44:01", "closed": "2019-11-08 21:35:34", "commits": {}, "ttf": 2379.0002777777777, "commitsDetails": []}, {"title": "FaultTolerantChunkProcessor should call ItemWriteListener.onWriteError() [BATCH-2027]", "body": "**[Peter Wippermann](https://jira.spring.io/secure/ViewProfile.jspa?name=peter.wippermann)** opened **[BATCH-2027](https://jira.spring.io/browse/BATCH-2027?redirect=false)** and commented\n\nMy step is configured with skippable exceptions and an ItemWriteListener.\nI see that the onWriteError() method is called by the SimpleChunkProcessor, when the ItemWriter throws an exception for the chunk.\n\nNow the framework switches over to single-item write mode and the FaultTolerantChunkProcessor takes over. Chunks now contain a single item only, as expected.\n\nI see the afterWrite() method is being called for every successfully written item.\nOpposed to this, for failing items throwing an exception the onWriteError() method isn't called again.\n\nThat doesn't sound reasonable to me.\nThe listener could be notified in FaultTolerantChunkProcessor.scan(). That's where also afterWrite() is called.\n\n\n---\n\n**Affects:** 2.0.4\n", "url": "https://github.com/spring-projects/spring-batch/issues/1566", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2013-05-15 08:34:44", "closed": "2014-03-06 08:05:55", "commits": {}, "ttf": 294.0002777777778, "commitsDetails": []}, {"title": "BackToBackPatternClassifier does not work with delegate that implements Classifier [BATCH-2030]", "body": "**[Veit Hoffmann](https://jira.spring.io/secure/ViewProfile.jspa?name=vhoff)** opened **[BATCH-2030](https://jira.spring.io/browse/BATCH-2030?redirect=false)** and commented\n\nIf BackToBackPatternClassifier has a delegate that inherits from \"org.springframework.classify.Classifier\" rather than using annotation \"org.springframework.classify.annotation.Classifier\" the\ncontext creation fails with the Exception in the bottom of this description. The reason seems to be a problem in ClassifierAdapter which is called on setRouterDelegate.\nThe behavior can be reproduced with the test case attached.\n\nException stack trace:\n\njava.lang.IllegalStateException: More than one non-void public method detected with single argument.\nat org.springframework.util.Assert.state(Assert.java:384)\nat org.springframework.classify.util.MethodInvokerUtils$3.doWith(MethodInvokerUtils.java:202)\nat org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:473)\nat org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:481)\nat org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:451)\nat org.springframework.classify.util.MethodInvokerUtils.getMethodInvokerForSingleArgument(MethodInvokerUtils.java:194)\nat org.springframework.classify.ClassifierAdapter.setDelegate(ClassifierAdapter.java:84)\nat org.springframework.classify.ClassifierAdapter.\\<init>(ClassifierAdapter.java:48)\nat org.springframework.classify.BackToBackPatternClassifier.setRouterDelegate(BackToBackPatternClassifier.java:72)\nat com.generali.appl.referenz.batch.multipleoutput.BackToBackPatternClassifierTests.testSetRouterDelegate(BackToBackPatternClassifierTests.java:48)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat java.lang.reflect.Method.invoke(Method.java:611)\nat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)\nat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\n\n\n\n---\n\n**Affects:** 3.0.0, 2.2.0.RC2\n\n**Attachments:**\n- [BackToBackPatternClassifierTests.java](https://jira.spring.io/secure/attachment/21208/BackToBackPatternClassifierTests.java) (_1006 bytes_)\n\n1 votes, 5 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1564", "user": "spring-issuemaster", "labels": ["in: retry", "type: bug"], "created": "2013-05-22 07:43:21", "closed": "2020-01-13 11:16:01", "commits": {}, "ttf": 2427.0002777777777, "commitsDetails": []}, {"title": "Incorrect delimiter detection in DelimitedLineTokenizer  [BATCH-2031]", "body": "**[Patchee](https://jira.spring.io/secure/ViewProfile.jspa?name=hungryhippo)** opened **[BATCH-2031](https://jira.spring.io/browse/BATCH-2031?redirect=false)** and commented\n\nIn certain cases where the value is similar to the delimiter with a length more than 1, the isDelimiter method may incorrectly detect the delimiter.\n\nFor example\nhaving a delimiter \"==-==\"\n\nHere are the following outcomes\n\nTest1:\n\"John==-==A==-==Doe\"  => [John, A, Doe]\n\nTest2:\n\"John==-====-==Doe\"  => [John, , Doe]\n\nTest3:\n\"John==-==-==-==Doe\"  =>\n\njava.lang.StringIndexOutOfBoundsException: String index out of range: -2\nat java.lang.String.\\<init>(String.java:197)\nat org.springframework.batch.item.file.transform.DelimitedLineTokenizer.doTokenize(DelimitedLineTokenizer.java:163)\nat org.springframework.batch.item.file.transform.AbstractLineTokenizer.tokenize(AbstractLineTokenizer.java:111)\nat BatchTest.test3(BatchTest.java:36)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:601)\nat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\nat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\nat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\nat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\nat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\nat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)\nat org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)\nat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)\nat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)\nat org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)\nat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)\nat org.junit.runners.ParentRunner.run(ParentRunner.java:300)\nat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\nat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\n\nI have attached an not so glamorous JUnit file demonstrating this and a solution as well.  I'm not sure if the solution has other consequences on other parts, so anyone wishing to use this YMMV.\n\nLove Spring Batch!!  Keep up the great work guys!!\n\n\n---\n\n**Affects:** 2.2.0.RC2\n\n**Attachments:**\n- [BatchTest.java](https://jira.spring.io/secure/attachment/21211/BatchTest.java) (_1.57 kB_)\n- [DelimitedLineTokenizerFix.java](https://jira.spring.io/secure/attachment/21212/DelimitedLineTokenizerFix.java) (_6.69 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/04c3cad093a095464fb65b6d10177311f32c3a63, https://github.com/spring-projects/spring-batch/commit/4a32a9c953e37fcdf892d717ee62d3bce5222134\n", "url": "https://github.com/spring-projects/spring-batch/issues/1563", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2013-05-23 14:30:17", "closed": "2013-06-04 08:36:54", "commits": {}, "ttf": 11.000277777777777, "commitsDetails": []}, {"title": "Update downloads documentation [BATCH-2028]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2028](https://jira.spring.io/browse/BATCH-2028?redirect=false)** and commented\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d0050c5532b6fcfbf264f95027b6a286b59cc31e\n", "url": "https://github.com/spring-projects/spring-batch/issues/1562", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2013-05-16 08:39:00", "closed": "2013-06-05 08:59:07", "commits": {}, "ttf": 20.00027777777778, "commitsDetails": []}, {"title": "Create parallel to simple-cli for pure Java configuration [BATCH-2035]", "body": "**[Greg Turnquist](https://jira.spring.io/secure/ViewProfile.jspa?name=gregturn)** opened **[BATCH-2035](https://jira.spring.io/browse/BATCH-2035?redirect=false)** and commented\n\nCoding a pure Java configuration for Spring Batch. Thought it would fit next to spring-cli in the archetypes.\n\n\n---\n\n**Affects:** 2.2.0.RC2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/bb1ec38a1861599190be312c3ec5fcc38e3c8d12\n", "url": "https://github.com/spring-projects/spring-batch/issues/1559", "user": "spring-issuemaster", "labels": ["in: samples", "type: bug"], "created": "2013-05-26 12:55:20", "closed": "2013-06-10 11:27:59", "commits": {}, "ttf": 14.000277777777777, "commitsDetails": []}, {"title": "Output incorrect when using processor-transactional=\"false\" and skips. [BATCH-2036]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2036](https://jira.spring.io/browse/BATCH-2036?redirect=false)** and commented\n\n\n---\n\n**Reference URL:** http://forum.springsource.org/showthread.php?137834-Critical-defect-in-SpringBatch-core-2-1-9\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/0c892da257dd98a3b1c9a3c2830a543ab0c878ad\n", "url": "https://github.com/spring-projects/spring-batch/issues/1558", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-05-28 14:19:29", "closed": "2013-07-26 10:40:38", "commits": {}, "ttf": 58.000277777777775, "commitsDetails": []}, {"title": "'Job cannot be null' exception when starting FlowStep remotely with org.springframework.batch.integration.partition.StepExecutionRequestHandler [BATCH-2034]", "body": "**[Sergey Shcherbakov](https://jira.spring.io/secure/ViewProfile.jspa?name=sshcherbakov)** opened **[BATCH-2034](https://jira.spring.io/browse/BATCH-2034?redirect=false)** and commented\n\nI have a project which uses\norg.springframework.batch.integration.partition.MessageChannelPartitionHandler\nand\norg.springframework.batch.integration.partition.StepExecutionRequestHandler\nto run a job Step remotely.\nIn case if a remote step is a\norg.springframework.batch.core.job.flow.FlowStep\n(not a TaskletStep) the step execution fails on a remote host with the exception:\n\n> Caused by: java.lang.IllegalArgumentException: Job cannot be null.\n> at org.springframework.util.Assert.notNull(Assert.java:112)\n> at org.springframework.batch.core.repository.dao.JdbcJobExecutionDao.findJobExecutions(JdbcJobExecutionDao.java:127)\n> at org.springframework.batch.core.repository.support.SimpleJobRepository.getStepExecutionCount(SimpleJobRepository.java:249)\n> at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n> at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n> at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n> at java.lang.reflect.Method.invoke(Method.java:601)\n> at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317)\n> at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)\n> at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)\n> at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:96)\n> at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:260)\n> at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:94)\n> at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)\n> at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204)\n> at com.sun.proxy.$Proxy48.getStepExecutionCount(Unknown Source)\n> at org.springframework.batch.core.job.flow.JobFlowExecutor.isStepRestart(JobFlowExecutor.java:82)\n> at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:63)\n> at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:60)\n> at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:152)\n\nThe reason is an empty jobInstance field in the JobExecution instance used to lookup for the JobExecution on a remote host in\nJdbcJobExecutionDao.findJobExecutions(JobInstance job);\n\nThe SimpleJobExplorer doesn't fill the jobInstance field of the jobExecution received from a DAO call in the SimpleJobExplorer.getStepExecution(Long jobExecutionId, Long executionId) method.\n\n\n---\n\n**Affects:** 2.2.0.RC2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/6af38bb5d83d9e0490be749df0f6b67c8710e38f\n", "url": "https://github.com/spring-projects/spring-batch/issues/1557", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-05-25 08:40:00", "closed": "2013-06-10 13:21:39", "commits": {}, "ttf": 16.00027777777778, "commitsDetails": []}, {"title": "DerbyPagingQueryProvider does not work with Derby 10.10.1.1 [BATCH-2038]", "body": "**[Sandro Lehmann](https://jira.spring.io/secure/ViewProfile.jspa?name=chucky81)** opened **[BATCH-2038](https://jira.spring.io/browse/BATCH-2038?redirect=false)** and commented\n\nAn InvalidDataAccessResourceUsageException is thrown when using Derby 10.10.1.1\n\nThe following line returns true and throws the exception with 10.10.1.1:\nif (\"10.4.1.3\".compareTo(version) > 0) {\n\n\n---\n\n**Affects:** 2.1.9\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/3553d244e2147294ee16401441b51b2fc82a6eb8\n", "url": "https://github.com/spring-projects/spring-batch/issues/1555", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2013-05-30 02:54:58", "closed": "2013-07-26 10:40:56", "commits": {}, "ttf": 57.000277777777775, "commitsDetails": []}, {"title": "Db2PagingQueryProvider creates erroneous Statement in generateJumpToItemQuery [BATCH-2040]", "body": "**[Arne Borrmann](https://jira.spring.io/secure/ViewProfile.jspa?name=arneborrmann)** opened **[BATCH-2040](https://jira.spring.io/browse/BATCH-2040?redirect=false)** and commented\n\nHi,\n\nwe want to use the spring-batch-admin on WAS70 with DB2-Database underlying.\n\nThe list of executions is delimited to 20 per default. If we try to jump on the next page, an internal server error 500 will occur.\n\nAs we hit the \"next\" button, the method generateJumpToItemQuery(int itemIndex, int pageSize) in org.springframework.batch.item.database.support.Db2PagingQueryProvider is called.\n\nThe generated SQL-Statement is:\nSELECT E.JOB_EXECUTION_ID FROM ( SELECT E.JOB_EXECUTION_ID, ROW_NUMBER() OVER ( ORDER BY E.JOB_EXECUTION_ID DESC) AS ROW_NUMBER FROM T1100Z.BATCH_JOB_EXECUTION E, T1100Z.BATCH_JOB_INSTANCE I WHERE E.JOB_INSTANCE_ID=I.JOB_INSTANCE_ID) AS TMP_SUB WHERE TMP_SUB.ROW_NUMBER = 20 ORDER BY E.JOB_EXECUTION_ID DESC\n\nAfter a few test i found out the right SQL:\nSELECT TMP_SUB.JOB_EXECUTION_ID FROM ( SELECT E.JOB_EXECUTION_ID, ROW_NUMBER() OVER ( ORDER BY E.JOB_EXECUTION_ID DESC) AS ROW_NUMBER FROM T1100Z.BATCH_JOB_EXECUTION E, T1100Z.BATCH_JOB_INSTANCE I WHERE E.JOB_INSTANCE_ID=I.JOB_INSTANCE_ID) AS TMP_SUB WHERE TMP_SUB.ROW_NUMBER = 20 ORDER BY TMP_SUB.JOB_EXECUTION_ID DESC\n\nAs you can see, the subquery uses the \"E.\", but comes out as TMP_SUB.\n\nThe \"E.\" is set by the batch-admin-manager: sortKeys.put(\"E.JOB_EXECUTION_ID\", Order.DESCENDING);\n\nI think a the generateJumpToItemQuery-Method in Db2PagingQueryProvider has to be overridden, or the method buildSortKeySelect(StringBuilder sql) could get a brother like: buildSortKeySelect(StringBuilder sql, String qualifierReplacement) (\"E.\" -> \"TMP_SUB.\")\n\n\n---\n\n**Affects:** 2.2.0.RC2, 2.2.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/56ccca6b2d2af3b2a72d1c28a94dd310d8755b4a, https://github.com/spring-projects/spring-batch/commit/856e25a862f9d3b72ab0bfc430ff62b12b99f3e9\n\n2 votes, 4 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1554", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2013-06-02 23:53:07", "closed": "2013-09-08 11:03:48", "commits": {}, "ttf": 97.00027777777778, "commitsDetails": []}, {"title": "Spring Batch version not incremented in XSD schema check warning message [BATCH-2045]", "body": "**[Tomasz Rosiek](https://jira.spring.io/secure/ViewProfile.jspa?name=tzr)** opened **[BATCH-2045](https://jira.spring.io/browse/BATCH-2045?redirect=false)** and commented\n\nWhen Spring Batch 2.1 schema is used to define job context, the following message is shown:\n\nYou cannot use spring-batch-2.0.xsd with Spring Batch 2.1.  Please upgrade your schema declarations (or use the spring-batch.xsd alias if you are feeling lucky).\n\nThe numbers seem to be incremented accordingly to 2.1.xsd and Spring Batch 2.2\n\n(line 72 of the JobParser class)\n\n\n---\n\n**Affects:** 2.2.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/43d1b6eafb864759b6337f79c0d17659a462e4fe\n", "url": "https://github.com/spring-projects/spring-batch/issues/1549", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2013-06-10 01:33:32", "closed": "2014-02-28 11:52:15", "commits": {}, "ttf": 263.0002777777778, "commitsDetails": []}, {"title": "Support multiple fragmentRootElementNames in StaxEventItemReader [BATCH-2049]", "body": "**[Jimmy Praet](https://jira.spring.io/secure/ViewProfile.jspa?name=jpraet)** opened **[BATCH-2049](https://jira.spring.io/browse/BATCH-2049?redirect=false)** and commented\n\nThe StaxEventItemReader currently supports only one fragmentRootElementName. This means you cannot process files with a structure as follows:\n\n```xml\n \n<root>\n  <itemA />\n  <itemC />\n  <itemA />\n  <itemA />\n  <itemB />\n  <itemA />\n  <itemB />\n  ...\n</root>\n```\n\nYou should be able to configure the StaxEventItemReader with a list of fragmentRootElementNames.\n\n```xml\n<bean id=\"itemReader\" class=\"org.springframework.batch.item.xml.StaxEventItemReader\">\n    <property name=\"fragmentRootElementNames\" value=\"itemA,itemB,itemC\" />\n    ...\n</bean>\n```\n\nThe workaround creating a custom MultiFragmentStaxEventItemReader extending StaxtEventItemReader as described on http://forum.springsource.org/showthread.php?88618-Reading-mutilple-element-types-with-StaxEventItemReader doesn't work. To make it properly restartable you would need access to the private XMLEventReader in the jumpToItem(int) method.\n\n\n---\n\n**Reference URL:** http://forum.springsource.org/showthread.php?88618-Reading-mutilple-element-types-with-StaxEventItemReader\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/a21df75ce9dfc92e9768353b827da4248aefe425\n", "url": "https://github.com/spring-projects/spring-batch/issues/1545", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2013-06-17 10:10:57", "closed": "2013-09-09 20:37:18", "commits": {}, "ttf": 84.00027777777778, "commitsDetails": []}, {"title": "AbstractItemCountingItemStreamItemReader.read() shouldn't be final [BATCH-2050]", "body": "**[Max Hartmann](https://jira.spring.io/secure/ViewProfile.jspa?name=mahartma)** opened **[BATCH-2050](https://jira.spring.io/browse/BATCH-2050?redirect=false)** and commented\n\nwhen you use FlatfileItemWriter with StepScope (proxyTargetClass=true --> CGLib-Subclassing) the final method read() cannot be proxied correctly. So the **AbstractItemCountingItemStreamItemReader.currentItemCount** is always persisted as 0 to the jobRepository.\n\nCode:\n\n\\<bean class=\"org.springframework.batch.core.scope.StepScope\" p:proxyTargetClass=\"true\" />\n\\<bean id=\"reader\" class=\"org.springframework.batch.item.file.FlatFileItemReader\" scope=\"step\">\n\\<property name=\"resource\" value=\"#{jobParameters[pathToFile]}\">\\</property>\n\\<property name=\"lineMapper\" ref=\"lineMapper\"/>\n\\</bean>\n\nthx :-)\n\n\n\n---\n\n**Affects:** 2.2.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/eae42d80d34aaac5607c4dd10adba55c797774b4\n\n1 votes, 6 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1544", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2013-06-18 08:34:34", "closed": "2013-12-13 19:53:59", "commits": {}, "ttf": 178.00027777777777, "commitsDetails": []}, {"title": "NonTransientFlatFileException while reading multiple files using MultiResourceItemReader and FlatFileItemReader [BATCH-2051]", "body": "**[prasad babu](https://jira.spring.io/secure/ViewProfile.jspa?name=j_prasad_babu)** opened **[BATCH-2051](https://jira.spring.io/browse/BATCH-2051?redirect=false)** and commented\n\nHi, Batch process is throwing the following exception inconsistently while reading the files from file system(csv files) and loading into In-Memory database(HSQLDB). I have apprx 27 files in file system(Each file contains 1000000 records). I request your support to fix this issue asap as we are facing this in our PROD environment.\n\n```xml\n \norg.springframework.batch.item.file.NonTransientFlatFileException: Unable to read from resource: [file [/home/abc/abv/file.csv.3]]\n\tat org.springframework.batch.item.file.FlatFileItemReader.readLine(FlatFileItemReader.java:219)\n\tat org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:172)\n\tat org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:85)\n\tat org.springframework.batch.item.file.MultiResourceItemReader.readNextItem(MultiResourceItemReader.java:119)\n\tat org.springframework.batch.item.file.MultiResourceItemReader.read(MultiResourceItemReader.java:108)\n\tat sun.reflect.GeneratedMethodAccessor233.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:601)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)\n\tat org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:131)\n\tat org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)\n\tat $Proxy2.read(Unknown Source)\n\tat org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:90)\n\tat org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:150)\n\tat org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:110)\n\tat org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:367)\n\tat org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:214)\n\tat org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:143)\n\tat org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:105)\n\tat org.springframework.batch.core.step.\t2013-06-02 14:05:46.568\n```\n\n\n\n---\n\n**Affects:** 2.1.9\n", "url": "https://github.com/spring-projects/spring-batch/issues/1543", "user": "spring-issuemaster", "labels": ["status: invalid", "type: bug"], "created": "2013-06-18 08:58:21", "closed": "2014-03-06 08:57:29", "commits": {}, "ttf": 260.0002777777778, "commitsDetails": []}, {"title": "StaxEventItemWriter fails on a NullPointerException with Spring OXM 3.2.x. [BATCH-2054]", "body": "**[Ian Brandt](https://jira.spring.io/secure/ViewProfile.jspa?name=ibrandt)** opened **[BATCH-2054](https://jira.spring.io/browse/BATCH-2054?redirect=false)** and commented\n\nA NullPointerException results from trying to write more than one item to a `StaxEventItemWriter` with Spring OXM 3.2.x.  It works with Spring OXM 3.1.x.\n\nI've uploaded a test case project to the Git repository linked above.  Highlights follow:\n\n```xml\n<bean id=\"itemWriter\" class=\"org.springframework.batch.item.xml.StaxEventItemWriter\"\n    depends-on=\"setSystemProperties\">\n    <property name=\"resource\" ref=\"tempResource\" />\n    <property name=\"rootTagName\" value=\"testing\" />\n    <property name=\"marshaller\">\n        <bean class=\"org.springframework.oxm.jibx.JibxMarshaller\">\n            <property name=\"targetClass\"\n                value=\"com.ianbrandt.spring.batch.test.TestModelObject\" />\n        </bean>\n    </property>\n</bean>\n```\n\n```\njava.lang.NullPointerException\n\tat com.ctc.wstx.sw.BufferingXmlWriter.writeStartTagStart(BufferingXmlWriter.java:725)\n\tat com.ctc.wstx.sw.BaseNsStreamWriter.doWriteStartTag(BaseNsStreamWriter.java:614)\n\tat com.ctc.wstx.sw.SimpleNsStreamWriter.writeStartOrEmpty(SimpleNsStreamWriter.java:265)\n\tat com.ctc.wstx.sw.BaseNsStreamWriter.writeStartElement(BaseNsStreamWriter.java:313)\n\tat org.codehaus.stax2.ri.Stax2EventWriterImpl.add(Stax2EventWriterImpl.java:97)\n\tat org.springframework.batch.item.xml.stax.NoStartEndDocumentStreamWriter.add(NoStartEndDocumentStreamWriter.java:39)\n\tat org.springframework.util.xml.XMLEventStreamWriter.writeStartElement(XMLEventStreamWriter.java:195)\n\tat org.springframework.util.xml.XMLEventStreamWriter.writeStartElement(XMLEventStreamWriter.java:92)\n\tat org.jibx.runtime.impl.StAXWriter.startTagOpen(StAXWriter.java:151)\n\tat org.jibx.runtime.impl.MarshallingContext.startTagAttributes(MarshallingContext.java:541)\n\tat com.ianbrandt.spring.batch.test.JiBX_TestModelObjectTestModelObject_access.marshal()\n\tat com.ianbrandt.spring.batch.test.TestModelObject.marshal(TestModelObject.java)\n\tat org.jibx.runtime.impl.MarshallingContext.marshalRoot(MarshallingContext.java:1021)\n\tat org.jibx.runtime.impl.MarshallingContext.marshalDocument(MarshallingContext.java:1041)\n\tat org.springframework.oxm.jibx.JibxMarshaller.marshalXmlStreamWriter(JibxMarshaller.java:289)\n\tat org.springframework.oxm.jibx.JibxMarshaller.marshalXmlEventWriter(JibxMarshaller.java:342)\n\tat org.springframework.oxm.support.AbstractMarshaller.marshalStaxResult(AbstractMarshaller.java:229)\n\tat org.springframework.oxm.support.AbstractMarshaller.marshal(AbstractMarshaller.java:96)\n\tat org.springframework.batch.item.xml.StaxEventItemWriter.write(StaxEventItemWriter.java:715)\n\tat com.ianbrandt.spring.batch.test.SpringBatchOxmTest.writeItems(SpringBatchOxmTest.java:55)\n\tat com.ianbrandt.spring.batch.test.SpringBatchOxmTest.testTwoObjects(SpringBatchOxmTest.java:49)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)\n\tat org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:83)\n\tat org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:88)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)\n\tat org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\n```\n\n\n\n---\n\n**Affects:** 2.2.0\n\n**Reference URL:** https://github.com/ianbrandt/spring-batch-oxm-test\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/a65bcc48d1de153d412c8ad7445497e67278bacb\n", "url": "https://github.com/spring-projects/spring-batch/issues/1540", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2013-06-25 16:08:34", "closed": "2013-09-13 05:59:11", "commits": {}, "ttf": 79.00027777777778, "commitsDetails": []}, {"title": "RetryContextCache Class Missing in spring-batch-infrastructure-2.2.0.RELEASE [BATCH-2055]", "body": "**[Ganesh Babu N R](https://jira.spring.io/secure/ViewProfile.jspa?name=nrganeshbabu)** opened **[BATCH-2055](https://jira.spring.io/browse/BATCH-2055?redirect=false)** and commented\n\nWhile using Spring Batch 2.2 - I get Class Not Found Exception on org.springframework.retry.policy.RetryContextCache class. On investigation I found that this class is missing in the spring-batch-infrastructure-2.2.0.RELEASE jar.\n\n\n---\n\n**Affects:** 2.2.0 - Sprint 21\n\n**Reference URL:** http://s3.amazonaws.com/dist.springframework.org/release/BATCH/spring-batch-2.2.0.RELEASE-no-dependencies.zip\n\n**Issue Links:**\n- [BATCH-2056](https://jira.spring.io/browse/BATCH-2056) Update 'What's New' in Reference Document\n\n", "url": "https://github.com/spring-projects/spring-batch/issues/1539", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: declined", "type: bug"], "created": "2013-06-29 02:21:50", "closed": "2013-06-30 23:51:29", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "\"ISO-8859-1\" charset usage is forced in JdbcExecutionContextDao [BATCH-2057]", "body": "**[Maxim Shekhovets](https://jira.spring.io/secure/ViewProfile.jspa?name=maximsh)** opened **[BATCH-2057](https://jira.spring.io/browse/BATCH-2057?redirect=false)** and commented\n\nJdbcExecutionContextDao.serializeContext method returns string in \"ISO-8859-1\" charset, i.e. original context is converted to \"ISO-8859-1\" even if it was unicode or something else.\nSo it looks like Spring Batch supports only \"ISO-8859-1\" charset for context serialization?\n\n\n---\n\n**Affects:** 2.1.9, 2.2.0\n\n**Attachments:**\n- [stacktrace.txt](https://jira.spring.io/secure/attachment/26201/stacktrace.txt) (_11.15 kB_)\n\n2 votes, 4 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1537", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2013-07-11 07:31:27", "closed": "2019-04-05 15:53:45", "commits": {}, "ttf": 2094.0002777777777, "commitsDetails": []}, {"title": "OrderedComposite.add fails if one of the items is step scope [BATCH-2059]", "body": "**[Jack Redwine](https://jira.spring.io/secure/ViewProfile.jspa?name=jredwine)** opened **[BATCH-2059](https://jira.spring.io/browse/BATCH-2059?redirect=false)** and commented\n\nWe ran into an issue with this class when adding global step listeners to a job that had a step or step listener define as step scope.\n\n```\n<job id=\"membershipImportJob\" job-repository=\"jobRepository\" incrementer=\"incrementer\">\n\t<step id=\"finalizeStep\">\n\t\t<tasklet>\n\t\t\t<chunk reader=\"membershipItemReader\" processor=\"membershipItemProcessor\" writer=\"membershipItemWriter\" commit-interval=\"1\" retry-policy=\"neverRetryPolicy\"\n\t\t\t\t\tskip-policy=\"alwaysSkipPolicy\">\n\t\t\t</chunk>\n\t\t</tasklet>\n\t\t<listeners>\n\t\t\t<listener>\n\t\t\t\t<beans:bean scope=\"step\" class=\"com.mypackage.MembershipTrackingListener\">\n\t\t\t\t\t<beans:property name=\"marshaller\" ref=\"membershipTrackingMarshaller\"/>\n\t\t\t\t</beans:bean>\n\t\t\t</listener>\n\t\t</listeners>\n\t</step>\n</job>\n\npublic class MembershipTrackingListener extends StepExecutionListenerSupport implements ordered {\n  ...\n}\n```\n\nwe also add the global listeners as follows\n\n```\n/**\n * Register the global listeners defined in the parent applicationContext\n * @param context the job applicationContext\n * @param jobExecutionListeners jobExecutionListeners that are to be registered with the jobs in the context\n * @param stepExecutionListeners stepExecutionListeners that are to be registered with the jobs in the context\n */\nprivate void registerListenersWithAllJobs(ConfigurableApplicationContext context,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tList<JobExecutionListener> jobExecutionListeners,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tList<StepExecutionListener> stepExecutionListeners) {\n\tMap<String, Job> fileListenerMap = context.getBeansOfType(Job.class);\n\tfor (Map.Entry<String, Job> entry : fileListenerMap.entrySet()) {\n\t\tAbstractJob abstractJob = JobSupport.resolveToAbstractJob(entry.getValue());\n\t\tJobSupport.registerJobListeners(abstractJob, jobExecutionListeners);\n\t\tfor (String stepName : abstractJob.getStepNames()) {\n\t\t\tStep step = abstractJob.getStep(stepName);\n\t\t\tJobSupport.registerStepListeners(step, stepExecutionListeners);\n\t\t}\n\t}\n}\n```\n\neverything works as it should until we introduce the ordered interface to the MembershipTrackingListener.\n\nThat results in line 76 of OrderedComposite throwing a scope exception.\n\n```\nelse if (!unordered.contains(item)) {\n     unordered.add(item);\n}\nCollections.sort(ordered, comparator);\nlist.clear();\n```\n\nThe work around is to remove the step scope from the job, but I believe this should be fixed.\n\n\n\n---\n\n**Affects:** 2.1.8\n", "url": "https://github.com/spring-projects/spring-batch/issues/1535", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2013-07-15 06:38:12", "closed": "2014-03-06 14:55:03", "commits": {}, "ttf": 234.00027777777777, "commitsDetails": []}, {"title": "Wrong Link to Source-Repository on Project Website [BATCH-2060]", "body": "**[Thomas Hackel](https://jira.spring.io/secure/ViewProfile.jspa?name=thackel)** opened **[BATCH-2060](https://jira.spring.io/browse/BATCH-2060?redirect=false)** and commented\n\nThe generated website at\nhttp://static.springsource.org/spring-batch/spring-batch-core/source-repository.html\npoints to\nhttp://github.com/SpringSource/spring-batch/spring-batch-core\nwhich does not exist.\n\nThe correct URL should be\nhttps://github.com/SpringSource/spring-batch\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/f4f6e39acac77e3c40f333dcbaec6b5f0670b54d, https://github.com/spring-projects/spring-batch/commit/999953fe8c513379b81fbd88babca98eb30c5849\n", "url": "https://github.com/spring-projects/spring-batch/issues/1534", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2013-07-15 08:04:09", "closed": "2014-03-07 09:26:29", "commits": {}, "ttf": 235.00027777777777, "commitsDetails": []}, {"title": "State transition causes infinite loop [BATCH-2061]", "body": "**[nik sik](https://jira.spring.io/secure/ViewProfile.jspa?name=niksik)** opened **[BATCH-2061](https://jira.spring.io/browse/BATCH-2061?redirect=false)** and commented\n\n<batch:stop on=\"*\" restart=\"pattern.replay.1\" />\n<batch:fail on=\"FAILED\" />\n\nin the referenced configuration causes an infinite loop\n\n\n---\n\n**Affects:** 2.2.0\n\n**Reference URL:** http://forum.springsource.org/showthread.php?139993-Stopping-and-restarting-jobs\n", "url": "https://github.com/spring-projects/spring-batch/issues/1533", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-07-19 00:32:06", "closed": "2014-03-18 10:38:19", "commits": {}, "ttf": 242.00027777777777, "commitsDetails": []}, {"title": "Fix context management [BATCH-2067]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2067](https://jira.spring.io/browse/BATCH-2067?redirect=false)** and commented\n\nUsing the JSR's JobOperator requires that certain elements are bootstrapped behind the scenes (JobRepository for example) yet we still need to provide a way to override those components.\n\n\n---\nNo further details from [BATCH-2067](https://jira.spring.io/browse/BATCH-2067?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/1527", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-07-24 07:49:18", "closed": "2013-08-11 14:42:20", "commits": {}, "ttf": 18.00027777777778, "commitsDetails": []}, {"title": "ChunkListener annoation method signature not aligned with that mentioned in JavaDoc [BATCH-2068]", "body": "**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[BATCH-2068](https://jira.spring.io/browse/BATCH-2068?redirect=false)** and commented\n\nIn JavaDoc, `@BeforeChunk`/`@AfterChunk` requires ChunkContext as parameter. But when I add this in the method signature, exception will be thrown. Everything works fine if ChunkContext is not passed\n\npublic class MyListener {\n\n    @BeforeChunk\n    void beforeChunk(ChunkContext context) {\n    }\n\n}\n\n    <step id=\"MyStep\">\n        <tasklet>\n            <chunk reader=\"myItemReader\"\n                   processor=\"myProcessor\"\n                   writer=\"myWriter\"\n                   commit-interval=\"100\" />\n         </tasklet>\n         <listeners>\n                <listener>\n                        <b:bean class=\"MyListener\" scope=\"step\" />\n                </listener>\n         </listeners>\n    </step>\n\nCannot create inner bean '(inner bean)' of type [org.springframework.batch.core.listener.StepListenerFactoryBean] while setting bean property 'listeners' with key [0]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)': FactoryBean threw exception on object creation; nested exception is java.lang.IllegalArgumentException: The method [beforeChunk] on target class [MyListener] is incompatable with the signature [()] expected for the annotation [BeforeChunk]\n\n\n---\n\n**Affects:** 2.2.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/1526", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2013-07-24 23:40:48", "closed": "2014-08-14 09:30:57", "commits": {}, "ttf": 385.0002777777778, "commitsDetails": []}, {"title": "allow-start-if-complete in JSR based job definition is not parsed correctly. [BATCH-2073]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2073](https://jira.spring.io/browse/BATCH-2073?redirect=false)** and commented\n\nIt looks like the allow-start-if-complete attribute on a &lt;step&gt; element (via the JSR) is not being parsed correctly.  The test `BatchletRestartStateMachineTests#testAllowStartIfCompleteRestartExecution` is not passing due to an error during the application context initialization complaining of the following exception:\n\n```\n\"org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'batchletRestartStateMachine': Cannot create inner bean '(inner bean)' of type [org.springframework.batch.core.configuration.xml.SimpleFlowFactoryBean] while setting bean property 'flow'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)': Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'allowStartIfComplete' of bean class [org.springframework.batch.core.configuration.xml.SimpleFlowFactoryBean]: Bean property 'allowStartIfComplete' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter? \n    at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:282) \n    at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:126) \n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1391) \n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1132) \n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:522) \n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461) \n    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295) \n    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) \n    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292) \n    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) \n    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:608) \n    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932) \n    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479) \n    at org.springframework.batch.core.jsr.launch.JsrJobOperator.start(JsrJobOperator.java:491) \n    at com.ibm.jbatch.tck.utils.JobOperatorBridge.startJobAndWaitForResult(JobOperatorBridge.java:145) \n    at com.ibm.jbatch.tck.tests.jslxml.BatchletRestartStateMachineTests.testAllowStartIfCompleteRestartExecution(BatchletRestartStateMachineTests.java:251) \n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) \n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) \n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) \n    at java.lang.reflect.Method.invoke(Method.java:601) \n    at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80) \n    at org.testng.internal.Invoker.invokeMethod(Invoker.java:714) \n    at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901) \n    at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231) \n    at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127) \n    at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111) \n    at org.testng.TestRunner.privateRun(TestRunner.java:767) \n    at org.testng.TestRunner.run(TestRunner.java:617) \n    at org.testng.SuiteRunner.runTest(SuiteRunner.java:334) \n    at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329) \n    at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291) \n    at org.testng.SuiteRunner.run(SuiteRunner.java:240) \n    at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52) \n    at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86) \n    at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198) \n    at org.testng.TestNG.runSuitesLocally(TestNG.java:1123) \n    at org.testng.TestNG.run(TestNG.java:1031) \n    at org.testng.TestNG.privateMain(TestNG.java:1338) \n    at org.testng.TestNG.main(TestNG.java:1307) \nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)': Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'allowStartIfComplete' of bean class [org.springframework.batch.core.configuration.xml.SimpleFlowFactoryBean]: Bean property 'allowStartIfComplete' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter? \n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1427) \n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1132) \n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:522) \n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461) \n    at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:271) \n    ... 38 more \nCaused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'allowStartIfComplete' of bean class [org.springframework.batch.core.configuration.xml.SimpleFlowFactoryBean]: Bean property 'allowStartIfComplete' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter? \n    at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1042) \n    at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:902) \n    at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:75) \n    at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:57) \n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1424) \n    ... 42 more\n```\n\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/c252b132f80575286af1882ea4f0a97844d3d17b, https://github.com/spring-projects/spring-batch/commit/79c7ea2f1b89c0cb7d4fcaea8e44a6fce6380bee\n", "url": "https://github.com/spring-projects/spring-batch/issues/1522", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-07-31 09:50:09", "closed": "2013-08-06 10:25:42", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "FileUtils throws an exception when append is true [BATCH-2076]", "body": "**[Veit Hoffmann](https://jira.spring.io/secure/ViewProfile.jspa?name=vhoff)** opened **[BATCH-2076](https://jira.spring.io/browse/BATCH-2076?redirect=false)** and commented\n\nFileUtils doesn't create path for a file when append is true.\nThe in setUpOutputFile the following code fragement should also be called if append is true:\n\nif (file.getParent() != null) {\nnew File(file.getParent()).mkdirs();\n}\n\n\n---\n\n**Affects:** 3.0.0, 2.2.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/1520", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2013-08-05 08:36:36", "closed": "2013-09-08 11:04:10", "commits": {}, "ttf": 34.000277777777775, "commitsDetails": []}, {"title": "Address closing child contexts as jobs complete. [BATCH-2078]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2078](https://jira.spring.io/browse/BATCH-2078?redirect=false)** and commented\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/ac81a97d0d2c871a3dc94a1e16c12c422156b3b0\n", "url": "https://github.com/spring-projects/spring-batch/issues/1518", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-08-09 07:54:02", "closed": "2014-03-05 10:04:01", "commits": {}, "ttf": 208.00027777777777, "commitsDetails": []}, {"title": "Regression of JIRA 1848 [BATCH-2079]", "body": "**[Russ Pridemore](https://jira.spring.io/secure/ViewProfile.jspa?name=rpridemore)** opened **[BATCH-2079](https://jira.spring.io/browse/BATCH-2079?redirect=false)** and commented\n\nThere appears to be a regression of the bug addressed in [BATCH-1848](https://jira.spring.io/browse/BATCH-1848).  Specifically, I am writing a query that joins several tables.  Putting a table alias prefix on the configured value for \"sortKeys\" causes a failure at JdbcPagingItemReader.PagingRowMapper.mapRow (JdbcPagingItemReader line 345).  Using the fix suggested in [BATCH-1848](https://jira.spring.io/browse/BATCH-1848) would have avoided this problem.\n\n\n---\n\n**Affects:** 2.2.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/02cfe20225d230f82878ac453fb222351f2dc292, https://github.com/spring-projects/spring-batch/commit/e3fd881218146dbf8432f249d8efe2ce533eee7c\n", "url": "https://github.com/spring-projects/spring-batch/issues/1517", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-08-12 11:35:09", "closed": "2014-09-22 13:25:52", "commits": {}, "ttf": 406.0002777777778, "commitsDetails": []}, {"title": "Attribute 'flow' is not allowed to appear in element 'batch:step' [BATCH-2085]", "body": "**[Ian Brandt](https://jira.spring.io/secure/ViewProfile.jspa?name=ibrandt)** opened **[BATCH-2085](https://jira.spring.io/browse/BATCH-2085?redirect=false)** and commented\n\nAs of 2.2.1.RELEASE [the documentation says](http://static.springsource.org/spring-batch/reference/html/configureStep.html#external-flows), \"There is also support for creating a FlowStep in XML directly\":\n\n```xml\n<job id=\"job\">\n    <step id=\"job1.flow1\" flow=\"flow1\" next=\"step3\"/>\n    <step id=\"step3\" parent=\"s3\"/>\n</job>\n\n<flow id=\"flow1\">\n    <step id=\"step1\" parent=\"s1\" next=\"step2\"/>\n    <step id=\"step2\" parent=\"s2\"/>\n</flow>\n```\n\nNeither the [2.2 XSD](http://www.springframework.org/schema/batch/spring-batch-2.2.xsd), nor the 2.2.1 [`AbstractStepParser`](https://github.com/SpringSource/spring-batch/blob/2.2.1.RELEASE/spring-batch-core/src/main/java/org/springframework/batch/core/configuration/xml/AbstractStepParser.java) appear to support this: \"Attribute 'flow' is not allowed to appear in element 'batch:step'\".\n\n\n---\n\n**Affects:** 2.2.1\n\n**Reference URL:** http://static.springsource.org/spring-batch/reference/html/configureStep.html#external-flows\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/55a40f7380c969e843ad27b10bfbcb1e6dc96fdb, https://github.com/spring-projects/spring-batch/commit/bc29c1ba14d27e0ec82b86be20007d06f1f42850\n", "url": "https://github.com/spring-projects/spring-batch/issues/1514", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-08-23 12:03:55", "closed": "2014-03-11 11:08:52", "commits": {}, "ttf": 199.00027777777777, "commitsDetails": []}, {"title": "default writer implementations need public setter for name [BATCH-2086]", "body": "**[Jimmy Praet](https://jira.spring.io/secure/ViewProfile.jspa?name=jpraet)** opened **[BATCH-2086](https://jira.spring.io/browse/BATCH-2086?redirect=false)** and commented\n\nThe default spring batch writer implementations need a public setter for the name. The name is used to prefix the execution context keys. In spring batch 2.1.x the setter for the name was available in FlatFileItemWriter, StaxEventItemWriter, MultiResourceItemWriter, ... because they extended from ExecutionContextUserSupport. In 2.2.x they extend from ItemStreamSupport where the setExecutionContextName method is protected.\n\nThis means that currently in spring batch 2.2.x it's no longer possible to write to multiple StaxEventItemWriters in the same step, because they would share the same execution context.\n\nedit: FlatFileItemWriter has a setName() method. StaxEventItemWriter and MultiResourceItemWriter don't.\n\n\n---\n\n**Affects:** 2.2.0, 2.2.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/ca91bbb375945a7e7ee612bf1425d237e956bb94, https://github.com/spring-projects/spring-batch/commit/be0d47fb8e0b9c74d22014b09df7a904b6e9dc0f\n", "url": "https://github.com/spring-projects/spring-batch/issues/1513", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2013-08-27 01:16:11", "closed": "2013-09-08 11:06:55", "commits": {}, "ttf": 12.000277777777777, "commitsDetails": []}, {"title": "SqlWindowingPagingQueryProvider generates invalid SQL when SortKey contains table alias name [BATCH-2087]", "body": "**[Miles Huang](https://jira.spring.io/secure/ViewProfile.jspa?name=miles.huang)** opened **[BATCH-2087](https://jira.spring.io/browse/BATCH-2087?redirect=false)** and commented\n\nTo reproduce this issue:\n1. Create more than 20 job executions in the job repository.\n2. From spring batch admin web application, select Executions.\n3. Click Next page.\n   An error screen will show up.\n\nRoot cause:\nThe SQL generated by the Db2PagingQueryProvider (SqlWindowingPagingQueryProvider) is:\n\nSELECT E.JOB_EXECUTION_ID FROM ( SELECT E.JOB_EXECUTION_ID, ROW_NUMBER() OVER ( ORDER BY E.JOB_EXECUTION_ID DESC) AS ROW_NUMBER FROM SPSSAMPLE.BATCH_JOB_EXECUTION E, SPSSAMPLE.BATCH_JOB_INSTANCE I WHERE E.JOB_INSTANCE_ID=I.JOB_INSTANCE_ID) AS TMP_SUB WHERE TMP_SUB.ROW_NUMBER = 20 ORDER BY E.JOB_EXECUTION_ID DESC\n\nThe sortKey for this paginate query is \"E.JOB_EXECUTION_ID\". And the SQL seems to have problem on the field name since the table alias is only applicable for the subquery instead of the outer main query.\nCorrect SQL should be:\nSELECT TMP_SUB.JOB_EXECUTION_ID FROM ( SELECT E.JOB_EXECUTION_ID, ROW_NUMBER() OVER ( ORDER BY E.JOB_EXECUTION_ID DESC) AS ROW_NUMBER FROM SPSSAMPLE.BATCH_JOB_EXECUTION E, SPSSAMPLE.BATCH_JOB_INSTANCE I WHERE E.JOB_INSTANCE_ID=I.JOB_INSTANCE_ID) AS TMP_SUB WHERE TMP_SUB.ROW_NUMBER = 20 ORDER BY TMP_SUB.JOB_EXECUTION_ID DESC\n\nAttached stack trace for the exception:\n\n17:55:05,750 DEBUG http-bio-8080-exec-7 support.SQLErrorCodesFactory:175 - SQL error codes for 'DB2/LINUXX8664' found\n17:55:05,760 DEBUG http-bio-8080-exec-7 support.SQLErrorCodeSQLExceptionTranslator:403 - Translating SQLException with SQL state '42703', error code '-206', message [DB2 SQL Error: SQLCODE=-206, SQLSTATE=42703, SQLERRMC=E.JOB_EXECUTION_ID, DRIVER=4.13.80]; SQL was [SELECT E.JOB_EXECUTION_ID FROM ( SELECT E.JOB_EXECUTION_ID, ROW_NUMBER() OVER ( ORDER BY E.JOB_EXECUTION_ID DESC) AS ROW_NUMBER FROM SPSSAMPLE.BATCH_JOB_EXECUTION E, SPSSAMPLE.BATCH_JOB_INSTANCE I WHERE E.JOB_INSTANCE_ID=I.JOB_INSTANCE_ID) AS TMP_SUB WHERE TMP_SUB.ROW_NUMBER = 20 ORDER BY E.JOB_EXECUTION_ID DESC] for task [StatementCallback]\nAug 27, 2013 5:55:05 PM org.apache.catalina.core.StandardWrapperValve invoke\nSEVERE: Servlet.service() for servlet [Batch Servlet] in context with path [/batchsampleweb] threw exception [Request processing failed; nested exception is org.springframework.jdbc.BadSqlGrammarException: StatementCallback; bad SQL grammar [SELECT E.JOB_EXECUTION_ID FROM ( SELECT E.JOB_EXECUTION_ID, ROW_NUMBER() OVER ( ORDER BY E.JOB_EXECUTION_ID DESC) AS ROW_NUMBER FROM SPSSAMPLE.BATCH_JOB_EXECUTION E, SPSSAMPLE.BATCH_JOB_INSTANCE I WHERE E.JOB_INSTANCE_ID=I.JOB_INSTANCE_ID) AS TMP_SUB WHERE TMP_SUB.ROW_NUMBER = 20 ORDER BY E.JOB_EXECUTION_ID DESC]; nested exception is com.ibm.db2.jcc.am.SqlSyntaxErrorException: DB2 SQL Error: SQLCODE=-206, SQLSTATE=42703, SQLERRMC=E.JOB_EXECUTION_ID, DRIVER=4.13.80] with root cause\ncom.ibm.db2.jcc.am.SqlSyntaxErrorException: DB2 SQL Error: SQLCODE=-206, SQLSTATE=42703, SQLERRMC=E.JOB_EXECUTION_ID, DRIVER=4.13.80\nat com.ibm.db2.jcc.am.id.a(id.java:677)\nat com.ibm.db2.jcc.am.id.a(id.java:60)\nat com.ibm.db2.jcc.am.id.a(id.java:127)\nat com.ibm.db2.jcc.am.fo.c(fo.java:2653)\nat com.ibm.db2.jcc.am.fo.d(fo.java:2641)\nat com.ibm.db2.jcc.am.fo.a(fo.java:2090)\nat com.ibm.db2.jcc.t4.cb.h(cb.java:141)\nat com.ibm.db2.jcc.t4.cb.b(cb.java:41)\nat com.ibm.db2.jcc.t4.q.a(q.java:32)\nat com.ibm.db2.jcc.t4.sb.i(sb.java:135)\nat com.ibm.db2.jcc.am.fo.ib(fo.java:2059)\nat com.ibm.db2.jcc.am.fo.a(fo.java:3130)\nat com.ibm.db2.jcc.am.fo.a(fo.java:688)\nat com.ibm.db2.jcc.am.fo.executeQuery(fo.java:672)\nat org.apache.tomcat.dbcp.dbcp.DelegatingStatement.executeQuery(DelegatingStatement.java:208)\nat org.apache.tomcat.dbcp.dbcp.DelegatingStatement.executeQuery(DelegatingStatement.java:208)\nat org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback.doInStatement(JdbcTemplate.java:441)\nat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:396)\nat org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:456)\nat org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:464)\nat org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:472)\nat org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:477)\nat org.springframework.batch.admin.service.JdbcSearchableJobExecutionDao.getJobExecutions(JdbcSearchableJobExecutionDao.java:191)\nat org.springframework.batch.admin.service.SimpleJobService.listJobExecutions(SimpleJobService.java:234)\nat org.springframework.batch.admin.web.JobExecutionController.list(JobExecutionController.java:161)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:601)\nat org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:219)\nat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132)\nat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)\nat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:745)\nat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:686)\nat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80)\nat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925)\nat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856)\nat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:936)\nat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:827)\nat javax.servlet.http.HttpServlet.service(HttpServlet.java:621)\nat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:812)\nat javax.servlet.http.HttpServlet.service(HttpServlet.java:728)\nat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)\nat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\nat org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)\nat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\nat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)\nat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\nat org.springframework.web.filter.ShallowEtagHeaderFilter.doFilterInternal(ShallowEtagHeaderFilter.java:73)\nat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\nat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)\nat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\nat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)\nat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)\nat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)\nat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)\nat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99)\nat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953)\nat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)\nat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)\nat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1008)\nat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589)\nat org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:312)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\nat java.lang.Thread.run(Thread.java:722)\n\n\n---\n\n**Affects:** 2.2.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/1512", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: duplicate", "type: bug"], "created": "2013-08-27 15:35:44", "closed": "2013-08-27 15:40:59", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "'chunk-completion-policy' or 'commit-interval' with '#{jobParameters[...]}' is ignored when 'retry-limit' exists. [BATCH-2096]", "body": "**[Sanghyuk Jung](https://jira.spring.io/secure/ViewProfile.jspa?name=sanghyuk.jung)** opened **[BATCH-2096](https://jira.spring.io/browse/BATCH-2096?redirect=false)** and commented\n\nWhen 'retry-limit' is configured and  'commit-interval' is extracted from jobParameters, commit-interval is always recognized to be '1' regardless of jobParameters.\n\n```xml\n<batch:job id=\"retryJob\">\n  <batch:step id=\"step1\">\n    <batch:tasklet>\n      <batch:chunk reader=\"reader\" writer=\"writer\" commit-interval=\"#{jobParameters['commit.interval']}\" retry-limit=\"5\" > \n      <batch:retryable-exception-classes>\n        <batch:include class=\"java.lang.Exception\" />\n       </batch:retryable-exception-classes>\n    </batch:chunk>\n  </batch:tasklet>\n</batch:step>\n</batch:job>\n```\n\nAnd 'chunk-completion-policy' also ignored when 'retry-limit' exists.\n\nThese flows are fundamentally same after parsing the XML, because SimpleCompletionPolicy is registered when 'commit-interval' starts with '#\". it is processed in  'org.springframework.batch.core.configuration.xml.ChunkElementParser.prase()'\n\n```java\nif (StringUtils.hasText(commitInterval)) {\n  if (commitInterval.startsWith(\"#\")) {\n    // It's a late binding expression, so we need step scope...\n    BeanDefinitionBuilder completionPolicy = BeanDefinitionBuilder.genericBeanDefinition(SimpleCompletionPolicy.class);\n    completionPolicy.addConstructorArgValue(commitInterval);\n    completionPolicy.setScope(\"step\");\n    propertyValues.addPropertyValue(\"chunkCompletionPolicy\", completionPolicy.getBeanDefinition());\n  } else {\n    propertyValues.addPropertyValue(\"commitInterval\", commitInterval);\n  }\n}\n```\n\nThe cause is that StepParserStepFactoryBean omits to set ChunkCompletionPolicy when creating FaultTolerantStep.  'builder.chunk(chunkCompletionPolicy);' is called in 'StepParserStepFactoryBean.createSimpleStep()',\nbut it is not in 'createFaultTolerantStep()'.\n\nI reproduced the problem at https://github.com/benelog/batch-experiments/tree/master/batch-retry-test\n\n\n---\n\n**Affects:** 2.2.1\n\n**Reference URL:** https://github.com/benelog/batch-experiments/tree/master/batch-retry-test\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/69e047801a8fb3d929295b8a066c9a7965effd82, https://github.com/spring-projects/spring-batch/commit/bfd6d8d3554736bf356c3e84469992c54cfa1cad\n", "url": "https://github.com/spring-projects/spring-batch/issues/1503", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-09-06 13:17:24", "closed": "2013-09-15 22:25:07", "commits": {}, "ttf": 9.000277777777777, "commitsDetails": []}, {"title": "Clean up \"Invalid JavaBean property 'itemWriter' being accessed\" warnings [BATCH-2080]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2080](https://jira.spring.io/browse/BATCH-2080?redirect=false)** and commented\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/5bf53d6a93efb96042ee5311ab13fa0e2a68965e\n", "url": "https://github.com/spring-projects/spring-batch/issues/1501", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-08-13 15:54:24", "closed": "2014-02-20 08:29:44", "commits": {}, "ttf": 190.00027777777777, "commitsDetails": []}, {"title": "DefaultStepExecutionAggregator doesn't include some StepExecution attributes [BATCH-2101]", "body": "**[Aaron Johnson](https://jira.spring.io/secure/ViewProfile.jspa?name=swiftelan)** opened **[BATCH-2101](https://jira.spring.io/browse/BATCH-2101?redirect=false)** and commented\n\nThe org.springframework.batch.core.partition.support.DefaultStepExecutionAggregator does not aggregate the StepExecution.filterCount or StepExecution.processSkipCount.\n\n\n---\n\n**Affects:** 2.2.2\n\n**Issue Links:**\n- [BATCH-2257](https://jira.spring.io/browse/BATCH-2257) in DefaultStepExecutionAggregator.aggregate(...) the aggregation of processor.skipCount is missing\n (_**\"duplicates\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1495", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2013-09-11 13:39:57", "closed": "2019-10-30 20:27:23", "commits": {}, "ttf": 2240.0002777777777, "commitsDetails": []}, {"title": "Change JSR version of Split to execute flows in separate threads. [BATCH-2095]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2095](https://jira.spring.io/browse/BATCH-2095?redirect=false)** and commented\n\nThe default version of \\<split> used in Spring Batch uses a Synchronous TaskExecutor by default and requires the user to provide a TaskExecutor reference if they want parallel processing.  The JSR does not provide the ability to inject the thread pool and yet requires parallel execution.  So we need to provide a basic default impl when configuring via the JSR.\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/df53ea12b384066657731db8b256f23f43147b9d\n", "url": "https://github.com/spring-projects/spring-batch/issues/1487", "user": "spring-issuemaster", "labels": ["in: core", "theme: jsr-352", "type: bug"], "created": "2013-09-05 13:57:25", "closed": "2013-10-04 01:34:33", "commits": {}, "ttf": 28.00027777777778, "commitsDetails": []}, {"title": "StaxEventItemWriter indentation is buggy when used with IndentingXMLEventWriter [BATCH-2113]", "body": "**[Sebastien Lorber](https://jira.spring.io/secure/ViewProfile.jspa?name=sebastienlorber)** opened **[BATCH-2113](https://jira.spring.io/browse/BATCH-2113?redirect=false)** and commented\n\nThis is suggested here:\nhttps://jira.springsource.org/browse/BATCH-1867\nhttps://jira.springsource.org/browse/BATCH-1835\n\nWhen subclassing the StaxEventItemWriter with this:\n\n```\n@Override\nprotected XMLEventWriter createXmlEventWriter( XMLOutputFactory outputFactory, Writer writer) throws XMLStreamException {\n  XMLEventWriter eventWriter = super.createXmlEventWriter(outputFactory,writer);\n  IndentingXMLEventWriter indentingXMLEventWriter = new IndentingXMLEventWriter(eventWriter);\n  return indentingXMLEventWriter;\n}\n```\n\nThen the xml output is \"kind of\" indented but it gives a buggy result.\n\nThe result I have is then:\n\n```\n<?xml version='1.0' encoding='UTF-8'?>\n<root xmlns=\"http://xxx\"><header>\n    <xxx>val</xxx>\n    <zzz>testinput</zzz>\n    <sequence>1</sequence>\n  </header><entries>\n    <entry>\n      <xxx>toto</xxx>\n      <yyy>OK</yyy>\n    </entry>\n    <entry>\n      <xxx>toto</xxx>\n      <yyy>OK</yyy>\n    </entry></entries></root>\n```\n\nAs you can see the header/footer callbacks are not correctly indented.\n\nThe expected xml output is:\n\n```\n<?xml version='1.0' encoding='UTF-8'?>\n<root xmlns=\"http://xxx\">\n  <header>\n    <xxx>val</xxx>\n    <zzz>testinput</zzz>\n    <sequence>1</sequence>\n  </header>\n  <entries>\n    <entry>\n      <xxx>toto</xxx>\n      <yyy>OK</yyy>\n    </entry>\n    <entry>\n      <xxx>toto</xxx>\n      <yyy>OK</yyy>\n    </entry>\n  </entries>\n</root>\n```\n\n-----------------------------------------------------------------------\n\nThis properly formatted output can be obtained by removing the hacks that have been setup to handle the restartability...\n\nRemove this call on document start.\n\n```\n/*\n * This forces the flush to write the end of the root element and avoids\n * an off-by-one error on restart.\n */\nwriter.add(factory.createIgnorableSpace(\"\"));\n```\n\nRemove this call on document end:\n\n```\n\tpublic void close() {\n\n\t\tXMLEventFactory factory = createXmlEventFactory();\n\t\ttry {\n\t\t\tdelegateEventWriter.add(factory.createCharacters(\"\"));\n\t\t}\n\t\tcatch (XMLStreamException e) {\n\t\t\tlog.error(e);\n\t\t}\n                .....\n        }\n```\n\nAnd replace this code\n\n```\n\tprotected void endDocument(XMLEventWriter writer) throws XMLStreamException {\n\n\t\t// writer.writeEndDocument(); <- this doesn't work after restart\n\t\t// we need to write end tag of the root element manually\n\n\t\tString nsPrefix = !StringUtils.hasText(getRootTagNamespacePrefix()) ? \"\" : getRootTagNamespacePrefix() + \":\";\n\t\ttry {\n\t\t\tbufferedWriter.write(\"</\" + nsPrefix + getRootTagName() + \">\");\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new DataAccessResourceFailureException(\"Unable to close file resource: [\" + resource + \"]\", ioe);\n\t\t}\n\t}\n\n```\n\nby this one:\n\n```\n@Override\nprotected void endDocument(XMLEventWriter writer) throws XMLStreamException {\n  XMLEventFactory factory = createXmlEventFactory();\n  writer.add(factory.createEndElement(getRootTagNamespacePrefix(), getRootTagNamespace(), getRootTagName()));\n  writer.add(factory.createEndDocument());\n}\n```\n\nI think these hacks need to be removed and done another way, because writing indented XML is a very common need, even if stax is more likely big-file-oriented.\n\n---------------------------------------------------------------\n\nAlso, I know the IndentingXMLEventWriter is not a Spring class but I think Spring should support a reflective way to use this class if it is in the classpath, by an attribute like \"indentIfPossible\"\nIt shouldn't be that hard to indent a big XML with SpringBatch.\n\n\n\n---\n\n**Affects:** 2.1.9\n\n2 votes, 7 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1484", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2013-09-20 08:05:29", "closed": "2016-11-04 16:16:50", "commits": {}, "ttf": 1141.0002777777777, "commitsDetails": []}, {"title": "PropertiesConverter cannot handle a file system path correctly (c\\: instead of c:\\) [BATCH-2115]", "body": "**[Alexis SOUMAGNE](https://jira.spring.io/secure/ViewProfile.jspa?name=almex)** opened **[BATCH-2115](https://jira.spring.io/browse/BATCH-2115?redirect=false)** and commented\n\nSimply create this test:\nfinal String fileSystemPath = \"fileName(string)=C:/Temp/Test.txt\";\n\nJobParameters jobParameters = new DefaultJobParametersConverter().getJobParameters(PropertiesConverter.stringToProperties(fileSystemPath));        \nString parameter = PropertiesConverter.propertiesToString(new DefaultJobParametersConverter().getProperties(jobParameters));\n\nAssert.assertEquals(fileSystemPath, parameter);\n\nThen result should be:\nexpected:<fileName[(string)=C:/Temp]/Test.txt> but was:<fileName[=C\\:/Temp\\]/Test.txt>\n\n\n---\n\n**Affects:** 2.2.2\n\n**Attachments:**\n- [PropertiesConverter.java](https://jira.spring.io/secure/attachment/21419/PropertiesConverter.java) (_5.24 kB_)\n- [PropertiesConverterTests.java](https://jira.spring.io/secure/attachment/21416/PropertiesConverterTests.java) (_5.56 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1482", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: declined", "type: bug"], "created": "2013-09-26 08:40:13", "closed": "2013-10-03 08:24:20", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "batch_job_execution_params migration script incorrect value for 'identifying' column [BATCH-2106]", "body": "**[Jimmy Praet](https://jira.spring.io/secure/ViewProfile.jspa?name=jpraet)** opened **[BATCH-2106](https://jira.spring.io/browse/BATCH-2106?redirect=false)** and commented\n\nThe batch_job_execution_params schema migration scripts in org.springframework.batch.core.migration are incorrect.\n\nThey insert the value '1' for the identifying column. This should be 'Y'.\n\n\n---\n\n**Affects:** 2.2.2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/2bb8b2648d575d4a378b83560d4a7d73bf1e7235, https://github.com/spring-projects/spring-batch/commit/c199f2710361babb2522eda51781ea2ce7104290\n", "url": "https://github.com/spring-projects/spring-batch/issues/1480", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-09-12 07:41:27", "closed": "2014-03-10 08:57:18", "commits": {}, "ttf": 179.00027777777777, "commitsDetails": []}, {"title": "ItemStream not registered when using @StepScope in Java config [BATCH-2119]", "body": "**[Jean-Pierre Bergamin](https://jira.spring.io/secure/ViewProfile.jspa?name=ractive)** opened **[BATCH-2119](https://jira.spring.io/browse/BATCH-2119?redirect=false)** and commented\n\nWhen setting up a step in java config with `@StepScope`, ItemStreams are not automatically registered.\n\nWhen using this bean config:\n\n```\n@Bean\npublic ItemReader<ArchiveRecord> reader(@Value(\"#{jobParameters[warcsDir]}\") String warcsDir) {\n\treturn new ArchiveRecordReader(warcsDir);\n}\n```\n\nThe ArchiveRecordReader is registered as an ItemStream as expected.\n\nUsing `@StepScope` will not register the ArchiveRecordReader as an ItemStream any more (and it's open method will not be invoked).\n\n```\n@Bean\n@StepScope\npublic ItemReader<ArchiveRecord> reader(@Value(\"#{jobParameters[warcsDir]}\") String warcsDir) {\n\treturn new ArchiveRecordReader(warcsDir);\n}\n```\n\nThis is the same behaviour as in [BATCH-1218](https://jira.spring.io/browse/BATCH-1218).\n\n\n---\n\n**Affects:** 2.2.2\n", "url": "https://github.com/spring-projects/spring-batch/issues/1476", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2013-10-08 05:09:27", "closed": "2013-10-09 08:01:30", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Offset not reset when skip limit is hit a chunk boundary [BATCH-2122]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2122](https://jira.spring.io/browse/BATCH-2122?redirect=false)** and commented\n\nWhen a job that has a skip limit configured hits the limit on the first item of a new chunk, the offset is not being reset.  This causes the number of items previously skipped to be skipped on restart.  For example, if a job is configured with a chunk size of 5 and items 2, 3, 7 and 11 all throw skippable exceptions, when item 11 throws it's exception, the job will fail (correct behavior).  However, on restart, the job will start at item 14 (skipping the first two chunks + the 3 offset).  This is incorrect.\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/cb4c08eee99b97093cb9f17b8ebb0a6d297b9325, https://github.com/spring-projects/spring-batch/commit/e7319c66f88f631c2302f7bcdab1932ea854fca9\n", "url": "https://github.com/spring-projects/spring-batch/issues/1473", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-10-14 09:23:00", "closed": "2013-11-22 07:16:17", "commits": {}, "ttf": 38.000277777777775, "commitsDetails": []}, {"title": "Running batch create scripts multiple times can lead to multiple rows being inserted in sequence tables [BATCH-2124]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2124](https://jira.spring.io/browse/BATCH-2124?redirect=false)** and commented\n\nAs noted in the PR linked above, if Spring Boot is used to initialize the repository schema, multiple rows can be accidentally inserted into the sequence tables even though the create statements fail.\n\n\n---\n\n**Reference URL:** https://github.com/spring-projects/spring-batch/pull/238\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/8c68848a34dc3c3507f313b944da40b696ab7d50, https://github.com/spring-projects/spring-batch/commit/55753d7da6332cd21c9d77f0b1c7cfbbe21a595b\n", "url": "https://github.com/spring-projects/spring-batch/issues/1471", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-10-15 14:36:04", "closed": "2013-11-22 07:16:36", "commits": {}, "ttf": 37.000277777777775, "commitsDetails": []}, {"title": "DefaultJobParametersConverter is not thread-safe and the SimpleJobOperator either  [BATCH-2126]", "body": "**[Alexis SOUMAGNE](https://jira.spring.io/secure/ViewProfile.jspa?name=almex)** opened **[BATCH-2126](https://jira.spring.io/browse/BATCH-2126?redirect=false)** and commented\n\nDefaultJobParametersConverter is not thread-safe due to usage of instance variable for numberFormat, dateFormat and longNumberFormat. Then as the SimpleJobOperator use a JobParametersConverter as a instance variable it is not thread-safe either. Thus means that we cannot use it with a SimpleAsyncTaskExecutor or any asynchronous TaskExecutor.\n\nCan you fix it or can you explain which setup as be evaluated to make it work properly with an asynchronous TaskExecutor ?\n\n\n---\n\n**Affects:** 2.2.2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/cc3c7593c86c94f2754b0b283387dd3378cf472b\n", "url": "https://github.com/spring-projects/spring-batch/issues/1469", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-10-23 03:19:04", "closed": "2014-02-23 23:52:51", "commits": {}, "ttf": 123.00027777777778, "commitsDetails": []}, {"title": "Spring Batch 3.0.0.M2 failed to build in Windows environment [BATCH-2134]", "body": "**[Omer Beimnet](https://jira.spring.io/secure/ViewProfile.jspa?name=omerbeimnet)** opened **[BATCH-2134](https://jira.spring.io/browse/BATCH-2134?redirect=false)** and commented\n\nDownloaded Spring Batch 3.0.0.M2 from\n\nhttps://github.com/spring-projects/spring-batch/tags/3.0.0.M2\n\nI setup Eclipse/maven project and running mvn clean install (or test) is returning the following error:\n\nResults :\n\nFailed tests:   testPropertySubstitutionSimple(org.springframework.batch.core.jsr.configuration.xml.JobPropertySubstitutionTests): expected:<exitCode=COMPLETED;exitDescription=> but was:<exitCode=FAILED;exitDescription=>\n\nPossible fix:\n\nUpdate Unit test class: org.springframework.batch.core.jsr.configuration.xml.JobPropertySubstitutionTests\n\nChanging :\nassertEquals(\"/myfile2.txt\", processorProperty3);\n\nto\n\nString fileSeparator = \"\" + File.separatorChar;\t\t\t\t\nassertEquals(fileSeparator.concat(\"myfile2.txt\"), processorProperty3);\n\nfixed the build.\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/416033299f2267627d4cff604a3e41f071f708c9\n", "url": "https://github.com/spring-projects/spring-batch/issues/1462", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2013-11-03 03:11:01", "closed": "2013-11-19 21:19:32", "commits": {}, "ttf": 16.00027777777778, "commitsDetails": []}, {"title": "FDS [BATCH-2135]", "body": "**[SUDHENDU NAYAK](https://jira.spring.io/secure/ViewProfile.jspa?name=sudhendu)** opened **[BATCH-2135](https://jira.spring.io/browse/BATCH-2135?redirect=false)** and commented\n\n\n---\n\n**Affects:** 2.2.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/1461", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2013-11-04 10:15:16", "closed": "2013-11-27 08:00:38", "commits": {}, "ttf": 22.00027777777778, "commitsDetails": []}, {"title": "NPE with mvn test on samples for Spring-Batch 2.2.2.RELEASE [BATCH-2138]", "body": "**[Andrew White](https://jira.spring.io/secure/ViewProfile.jspa?name=aewhite)** opened **[BATCH-2138](https://jira.spring.io/browse/BATCH-2138?redirect=false)** and commented\n\nNothing fancy here...\n\n$ cd spring-batch-2.2.2.RELEASE/samples/spring-batch-samples\n$ mvn test\n\nTests in error:\ntestWrite(org.springframework.batch.sample.domain.trade.internal.JdbcTradeWriterTests): Error creating bean with name 'org.springframework.batch.sample.domain.trade.internal.JdbcTradeWriterTests': Injection of autowired dependencies failed; nested exception is java.lang.NullPointerException\n\nTests run: 137, Failures: 0, Errors: 1, Skipped: 1\n\n\n---\n\n**Affects:** 2.2.2\n", "url": "https://github.com/spring-projects/spring-batch/issues/1457", "user": "spring-issuemaster", "labels": ["in: test", "type: bug"], "created": "2013-11-07 07:39:46", "closed": "2013-11-07 08:39:39", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "onSkipInProcess is not called when commit-interval is greater than skip-limit [BATCH-2139]", "body": "**[Netanel Houri](https://jira.spring.io/secure/ViewProfile.jspa?name=netanel_houri)** opened **[BATCH-2139](https://jira.spring.io/browse/BATCH-2139?redirect=false)** and commented\n\nHi,\n\nonSkipInProcess method is not called on the last chunk if the skip-limit reached to the limit.\n\nFor example:\nI have this snippet of Job\n\n```xml\n<batch:job id=\"my_job\">\n   <batch:description></batch:description>\n   <batch:step id=\"step1\">\n      <batch:tasklet>\n         <batch:chunk reader=\"file-reader\" writer=\"my-writer\" commit-interval=\"3\" skip-limit=\"2\" processor=\"my-processor\">\n\t   <batch:skippable-exception-classes>\n\t        <batch:include class=\"java.lang.Exception\" />\n\t   </batch:skippable-exception-classes>\n\t</batch:chunk>\n      </batch:tasklet>\n   </batch:step>\n</batch:job>\n```\n\nLet's say that my 'file-reader' is reading from a file that contains 3 records, while 'my-processor' is throwing exception no matter which item it gets.\n\nThe result for this is that the Job will fail, but my onSkipInProcess method will not called for the first 2 skipped records, so I will not know all the problems I faced.\n\nPlease advice if this is a bug in the infrastructure.\n\nThank you\n\n\n---\nNo further details from [BATCH-2139](https://jira.spring.io/browse/BATCH-2139?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/1456", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2013-11-07 08:05:30", "closed": "2013-11-13 09:33:22", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "RepositoryItemReader reads the first page twice when used with partitions. [BATCH-2141]", "body": "**[Gary Crawford](https://jira.spring.io/secure/ViewProfile.jspa?name=gary555594)** opened **[BATCH-2141](https://jira.spring.io/browse/BATCH-2141?redirect=false)** and commented\n\norg.springframework.batch.item.data.RepositoryItemReader.jumpToItem() is called for each partition and initiates the processing of the first page by calling results = doPageRead(); but doesn't increment the page attribute which means that page 0 is processed twice. The fix is simply to have page++ after the call to doPageRead();\n\n\n---\n\n**Affects:** 3.0.0, 2.2.2\n\n**Reference URL:** https://github.com/spring-projects/spring-batch/pull/244\n", "url": "https://github.com/spring-projects/spring-batch/issues/1454", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2013-11-16 09:52:48", "closed": "2013-11-22 07:16:54", "commits": {}, "ttf": 5.000277777777778, "commitsDetails": []}, {"title": "JobParametersValidator.validate(JobParameters) method is invoked twice when a Job is started. [BATCH-2143]", "body": "**[Ying Hou](https://jira.spring.io/secure/ViewProfile.jspa?name=danielhou)** opened **[BATCH-2143](https://jira.spring.io/browse/BATCH-2143?redirect=false)** and commented\n\nSimpleJobLauncher.run(Job, JobParameters) method is used to start a Job, processes of this method can be shown:\n1) Validate parameters. job.getJobParametersValidator().validate(jobParameters);\n2) Create JobExecution. jobExecution = jobRepository.createJobExecution(job.getName(), jobParameters);\n3) Execute JobExecution. job.execute(jobExecution);\n   The first process is used to validate job parameters, a Job is started at the third process. The question is that jobParametersValidator.validate(execution.getJobParameters()) is invoked in the AbstractJob.execute(JobExecution) method. So JobParametersValidator.validate(JobParameters) method is invoked twice when a Job is started.\n\n\n\n---\n\n**Affects:** 2.2.2\n\n1 votes, 2 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1452", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-11-19 19:46:33", "closed": "2020-01-20 15:03:07", "commits": {}, "ttf": 2252.0002777777777, "commitsDetails": []}, {"title": "Cannot create db for MySQL [BATCH-2148]", "body": "**[Khanh Nguyen](https://jira.spring.io/secure/ViewProfile.jspa?name=ndkhanh1986)** opened **[BATCH-2148](https://jira.spring.io/browse/BATCH-2148?redirect=false)** and commented\n\nFile org/springframework/batch/core/schema-mysql.sql cannot be executed.\nError:\nSQL query:\n\nCREATE TABLE BATCH_STEP_EXECUTION_SEQ(\n\nID BIGINT NOT NULL ,\nUNIQUE_KEYCHAR( 1 ) NOT NULL CONSTRAINT UNIQUE_KEY_UN UNIQUE (\nUNIQUE_KEY\n)\n) ENGINE = MYISAM ;\n\nMySQL said: Documentation\n\n#1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)\n) ENGINE=MYISAM' at line 4\n\n\n---\n\n**Affects:** 2.2.3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/3f0c0cd45dc3bd517a528f436e3ca36d34da0a5c, https://github.com/spring-projects/spring-batch/commit/28ab61fa3f2e334d4658975fb0271371fc7969b8\n", "url": "https://github.com/spring-projects/spring-batch/issues/1447", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-11-24 18:03:25", "closed": "2013-12-27 10:40:01", "commits": {}, "ttf": 32.000277777777775, "commitsDetails": []}, {"title": "JavaConfig: Registering a ChunkListener twice will result in two ChunkListeners in fault-tolerant mode [BATCH-2149]", "body": "**[Tobias Flohre](https://jira.spring.io/secure/ViewProfile.jspa?name=tobias79)** opened **[BATCH-2149](https://jira.spring.io/browse/BATCH-2149?redirect=false)** and commented\n\nIn AbstractTaskletStepBuilder we have a Set of ChunkListeners, so adding a ChunkListener twice to a Step would result in one registration. Unfortunately, in the FaultTolerantStepBuilder the method for registering ChunkListener is overridden like this:\n\n```\n@Override\npublic FaultTolerantStepBuilder<I, O> listener(ChunkListener listener) {\n     super.listener(new TerminateOnExceptionChunkListenerDelegate(listener));\n     return this;\n}\n```\n\nSo every registration of a ChunkListener results in a different object, even if we register the same ChunkListener twice.\n\nSince [BATCH-2077](https://jira.spring.io/browse/BATCH-2077) was solved for 2.2.3 (for example) a StepExecutionListener that's also a ChunkListener would automatically be registered as a StepExecutionListener and a ChunkListener, so registering it as a ChunkListener in faulttolerant mode results in a double registration.\n\n\n---\nNo further details from [BATCH-2149](https://jira.spring.io/browse/BATCH-2149?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/1446", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2013-11-25 04:38:52", "closed": "2013-12-27 10:40:20", "commits": {}, "ttf": 32.000277777777775, "commitsDetails": []}, {"title": "Skip issues on restart [BATCH-2151]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2151](https://jira.spring.io/browse/BATCH-2151?redirect=false)** and commented\n\nSee attached test project\n\n\n---\n\n**Affects:** 2.2.3\n\n**Attachments:**\n- [BatchRecreate.zip](https://jira.spring.io/secure/attachment/21516/BatchRecreate.zip) (_80.75 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1444", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-11-27 09:43:15", "closed": "2013-12-27 10:40:40", "commits": {}, "ttf": 30.00027777777778, "commitsDetails": []}, {"title": "Provide more detailed error when checking version of schema [BATCH-2152]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2152](https://jira.spring.io/browse/BATCH-2152?redirect=false)** and commented\n\nThe current checking for a schema doesn't provide enough info on what version goes with what.\n\n\n---\n\n**Affects:** 3.0.0, 2.2.3\n", "url": "https://github.com/spring-projects/spring-batch/issues/1443", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2013-11-27 11:16:43", "closed": "2014-02-24 08:00:06", "commits": {}, "ttf": 88.00027777777778, "commitsDetails": []}, {"title": "StepSynchronizationManager uses static HashMap - NullPointerException with multiple Threads [BATCH-2153]", "body": "**[Philipp Kra\u00dfnitzer](https://jira.spring.io/secure/ViewProfile.jspa?name=philler@gmx.at)** opened **[BATCH-2153](https://jira.spring.io/browse/BATCH-2153?redirect=false)** and commented\n\norg.springframework.batch.core.scope.context.StepSynchronizationManager produces NullPointerException, because it uses static java.util.HashMap to increment and decrement variables for the current Thread, which is not threadsafe.\nSolution: Replacing java.util.HashMap with java.util.Hashtable (threadsafe) works for me.\n\nAlso see this build error https://build.springsource.org/browse/BATCH-TRUNK-JOB1-6375/test/case/62852213;jsessionid=59A64053379861A4C2328C879E4525EA with the same exception.\n\nFind attached a minimal maven project (start TestStepSynchronizationManagerMain to reproduce the NullPointerException) and a possible fix.\n\n\n---\n\n**Affects:** 3.0.0, 2.2.3, 2.2.4\n\n**Attachments:**\n- [StepSynchronizationManager.java.patch](https://jira.spring.io/secure/attachment/21521/StepSynchronizationManager.java.patch) (_1.19 kB_)\n- [TestStepSynchronizationManager.zip](https://jira.spring.io/secure/attachment/21520/TestStepSynchronizationManager.zip) (_2.72 kB_)\n\n5 votes, 5 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1442", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-11-28 05:35:33", "closed": "2014-02-21 12:09:36", "commits": {}, "ttf": 85.00027777777778, "commitsDetails": []}, {"title": "OraclePagingQueryProvider constructs invalid SQL queries [BATCH-2154]", "body": "**[Dariusz Nowak](https://jira.spring.io/secure/ViewProfile.jspa?name=dariusz.nowak)** opened **[BATCH-2154](https://jira.spring.io/browse/BATCH-2154?redirect=false)** and commented\n\nThe error shows up in Batch Admin 1.3.0.BUILD-SNAPSHOT. When navigating to next page on Executions tab the server responds with 500 error status and prints stacktrace below.\n\nThe problem is in the query:\n\n```\nSELECT E.JOB_EXECUTION_ID\nFROM\n  (SELECT E.JOB_EXECUTION_ID,\n    ROWNUM AS TMP_ROW_NUM\n  FROM\n    (SELECT E.JOB_EXECUTION_ID\n    FROM BATCH_JOB_EXECUTION E,\n      BATCH_JOB_INSTANCE I\n    WHERE E.JOB_INSTANCE_ID=I.JOB_INSTANCE_ID\n    ORDER BY E.JOB_EXECUTION_ID DESC\n    )\n  )\nWHERE TMP_ROW_NUM = 20\n```\n\n**E.** prefix with does not match to any source in outer selects.\n\n> org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.jdbc.BadSqlGrammarException: StatementCallback; bad SQL grammar [SELECT E.JOB_EXECUTION_ID FROM (SELECT E.JOB_EXECUTION_ID, ROWNUM as TMP_ROW_NUM FROM (SELECT E.JOB_EXECUTION_ID FROM BATCH_JOB_EXECUTION E, BATCH_JOB_INSTANCE I WHERE E.JOB_INSTANCE_ID=I.JOB_INSTANCE_ID ORDER BY E.JOB_EXECUTION_ID DESC)) WHERE TMP_ROW_NUM = 20]; nested exception is java.sql.SQLSyntaxErrorException: ORA-00904: \"E\".\"JOB_EXECUTION_ID\": invalid identifier\n> \n> org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:948)\n> org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:827)\n> javax.servlet.http.HttpServlet.service(HttpServlet.java:734)\n> org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:812)\n> javax.servlet.http.HttpServlet.service(HttpServlet.java:847)\n> org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)\n> org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n> org.springframework.web.filter.ShallowEtagHeaderFilter.doFilterInternal(ShallowEtagHeaderFilter.java:73)\n> org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n> \n> root cause\n> \n> org.springframework.jdbc.BadSqlGrammarException: StatementCallback; bad SQL grammar [SELECT E.JOB_EXECUTION_ID FROM (SELECT E.JOB_EXECUTION_ID, ROWNUM as TMP_ROW_NUM FROM (SELECT E.JOB_EXECUTION_ID FROM BATCH_JOB_EXECUTION E, BATCH_JOB_INSTANCE I WHERE E.JOB_INSTANCE_ID=I.JOB_INSTANCE_ID ORDER BY E.JOB_EXECUTION_ID DESC)) WHERE TMP_ROW_NUM = 20]; nested exception is java.sql.SQLSyntaxErrorException: ORA-00904: \"E\".\"JOB_EXECUTION_ID\": invalid identifier\n> \n> org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:237)\n> org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)\n> org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:407)\n> org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:456)\n> org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:464)\n> org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:472)\n> org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:477)\n> org.springframework.batch.admin.service.JdbcSearchableJobExecutionDao.getJobExecutions(JdbcSearchableJobExecutionDao.java:195)\n> org.springframework.batch.admin.service.SimpleJobService.listJobExecutions(SimpleJobService.java:241)\n> org.springframework.batch.admin.web.JobExecutionController.list(JobExecutionController.java:161)\n> sun.reflect.GeneratedMethodAccessor453.invoke(Unknown Source)\n> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n> java.lang.reflect.Method.invoke(Method.java:606)\n> org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:219)\n> org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132)\n> org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)\n> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:745)\n> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:686)\n> org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80)\n> org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925)\n> org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856)\n> org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:936)\n> org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:827)\n> javax.servlet.http.HttpServlet.service(HttpServlet.java:734)\n> org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:812)\n> javax.servlet.http.HttpServlet.service(HttpServlet.java:847)\n> org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)\n> org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n> org.springframework.web.filter.ShallowEtagHeaderFilter.doFilterInternal(ShallowEtagHeaderFilter.java:73)\n> org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n> \n> root cause\n> \n> java.sql.SQLSyntaxErrorException: ORA-00904: \"E\".\"JOB_EXECUTION_ID\": invalid identifier\n> \n> oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:440)\n> oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:396)\n> oracle.jdbc.driver.T4C8Oall.processError(T4C8Oall.java:837)\n> oracle.jdbc.driver.T4CTTIfun.receive(T4CTTIfun.java:445)\n> oracle.jdbc.driver.T4CTTIfun.doRPC(T4CTTIfun.java:191)\n> oracle.jdbc.driver.T4C8Oall.doOALL(T4C8Oall.java:523)\n> oracle.jdbc.driver.T4CStatement.doOall8(T4CStatement.java:193)\n> oracle.jdbc.driver.T4CStatement.executeForDescribe(T4CStatement.java:852)\n> oracle.jdbc.driver.OracleStatement.executeMaybeDescribe(OracleStatement.java:1153)\n> oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:1275)\n> oracle.jdbc.driver.OracleStatement.executeQuery(OracleStatement.java:1477)\n> oracle.jdbc.driver.OracleStatementWrapper.executeQuery(OracleStatementWrapper.java:392)\n> org.jboss.jca.adapters.jdbc.WrappedStatement.executeQuery(WrappedStatement.java:344)\n> org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback.doInStatement(JdbcTemplate.java:441)\n> org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:396)\n> org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:456)\n> org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:464)\n> org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:472)\n> org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:477)\n> org.springframework.batch.admin.service.JdbcSearchableJobExecutionDao.getJobExecutions(JdbcSearchableJobExecutionDao.java:195)\n> org.springframework.batch.admin.service.SimpleJobService.listJobExecutions(SimpleJobService.java:241)\n> org.springframework.batch.admin.web.JobExecutionController.list(JobExecutionController.java:161)\n> sun.reflect.GeneratedMethodAccessor453.invoke(Unknown Source)\n> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n> java.lang.reflect.Method.invoke(Method.java:606)\n> org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:219)\n> org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132)\n> org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)\n> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:745)\n> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:686)\n> org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80)\n> org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925)\n> org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856)\n> org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:936)\n> org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:827)\n> javax.servlet.http.HttpServlet.service(HttpServlet.java:734)\n> org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:812)\n> javax.servlet.http.HttpServlet.service(HttpServlet.java:847)\n> org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)\n> org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n> org.springframework.web.filter.ShallowEtagHeaderFilter.doFilterInternal(ShallowEtagHeaderFilter.java:73)\n> org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\n\n\n---\n\n**Affects:** 2.2.3, 2.2.4\n\n1 votes, 3 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1441", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2013-12-03 07:15:36", "closed": "2014-05-07 14:58:34", "commits": {}, "ttf": 155.00027777777777, "commitsDetails": []}, {"title": "deserialization issue [BATCH-2155]", "body": "**[AE](https://jira.spring.io/secure/ViewProfile.jspa?name=exto)** opened **[BATCH-2155](https://jira.spring.io/browse/BATCH-2155?redirect=false)** and commented\n\nWhile testing https://jira.springsource.org/browse/BATCHADM-179 was getting deserialization errors, created pull request for fix https://github.com/spring-projects/spring-batch/pull/256, could you please accept it\n\n\n---\n\n0 votes, 6 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1440", "user": "spring-issuemaster", "labels": ["status: invalid", "type: bug"], "created": "2013-12-14 19:13:22", "closed": "2014-07-01 01:59:25", "commits": {}, "ttf": 198.00027777777777, "commitsDetails": []}, {"title": "ConcurrencyFailureException when multithreaded tasklet updates %PREFIX%STEP_EXECUTION_CONTEXT table [BATCH-2156]", "body": "**[ak](https://jira.spring.io/secure/ViewProfile.jspa?name=ayeshaaq)** opened **[BATCH-2156](https://jira.spring.io/browse/BATCH-2156?redirect=false)** and commented\n\nNeed to synchronize the stepExecution in org.springframework.batch.core.repository.dao.JdbcExecutionContextDao in the method updateExecutionContext(final StepExecution stepExecution), in order to prevent concurrency failures if two threads are trying to update the same step execution context record. It appears this is already done in JdbcStepExecutionDao.updateStepExecution at line 162:\n// Attempt to prevent concurrent modification errors by blocking here if\n// someone is already trying to do it.\nsynchronized (stepExecution) {\n\nThe error we are getting when our multithreaded tasklet is processing is:\n\n\"org.springframework.batch.core.step.FatalStepExecutionException: JobRepository failure forcing exit with unknown status\nat org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:441)\nat org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:131)\nat org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:264)\nat org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:76)\nat org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:258)\nat java.lang.Thread.run(Thread.java:679)\nCaused by: org.springframework.dao.ConcurrencyFailureException: PreparedStatementCallback; SQL [UPDATE BATCH_STEP_EXECUTION_CONTEXT SET SHORT_CONTEXT = ?, SERIALIZED_CONTEXT = ? WHERE STEP_EXECUTION_ID = ?]; [Teradata Database] [TeraJDBC 14.00.00.37] [Error 2631] [SQLState 40001] Transaction ABORTed due to deadlock.; nested exception is com.teradata.jdbc.jdbc_4.util.JDBCException: [Teradata Database] [TeraJDBC 14.00.00.37] [Error 2631] [SQLState 40001] Transaction ABORTed due to deadlock.\nat org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:110)\nat org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)\nat org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80)\nat org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80)\nat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:605)\nat org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:818)\nat org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:874)\nat org.springframework.batch.core.repository.dao.JdbcExecutionContextDao.persistSerializedContext(JdbcExecutionContextDao.java:193)\nat org.springframework.batch.core.repository.dao.JdbcExecutionContextDao.updateExecutionContext(JdbcExecutionContextDao.java:136)\nat org.springframework.batch.core.repository.support.SimpleJobRepository.updateExecutionContext(SimpleJobRepository.java:184)\nat sun.reflect.GeneratedMethodAccessor381.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccesso\"\n\n\n\n---\n\n**Affects:** 2.1.9\n\n1 votes, 3 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1439", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2013-12-16 11:53:42", "closed": "2014-06-13 12:07:14", "commits": {}, "ttf": 179.00027777777777, "commitsDetails": []}, {"title": "Shouldn't be illegal to access field 'serialVersionUID' [BATCH-2157]", "body": "**[Weldon Sams](https://jira.spring.io/secure/ViewProfile.jspa?name=wjsams)** opened **[BATCH-2157](https://jira.spring.io/browse/BATCH-2157?redirect=false)** and commented\n\nA project I'm working on is using Spring Batch and up until this exception below occurred we were using the following job repository bean.\n\n```\n<bean id=\"jobRepository\" class=\"org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean\">\n```\n\nIt was suggested on the referenced stackoverflow page to use the jdbc version and so far we haven't seen this issue. Now using this bean.\n\n```\n<bean id=\"jobRepository\" class=\"org.springframework.batch.core.repository.support.JobRepositoryFactoryBean\">\n    <property name=\"dataSource\" ref=\"dataSource\" />\n    <property name=\"transactionManager\" ref=\"transactionManager\" />\n    <!-- This is required for JPA - cannot change isolation level. -->\n    <property name=\"isolationLevelForCreate\" value=\"ISOLATION_DEFAULT\"/>\n</bean>\n```\n\nHere's the stack trace we were seeing, but I have not been able to duplicate it in unit or integration tests. We're still using the in memory version for tests.\n\n```\n10:44:15,096 ERROR AbstractJob,pool-15-thread-1:326 - Encountered fatal error executing job\norg.springframework.batch.core.JobExecutionException: Flow execution ended unexpectedly\n        at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:141)\n        at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:301)\n        at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:134)\n        at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)\n        at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:127)\n        at com.example.batch.RunScheduler.run(RunScheduler.java:62)\n        at sun.reflect.GeneratedMethodAccessor139.invoke(Unknown Source)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:606)\n        at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:64)\n        at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:53)\n        at org.springframework.scheduling.concurrent.ReschedulingRunnable.run(ReschedulingRunnable.java:81)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n        at java.util.concurrent.FutureTask.run(FutureTask.java:262)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:744)\nCaused by: org.springframework.batch.core.job.flow.FlowExecutionException: Ended flow=sourceJob at state=sourceJob.sourceStep1 with exception\n        at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:161)\n        at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:131)\n        at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:135)\n        ... 18 more\nCaused by: java.lang.IllegalStateException: Shouldn't be illegal to access field 'serialVersionUID': java.lang.IllegalAccessException: Can not set static final long field org.springframework.batch.core.StepExecution.serialVersionUID to java.lang.Long\n        at org.springframework.util.ReflectionUtils.doWithFields(ReflectionUtils.java:573)\n        at org.springframework.util.ReflectionUtils.doWithFields(ReflectionUtils.java:547)\n        at org.springframework.batch.core.repository.dao.MapStepExecutionDao.copy(MapStepExecutionDao.java:59)\n        at org.springframework.batch.core.repository.dao.MapStepExecutionDao.updateStepExecution(MapStepExecutionDao.java:109)\n        at org.springframework.batch.core.repository.support.SimpleJobRepository.update(SimpleJobRepository.java:189)\n        at sun.reflect.GeneratedMethodAccessor144.invoke(Unknown Source)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:606)\n        at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317)\n        at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)\n        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)\n        at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:96)\n        at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:260)\n        at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:94)\n        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)\n        at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204)\n        at com.sun.proxy.$Proxy61.update(Unknown Source)\n        at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:183)\n        at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:137)\n        at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:64)\n        at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:60)\n        at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:152)\n        ... 20 more\n```\n\nFeel free to message me for other details.\n\n\n---\n\n**Affects:** 2.2.3\n\n**Reference URL:** http://stackoverflow.com/questions/20527190/spring-batch-2-2-3-exception-shouldnt-be-illegal-to-access-field-serialversi\n\n5 votes, 8 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1438", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2013-12-19 12:05:24", "closed": "2020-01-20 15:37:35", "commits": {}, "ttf": 2223.0002777777777, "commitsDetails": []}, {"title": "Spring Batch doesn't support Sybase IQ when using MapJobRepositoryFactoryBean [BATCH-2158]", "body": "**[GSN](https://jira.spring.io/secure/ViewProfile.jspa?name=gsndev)** opened **[BATCH-2158](https://jira.spring.io/browse/BATCH-2158?redirect=false)** and commented\n\nJdbcUtils.commonDatabaseName(source) returns \"Sybase\" as the database name for only the following values from metadata\n\nSybase SQL Server\nAdaptive Server Enterprise\nASE\nsql server\n\nHowever the value \"Sybase IQ\" isn't considered in the above list. As a result, an exception is thrown when using MapJobRepositoryFactoryBean and Sybase IQ.\n\njava.lang.IllegalArgumentException: DatabaseType not found for product name: [Sybase IQ]\n\nAn alternative approach is suggested by Michael Minella to use JobRepositoryFactoryBean and explicitly setting the database type. However this needs creation of the needed metadata tables.\n\nThere is an open JIRA (https://jira.springsource.org/browse/BATCH-1611) with likely the same issue, but no information or activity.\n\nPlease change the priority/labels as necessary.\n\n\n---\n\n**Affects:** 2.2.0.RC1, 2.2.0.RC2\n\n**Reference URL:** http://stackoverflow.com/questions/20339278/spring-batch-using-sybase-iq-data-source\n", "url": "https://github.com/spring-projects/spring-batch/issues/1437", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2014-01-06 11:31:15", "closed": "2014-03-06 11:03:30", "commits": {}, "ttf": 58.000277777777775, "commitsDetails": []}, {"title": "SQL errors on second execution [BATCH-2159]", "body": "**[Abhay](https://jira.spring.io/secure/ViewProfile.jspa?name=abhayp)** opened **[BATCH-2159](https://jira.spring.io/browse/BATCH-2159?redirect=false)** and commented\n\nDuring second second run of Spring batch error is reported as schema-mysql.sql gets during every run, but schema-drop-mysql.sql does not get executed.\n\nPlease refer http://stackoverflow.com/questions/20417875/spring-boot-configuration-for-suppressing-batchdatainitializer and https://github.com/spring-projects/spring-boot/issues/149 for more details.\n\nAs discussed in Spring Boot issue with Michael, alternative have been added in 2.2.4.BUILD-SNAPSHOT. However there was another alternative to change insert queries as detailed below:\n\nINSERT INTO BATCH_JOB_SEQ (ID)\nselect * from (select 0) as tmp where not exists(select * from BATCH_JOB_SEQ);\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/b8238908df32d4f062204f5f1b07ddb2ea082739, https://github.com/spring-projects/spring-batch/commit/8e49ec6f1dc5cc2c2c5923918425d51090b46472\n", "url": "https://github.com/spring-projects/spring-batch/issues/1436", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2014-01-06 19:43:12", "closed": "2014-10-17 09:33:04", "commits": {}, "ttf": 283.0002777777778, "commitsDetails": []}, {"title": "Documentation about LineMappers refers to methods not on the interface in the examples [BATCH-2164]", "body": "**[Paul Newport](https://jira.spring.io/secure/ViewProfile.jspa?name=paulnuk)** opened **[BATCH-2164](https://jira.spring.io/browse/BATCH-2164?redirect=false)** and commented\n\nThe documentation has example code on how to use LineMappers. This code is incorrect as the LineMapper interface does not have the methods setLineTokenizer or setFieldMapper. The line:\n\n```\nLineMapper<Player> lineMapper = new DefaultLineMapper<Player>();\n```\n\nshould read\n\n```\nDefaultLineMapper<Player> lineMapper = new DefaultLineMapper<Player>();\n```\n\nFull snippet here:\n\n```\nFlatFileItemReader<Player> itemReader = new FlatFileItemReader<Player>();\nitemReader.setResource(new FileSystemResource(\"resources/players.csv\"));\n//DelimitedLineTokenizer defaults to comma as its delimiter\nLineMapper<Player> lineMapper = new DefaultLineMapper<Player>();\nlineMapper.setLineTokenizer(new DelimitedLineTokenizer());\nlineMapper.setFieldSetMapper(new PlayerFieldSetMapper());\nitemReader.setLineMapper(lineMapper);\nitemReader.open(new ExecutionContext());\nPlayer player = itemReader.read();\n```\n\n\n\n---\n\n**Affects:** 2.2.1\n\n**Reference URL:** http://docs.spring.io/spring-batch/reference/html/readersAndWriters.html\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/38fa0895aba56461d71a2d55b28d2628a73db0ea, https://github.com/spring-projects/spring-batch/commit/442376899d1cb860189660dde1ce0c0a1682570a\n", "url": "https://github.com/spring-projects/spring-batch/issues/1432", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2014-01-14 04:05:53", "closed": "2015-11-20 22:35:16", "commits": {}, "ttf": 675.0002777777778, "commitsDetails": []}, {"title": "@BeforeStep doesn't work when using @StepScope [BATCH-2169]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2169](https://jira.spring.io/browse/BATCH-2169?redirect=false)** and commented\n\n\n---\n\n**Reference URL:** http://stackoverflow.com/questions/21241683/spring-batch-beforestep-does-not-work-with-stepscope\n\n2 votes, 4 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1428", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-01-21 07:22:13", "closed": "2014-11-20 20:13:32", "commits": {}, "ttf": 303.0002777777778, "commitsDetails": []}, {"title": "DefaultJobParametersConverter#getProperties ignores NON_IDENTIFYING_FLAG [BATCH-2179]", "body": "**[Gunnar Hillert](https://jira.spring.io/secure/ViewProfile.jspa?name=hillert)** opened **[BATCH-2179](https://jira.spring.io/browse/BATCH-2179?redirect=false)** and commented\n\nWhen converting non-identifying JobParameters using\n**DefaultJobParametersConverter#getProperties(JobParameters params)** the **NON_IDENTIFYING_FLAG** is not prepended to the resulting property name.\n\n\n---\n\n**Affects:** 2.2.4\n\n**Issue Links:**\n- [XD-1331](https://jira.spring.io/browse/XD-1331) Make Batch Job Restarts Work using Single Node\n (_**\"is depended on by\"**_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/3510285c8ba4b38bd4d93602ce6708ed4e015cce\n", "url": "https://github.com/spring-projects/spring-batch/issues/1420", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-02-18 09:09:38", "closed": "2014-02-20 14:26:59", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "Implementation of ExecutionContextSerializer breaks on Postgresql [BATCH-2183]", "body": "**[Glenn Lingle](https://jira.spring.io/secure/ViewProfile.jspa?name=glingle05)** opened **[BATCH-2183](https://jira.spring.io/browse/BATCH-2183?redirect=false)** and commented\n\nThis is related to https://jira.springsource.org/browse/BATCH-2057 but goes further.\n\nI've been running SB (<= version 2.1.8) with SB Admin for over a year on a Postgresql database.\nNow with upgrade to 2.2.4 or 3.0.0.M2, it seems I can't.\n\nThe serialization of job and step exec contexts breaks on Postgres.\nThis is because Postgres uses UTF-8 to store text and CANNOT store a null character '\\0'.\nEven if I build a LATIN1/en_US.ISO8559-1 database from scratch, the underlying storage\nof TEXT and VARCHAR is in UTF-8.  The real problem is that you are serializing an object\nwhich can contain '\\0' bytes into a TEXT field.\n\nI've made this a BLOCKER because it blocks me from upgrading to 2.2.4, and also\nto get your attention.\n\nQuestions:\n1. I've had actually run jobs with this failure in place.  How much of a problem is it to not have exec contexts stored in the database?  How critical is it that the exec context is missing in the DB?\n2. Looking in the 2.2.4 and 3.0.0 Ref Docs, I see no mention of using a different configuration for Postgresql DB.  Is there a configuration I should use?  Is there a workaround?\n3. I'm curious as to why there wasn't just a conversion to string of hex chars of the byte array.  This would have been guaranteed to work no matter what.\n\nThanks for your attention to this!\n\n\n---\n\n**Affects:** 2.1.9, 3.0.0, 2.2.4\n", "url": "https://github.com/spring-projects/spring-batch/issues/1416", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2014-02-21 13:09:28", "closed": "2014-07-06 22:17:34", "commits": {}, "ttf": 135.00027777777777, "commitsDetails": []}, {"title": "Adding a skip-limit or a skip-policy to a chunk invalidates any custom completion policy [BATCH-2184]", "body": "**[David Berkman](https://jira.spring.io/secure/ViewProfile.jspa?name=david.berkman)** opened **[BATCH-2184](https://jira.spring.io/browse/BATCH-2184?redirect=false)** and commented\n\nAdding a skip-limit or a skip-policy to a chunk invalidates any custom completion policy. Looks like a reversion to a bug from 2.2 ([BATCH-2096](https://jira.spring.io/browse/BATCH-2096)).\n\nEasy to test. Add a custom completion policy as chunk-completion-policy, with no skip limit or skip policy set. See that it gets called. Add a skip limit or skip policy. See that your custom completion policy is no longer called.\n\n\n---\n\n**Affects:** 3.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/1415", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-02-22 02:10:43", "closed": "2014-02-27 13:15:59", "commits": {}, "ttf": 5.000277777777778, "commitsDetails": []}, {"title": "Backport BATCH-2045 to 2.2.x  branch [BATCH-2186]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2186](https://jira.spring.io/browse/BATCH-2186?redirect=false)** and commented\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/c066bc616ebc9433dd4db7bf221c323f809c5470\n", "url": "https://github.com/spring-projects/spring-batch/issues/1413", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-02-28 11:52:04", "closed": "2014-03-10 14:19:47", "commits": {}, "ttf": 10.000277777777777, "commitsDetails": []}, {"title": "DefaultBatchConfigurer violates PostConstruct rules [BATCH-2189]", "body": "**[Colin McQueen](https://jira.spring.io/secure/ViewProfile.jspa?name=colinmc)** opened **[BATCH-2189](https://jira.spring.io/browse/BATCH-2189?redirect=false)** and commented\n\nWhen trying to deploy a Spring Batch project in a web container it fails to deploy due to DefaultBatchConfigurer violating the `@PostConstruct` annotation rule.\n\nhttp://docs.oracle.com/javaee/5/api/javax/annotation/PostConstruct.html\n\nThe DefaultBatchConfigurer can't throw a checked exception in the initialize method. My suggestion would be to catch whatever exception is being thrown and wrap it in a run time exception.\n\n\n---\n\n**Affects:** 2.2.5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/3a2cac3d49824012d3bdddcebd8b43422273575b, https://github.com/spring-projects/spring-batch/commit/b0e1f30a576950aabe0b600a7b91e79abfa1fc31\n", "url": "https://github.com/spring-projects/spring-batch/issues/1410", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2014-03-17 04:44:57", "closed": "2014-03-18 12:23:33", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Spring batch fails to autodetect database type DB2ZOS [BATCH-2172]", "body": "**[Morten Knudsen](https://jira.spring.io/secure/ViewProfile.jspa?name=mortenk)** opened **[BATCH-2172](https://jira.spring.io/browse/BATCH-2172?redirect=false)** and commented\n\nThe auto-detection code in DatabaseType.fromMetaData() stopped working when we switched from jdbc driver versjon 3.64.111 to 3.65.102.\nWhile the older jdbc driver getDatabaseProductName() returns \"DB2\", the new one returns \"DB2 for DB2 UDB for z/OS\". getDatabaseProductVersion() returns \"DSN10015\" in both cases.\n\nSuggestion: use startsWith() instead of equals()\n\n\n---\n\n**Affects:** 2.1.8\n\n**Attachments:**\n- [BATCH-2172.patch](https://jira.spring.io/secure/attachment/21665/BATCH-2172.patch) (_1002 bytes_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/a49d591d12c7ddb06b018d148c76fb146452796d, https://github.com/spring-projects/spring-batch/commit/9b925c2e84485368e293e6dee48972c9949c67de\n\n1 votes, 3 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1407", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2014-02-10 05:00:56", "closed": "2014-04-10 14:58:41", "commits": {}, "ttf": 59.000277777777775, "commitsDetails": []}, {"title": "Spring Boot MapJobRepositoryFactoryBean [BATCH-2200]", "body": "**[Michael Hegner](https://jira.spring.io/secure/ViewProfile.jspa?name=wolfmoonheart)** opened **[BATCH-2200](https://jira.spring.io/browse/BATCH-2200?redirect=false)** and commented\n\nUntil Spring Boot 0.5.0 following worked:\n\nBatchConfig:\n\n```\n@Configuration\n@EnableBatchProcessing\n@EnableAutoConfiguration\n@Import(InfrastructureConfiguration.class)\npublic class BatchConfiguration extends DefaultBatchConfigurer {\n@Override\nprotected JobRepository createJobRepository() throws Exception {\n  MapJobRepositoryFactoryBean factory = new MapJobRepositoryFactoryBean();\n\n  try {\n    factory.afterPropertiesSet();\n    return (JobRepository) factory.getObject();\n  } catch (Exception e) {\n    throw new IllegalStateException(\"Cannot set MapJobRepositoryFactoryBean: \", e);\n  }\n\n}\n}\n```\n\nBut when upgrade Spring Boot to 1.0.0, then the in memory repository seems not to work anymore. When starting application, spring batch throws error, cos it tries to find meta data tables.\n\n```\nCaused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [SELECT JOB_INSTANCE_ID, JOB_NAME from BATCH_JOB_INSTANCE where JOB_NAME = ? order by JOB_INSTANCE_ID desc]; nested exception is java.sql.SQLSyntaxErrorException: ORA-00942: Tabelle oder View nicht vorhanden\n```\n\nMy application.properties:\n\n```\nspring.batch.initializer.enabled=false\n```\n\nIs there something changed I need to recognize, I didn't find any hints in google.\n\nWith Spring Boot 0.5.0 everything works as expected, something must be changed after that version.\n\n\n---\n\n**Affects:** 2.2.5\n", "url": "https://github.com/spring-projects/spring-batch/issues/1400", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-03-24 06:14:13", "closed": "2014-11-19 14:29:58", "commits": {}, "ttf": 240.00027777777777, "commitsDetails": []}, {"title": "transactional reader does not work since 2.2 [BATCH-2204]", "body": "**[naudin](https://jira.spring.io/secure/ViewProfile.jspa?name=tophe)** opened **[BATCH-2204](https://jira.spring.io/browse/BATCH-2204?redirect=false)** and commented\n\nHello,\nIt seems that the property \"reader-transactional-queue\" on a chunk does not work since 2.2.\nThe value of the property is not set to FaultTolerantStepBuilder and then the property is ignored.\nThen when the chunk is in skipping process the items are not re-read if the property is setting to \"true\".\nAdding the line code:\n\nif (readerTransactionalQueue!=null && readerTransactionalQueue==true) {\nbuilder.readerIsTransactionalQueue();\n}\n\nin the method  createFaultTolerantStep() of org.springframework.batch.core.configuration.xml.StepParserStepFactoryBean fixes the problem. (see the attachement)\n\n\n---\n\n**Affects:** 2.2.0.RC1\n\n**Attachments:**\n- [StepParserStepFactoryBean.java](https://jira.spring.io/secure/attachment/21907/StepParserStepFactoryBean.java) (_30.98 kB_)\n- [transactionalReader-JIRA-BATCH-2204.zip](https://jira.spring.io/secure/attachment/21941/transactionalReader-JIRA-BATCH-2204.zip) (_46.72 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/0a58fdf84f62d42ba66830e1d7581aebce735d58, https://github.com/spring-projects/spring-batch/commit/19618f48f9d9e2132e57c66bbffecd3ec2d5ab17\n\n1 votes, 3 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1396", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-04-01 06:19:50", "closed": "2014-04-15 01:31:55", "commits": {}, "ttf": 13.000277777777777, "commitsDetails": []}, {"title": "MethodInvokingTaskletAdaper does not support primitive arguments [BATCH-2205]", "body": "**[David Geary](https://jira.spring.io/secure/ViewProfile.jspa?name=david_geary)** opened **[BATCH-2205](https://jira.spring.io/browse/BATCH-2205?redirect=false)** and commented\n\nThe argument check in MethodInvokingTaskletAdapter fails for primitive paramters. Eg: I have a method that takes a single double primitive parameter. When I set the arguments property on the bean it takes an Object[] so it will be a Double object that is passed here. This causes an error when Spring creates the bean as it checks the types of arguments against the type of parameters, but double is not assignable from Double. If I extend the class and override afterPropertiesSet to remove the check it all works as expected.\n\n\n---\n\n**Affects:** 2.2.5\n\n**Reference URL:** http://forum.spring.io/forum/spring-projects/batch/746077-methodinvokingtaskletadapter-with-primitive-arguments\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/834d8ee6277736bffa20166c5ce1ff0e82cc9ccb, https://github.com/spring-projects/spring-batch/commit/6a4343f465e486d42cc638ab234ee4bff5abb6e9\n", "url": "https://github.com/spring-projects/spring-batch/issues/1395", "user": "spring-issuemaster", "labels": ["in: core", "in: infrastructure", "type: bug"], "created": "2014-04-07 01:58:37", "closed": "2015-05-18 14:24:05", "commits": {}, "ttf": 406.0002777777778, "commitsDetails": []}, {"title": "MongoItemReader needs property to set collection [BATCH-2206]", "body": "**[David Geary](https://jira.spring.io/secure/ViewProfile.jspa?name=david_geary)** opened **[BATCH-2206](https://jira.spring.io/browse/BATCH-2206?redirect=false)** and commented\n\nThe MongoItemReader needs the ability to set the collection explicitly. This can't be done through the query and from the look of the current code it is relying on the type to determine the collection. This will only work if the mongo data contains the \"_class\u201d column - ie the data was created through spring originally.\n\nIn our case we need to read all records as raw JSON and process that. The data does not contain the \"_class\u201d (and this would not work anyway as we want to read as string).\n\nWe want to set query=\"{ }\" and targetType=\"java.lang.String\"\n\nTo get this to work I have had to create a copy of the MongoItemReader, add a collection property and modify the line\n\n```\nreturn (Iterator<T>) template.find(mongoQuery, type).iterator(); \n```\n\nto\n\n```\nreturn (Iterator<T>) template.find(mongoQuery, type, collection).iterator();\n```\n\nThis then allows us to set the desired collection on the bean and then everything works correctly.\n\n\n---\n\n**Affects:** 2.2.5\n\n**Reference URL:** http://forum.spring.io/forum/spring-projects/batch/129266-setting-collection-on-mongoitemreader\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/3a624870e05d2d52af5a92fe59261d1f5c25b2d8, https://github.com/spring-projects/spring-batch/commit/ca8087dfc6c4a7914f115d4fcfdbfdfc78355e0d\n", "url": "https://github.com/spring-projects/spring-batch/issues/1394", "user": "spring-issuemaster", "labels": ["in: core", "in: infrastructure", "type: bug"], "created": "2014-04-07 03:21:46", "closed": "2014-05-21 19:36:04", "commits": {}, "ttf": 44.000277777777775, "commitsDetails": []}, {"title": "Unable to create sybase schema: Error is -> Can't find type 'BIGINT' [BATCH-2207]", "body": "**[Rajesh Gheware](https://jira.spring.io/secure/ViewProfile.jspa?name=rajeshgheware)** opened **[BATCH-2207](https://jira.spring.io/browse/BATCH-2207?redirect=false)** and commented\n\nError encountered when running the sample/simple job.  Below is the error\n\n[INFO] --- exec-maven-plugin:1.1:java (default-cli) @ doc-migration ---\n2014-04-08 14:51:09,055 INFO [org.springframework.context.support.ClassPathXmlApplicationContext] - <Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@27cb01e3: startup date [Tue Apr 08 14:51:09 IST 2014]; root of context hierarchy>\n2014-04-08 14:51:09,209 INFO [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] - <Loading XML bean definitions from class path resource [launch-context.xml]>\n2014-04-08 14:51:09,559 INFO [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] - <Loading XML bean definitions from class path resource [META-INF/spring/module-context.xml]>\n2014-04-08 14:51:09,698 INFO [org.springframework.beans.factory.support.DefaultListableBeanFactory] - <Overriding bean definition for bean 'job1': replacing [Generic bean: class [org.springframework.batch.core.configuration.xml.SimpleFlowFactoryBean]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] with [Generic bean: class [org.springframework.batch.core.configuration.xml.JobParserJobFactoryBean]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null]>\n2014-04-08 14:51:09,864 INFO [org.springframework.beans.factory.config.PropertyPlaceholderConfigurer] - <Loading properties file from class path resource [batch.properties]>\n2014-04-08 14:51:09,891 INFO [org.springframework.context.support.ClassPathXmlApplicationContext] - <Bean 'jobRegistry' of type [class org.springframework.batch.core.configuration.support.MapJobRegistry] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)>\n2014-04-08 14:51:09,898 INFO [org.springframework.beans.factory.support.DefaultListableBeanFactory] - <Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@41f2e41d: defining beans [org.springframework.beans.factory.config.PropertyPlaceholderConfigurer#0,reader,writer,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.jdbc.datasource.init.DataSourceInitializer#0,org.springframework.batch.core.scope.internalStepScope,org.springframework.beans.factory.config.CustomEditorConfigurer,org.springframework.batch.core.configuration.xml.CoreNamespacePostProcessor,sample_step,job1,jobOperator,jobExplorer,jobRegistry,org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor#0,jobLauncher,jobRepository,transactionManager,dataSource]; root of factory hierarchy>\n2014-04-08 14:51:09,920 INFO [com.mchange.v2.log.MLog] - \\<MLog clients using log4j logging.>\n2014-04-08 14:51:09,996 INFO [com.mchange.v2.c3p0.C3P0Registry] - <Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]>\n2014-04-08 14:51:10,165 INFO [com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource] - <Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 5, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 2yph7791hxokl1dp7t42|7d9ab9c5, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.sybase.jdbc3.jdbc.SybDriver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 2yph7791hxokl1dp7t42|7d9ab9c5, idleConnectionTestPeriod -> 0, initialPoolSize -> 3, jdbcUrl -> jdbc:sybase:Tds:localhost:5000, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 5000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 1, maxStatements -> 0, maxStatementsPerConnection -> 50, minPoolSize -> 1, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]>\n2014-04-08 14:51:11,612 INFO [org.springframework.jdbc.datasource.init.ResourceDatabasePopulator] - <Executing SQL script from class path resource [org/springframework/batch/core/schema-sybase.sql]>\n2014-04-08 14:51:12,106 INFO [org.springframework.beans.factory.support.DefaultListableBeanFactory] - <Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@41f2e41d: defining beans [org.springframework.beans.factory.config.PropertyPlaceholderConfigurer#0,reader,writer,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.jdbc.datasource.init.DataSourceInitializer#0,org.springframework.batch.core.scope.internalStepScope,org.springframework.beans.factory.config.CustomEditorConfigurer,org.springframework.batch.core.configuration.xml.CoreNamespacePostProcessor,sample_step,job1,jobOperator,jobExplorer,jobRegistry,org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor#0,jobLauncher,jobRepository,transactionManager,dataSource]; root of factory hierarchy>\n2014-04-08 14:51:12,110 ERROR [org.springframework.batch.core.launch.support.CommandLineJobRunner] - <Job Terminated in error: Error creating bean with name 'org.springframework.jdbc.datasource.init.DataSourceInitializer#0': Invocation of init method failed; nested exception is org.springframework.dao.DataAccessResourceFailureException: Failed to populate database; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement at line 1 of resource class path resource [org/springframework/batch/core/schema-sybase.sql]: CREATE TABLE BATCH_JOB_INSTANCE  (  JOB_INSTANCE_ID BIGINT  NOT NULL PRIMARY KEY ,  VERSION BIGINT NULL,  JOB_NAME VARCHAR(100) NOT NULL,  JOB_KEY VARCHAR(32) NOT NULL,  constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY) ) >\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.jdbc.datasource.init.DataSourceInitializer#0': Invocation of init method failed; nested exception is org.springframework.dao.DataAccessResourceFailureException: Failed to populate database; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement at line 1 of resource class path resource [org/springframework/batch/core/schema-sybase.sql]: CREATE TABLE BATCH_JOB_INSTANCE  (  JOB_INSTANCE_ID BIGINT  NOT NULL PRIMARY KEY ,  VERSION BIGINT NULL,  JOB_NAME VARCHAR(100) NOT NULL,  JOB_KEY VARCHAR(32) NOT NULL,  constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY) )\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1420)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:293)\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)\nat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:192)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:585)\nat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895)\nat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425)\nat org.springframework.context.support.ClassPathXmlApplicationContext.\\<init>(ClassPathXmlApplicationContext.java:139)\nat org.springframework.context.support.ClassPathXmlApplicationContext.\\<init>(ClassPathXmlApplicationContext.java:83)\nat org.springframework.batch.core.launch.support.CommandLineJobRunner.start(CommandLineJobRunner.java:284)\nat org.springframework.batch.core.launch.support.CommandLineJobRunner.main(CommandLineJobRunner.java:577)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:597)\nat org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:290)\nat java.lang.Thread.run(Thread.java:662)\nCaused by: org.springframework.dao.DataAccessResourceFailureException: Failed to populate database; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement at line 1 of resource class path resource [org/springframework/batch/core/schema-sybase.sql]: CREATE TABLE BATCH_JOB_INSTANCE  (  JOB_INSTANCE_ID BIGINT  NOT NULL PRIMARY KEY ,  VERSION BIGINT NULL,  JOB_NAME VARCHAR(100) NOT NULL,  JOB_KEY VARCHAR(32) NOT NULL,  constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY) )\nat org.springframework.jdbc.datasource.init.DataSourceInitializer.afterPropertiesSet(DataSourceInitializer.java:92)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1477)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1417)\n... 19 more\nCaused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement at line 1 of resource class path resource [org/springframework/batch/core/schema-sybase.sql]: CREATE TABLE BATCH_JOB_INSTANCE  (  JOB_INSTANCE_ID BIGINT  NOT NULL PRIMARY KEY ,  VERSION BIGINT NULL,  JOB_NAME VARCHAR(100) NOT NULL,  JOB_KEY VARCHAR(32) NOT NULL,  constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY) )\nat org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.executeSqlScript(ResourceDatabasePopulator.java:183)\nat org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:120)\nat org.springframework.jdbc.datasource.init.DataSourceInitializer.afterPropertiesSet(DataSourceInitializer.java:80)\n... 21 more\nCaused by: com.sybase.jdbc3.jdbc.SybSQLException: Can't find type 'BIGINT'.\n\n    at com.sybase.jdbc3.tds.Tds.a(Unknown Source)\n    at com.sybase.jdbc3.tds.Tds.nextResult(Unknown Source)\n    at com.sybase.jdbc3.jdbc.ResultGetter.nextResult(Unknown Source)\n    at com.sybase.jdbc3.jdbc.SybStatement.nextResult(Unknown Source)\n    at com.sybase.jdbc3.jdbc.SybStatement.nextResult(Unknown Source)\n    at com.sybase.jdbc3.jdbc.SybStatement.updateLoop(Unknown Source)\n    at com.sybase.jdbc3.jdbc.SybStatement.executeUpdate(Unknown Source)\n    at com.sybase.jdbc3.jdbc.SybStatement.executeUpdate(Unknown Source)\n    at com.mchange.v2.c3p0.impl.NewProxyStatement.executeUpdate(NewProxyStatement.java:64)\n    at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.executeSqlScript(ResourceDatabasePopulator.java:169)\n    ... 23 more\n\n\n\n---\n\n**Affects:** 2.2.5\n", "url": "https://github.com/spring-projects/spring-batch/issues/1393", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2014-04-08 02:26:35", "closed": "2014-05-21 15:11:03", "commits": {}, "ttf": 43.000277777777775, "commitsDetails": []}, {"title": "ExecutionContext entries should not necessarily be Serializable [BATCH-2208]", "body": "**[Darren Gorman](https://jira.spring.io/secure/ViewProfile.jspa?name=darrengorman)** opened **[BATCH-2208](https://jira.spring.io/browse/BATCH-2208?redirect=false)** and commented\n\nThe serialisation/deserialisation strategy for ExecutionContexts has been injectable for quite some time, via the ExecutionContextSerializer interface.\n\nWith this in place, it does not make sense to enforce the presence of the Serializable interface.\n\n\n---\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/304\n", "url": "https://github.com/spring-projects/spring-batch/issues/1392", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2014-04-09 09:53:06", "closed": "2014-04-11 14:52:29", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "Command-line job runner swallowing exception details [BATCH-2212]", "body": "**[Gunnar Hillert](https://jira.spring.io/secure/ViewProfile.jspa?name=hillert)** opened **[BATCH-2212](https://jira.spring.io/browse/BATCH-2212?redirect=false)** and commented\n\nthe command-line job runner can provide misleading feedback:\n\n```\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0try {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0context = new ClassPathXmlApplicationContext(jobPath);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0} catch (BeansException e) {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0logger.info(\"No XML-based context named \" + jobPath + \". Trying class-based configuration.\");\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0context = new AnnotationConfigApplicationContext(Class.forName(jobPath));\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n```\n\nIf for example you get a:\n\n```\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'helloSpringXDStep': Cannot resolve reference to bean 'jobRepository' while setting bean property 'jobRepository'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'jobRepository' is defined\n```\n\nthen console output is:\n\n```\n11:19:02,065 ERROR main support.CommandLineJobRunner:368 - Job Terminated in error: classpath:/myjob.xml\njava.lang.ClassNotFoundException: classpath:/myjob.xml\n```\n\n\n\n---\n\n**Affects:** 3.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/9affdaf04ffaf4fa4dbc6b7c691454f5c600a1b1\n", "url": "https://github.com/spring-projects/spring-batch/issues/1390", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-04-16 08:25:31", "closed": "2014-05-21 19:10:02", "commits": {}, "ttf": 35.000277777777775, "commitsDetails": []}, {"title": "Original exception wrapped in IllegalArgumentException/InvocationTargetException in annotated step listeners [BATCH-2213]", "body": "**[Mirko Adebahr](https://jira.spring.io/secure/ViewProfile.jspa?name=m.adebahr)** opened **[BATCH-2213](https://jira.spring.io/browse/BATCH-2213?redirect=false)** and commented\n\nIf an exception is thrown from a method with a listener annotation like `@AfterProcess`, the original exception passed to `onProcessError()` or `onSkipInProcess()` is wrapped as follows:\n\n`StepListenerFailedException` -> `IllegalArgumentException` -> `InvocationTargetException` -> `#getTargetException()`\n\nIf an implementation of `ItemProcessListener` is registered (no annotations), the original exception is the direct cause of the `StepListenerFailedException` as expected.\n\nExpected behaviour is that in both cases the original exception can be obtained by `StepListenerFailedException#getCause()`.\n\nExample:\n\n```\n@AfterProcess\npublic void afterProcess(final I i, final O o) {\n\tthrow new RuntimeException(\"Cause\");\n}\n\n...\n\n@OnProcessError\npublic void onProcessError(final I i, final Exception e) {\n\tif (e instanceof StepListenerFailedException) {\n\t\tThrowable cause = e.getCause();\n\t\tif ((cause instanceof IllegalArgumentException)\n\t\t\t\t&& (cause.getCause() instanceof InvocationTargetException)) {\n\t\t\tcause =\n\t\t\t\t\t((InvocationTargetException) cause.getCause())\n\t\t\t\t\t\t\t.getTargetException();\n\t\t\t// now cause is the original runtime exception thrown in afterProcess()\n\t\t}\n\t}\n}\n```\n\n\n\n---\n\n**Affects:** 2.2.2\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/584, and commits https://github.com/spring-projects/spring-batch/commit/61bec2805dda06b25f1dd5c3030066754cdf7b94\n\n**Backported to:** [4.1.0.M1](https://github.com/spring-projects/spring-batch/milestone/93?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1387", "user": "spring-issuemaster", "labels": ["has: backports", "type: bug"], "created": "2014-04-16 23:19:38", "closed": "2018-05-29 11:21:00", "commits": {}, "ttf": 1503.0002777777777, "commitsDetails": []}, {"title": "Allow compilation w/ JDK 8 on 2.2 [BATCH-2214]", "body": "**[Chris Schaefer](https://jira.spring.io/secure/ViewProfile.jspa?name=chrisschaefer)** opened **[BATCH-2214](https://jira.spring.io/browse/BATCH-2214?redirect=false)** and commented\n\nWith 2.2 being the current version and JDK 8 released, one should be able to compile with a 1.8 JDK.\n\nMain issue was ASM throwing an ISE when encountering a system annotation w/ bytecode version 52 such as Target.class\n\n* Upgrade spring from 3.2.0 to 3.2.7 (ASM handling changes for 1.8)\n* Preseve ordering of reacheable elements (plucked from ef0823)\n* Added the PooledEmbeddedDataSource to address the issue outlined in [SPR-11372](https://jira.spring.io/browse/SPR-11372) (plucked from b27823)\n\nPR @ https://github.com/spring-projects/spring-batch/pull/307\n\n\n---\n\n**Affects:** 2.2.6\n", "url": "https://github.com/spring-projects/spring-batch/issues/1386", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2014-04-21 10:06:27", "closed": "2014-04-23 09:53:41", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Partitioned steps do not restart when a job is re-submitted [BATCH-2226]", "body": "**[David Berkman](https://jira.spring.io/secure/ViewProfile.jspa?name=david.berkman)** opened **[BATCH-2226](https://jira.spring.io/browse/BATCH-2226?redirect=false)** and commented\n\nUnder spring-batch 3.0.0M3 when a partitioned step is run the first time, the master is started and correctly constructs and executes each of the partitioned sub-steps. However, if the same job is re-submitted (due to the job not completing), then, even when the master step is marked as allow-start-if-complete=\"true\", the sub-steps are never executed. This is confirmed by looking at the batch_step_execution table, showing only the master completing, and also by dropping break points in the partitioned step code, confirming that the objects are never instantiated nor called. The partitioned sub-step does not take the allow-start-if-complete attribute, so there's no help there.\n\nHere's the output from 2 test runs loading the same job, which has failed on the second step each time. The first time we can see the full output from the partitioned first step, while on the second run we get no output from the actual step at all, even though the task is marked to run even if complete. This works as expected when the step is not partitioned, running completely each time. I've attached the complete maven project for this test case. You won't be able to run it due to missing dependencies, but if you swap your own database setup in to the included spring files, and correct the dependencies in the pom, everything else should run fine, and you should see the same results.\n\nOutput from the first run:\n\n2014-05-06T14:31:48.920-0700 org.springframework.batch.core.launch.support.SimpleJobLauncher INFO  (.:) [main] - Job: [FlowJob: [name=demoJob]] launched with the following parameters: [{com.icix.spbatchjira.job_identifier=abc}]\n2014-05-06T14:31:48.954-0700 org.springframework.batch.core.job.SimpleStepHandler INFO  (.:) [main] - Executing step: [demoStep]\n2014-05-06T14:31:49.058-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-4] - Partition: 3, Read: 0\n2014-05-06T14:31:49.058-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-5] - Partition: 2, Read: 0\n2014-05-06T14:31:49.059-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-3] - Partition: 4, Read: 0\n2014-05-06T14:31:49.060-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-1] - Partition: 1, Read: 0\n2014-05-06T14:31:49.060-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-2] - Partition: 0, Read: 0\n2014-05-06T14:31:49.074-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-3] - Partition: 4, Write: 0\n2014-05-06T14:31:49.074-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-2] - Partition: 0, Write: 0\n2014-05-06T14:31:49.075-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-5] - Partition: 2, Write: 0\n2014-05-06T14:31:49.076-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-1] - Partition: 1, Write: 0\n2014-05-06T14:31:49.076-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-4] - Partition: 3, Write: 0\n2014-05-06T14:31:49.086-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-1] - Partition: 1, Read: 1\n2014-05-06T14:31:49.087-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-1] - Partition: 1, Write: 1\n2014-05-06T14:31:49.089-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-4] - Partition: 3, Read: 1\n2014-05-06T14:31:49.089-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-4] - Partition: 3, Write: 1\n2014-05-06T14:31:49.099-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-3] - Partition: 4, Read: 1\n2014-05-06T14:31:49.099-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-5] - Partition: 2, Read: 1\n2014-05-06T14:31:49.100-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-3] - Partition: 4, Write: 1\n2014-05-06T14:31:49.100-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-5] - Partition: 2, Write: 1\n2014-05-06T14:31:49.100-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-4] - Partition: 3, Read: 2\n2014-05-06T14:31:49.100-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-4] - Partition: 3, Write: 2\n2014-05-06T14:31:49.106-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-5] - Partition: 2, Read: 2\n2014-05-06T14:31:49.106-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-5] - Partition: 2, Write: 2\n2014-05-06T14:31:49.107-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-3] - Partition: 4, Read: 2\n2014-05-06T14:31:49.107-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-3] - Partition: 4, Write: 2\n2014-05-06T14:31:49.112-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-2] - Partition: 0, Read: 1\n2014-05-06T14:31:49.113-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-2] - Partition: 0, Write: 1\n2014-05-06T14:31:49.115-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-1] - Partition: 1, Read: 2\n2014-05-06T14:31:49.115-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-1] - Partition: 1, Write: 2\n2014-05-06T14:31:49.120-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-2] - Partition: 0, Read: 2\n2014-05-06T14:31:49.120-0700 com.icix.spbatchjira.DoNothingItemReader INFO  (.:) [SimpleAsyncTaskExecutor-2] - Partition: 0, Write: 2\n2014-05-06T14:31:49.250-0700 org.springframework.batch.core.job.SimpleStepHandler INFO  (.:) [main] - Executing step: [alwaysFail]\n2014-05-06T14:31:49.258-0700 org.springframework.batch.core.step.AbstractStep ERROR (.:) [main] - Encountered an error executing the step\nException in thread java.lang.RuntimeException: Always fail here!\nat com.icix.spbatchjira.AlwaysFailingTasklet.execute(AlwaysFailingTasklet.java:14)\n...\nat com.icix.spbatchjira.Test.main(Test.java:27)\n2014-05-06T14:31:49.276-0700 org.springframework.batch.core.launch.support.SimpleJobLauncher INFO  (.:) [main] - Job: [FlowJob: [name=demoJob]] completed with the following parameters: [{com.icix.spbatchjira.job_identifier=abc}] and the following status: [FAILED]\n2014-05-06T14:31:49.277-0700 com.icix.spbatchjira.Test INFO  (.:) [main] - Done................................................\n\nOutput from the second run:\n\n2014-05-06T14:33:55.515-0700 org.springframework.batch.core.launch.support.SimpleJobLauncher INFO  (.:) [main] - Job: [FlowJob: [name=demoJob]] launched with the following parameters: [{com.icix.spbatchjira.job_identifier=abc}]\n2014-05-06T14:33:55.555-0700 org.springframework.batch.core.job.SimpleStepHandler INFO  (.:) [main] - Executing step: [demoStep]\n2014-05-06T14:33:55.656-0700 org.springframework.batch.core.job.SimpleStepHandler INFO  (.:) [main] - Executing step: [alwaysFail]\n2014-05-06T14:33:55.674-0700 org.springframework.batch.core.step.AbstractStep ERROR (.:) [main] - Encountered an error executing the step\nException in thread java.lang.RuntimeException: Always fail here!\nat com.icix.spbatchjira.AlwaysFailingTasklet.execute(AlwaysFailingTasklet.java:14)\n...\nat com.icix.spbatchjira.Test.main(Test.java:27)\n2014-05-06T14:33:55.691-0700 org.springframework.batch.core.launch.support.SimpleJobLauncher INFO  (.:) [main] - Job: [FlowJob: [name=demoJob]] completed with the following parameters: [{com.icix.spbatchjira.job_identifier=abc}] and the following status: [FAILED]\n2014-05-06T14:33:55.691-0700 com.icix.spbatchjira.Test INFO  (.:) [main] - Done................................................\n\nNotice the complete lack of output from the configured Reader and Writer, because they are never called, because the actual sub-partitioned steps are never executed, even though the master step is marked as allow-start-if-complete=\"true\". The step executions in the database are logged as...\n\n1\t2\tdemoStep\t1\t2014-05-06 14:31:49\t2014-05-06 14:31:49\tCOMPLETED\t20\t15\t0\t15\t0\t0\t0\t0\tCOMPLETED\t\t2014-05-06 14:31:49\n2\t6\tdemoStep:demo_partitioned_step:1\t1\t2014-05-06 14:31:49\t2014-05-06 14:31:49\tCOMPLETED\t4\t3\t0\t3\t0\t0\t0\t0\tCOMPLETED\t\t2014-05-06 14:31:49\n3\t6\tdemoStep:demo_partitioned_step:0\t1\t2014-05-06 14:31:49\t2014-05-06 14:31:49\tCOMPLETED\t4\t3\t0\t3\t0\t0\t0\t0\tCOMPLETED\t\t2014-05-06 14:31:49\n4\t6\tdemoStep:demo_partitioned_step:4\t1\t2014-05-06 14:31:49\t2014-05-06 14:31:49\tCOMPLETED\t4\t3\t0\t3\t0\t0\t0\t0\tCOMPLETED\t\t2014-05-06 14:31:49\n5\t6\tdemoStep:demo_partitioned_step:3\t1\t2014-05-06 14:31:49\t2014-05-06 14:31:49\tCOMPLETED\t4\t3\t0\t3\t0\t0\t0\t0\tCOMPLETED\t\t2014-05-06 14:31:49\n6\t6\tdemoStep:demo_partitioned_step:2\t1\t2014-05-06 14:31:49\t2014-05-06 14:31:49\tCOMPLETED\t4\t3\t0\t3\t0\t0\t0\t0\tCOMPLETED\t\t2014-05-06 14:31:49\n7\t2\talwaysFail\t1\t2014-05-06 14:31:49\t2014-05-06 14:31:49\tFAILED\t0\t0\t0\t0\t0\t0\t0\t1\tFAILED\tjava.lang.RuntimeException: Always fail here!\nat com.icix.spbatchjira.AlwaysFailingTasklet.execute(AlwaysFailingTasklet.java:14)\n...\nat org.springframework.bat\t2014-05-06 14:31:49\n8\t2\tdemoStep\t2\t2014-05-06 14:33:56\t2014-05-06 14:33:56\tCOMPLETED\t0\t0\t0\t0\t0\t0\t0\t0\tCOMPLETED\t\t2014-05-06 14:33:56\n9\t2\talwaysFail\t2\t2014-05-06 14:33:56\t2014-05-06 14:33:56\tFAILED\t0\t0\t0\t0\t0\t0\t0\t1\tFAILED\tjava.lang.RuntimeException: Always fail here!\nat com.icix.spbatchjira.AlwaysFailingTasklet.execute(AlwaysFailingTasklet.java:14)\n...\nat org.springframework.bat\t2014-05-06 14:33:56\n\nWhich shows that the master step is called, but none of the sub-partition steps are executed.\n\n\n---\n\n**Affects:** 3.0.0\n\n**Attachments:**\n- [spbatchjira.rar](https://jira.spring.io/secure/attachment/21993/spbatchjira.rar) (_20.26 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1376", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2014-05-02 20:29:32", "closed": "2015-05-05 02:29:09", "commits": {}, "ttf": 367.0002777777778, "commitsDetails": []}, {"title": "setRepository() in RepositoryItemReader in 3.0.0.RC1 broken? [BATCH-2232]", "body": "**[Shiro](https://jira.spring.io/secure/ViewProfile.jspa?name=shiro_spring)** opened **[BATCH-2232](https://jira.spring.io/browse/BATCH-2232?redirect=false)** and commented\n\nCommit b26d272d436d77bb6b4d0e7320387351937a1646 changed setRepository() from ```\npublic void setRepository(PagingAndSortingRepository repository)\n\n```to\n```public void setRepository(PagingAndSortingRepository<T, ?> repository)\n```.\n\nI believe this was done in error.\n\nFor my use case I used a spring data jpa repository of type Domain but the method set with ```\nsetMethodName()\n``` would return a String. With Milestone 1 I would declare a \n```RepositoryItemReader<String>\n```, call \n```setRepository()\n``` with my own \n```JpaRepository<Domain, Long>\n``` and all would work as expected. With RC1 this is now impossible, because the types of the repository and the return type of the repository's query method must be the same.\n```\n\n\n\n---\nNo further details from [BATCH-2232](https://jira.spring.io/browse/BATCH-2232?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/1369", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-05-14 18:05:31", "closed": "2014-05-15 08:09:12", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "JsrTestUtils exists in documentation but not in code [BATCH-2233]", "body": "**[Michael Pralow](https://jira.spring.io/secure/ViewProfile.jspa?name=daywalker2000@gmx.net)** opened **[BATCH-2233](https://jira.spring.io/browse/BATCH-2233?redirect=false)** and commented\n\nThe documentation for 3.0.0.RC1 at http://docs.spring.io/spring-batch/trunk/reference/html/jsr-352.html#jsrTesting talks about org.springframework.batch.core.jsr.JsrTestUtils which really does not exists in the packaged/released version.\n\n\n---\n\n**Affects:** 3.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/1368", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-05-15 12:06:28", "closed": "2014-05-15 13:12:26", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "ExitStatus.EXECUTING.isRunning() does not return true [BATCH-2235]", "body": "**[Tomas Klubal](https://jira.spring.io/secure/ViewProfile.jspa?name=blonda.cz)** opened **[BATCH-2235](https://jira.spring.io/browse/BATCH-2235?redirect=false)** and commented\n\nImplementation checks for two status codes/strings (\"RUNNING\" and \"UNKNOWN\") but there is no predefined RUNNING ExitStatus. Instead of \"RUNNING\" it should check for \"EXECUTING\".\n\n\n---\n\n**Affects:** 2.2.6\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/ff43ceb85e7f69982dd3c2ac76d05999b9dbf08b, https://github.com/spring-projects/spring-batch/commit/f5d5edc52dcd7ade76a528f831d2d5df99ac6413\n", "url": "https://github.com/spring-projects/spring-batch/issues/1367", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-05-16 03:04:50", "closed": "2014-05-21 19:10:51", "commits": {}, "ttf": 5.000277777777778, "commitsDetails": []}, {"title": "Remove Gradle files, keep Maven [BATCH-2230]", "body": "**[Chris Schaefer](https://jira.spring.io/secure/ViewProfile.jspa?name=chrisschaefer)** opened **[BATCH-2230](https://jira.spring.io/browse/BATCH-2230?redirect=false)** and commented\n\nremove gradle build from project. why are we even moving to gradle?\n\n* what benefits do we gain?\n* what can gradle do that maven can't?\n\nmaybe I'm totally out of the loop / missing something here, but I'm not understanding the need for this change.\n\n\n---\n\n**Affects:** 3.0.0\n\n0 votes, 6 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1366", "user": "spring-issuemaster", "labels": ["in: build", "status: declined", "type: bug"], "created": "2014-05-08 16:37:50", "closed": "2014-05-12 14:31:43", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "Spring Batch Bug  with Spring version 4.0.0 - Issue with multiple Instances of the same Job(with identical Job Parameters) getting triggered at the same time when using Spring 4.0.0 [BATCH-2236]", "body": "**[Shiv](https://jira.spring.io/secure/ViewProfile.jspa?name=shiv)** opened **[BATCH-2236](https://jira.spring.io/browse/BATCH-2236?redirect=false)** and commented\n\nHi,\n\nMultiple Instances of the same job gets triggered at the same point of time(with identical Job Parameters) which is configured through Spring Scheduler due to which we are facing a lot of duplication issues in production environment because of which have again downgraded Spring Core version back to 3.1.0.\n\nIn Spring version 3.1.0 its working perfectly fine but its not working in spring version 4.0.0\n\nThanks\n\n\n---\n\n**Affects:** 2.1.8\n", "url": "https://github.com/spring-projects/spring-batch/issues/1365", "user": "spring-issuemaster", "labels": ["in: build", "in: core", "type: bug"], "created": "2014-05-18 08:02:54", "closed": "2014-05-21 14:49:53", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "SQLITE: table BATCH_JOB_EXECUTION has no column named JOB_CONFIGURATION_LOCATION [BATCH-2237]", "body": "**[Mayya](https://jira.spring.io/secure/ViewProfile.jspa?name=sanshu)** opened **[BATCH-2237](https://jira.spring.io/browse/BATCH-2237?redirect=false)** and commented\n\n\n---\n\n**Affects:** 3.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/3fb0b8a54fcbe7ca6d34ce58a35b24ab22e4892a\n", "url": "https://github.com/spring-projects/spring-batch/issues/1364", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-05-21 10:43:13", "closed": "2014-05-21 11:11:24", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "JSR352 Support - more setup details needed [BATCH-2234]", "body": "**[Michael Pralow](https://jira.spring.io/secure/ViewProfile.jspa?name=daywalker2000@gmx.net)** opened **[BATCH-2234](https://jira.spring.io/browse/BATCH-2234?redirect=false)** and commented\n\nhttp://docs.spring.io/spring-batch/trunk/reference/html/jsr-352.html needs some more information regarding necessary setup information and hard to grasp side effects\n\n1. JsrJobOperator needs HSQLDB in classpath to work\n\nWithout HSQLDB you get a rather user-unfriendly \"java.util.ServiceConfigurationError: javax.batch.operations.JobOperator: Provider org.springframework.batch.core.jsr.launch.JsrJobOperator could not be instantiated\". Analyzing the stack trace and some debugging helps, but should'nt be needed.\n\n2. i would like to see some information about the possibility of providing an own baseContext for the JsrJobOperator\n\nI tried it with an own beanRefContext.xml primary=\"true\", so far i get a nice\n\norg.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition INFO   Overriding bean definition for bean 'baseContext': replacing [Generic bean: class [org.springframework.context.support.GenericXmlApplicationContext]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=true; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in URL [file:.../target/classes/beanRefContext.xml]] with [Generic bean: class [org.springframework.context.support.GenericXmlApplicationContext]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in URL [jar:file.../org/springframework/batch/spring-batch-core/3.0.0.RC1/spring-batch-core-3.0.0.RC1.jar!/beanRefContext.xml]]\n\n\n---\n\n**Affects:** 3.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/bb048f3cf8d1ea45030833ccede65f1fadf1dfeb\n", "url": "https://github.com/spring-projects/spring-batch/issues/1363", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2014-05-15 15:31:27", "closed": "2014-05-16 09:57:12", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Stopping a job in STARTING state throws OptimisticLockingFailureException [BATCH-2242]", "body": "**[Francesco Gapito](https://jira.spring.io/secure/ViewProfile.jspa?name=francesco.gapito)** opened **[BATCH-2242](https://jira.spring.io/browse/BATCH-2242?redirect=false)** and commented\n\nWhen i try to stop a JobExecution in STARTING state it throws an OptimisticLockingFailureException (Attempt to update job execution id=#### with wrong version (0), where current version is 1) and the job goes in FAILED state. I call the SimpleJobService.stop method on a job in STARTING STATE.\n\n\n---\n\n**Affects:** 3.0.0\n\n**Attachments:**\n- [stacktrace.txt](https://jira.spring.io/secure/attachment/19517/stacktrace.txt) (_4.03 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1358", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2012-03-16 06:01:18", "closed": "2014-05-30 15:21:18", "commits": {}, "ttf": 805.0002777777778, "commitsDetails": []}, {"title": "Cannot import Project into IntelliJ [BATCH-2245]", "body": "**[Gunnar Hillert](https://jira.spring.io/secure/ViewProfile.jspa?name=hillert)** opened **[BATCH-2245](https://jira.spring.io/browse/BATCH-2245?redirect=false)** and commented\n\n\n---\n\n**Backported to:** [4.0.0.M1](https://github.com/spring-projects/spring-batch/milestone/84?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1355", "user": "spring-issuemaster", "labels": ["has: backports", "in: build", "type: bug"], "created": "2014-05-29 14:38:10", "closed": "2017-07-20 17:26:12", "commits": {}, "ttf": 1148.0002777777777, "commitsDetails": []}, {"title": "Add JobExplorer by default when using java based configuration [BATCH-2247]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2247](https://jira.spring.io/browse/BATCH-2247?redirect=false)** and commented\n\nWith the 3.0 release, we enabled the ability to use the Map based job repository if you do not configure a datasource.  However, in order to create a JobExplorer when using the map based option, you need access to the MapJobRepsoitoryFactoryBean.  This issue would address this by providing the JobExplorer as well by default.\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/acee549b32f1f97b0670e43b294fd416747c40c7, https://github.com/spring-projects/spring-batch/commit/6b6118263b095d263ad65c52d9befc48058d9ace\n", "url": "https://github.com/spring-projects/spring-batch/issues/1353", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-05-30 09:17:29", "closed": "2014-06-02 10:12:39", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "Failing integration tests in spring-batch-core-tests and spring-batch-infrastructure-tests [BATCH-2248]", "body": "**[Jimmy Praet](https://jira.spring.io/secure/ViewProfile.jspa?name=jpraet)** opened **[BATCH-2248](https://jira.spring.io/browse/BATCH-2248?redirect=false)** and commented\n\nWhen running the build with the -Palltests option, the following tests are failing:\n\n**spring-batch-core-tests:**\n* LdifReaderTests. testResourceNotExists\n* LdifReaderTests. testValidRun\n* MappingLdifReaderTests. testResourceNotExists\n* MappingLdifReaderTests. testValidRun\n\n**spring-batch-infrastructure-tests:**\n* AsynchronousTests. testRollback\n* AsynchronousTests. testSunnyDay\n* SynchronousTests. testPartialRollback\n\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/a066647149582ae6a52890768b6ea6d5cc3535d0, https://github.com/spring-projects/spring-batch/commit/d175f2d05ae5f8c49c35d46a67bfe9d2981c5b19, https://github.com/spring-projects/spring-batch/commit/1b9b9621dd20b95a398e423b46c7b96ceb519f55, https://github.com/spring-projects/spring-batch/commit/090e6f203940d8fd9d078ff29f01304b981fcc72\n", "url": "https://github.com/spring-projects/spring-batch/issues/1352", "user": "spring-issuemaster", "labels": ["in: core", "in: infrastructure", "type: bug"], "created": "2014-05-31 02:53:40", "closed": "2014-10-27 15:49:17", "commits": {}, "ttf": 149.00027777777777, "commitsDetails": []}, {"title": "Remove reference to business schema in default JSR-352 properties files [BATCH-2251]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2251](https://jira.spring.io/browse/BATCH-2251?redirect=false)** and commented\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/881de9ac1638a6d41d999a854b15e5b3fdafe234, https://github.com/spring-projects/spring-batch/commit/b7a483590be2c2a28f8181476bfdb3e8d03adba2\n", "url": "https://github.com/spring-projects/spring-batch/issues/1349", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-06-02 12:49:36", "closed": "2014-06-12 11:13:57", "commits": {}, "ttf": 9.000277777777777, "commitsDetails": []}, {"title": ".ConcurrencyFailureException: PreparedStatementCallback; SQL [INSERT INTO BATCH_STEP_EXECUTION_CONTEXT  [BATCH-2255]", "body": "**[Rishi Singhal](https://jira.spring.io/secure/ViewProfile.jspa?name=singhal.rishi@gmail.com)** opened **[BATCH-2255](https://jira.spring.io/browse/BATCH-2255?redirect=false)** and commented\r\n\r\nWhile running our application in parallel we see this issue\r\n\r\n```\r\nCaused by: org.springframework.dao.ConcurrencyFailureException: PreparedStatementCallback; SQL [INSERT INTO BATCH_STEP_EXECUTION_CONTEXT (SHORT_CONTEXT, SERIALIZED_CONTEXT, STEP_EXECUTION_ID) VALUES(?, ?, ?)]; transaction rollback: serialization failure; nested exception is java.sql.SQLTransactionRollbackException: transaction rollback: serialization failure\r\nat org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:68)\r\nat org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)\r\nat org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80)\r\nat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:603)\r\n```\r\n\r\n\r\n---\r\n\r\n**Affects:** 2.2.7\r\n", "url": "https://github.com/spring-projects/spring-batch/issues/1346", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-06-13 12:19:18", "closed": "2020-01-21 09:03:30", "commits": {}, "ttf": 2047.0002777777777, "commitsDetails": []}, {"title": "Null-pointer exception when using JpaPagingItemReader [BATCH-2256]", "body": "**[Petar Tahchiev](https://jira.spring.io/secure/ViewProfile.jspa?name=ptahchiev)** opened **[BATCH-2256](https://jira.spring.io/browse/BATCH-2256?redirect=false)** and commented\n\nHello,\n\nI have this simple reader:\n\n```\n    @StepScope\n    @Bean(name = {\"defaultAbstractEntityReader\", \"abstractEntityReader\"})\n    public ItemReader<List<AbstractCatalogableEntityModel>> defaultAbstractEntityReader() {\n        final java.util.Map<String, Object> properties = new HashMap<>();\n        properties.put(\"javax.persistence.jdbc.user\", configurationService.getConfiguration().getString(\"db.username\"));\n        properties.put(\"javax.persistence.jdbc.password\", configurationService.getConfiguration().getString(\"db.password\"));\n        properties.put(\"javax.persistence.jdbc.driver\", configurationService.getConfiguration().getString(\"db.driver\"));\n        properties.put(\"javax.persistence.jdbc.url\", configurationService.getConfiguration().getString(\"db.url\"));\n\n        final JpaPagingItemReader<List<AbstractCatalogableEntityModel>> entityReader = new JpaPagingItemReader<>();\n        entityReader.setEntityManagerFactory(entityManager.getEntityManagerFactory());\n        entityReader.setParameterValues(properties);\n        entityReader.setQueryString(\"select p from product p\");\n        entityReader.setPageSize(1000);\n\n        return entityReader;\n    }\n```\n\nand when I start the job I see this null pointer exception:\n\n```\njava.lang.NullPointerException\n\tat org.springframework.batch.item.database.JpaPagingItemReader.doReadPage(JpaPagingItemReader.java:196)\n\tat org.springframework.batch.item.database.AbstractPagingItemReader.doRead(AbstractPagingItemReader.java:108)\n\tat org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:83)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:601)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\n\tat org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:133)\n\tat org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:121)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)\n```\n\nwhich happens here on `JpaPagingItemReader:196`\n\n```\nif (transacted) {\n     tx = entityManager.getTransaction();\n```\n\nand, yes, the entityManager is `null`. I can see it being instantiated on line 177:\n\n```\nentityManager = entityManagerFactory.createEntityManager(jpaPropertyMap);\n```\n\nso I put a breakpoint there, but it never goes through that breakpoint so it always stays `null`.\n\n\n---\n\n**Affects:** 3.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/1345", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2014-06-17 01:03:53", "closed": "2014-06-23 07:10:43", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "in DefaultStepExecutionAggregator.aggregate(...) the aggregation of processor.skipCount is missing [BATCH-2257]", "body": "**[Michael Pralow](https://jira.spring.io/secure/ViewProfile.jspa?name=daywalker2000@gmx.net)** opened **[BATCH-2257](https://jira.spring.io/browse/BATCH-2257?redirect=false)** and commented\n\n```\n            public void aggregate(StepExecution result, Collection<StepExecution> executions) {\n                        Assert.notNull(result, \"To aggregate into a result it must be non-null.\");\n                        if (executions == null) {\n                                   return;\n                        }\n                        for (StepExecution stepExecution : executions) {\n                                   BatchStatus status = stepExecution.getStatus();\n                                   result.setStatus(BatchStatus.max(result.getStatus(), status));\n                                   result.setExitStatus(result.getExitStatus().and(stepExecution.getExitStatus()));\n                                   result.setCommitCount(result.getCommitCount() + stepExecution.getCommitCount());\n                                   result.setRollbackCount(result.getRollbackCount() + stepExecution.getRollbackCount());\n                                   result.setReadCount(result.getReadCount() + stepExecution.getReadCount());\n                                   result.setReadSkipCount(result.getReadSkipCount() + stepExecution.getReadSkipCount());\n                                   result.setWriteCount(result.getWriteCount() + stepExecution.getWriteCount());\n                                   result.setWriteSkipCount(result.getWriteSkipCount() + stepExecution.getWriteSkipCount());\n                        }\n            }\n\n```\n\nresult.setProcessSkipCount(result.getProcessSkipCount() + stepExecution.getProcessSkipCount()); is missing inside the loop\n\n\n\n---\n\n**Affects:** 4.0.0, 3.0.1\n\n**Issue Links:**\n- [BATCH-2101](https://jira.spring.io/browse/BATCH-2101) DefaultStepExecutionAggregator doesn't include some StepExecution attributes\n (_**\"is duplicated by\"**_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/752fe55e88e09adcfcfa338ff5133bc65aae99cc, https://github.com/spring-projects/spring-batch/commit/654010d09c0dfdc397d855f6911fbda4352b32cb\n", "url": "https://github.com/spring-projects/spring-batch/issues/1344", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-06-17 14:36:41", "closed": "2019-10-30 20:26:41", "commits": {}, "ttf": 1961.0002777777777, "commitsDetails": []}, {"title": "endless loop (stackoverflow) while using skipPolicy AND a wrong jobParameter for commit-interval [BATCH-2262]", "body": "**[Michael Pralow](https://jira.spring.io/secure/ViewProfile.jspa?name=daywalker2000@gmx.net)** opened **[BATCH-2262](https://jira.spring.io/browse/BATCH-2262?redirect=false)** and commented\n\nwe found a somehow strange behaviour while using commit-interval set as jobParameter combined with a skipPolicy\n\n```xml\n<job id=\"basicSkipJob\" \n     xmlns=\"http://www.springframework.org/schema/batch\">\n    <step id=\"basicSkipStep\" >\n        <tasklet>\n            <chunk\n                reader=\"reader\" \n                processor=\"processor\" \n                writer=\"writer\" \n                commit-interval=\"#{jobParameters['commit.interval']}\"\n                skip-policy=\"skipPolicy\">\n            </chunk>\n        </tasklet>\n    </step>\n</job>\n```\n\nif the jobParameter is set \"wrong\" e.g. not set or with spelling errors \"commit.intervall\" the job runs endless, if we configure a listener we can see that \"afterChunk\" gets called endless as well and gets a not so nice stackoverflow\n\nps: the same error can be produced with using the \"wrong\" parameter with a reader-transactional-queue attribute\n\n\n---\n\n**Affects:** 3.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/1341", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2014-06-23 11:57:47", "closed": "2014-09-16 09:03:30", "commits": {}, "ttf": 84.00027777777778, "commitsDetails": []}, {"title": "serializer null in JdbcExecutionContextDao [BATCH-2265]", "body": "**[Sameer Pawar](https://jira.spring.io/secure/ViewProfile.jspa?name=sameer_pawar)** opened **[BATCH-2265](https://jira.spring.io/browse/BATCH-2265?redirect=false)** and commented\n\nHi,\nI am using spring-batch-core 2.2.6 and spring-batch-admin-manager 1.3.0.M1. In spring-batch-admin-manager's own execution-context.xml\nthere is a scheduled job\n<task:scheduled-tasks>\n<task:scheduled ref=\"jobService\" method=\"removeInactiveExecutions\" fixed-delay=\"${batch.job.service.reaper.interval}\"/>\n</task:scheduled-tasks>\n\nwhich looks for inactive executions and removes it. We have a long running batch job which takes more than 1 min.\n\nWhen removeInactiveExecutions in SimpleJobService runs it tries to get the execution entry from database and it is failing with NullPointerException. While failing it closes the connection and if the main batch job is using same connection it fails with connection already closed error.\n\nI see there are couple of other JIRA's raised for this [BATCH-2155](https://jira.spring.io/browse/BATCH-2155) and [BATCH-2183](https://jira.spring.io/browse/BATCH-2183). But it was closed give either being invalid or working as expected as resolution.\n\nI could also see someone has tried to fix this issue in\nhttps://github.com/spring-projects/spring-batch-admin/pull/17\n\nhttps://github.com/spring-projects/spring-batch/pull/256/commits\n\nbut this is still not available in release.\n\nThis was also discussed on old spring forum without any resolution\n\nhttp://forum.spring.io/forum/spring-projects/batch/744935-spring-batch-admin-ui-not-initializing-executioncontextdao-properly\n\nThis is happening because serializer is null in JdbcExecutionContextDao and fails with NullPointerException.\n\n\n\n---\n\n**Affects:** 2.2.6, 2.2.7\n", "url": "https://github.com/spring-projects/spring-batch/issues/1338", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-07-01 07:06:55", "closed": "2014-08-14 07:53:23", "commits": {}, "ttf": 44.000277777777775, "commitsDetails": []}, {"title": "StepScope registered twice (Java Config/XML) causes errors [BATCH-2266]", "body": "**[zyro](https://jira.spring.io/secure/ViewProfile.jspa?name=zyro)** opened **[BATCH-2266](https://jira.spring.io/browse/BATCH-2266?redirect=false)** and commented\n\ni am using a BatchConfigurer with `@EnableBatchProcessing`. another `@Configuration` class uses `@ImportResource` to include some xml-based job configuration using the batch namespace.\n\nnow i got exceptions regarding cglib vs. jdk proxying on startup. removing the batch xml \"fixes\" it.\n\ndebugging into this, it looks like the BeanDefinition of the StepScope coming from Java Config is not registered with a beanClassName of \"org.springframework.batch.core.scope.StepScope\", but looks like the following:\n\n```\nRoot bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.batch.core.configuration.annotation.StepScopeConfiguration; factoryMethodName=stepScope; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/batch/core/configuration/annotation/StepScopeConfiguration.class]\n```\n\nso, the CoreNamespaceUtils do not find it and register their own StepScope.\n\nmaking things worse, Java Config works with a default of StepScope.autoProxy = false while the xml namespace one defaults to true.\n\nthe StepScope from the xml namespace is (at least in my case) registered later, seems to win (or is applied at least), causes the errors (i do not want autoProxy-ing).\n\n\n---\n\n**Affects:** 3.0.0\n\n**Attachments:**\n- [BATCH-2266.zip](https://jira.spring.io/secure/attachment/22361/BATCH-2266.zip) (_5.91 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/454c2001067e2b55fccc9bc2cd210a9f6f56f928, https://github.com/spring-projects/spring-batch/commit/a2f2df0b17ed2f5483bce614dc751483708ed17d\n\n2 votes, 5 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1337", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-07-04 09:25:58", "closed": "2015-09-27 10:49:42", "commits": {}, "ttf": 450.0002777777778, "commitsDetails": []}, {"title": "SystemCommandTasklet#stop has thread visibility problem on stopped field [BATCH-2271]", "body": "**[Steve Ash](https://jira.spring.io/secure/ViewProfile.jspa?name=steve.ash)** opened **[BATCH-2271](https://jira.spring.io/browse/BATCH-2271?redirect=false)** and commented\n\nThe batchlet stop() javadoc indicates that the stop method might be called by a thread other than the one running the batchlet process method() (would be quite a trick otherwise!).  I imagine the same is true for any StoppableTasklet.\n\nHowever, SystemCommandTasklet's stop() method just sets a private boolean field **stopped**.  As this will happen on a thread other than the one executing the tasklet (looping/sleeping/checking that field) under the JMM you need to mark the boolean field volatile to ensure that the tasklet thread will ever see the stopped = true\n\nprobably should update the StoppableTasklet javadoc as well to make that obvious (like Batchlet)\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/aee9dc2f6ff3ec6cb431f69e781c446cc9ea9f6f, https://github.com/spring-projects/spring-batch/commit/f8ce33ff803fd222e982ceb323b96f6f1ce3c529\n", "url": "https://github.com/spring-projects/spring-batch/issues/1333", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2014-07-15 12:48:15", "closed": "2014-09-22 13:59:42", "commits": {}, "ttf": 69.00027777777778, "commitsDetails": []}, {"title": "ConcurrentModificationException inside SimpleJobExplorer. [BATCH-2273]", "body": "**[christophe blin](https://jira.spring.io/secure/ViewProfile.jspa?name=cblin)** opened **[BATCH-2273](https://jira.spring.io/browse/BATCH-2273?redirect=false)** and commented\n\nI have a hundred jobs in my application and I test them with the SimpleJobExplorer\n\nSometimes (i.e 1% of test runs I would say), I have a strange exception occuring when I call getJobExecution and the job is executing.\n\nI've investigated the code and I think that the problem occurs because despite using a ConcurrentHashMap, the values inside the map are not concurrent aware.\n\nThe solution I think is to copy the object before putting in the map so that the steps jobexecution is not the same instance as the jobexecution in the jobexlorer map (i.e like with the database where the job exec is fetch from the db so this is a copy).\n\nI understand if this bug is not fixed since SImpleJobExplorer is not for production but this is quite an annoyance to me nevertheless ...\n\nHere is the stacktrace :\n\njava.util.ConcurrentModificationException\nat java.util.ArrayList.writeObject(ArrayList.java:746)\nat sun.reflect.GeneratedMethodAccessor181.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:606)\nat java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:988)\nat java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1495)\nat java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1431)\nat java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1177)\nat java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1547)\nat java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1508)\nat java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1431)\nat java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1177)\nat java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:347)\nat java.util.concurrent.ConcurrentHashMap.writeObject(ConcurrentHashMap.java:1520)\nat sun.reflect.GeneratedMethodAccessor179.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:606)\nat java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:988)\nat java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1495)\nat java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1431)\nat java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1177)\nat java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1547)\nat java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1508)\nat java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1431)\nat java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1177)\nat java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1547)\nat java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1508)\nat java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1431)\nat java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1177)\nat java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1547)\nat java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1508)\nat java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1431)\nat java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1177)\nat java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:347)\nat org.springframework.batch.support.SerializationUtils.serialize(SerializationUtils.java:48)\nat org.springframework.batch.core.repository.dao.MapStepExecutionDao.copy(MapStepExecutionDao.java:52)\nat org.springframework.batch.core.repository.dao.MapStepExecutionDao.addStepExecutions(MapStepExecutionDao.java:130)\nat org.springframework.batch.core.explore.support.SimpleJobExplorer.getJobExecutionDependencies(SimpleJobExplorer.java:182)\nat org.springframework.batch.core.explore.support.SimpleJobExplorer.getJobExecution(SimpleJobExplorer.java:120)\nat my_own_program\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:606)\nat org.junit.internal.runners.TestMethod.invoke(TestMethod.java:59)\nat org.junit.internal.runners.MethodRoadie.runTestMethod(MethodRoadie.java:98)\nat org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:79)\nat org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:87)\nat org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:77)\nat org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:42)\nat org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(JUnit4ClassRunner.java:88)\nat org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)\nat org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)\nat org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)\nat org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)\nat org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)\nat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\nat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\n\n\n---\n\n**Affects:** 2.1.8\n", "url": "https://github.com/spring-projects/spring-batch/issues/1332", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2014-07-16 01:15:00", "closed": "2014-07-16 07:42:01", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "RepositoryItemReader setCurrentItemCount doesnt work. [BATCH-2274]", "body": "**[Jason](https://jira.spring.io/secure/ViewProfile.jspa?name=jeacott)** opened **[BATCH-2274](https://jira.spring.io/browse/BATCH-2274?redirect=false)** and commented\n\nif I configure a RepositoryItemReader and setCurrentItemCount,\nit is never used. the flow in AbstractItemCountingItemStreamItemReader is such that any set currentItemCount will never affect the initial page.\nthe open method always runs before the update method, but the open method depends on the update method having run first for this function to work.\nthis can be worked around by overriding RepositoryItemReader and implementing the Open method setting executionContext.putInt(getExecutionContextKey(READ_COUNT), getCurrentItemCount());\n\nbut its far from ideal.\nthe doOpen method thats clearly intended for this kind of initialization in other cases doesn't pass the executionContext so cant be used here.\n\n\n---\n\n**Affects:** 3.0.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/2ae6388c129912920791882bd21cb67bc8de0611, https://github.com/spring-projects/spring-batch/commit/1858e85641285ee9766fba9a4c8837c69e8197f0\n", "url": "https://github.com/spring-projects/spring-batch/issues/1331", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2014-07-16 17:37:48", "closed": "2014-10-16 16:15:39", "commits": {}, "ttf": 91.00027777777778, "commitsDetails": []}, {"title": "DefaultBatchConfigurer violates @PostConstruct contract [BATCH-2276]", "body": "**[Chris Dombroski](https://jira.spring.io/secure/ViewProfile.jspa?name=cdombroski)** opened **[BATCH-2276](https://jira.spring.io/browse/BATCH-2276?redirect=false)** and commented\n\n`@PostConstruct` methods are not allowed to throw checked exceptions. This causes some application servers to fail to deploy applications using Spring Batch. This issue has already been referenced as [BATCH-2189](https://jira.spring.io/browse/BATCH-2189) in 2.2.5, so this seems to be a regression in the 3.0.X line.\n\n\n---\n\n**Affects:** 3.0.1\n\n**Reference URL:** http://docs.oracle.com/javaee/6/api/javax/annotation/PostConstruct.html\n\n1 votes, 2 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1329", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-07-18 12:21:38", "closed": "2014-09-22 12:48:28", "commits": {}, "ttf": 66.00027777777778, "commitsDetails": []}, {"title": "@EnableRetry conflicts with Spring Security's @EnableGlobalMethodSecurity [BATCH-2277]", "body": "**[Pei-Tang Huang](https://jira.spring.io/secure/ViewProfile.jspa?name=tan9)** opened **[BATCH-2277](https://jira.spring.io/browse/BATCH-2277?redirect=false)** and commented\n\nWhen using `@EnableRetry` in conjunction with  `@EnableGlobalMethodSecurity`, we got exception while ApplicationContext loading.\n\nIf no proxyTargetClass of `@Enable`* has been set to ture, we got:\n\n```\njava.lang.IllegalStateException: Failed to load ApplicationContext\n\tat org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:99) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.DefaultTestContext.getApplicationContext(DefaultTestContext.java:101) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:331) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:213) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:290) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [junit-4.11.jar:na]\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:292) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:233) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:87) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) [junit-4.11.jar:na]\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) [junit-4.11.jar:na]\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) [junit-4.11.jar:na]\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) [junit-4.11.jar:na]\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) [junit-4.11.jar:na]\n\tat org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309) [junit-4.11.jar:na]\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:176) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) [.cp/:na]\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) [.cp/:na]\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) [.cp/:na]\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) [.cp/:na]\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) [.cp/:na]\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) [.cp/:na]\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'testConfiguration': BeanPostProcessor before instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire method: public void org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration.setObjectPostProcessor(org.springframework.security.config.annotation.ObjectPostProcessor); nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'objectPostProcessor' defined in class org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Illegal arguments to factory method [public org.springframework.security.config.annotation.ObjectPostProcessor org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration.objectPostProcessor(org.springframework.beans.factory.config.AutowireCapableBeanFactory)]; args: \n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:471) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932) ~[spring-context-3.2.8.RELEASE.jar:3.2.8.RELEASE]\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479) ~[spring-context-3.2.8.RELEASE.jar:3.2.8.RELEASE]\n\tat org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:125) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:100) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:250) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContextInternal(CacheAwareContextLoaderDelegate.java:64) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:91) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\t... 25 common frames omitted\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire method: public void org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration.setObjectPostProcessor(org.springframework.security.config.annotation.ObjectPostProcessor); nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'objectPostProcessor' defined in class org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Illegal arguments to factory method [public org.springframework.security.config.annotation.ObjectPostProcessor org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration.objectPostProcessor(org.springframework.beans.factory.config.AutowireCapableBeanFactory)]; args: \n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:370) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1094) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:989) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper.findAdvisorBeans(BeanFactoryAdvisorRetrievalHelper.java:92) ~[spring-aop-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findCandidateAdvisors(AbstractAdvisorAutoProxyCreator.java:101) ~[spring-aop-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.findCandidateAdvisors(AnnotationAwareAspectJAutoProxyCreator.java:85) ~[spring-aop-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.shouldSkip(AspectJAwareAdvisorAutoProxyCreator.java:103) ~[spring-aop-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessBeforeInstantiation(AbstractAutoProxyCreator.java:289) ~[spring-aop-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:958) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:930) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:465) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\t... 38 common frames omitted\nCaused by: org.springframework.beans.factory.BeanCreationException: Could not autowire method: public void org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration.setObjectPostProcessor(org.springframework.security.config.annotation.ObjectPostProcessor); nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'objectPostProcessor' defined in class org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Illegal arguments to factory method [public org.springframework.security.config.annotation.ObjectPostProcessor org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration.objectPostProcessor(org.springframework.beans.factory.config.AutowireCapableBeanFactory)]; args: \n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.inject(AutowiredAnnotationBeanPostProcessor.java:596) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\t... 62 common frames omitted\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'objectPostProcessor' defined in class org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Illegal arguments to factory method [public org.springframework.security.config.annotation.ObjectPostProcessor org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration.objectPostProcessor(org.springframework.beans.factory.config.AutowireCapableBeanFactory)]; args: \n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:597) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1094) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:989) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1017) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.inject(AutowiredAnnotationBeanPostProcessor.java:553) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\t... 64 common frames omitted\nCaused by: org.springframework.beans.factory.BeanDefinitionStoreException: Illegal arguments to factory method [public org.springframework.security.config.annotation.ObjectPostProcessor org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration.objectPostProcessor(org.springframework.beans.factory.config.AutowireCapableBeanFactory)]; args: \n\tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:180) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:586) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\t... 76 common frames omitted\n```\n\nif either on of proxyTargetClass of `@Enable`* has been set to true, following exception will show up:\n\n```\njava.lang.IllegalStateException: Failed to load ApplicationContext\n\tat org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:99) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.DefaultTestContext.getApplicationContext(DefaultTestContext.java:101) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:331) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:213) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:290) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [junit-4.11.jar:na]\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:292) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:233) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:87) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) [junit-4.11.jar:na]\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) [junit-4.11.jar:na]\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) [junit-4.11.jar:na]\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) [junit-4.11.jar:na]\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) [junit-4.11.jar:na]\n\tat org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309) [junit-4.11.jar:na]\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:176) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) [.cp/:na]\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) [.cp/:na]\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) [.cp/:na]\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) [.cp/:na]\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) [.cp/:na]\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) [.cp/:na]\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'testConfiguration': BeanPostProcessor before instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.cache.annotation.ProxyCachingConfiguration': BeanPostProcessor before instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire method: public void org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration.setObjectPostProcessor(org.springframework.security.config.annotation.ObjectPostProcessor); nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'objectPostProcessor' defined in class org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration: Initialization of bean failed; nested exception is org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class [class org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor]: Common causes of this problem include using a final class or a non-visible class; nested exception is java.lang.IllegalArgumentException: Cannot subclass final class class org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:471) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932) ~[spring-context-3.2.8.RELEASE.jar:3.2.8.RELEASE]\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479) ~[spring-context-3.2.8.RELEASE.jar:3.2.8.RELEASE]\n\tat org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:125) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:100) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:250) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContextInternal(CacheAwareContextLoaderDelegate.java:64) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:91) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\t... 25 common frames omitted\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.cache.annotation.ProxyCachingConfiguration': BeanPostProcessor before instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire method: public void org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration.setObjectPostProcessor(org.springframework.security.config.annotation.ObjectPostProcessor); nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'objectPostProcessor' defined in class org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration: Initialization of bean failed; nested exception is org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class [class org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor]: Common causes of this problem include using a final class or a non-visible class; nested exception is java.lang.IllegalArgumentException: Cannot subclass final class class org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:471) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:370) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1094) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:989) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper.findAdvisorBeans(BeanFactoryAdvisorRetrievalHelper.java:92) ~[spring-aop-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findCandidateAdvisors(AbstractAdvisorAutoProxyCreator.java:101) ~[spring-aop-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.findCandidateAdvisors(AnnotationAwareAspectJAutoProxyCreator.java:85) ~[spring-aop-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.shouldSkip(AspectJAwareAdvisorAutoProxyCreator.java:103) ~[spring-aop-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessBeforeInstantiation(AbstractAutoProxyCreator.java:289) ~[spring-aop-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:958) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:930) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:465) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\t... 38 common frames omitted\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire method: public void org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration.setObjectPostProcessor(org.springframework.security.config.annotation.ObjectPostProcessor); nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'objectPostProcessor' defined in class org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration: Initialization of bean failed; nested exception is org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class [class org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor]: Common causes of this problem include using a final class or a non-visible class; nested exception is java.lang.IllegalArgumentException: Cannot subclass final class class org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:370) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1094) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:989) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper.findAdvisorBeans(BeanFactoryAdvisorRetrievalHelper.java:92) ~[spring-aop-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findCandidateAdvisors(AbstractAdvisorAutoProxyCreator.java:101) ~[spring-aop-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.findCandidateAdvisors(AnnotationAwareAspectJAutoProxyCreator.java:85) ~[spring-aop-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.shouldSkip(AspectJAwareAdvisorAutoProxyCreator.java:103) ~[spring-aop-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessBeforeInstantiation(AbstractAutoProxyCreator.java:289) ~[spring-aop-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:958) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:930) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:465) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\t... 59 common frames omitted\nCaused by: org.springframework.beans.factory.BeanCreationException: Could not autowire method: public void org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration.setObjectPostProcessor(org.springframework.security.config.annotation.ObjectPostProcessor); nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'objectPostProcessor' defined in class org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration: Initialization of bean failed; nested exception is org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class [class org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor]: Common causes of this problem include using a final class or a non-visible class; nested exception is java.lang.IllegalArgumentException: Cannot subclass final class class org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.inject(AutowiredAnnotationBeanPostProcessor.java:596) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\t... 83 common frames omitted\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'objectPostProcessor' defined in class org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration: Initialization of bean failed; nested exception is org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class [class org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor]: Common causes of this problem include using a final class or a non-visible class; nested exception is java.lang.IllegalArgumentException: Cannot subclass final class class org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:547) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1017) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.inject(AutowiredAnnotationBeanPostProcessor.java:553) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\t... 85 common frames omitted\nCaused by: org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class [class org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor]: Common causes of this problem include using a final class or a non-visible class; nested exception is java.lang.IllegalArgumentException: Cannot subclass final class class org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor\n\tat org.springframework.aop.framework.CglibAopProxy.getProxy(CglibAopProxy.java:212) ~[spring-aop-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.aop.framework.ProxyFactory.getProxy(ProxyFactory.java:109) ~[spring-aop-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.createProxy(AbstractAutoProxyCreator.java:494) ~[spring-aop-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:379) ~[spring-aop-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:339) ~[spring-aop-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:421) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1558) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539) ~[spring-beans-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\t... 94 common frames omitted\nCaused by: java.lang.IllegalArgumentException: Cannot subclass final class class org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor\n\tat org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:446) ~[spring-core-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.cglib.transform.TransformingClassGenerator.generateClass(TransformingClassGenerator.java:33) ~[spring-core-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25) ~[spring-core-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:216) ~[spring-core-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:377) ~[spring-core-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.cglib.proxy.Enhancer.createClass(Enhancer.java:317) ~[spring-core-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.aop.framework.ObjenesisCglibAopProxy.createProxyClassAndInstance(ObjenesisCglibAopProxy.java:57) ~[spring-aop-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\tat org.springframework.aop.framework.CglibAopProxy.getProxy(CglibAopProxy.java:202) ~[spring-aop-4.0.6.RELEASE.jar:4.0.6.RELEASE]\n\t... 101 common frames omitted\n```\n\nThe most strange thing is, if we removed `@EnableRetry`, any combination of `@EnableScheduling`, `@EnableCaching` and `@EnableGlobalMethodSecurity` will not cause any exception.\nSo I think this issue is related to spring-retry instead of spring-secutiry. I prepared a simple test case with Maven in attachment.\n\n\n---\n\n**Affects:** 1.1.0\n\n**Attachments:**\n- [spring-security-retry-conflict.7z](https://jira.spring.io/secure/attachment/22130/spring-security-retry-conflict.7z) (_1.34 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1328", "user": "spring-issuemaster", "labels": ["in: retry", "type: bug"], "created": "2014-07-21 02:55:24", "closed": "2014-09-03 07:15:30", "commits": {}, "ttf": 44.000277777777775, "commitsDetails": []}, {"title": "Documentation error \"change the status to FAILED if it is not restartable\" [BATCH-2278]", "body": "**[Mathieu Agar](https://jira.spring.io/secure/ViewProfile.jspa?name=magar)** opened **[BATCH-2278](https://jira.spring.io/browse/BATCH-2278?redirect=false)** and commented\n\nSee the Reference URL. At the very bottom of the page, the documentation says :\n\n\"A job execution which is FAILED can be restarted (if the Job is restartable).\"\n\nAnd a few sentences later :\n\n\"Only change the status to FAILED if it is not restartable,...\"\n\nI believe the \"not\" shouldn't be there.\n\n\n---\n\n**Affects:** 3.0.1\n\n**Reference URL:** http://docs.spring.io/spring-batch/trunk/reference/html/configureJob.html\n", "url": "https://github.com/spring-projects/spring-batch/issues/1327", "user": "spring-issuemaster", "labels": ["in: documentation", "status: declined", "type: bug"], "created": "2014-07-21 04:45:26", "closed": "2014-07-21 09:02:59", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "MultiResourceItemWriter does not update currentResourceItemCount correctly [BATCH-2279]", "body": "**[Magdalena Moeller](https://jira.spring.io/secure/ViewProfile.jspa?name=magdalena)** opened **[BATCH-2279](https://jira.spring.io/browse/BATCH-2279?redirect=false)** and commented\n\nI have a requirement to add to each written file the footer with the amount of written lines e.g. it should look like F;100 if 100 lines were processed therefore I needed to get this count from the executionContext. I expected this value in currentResourceItemCount. But method update is called always before write and currentResourceItemCount is always 0 in executionContext.\n\n\n\n---\n\n**Affects:** 3.0.1\n\n**Reference URL:** http://stackoverflow.com/questions/24607527/how-to-get-currentresourceitemcount-from-multiresourceitemwriter\n", "url": "https://github.com/spring-projects/spring-batch/issues/1326", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2014-07-22 04:27:37", "closed": "2015-02-05 13:29:30", "commits": {}, "ttf": 198.00027777777777, "commitsDetails": []}, {"title": "Unexpected exception parsing XML document from file AC-Jobs.xml [BATCH-2280]", "body": "**[pypsx](https://jira.spring.io/secure/ViewProfile.jspa?name=pypsx)** opened **[BATCH-2280](https://jira.spring.io/browse/BATCH-2280?redirect=false)** and commented\n\n```\nERROR o.s.web.context.ContextLoader - Context initialization failed\norg.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from file [D:\\SGTC\\tomcat-tdp\\webapps\\tbm-sync\\WEB-INF\\classes\\META-INF\\sync\\services\\AC-Jobs.xml]; nested exception is java.util.EmptyStackException\n\tat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:412) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat com.tesla.framework.core.config.parser.AutoConfigSupportBeanDefinitionParser.doParse(AutoConfigSupportBeanDefinitionParser.java:43) ~[tesla-core-1.2.1-SNAPSHOT.jar:1.2.1-SNAPSHOT]\n\tat org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser.parseInternal(AbstractSingleBeanDefinitionParser.java:85) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.AbstractBeanDefinitionParser.parse(AbstractBeanDefinitionParser.java:59) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:73) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1438) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1428) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:185) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:139) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:108) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:125) ~[spring-web-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:94) ~[spring-web-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:130) ~[spring-context-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:537) ~[spring-context-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:451) ~[spring-context-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat com.tesla.framework.core.springext.context.TeslaComponentsLoader.finishRefresh(TeslaComponentsLoader.java:232) [tesla-core-1.2.1-SNAPSHOT.jar:1.2.1-SNAPSHOT]\n\tat com.tesla.framework.core.springext.context.TeslaComponentsContext.finishRefresh(TeslaComponentsContext.java:50) ~[tesla-core-1.2.1-SNAPSHOT.jar:1.2.1-SNAPSHOT]\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482) ~[spring-context-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:389) ~[spring-web-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:294) ~[spring-web-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat com.tesla.framework.core.springext.context.TeslaComponentsLoader.initWebApplicationContext(TeslaComponentsLoader.java:119) [tesla-core-1.2.1-SNAPSHOT.jar:1.2.1-SNAPSHOT]\n\tat org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:112) [spring-web-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4939) [catalina.jar:7.0.42]\n\tat org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5434) [catalina.jar:7.0.42]\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) [catalina.jar:7.0.42]\n\tat org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559) [catalina.jar:7.0.42]\n\tat org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549) [catalina.jar:7.0.42]\n\tat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) [na:1.6.0_26]\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:138) [na:1.6.0_26]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_26]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_26]\n\tat java.lang.Thread.run(Thread.java:662) [na:1.6.0_26]\nCaused by: java.util.EmptyStackException: null\n\tat java.util.Stack.peek(Stack.java:85) ~[na:1.6.0_26]\n\tat java.util.Stack.pop(Stack.java:67) ~[na:1.6.0_26]\n\tat org.springframework.beans.factory.xml.ParserContext.popContainingComponent(ParserContext.java:102) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.ParserContext.popAndRegisterContainingComponent(ParserContext.java:106) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.batch.core.configuration.xml.InlineFlowParser.doParse(InlineFlowParser.java:56) ~[spring-batch-core-2.2.7.RELEASE.jar:na]\n\tat org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser.parseInternal(AbstractSingleBeanDefinitionParser.java:85) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.AbstractBeanDefinitionParser.parse(AbstractBeanDefinitionParser.java:59) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.batch.core.configuration.xml.JobParser.doParse(JobParser.java:122) ~[spring-batch-core-2.2.7.RELEASE.jar:na]\n\tat org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser.parseInternal(AbstractSingleBeanDefinitionParser.java:85) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.AbstractBeanDefinitionParser.parse(AbstractBeanDefinitionParser.java:59) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:73) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1438) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1428) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:185) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:139) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:108) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\tat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE]\n\t... 43 common frames omitted\n```\n\n\n\n---\n\n**Affects:** 2.2.7\n\n**Attachments:**\n- [AC-Jobs.xml](https://jira.spring.io/secure/attachment/22141/AC-Jobs.xml) (_9.87 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1325", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2014-07-24 19:48:12", "closed": "2015-02-05 13:47:35", "commits": {}, "ttf": 195.00027777777777, "commitsDetails": []}, {"title": "HibernateItemWriter does not open or commit sessions [BATCH-2281]", "body": "**[M.P. Korstanje](https://jira.spring.io/secure/ViewProfile.jspa?name=mpkorstanje)** opened **[BATCH-2281](https://jira.spring.io/browse/BATCH-2281?redirect=false)** and commented\n\nUsing hibernate item writer with a hibernate SessionFactory to write to a H2 database results in:\n\norg.hibernate.HibernateException: contains is not valid without active transaction at HibernateItemWriter.java:139\n\nThis can be solved by adding Transaction tx = sessionFactory.getCurrentSession().beginTransaction(); before calling doWrite() .\n\nTo ensure data is commited to database tx.commit();  needs to be called instead of sessionFactory.getCurrentSession().flush(); tx.commit() will also flush the current session.\n\nHibernateTemplate and Session work differently here. May need expert for revision, only just got started on hibernate. Can provide reasonably small sample project to reproduce issue.\n\n\n---\n\n**Affects:** 3.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/1324", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: invalid", "type: bug"], "created": "2014-07-26 09:14:49", "closed": "2014-08-14 11:11:13", "commits": {}, "ttf": 19.00027777777778, "commitsDetails": []}, {"title": "MessageChannelPartitionHandler keeps waiting for response even though no step execution request messages sent when there is no input. [BATCH-2283]", "body": "**[Vishal Melmatti](https://jira.spring.io/secure/ViewProfile.jspa?name=vishalmelmatti)** opened **[BATCH-2283](https://jira.spring.io/browse/BATCH-2283?redirect=false)** and commented\n\nHi,\n\nI am using spring batch remote partitioning using rabbitmq and spring integration.\n\nFor some of my steps, there are no input files so MultiResourcePartitioner do not create any partitions. In this case, in MessageChannelPartitionHandler.handle method, as split.size will be 0 it won't go inside for loop and wont sent any messages. But still below the for loop, it waits for response as it use\nmessagingGateway.receive(replyChannel); without checking message sent or not.\nSo steps for which there are no input files, steps just hangs and doesn't do anything. Ideally it should consider such steps as successful.\n\nMore details\n\nhttp://stackoverflow.com/questions/24955459/how-does-messagechannelpartitionhandler-in-spring-batch-behave-if-resource-path\n\n```java\n\tpublic Collection<StepExecution> handle(StepExecutionSplitter stepExecutionSplitter,\n\t\t\tStepExecution masterStepExecution) throws Exception {\n\n\t\tSet<StepExecution> split = stepExecutionSplitter.split(masterStepExecution, gridSize);\n\t\tint count = 0;\n\t\t\n\t\tif (replyChannel == null) {\n\t\t\treplyChannel = new QueueChannel();\n\t\t}//end if \n\t\t\n\t\tfor (StepExecution stepExecution : split) {\n\t\t\tMessage<StepExecutionRequest> request = createMessage(count++, split.size(), new StepExecutionRequest(\n\t\t\t\t\tstepName, stepExecution.getJobExecutionId(), stepExecution.getId()), replyChannel);\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Sending request: \" + request);\n\t\t\t}\n\t\t\tmessagingGateway.send(request);\n\t\t}\n\n\t\tMessage<Collection<StepExecution>> message = messagingGateway.receive(replyChannel);\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Received replies: \" + message);\n\t\t}\n\t\tCollection<StepExecution> result = message.getPayload();\n\t\treturn result;\n\n\t}\n```\n\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/0e14ba26a83cae2bed0647ee09fc7c7ab6ceb7b5, https://github.com/spring-projects/spring-batch/commit/deb4c6fb5b7075b81620333910df00e01a79b6c4\n", "url": "https://github.com/spring-projects/spring-batch/issues/1322", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2014-07-30 09:09:35", "closed": "2014-08-06 14:54:49", "commits": {}, "ttf": 7.000277777777778, "commitsDetails": []}, {"title": "JobLauncherTestUtils#launchStep fails when using `on` method from SimpleJobBuilder [BATCH-2285]", "body": "**[Josh Brackett](https://jira.spring.io/secure/ViewProfile.jspa?name=jbrackett)** opened **[BATCH-2285](https://jira.spring.io/browse/BATCH-2285?redirect=false)** and commented\n\nIf I create a job using:\n\n> JobBuilderFactory jobs = new JobBuilderFactory(jobRepository);\n> \n> return jobs.get(\"testJob\").incrementer(new RunIdIncrementer()).start(step).on(\"*\").to(step2).build().build();\n\nthen I get a failure that \"No step found with name: ...\"\n\nUsing\n\n> return jobs.get(\"testJob\").incrementer(new RunIdIncrementer()).start(step).next(step2).build();\n\nworks as expected.\n\nPerhaps I'm just misunderstanding something or not configuring something correctly so I've created a simple project that replicates what I'm seeing.\n\n\n---\n\n**Affects:** 3.0.1\n\n**Reference URL:** https://github.com/jbrackett/SpringBatchTestFailure\n", "url": "https://github.com/spring-projects/spring-batch/issues/1320", "user": "spring-issuemaster", "labels": ["in: test", "type: bug"], "created": "2014-08-01 13:14:02", "closed": "2020-01-21 09:53:08", "commits": {}, "ttf": 1998.0002777777777, "commitsDetails": []}, {"title": "Multi-threaded Step don't excute parallel processing all the time [BATCH-2287]", "body": "**[Vick Lin](https://jira.spring.io/secure/ViewProfile.jspa?name=vickl)** opened **[BATCH-2287](https://jira.spring.io/browse/BATCH-2287?redirect=false)** and commented\n\nHi,\n\nI'm new to spring-batch and make a quick sample for multi-threaded Step,\n\nHere is my job config:\n\n\\<bean id=\"flatFileItemReader\" class=\"org.springframework.batch.item.file.FlatFileItemReader\">\n\\<property name=\"lineMapper\" ref=\"lineMapper\">\\</property>\n\\<property name=\"resource\" value=\"classpath:/cvs/input/sample-data.csv\">\\</property>\n\\</bean>\n\\<bean id=\"processor\" class=\"com.ehm.comparison.batch.SessionCodeItemProcessor\" />\n\n    <bean id=\"writer\" class=\"com.ehm.comparison.batch.SimpleItemWriter\" />\n    \n    <bean id=\"lineMapper\" class=\"org.springframework.batch.item.file.mapping.PassThroughLineMapper\" />\n    \n    <bean id=\"taskExecutor\"\n          class=\"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor\">\n        <property name=\"corePoolSize\" value=\"10\" />\n        <property name=\"maxPoolSize\" value=\"30\" />\n        <property name=\"queueCapacity\" value=\"50\" />\n    </bean>\n    \n    <batch:job id=\"myJob\">\n        <batch:step id=\"step1\">\n            <tasklet task-executor=\"taskExecutor\" throttle-limit=\"2\">\n                <chunk reader=\"flatFileItemReader\" processor=\"processor\"\n                       writer=\"writer\" commit-interval=\"5\"\n                       chunk-completion-policy=\"\">\n                </chunk>\n            </tasklet>\n        </batch:step>\n    </batch:job>\n    <bean id=\"jobRepository\" class=\"org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean\">\n        <property name=\"transactionManager\" ref=\"transactionManager\" />\n    </bean>\n    \n    <bean id=\"jobLauncher\"\n          class=\"org.springframework.batch.core.launch.support.SimpleJobLauncher\">\n        <property name=\"jobRepository\" ref=\"jobRepository\" />\n    </bean>\n    \n    <bean id=\"transactionManager\" class=\"org.springframework.batch.support.transaction.ResourcelessTransactionManager\"/>\n\nI did some logging in writer to track thread..since the throttle-limit being set to 2,  I can see the process will begin with two thread excuting concurrently, but then the other threads are excuting synchronously, see log :\n\ntaskExecutor-2 - begin writer :\ntaskExecutor-1 - begin writer :\ntaskExecutor-1 - write : 1\ntaskExecutor-1 - write : 4\ntaskExecutor-1 - write : 7\ntaskExecutor-1 - write : 9\ntaskExecutor-1 - write : 10\ntaskExecutor-2 - write : 2\ntaskExecutor-2 - write : 3\ntaskExecutor-2 - write : 5\ntaskExecutor-2 - write : 6\ntaskExecutor-2 - write : 8\ntaskExecutor-3 - begin writer :\ntaskExecutor-3 - write : 11\ntaskExecutor-3 - write : 12\ntaskExecutor-3 - write : 13\ntaskExecutor-3 - write : 14\ntaskExecutor-3 - write : 15\ntaskExecutor-4 - begin writer :\ntaskExecutor-4 - write : 16\ntaskExecutor-4 - write : 17\ntaskExecutor-4 - write : 18\ntaskExecutor-4 - write : 19\ntaskExecutor-4 - write : 20\n\nLooks like taskExecutor-3 and taskExecutor-4 output in order\n\nis there any wrong way I go ? please help advise, thanks!\n\n\n---\n\n**Affects:** 2.2.1\n\n**Attachments:**\n- [log.txt](https://jira.spring.io/secure/attachment/22163/log.txt) (_133.02 kB_)\n- [spring.xml](https://jira.spring.io/secure/attachment/22164/spring.xml) (_4.78 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1318", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2014-08-07 00:55:16", "closed": "2014-08-14 04:47:08", "commits": {}, "ttf": 7.000277777777778, "commitsDetails": []}, {"title": "Rest Call to Launch Job: JobExecution Could not write JSON: Infinite recursion (StackOverflowError) [BATCH-2258]", "body": "**[Andrew McCubbin](https://jira.spring.io/secure/ViewProfile.jspa?name=amccubbin)** opened **[BATCH-2258](https://jira.spring.io/browse/BATCH-2258?redirect=false)** and commented\n\nAfter successful job launch via a REST call, the JobExecution is not able to be written to JSON for the response.\n\nError arises in invokeAndHandle method of\norg.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod\n\nCould not write JSON: Infinite recursion (StackOverflowError) (through reference chain: org.springframework.batch.core.JobExecution[\"stepExecutions\"]-java.util.UnmodifiableRandomAccessList[0]-org.springframework.batch.core.StepExecution[\"jobExecution\"]-org.springframework.batch.core.JobExecution[\"stepExecutions\"]-java.util.UnmodifiableRandomAccessList[0]-org.springframework.batch.core.StepExecution[\"jobExecution\"]-org.springframework.batch.core.JobExecution[\"stepExecutions\"]...\n\n\n\n---\n\n**Affects:** 4.0.0, 3.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/1314", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2014-06-20 14:30:53", "closed": "2014-08-14 07:41:59", "commits": {}, "ttf": 54.000277777777775, "commitsDetails": []}, {"title": "JpaPagingItemReader leaks connections on errors [BATCH-2260]", "body": "**[Matt Whipple](https://jira.spring.io/secure/ViewProfile.jspa?name=mwhipple)** opened **[BATCH-2260](https://jira.spring.io/browse/BATCH-2260?redirect=false)** and commented\n\nJpaPagingItemReader leaks DB connections if an exception is thrown.  The specific scenario for which this manifested was that the table bound to the entity was not present in the DB for all environments.\n\nSetting `transacted` to false avoids the issue\n\nOutput from DBCP with logging abandoned connections:\n\n```\norg.apache.commons.dbcp.AbandonedTrace$AbandonedObjectException: DBCP object created 2014-06-21 15:35:16 by the following code was never closed:\n\tat org.apache.commons.dbcp.AbandonedTrace.setStackTrace(AbandonedTrace.java:139)\n\tat org.apache.commons.dbcp.AbandonedObjectPool.borrowObject(AbandonedObjectPool.java:81)\n\tat org.apache.commons.dbcp.PoolingDataSource.getConnection(PoolingDataSource.java:106)\n\tat org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)\n\tat org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider.getConnection(InjectedDataSourceConnectionProvider.java:70)\n\tat org.hibernate.internaactSessionImpl$NonContextualJdbcConnectionAccess.obtainConnection(AbstractSessionImpl.java:292)\n\tat org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:214)\n\tat org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.getConnection(LogicalConnectionImpl.java:157)\n\tat org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:67)\n\tat org.hibernate.engine.transaction.spi.AbstractTransactionImpl.begin(AbstractTransactionImpl.java:160)\n\tat org.hibernate.internal.SessionImpl.beginTransaction(SessionImpl.java:1426)\n\tat org.hibernate.ejb.TransactionImpl.begin(TransactionImpl.java:59)\n\tat org.springframework.batch.item.database.JpaPagingItemReader.doReadPage(JpaPagingItemReader.java:197)\n\tat org.springframework.batch.item.database.AbstractPagingItemReader.doRead(AbstractPagingItemReader.java:108)\n\tat org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:83)\n\tat sun.reflect.GeneratedMethodAccessor48.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\n\tat org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:133)\n\tat org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:121)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)\n\tat com.sun.proxy.$Proxy73.read(Unknown Source)\n\tat org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:91)\n\tat org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:155)\n\tat org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:114)\n\tat org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:368)\n\tat org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)\n\tat org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:144)\n\tat org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:108)\n\tat org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:69)\n\tat org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:395)\n\tat org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:133)\n\tat org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:267)\n\tat org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:77)\n\tat org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:368)\n\tat org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)\n\tat org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:144)\n\tat org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:253)\n\tat org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:195)\n\tat org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:141)\n\tat org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:64)\n\tat org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:60)\n\tat org.springframeworkcore.job.flow.support.SimpleFlow.resume(SimpleFlow.java:151)\n\tat org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:130)\n\tat org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:135)\n\tat org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:301)\n\tat org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:134)\n\tat org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)\n\tat org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:127)\n```\n\n\n\n---\n\n**Affects:** 2.2.6\n", "url": "https://github.com/spring-projects/spring-batch/issues/1313", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2014-06-21 12:42:56", "closed": "2014-07-02 17:33:46", "commits": {}, "ttf": 11.000277777777777, "commitsDetails": []}, {"title": "Unable to Test Launching Steps of a FlowJob when it is created using Java Config [BATCH-2291]", "body": "**[Faisal Feroz](https://jira.spring.io/secure/ViewProfile.jspa?name=faisalferoz)** opened **[BATCH-2291](https://jira.spring.io/browse/BATCH-2291?redirect=false)** and commented\n\nJobLauncherTestUtils uses the following code to locate the step in a job\n\n```java\nStepLocator locator = (StepLocator) this.job;\nStep step = locator.getStep(stepName);\nif (step == null) {\n    step = locator.getStep(this.job.getName() + \".\" + stepName);\n}\n```\n\nThis isn't able to find the step if the Flow Job is created using java config using jobBuilders.\n\nThe issue is that the builder creates a SimpleFlow object inside who's `afterPropertiesSet` is never fired which calls `initializeTransitions` which is responsible for populating all the states in the state map. The issue never appears when the job is executed because the same method is fired in start method of the flow (which populates all the data structures etc.) but in case of launching a step using `JobLauncherTestUtils` it is trying to find the step the respective stateMaps etc. are never populated which results in the following exception every time:\n\n```xml\njava.lang.IllegalStateException: No Step found with name: [categoryClassificationStep]\n\tat org.springframework.batch.test.JobLauncherTestUtils.launchStep(JobLauncherTestUtils.java:237)\n\tat org.springframework.batch.test.JobLauncherTestUtils.launchStep(JobLauncherTestUtils.java:187)\n\tat com.etilize.sde.core.category.CategoryClassificationStepTest.shouldClassifyAndPersistProduct(CategoryClassificationStepTest.java:18)\n```\n\n\n\n---\n\n**Affects:** 3.0.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/930177ec34618c73578d79d06e181a1962005da1, https://github.com/spring-projects/spring-batch/commit/f865eb0135f13675abaf4dcef5360d50916f1d6c\n", "url": "https://github.com/spring-projects/spring-batch/issues/1311", "user": "spring-issuemaster", "labels": ["in: core", "in: test", "type: bug"], "created": "2014-08-09 01:57:44", "closed": "2014-10-15 13:51:18", "commits": {}, "ttf": 67.00027777777778, "commitsDetails": []}, {"title": "NPE in asynchronous writer in spring batch integration [BATCH-2297]", "body": "**[Sudharma Karekar](https://jira.spring.io/secure/ViewProfile.jspa?name=kaiser101)** opened **[BATCH-2297](https://jira.spring.io/browse/BATCH-2297?redirect=false)** and commented\n\nAs described in the link below, I tried to setup asynchronous processors and writers.\nhttp://docs.spring.io/spring-batch/reference/html/springBatchIntegration.html#asynchronous-processors\n\nIn my case the processor is also used to filter objects, i.e. the processor can potentially return a null. This results in a NPE in the writer when it tries to write the object.\n\nA simple null check in the asynchronous writer when populating the final list sent to the delegate should solve this problem.\n\n\n---\nNo further details from [BATCH-2297](https://jira.spring.io/browse/BATCH-2297?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/1306", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2014-08-27 05:14:06", "closed": "2014-09-11 19:17:12", "commits": {}, "ttf": 15.000277777777777, "commitsDetails": []}, {"title": "RetryTemplate causes rollback exceptions to fail whole chunk [BATCH-2298]", "body": "**[Chris Shumaker](https://jira.spring.io/secure/ViewProfile.jspa?name=cshumake)** opened **[BATCH-2298](https://jira.spring.io/browse/BATCH-2298?redirect=false)** and commented\n\nWhen an exception occurs in a chunk, the retry template will maintain the last exception thrown.\n\nGiven a recurrent exception, like a validation exception in a processor, Spring Batch will handle each record in the chunk as a skip and reuse the first exception as the throwable. I believe this is because of the Retry Template's reuse of the lastException variable.\n\nIt is hard for me to say if this applies to 3.x versions of Spring Batch. It looks like Spring Retry was separated into it's own project but I'm not sure if this behavior still exists in Spring Batch after 2.x versions.\n\nI'm not sure if 2.x is still maintained but if so, I can provide more details and have ideas on a potential resolution. For example, a configurable ChunkException which wraps the lastException instead of rethrowing it. That would at least make the error apparent to the developer and creates awareness by documenting the feature.\n\n\n---\n\n**Affects:** 2.2.0.RC2\n\n**Reference URL:** https://github.com/spring-projects/spring-retry/blob/master/src/main/java/org/springframework/retry/support/RetryTemplate.java\n", "url": "https://github.com/spring-projects/spring-batch/issues/1305", "user": "spring-issuemaster", "labels": ["in: retry", "type: bug"], "created": "2014-08-29 06:25:39", "closed": "2020-01-21 10:11:05", "commits": {}, "ttf": 1971.0002777777777, "commitsDetails": []}, {"title": "Important Javadoc for JPAPagingItemReader incorrect [BATCH-2299]", "body": "**[Tim Canavan](https://jira.spring.io/secure/ViewProfile.jspa?name=tcanavan)** opened **[BATCH-2299](https://jira.spring.io/browse/BATCH-2299?redirect=false)** and commented\n\nThe following important javadoc seems to be incorrect\n\n* In order to reduce the memory usage for large results the persistence context\n* is flushed and cleared after each page is read. This causes any entities read\n* to be detached. If you make changes to the entities and want the changes\n* persisted then you must explicitly merge the entities.\n\nThis was the old behaviour now the flush and clear have been moved to the\nstart of the method doReadPage before the db read takes place.\n\nThe objects are then manually detached if transacted boolean is set to false. The default is true.\n\nI assume the default behaviour should be.\n\n1: Read data into session.\n2: Updates get automatically synched to the database on commit.\n3. Subsequent reads for a given transaction clear the session in order to avoid  excessive memory usage\n\nSee the doReadPage method in the above class.\n\n```\nif (!transacted) {\n    List<T> queryResult = query.getResultList();\n    for (T entity : queryResult) {\n        entityManager.detach(entity);\n        results.add(entity);\n    }//end if\n} else {\n    results.addAll(query.getResultList());\n    tx.commit();\n}//end if\n```\n\n\n\n---\n\n**Affects:** 3.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/1303", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: invalid", "type: bug"], "created": "2014-09-01 13:11:59", "closed": "2014-09-02 14:46:54", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "exception on process while recovering from rollback on write causes deadlock [BATCH-2302]", "body": "**[zyro](https://jira.spring.io/secure/ViewProfile.jspa?name=zyro)** opened **[BATCH-2302](https://jira.spring.io/browse/BATCH-2302?redirect=false)** and commented\n\nwhen a chunk is throwing an exception during process while it is recovering from an exception/rollback on write, i am facing a reproducible deadlock.\nseems the second-run processing is then tried 3 times (RetryTemplate default?) and then the commitCount keeps just growing with the logs showing some kind of loop involving constantly busy inputs around https://github.com/spring-projects/spring-batch/blob/master/spring-batch-core/src/main/java/org/springframework/batch/core/step/item/ChunkOrientedTasklet.java#L81.\n\nexample project based on batch getting started guide showing the problem attached (gradle build, 2.0 wrapper included).\n\nthanks, zyro\n\n\n---\n\n**Affects:** 3.0.1\n\n**Attachments:**\n- [inputs-busy-example.zip](https://jira.spring.io/secure/attachment/22207/inputs-busy-example.zip) (_51.73 kB_)\n\n**Issue Links:**\n- [BATCH-2442](https://jira.spring.io/browse/BATCH-2442) When an error is thrown on write and another error is thrown on process during retry, the job gets in a infinite loop and never finishes.\n\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/8df217afeba6329684ff742cd84eaa8d57d4447f, https://github.com/spring-projects/spring-batch/commit/5b056e812667a49e35f04775279f8e1f43f66f4e\n", "url": "https://github.com/spring-projects/spring-batch/issues/1301", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-09-12 01:05:33", "closed": "2018-03-27 12:25:49", "commits": {}, "ttf": 1292.0002777777777, "commitsDetails": []}, {"title": "@Qualifier-Annotation not working in combination with AutomaticJobRegistrar [BATCH-2303]", "body": "**[Dennis Schulte](https://jira.spring.io/secure/ViewProfile.jspa?name=denschu)** opened **[BATCH-2303](https://jira.spring.io/browse/BATCH-2303?redirect=false)** and commented\r\n\r\nIt seems there is a bug when I want to use the `@Qualifier-Annotation` in combination with the AutomaticJobRegistrar. Autowiring without Qualifiers is fully working. The problem is that Spring doesn't find the referenced bean \"subExampleService\" that is annotated with `@Qualifier` inside the \"exampleService\"-Bean.\r\n\r\nXML-Snippet:\r\n\r\n```xml\r\n<bean id=\"exampleService\" class=\"de.codecentric.batch.item.ExampleService\"/>\r\n<bean id=\"subExampleService\" class=\"de.codecentric.batch.item.SubExampleService\"/>\r\n```\r\n\r\nJava-Snippet:\r\n\r\n```java\r\npublic class ExampleService {\r\n\r\n    @Autowired\r\n    @Qualifier(\"subExampleService\")\r\n    SubExampleService subExampleService;\r\n    \r\n    public String echo(String echo){\r\n    \treturn subExampleService.echo(echo);\r\n    }\r\n\r\n}\r\n```\r\n\r\nI've added an example project with a test case \"ApplicationTests\" which produces the exception: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'subExampleService' is defined\r\n\r\n\r\n---\r\n\r\n**Affects:** 3.0.1\r\n\r\n**Reference URL:** https://github.com/codecentric/spring-samples/tree/master/batch-simple\r\n", "url": "https://github.com/spring-projects/spring-batch/issues/1300", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-09-13 00:43:19", "closed": "2020-01-21 10:45:07", "commits": {}, "ttf": 1956.0002777777777, "commitsDetails": []}, {"title": "ClassifierCompositeItemWriter does not honor order of items [BATCH-2305]", "body": "**[Adam Richeimer](https://jira.spring.io/secure/ViewProfile.jspa?name=adamzr)** opened **[BATCH-2305](https://jira.spring.io/browse/BATCH-2305?redirect=false)** and commented\n\nWhen using the ClassifierCompositeItemWriter the order of the items as returned by the reader should be the order the objects are written. However, this is not true. The items are written in an arbitrary order.\n\n\n---\nNo further details from [BATCH-2305](https://jira.spring.io/browse/BATCH-2305?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/1298", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2014-09-15 18:06:44", "closed": "2014-09-18 14:41:27", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "Partitioner data lose - SqlPagingQueryProviderFactoryBean [BATCH-2309]", "body": "**[Victor Jabur](https://jira.spring.io/secure/ViewProfile.jspa?name=victorjabur)** opened **[BATCH-2309](https://jira.spring.io/browse/BATCH-2309?redirect=false)** and commented\n\nI created a project based on \"Reference URL\" mentioned above that seems to lose data. The configuration where the problem occurs is listed below:\n\ngrid-size=10\ncommit-interval=100\npageSize=1000\n\nmaxActive=11 (org.apache.commons.dbcp.BasicDataSource)\nmaxIdle=11     (org.apache.commons.dbcp.BasicDataSource)\n\nMy source table (oracle database 11g) has 10387 records, but when the job process, it only takes 10117 records to the target database (also oracle 11g).\n\nTo conclude, that are 270 records that weren't integrated.\n\n\n---\n\n**Affects:** 2.1.7, 3.0.1\n\n**Reference URL:** https://github.com/spring-projects/spring-batch/blob/master/spring-batch-samples/src/main/resources/jobs/partitionJdbcJob.xml\n", "url": "https://github.com/spring-projects/spring-batch/issues/1294", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2014-10-09 17:39:24", "closed": "2014-11-11 07:21:46", "commits": {}, "ttf": 32.000277777777775, "commitsDetails": []}, {"title": "JobLauncher allows restart of job_execution with status UNKNOWN [BATCH-2311]", "body": "**[Jimmy Praet](https://jira.spring.io/secure/ViewProfile.jspa?name=jpraet)** opened **[BATCH-2311](https://jira.spring.io/browse/BATCH-2311?redirect=false)** and commented\n\nAfter experiencing some technical problems with our database, several job_execution and step_execution ended up in status UNKNOWN.\n\nNormally the JobLauncher checks this and does not allow restart of these jobs. But it looks like the checks that are done do not cover all scenarios.\n\nFor example it was possible to restart this job:\n\n```\n\nBATCH.BATCH_JOB_EXECUTION:\n\nJOB_EXECUTION_ID,VERSION,JOB_INSTANCE_ID,CREATE_TIME,START_TIME,END_TIME,STATUS,EXIT_CODE,EXIT_MESSAGE,LAST_UPDATED\n1558162,2,1534110,2014-09-23 23:50:19.117,2014-09-23 23:50:19.125,2014-09-24 09:00:07.124,UNKNOWN ,UNKNOWN,,2014-09-24 09:00:07.171\n```\n\n```\nBATCH.BATCH_STEP_EXECUTION:\n\nSTEP_EXECUTION_ID,VERSION,STEP_NAME,JOB_EXECUTION_ID,START_TIME,END_TIME,STATUS,COMMIT_COUNT,READ_COUNT,FILTER_COUNT,WRITE_COUNT,READ_SKIP_COUNT,WRITE_SKIP_COUNT,PROCESS_SKIP_COUNT,ROLLBACK_COUNT,EXIT_CODE,EXIT_MESSAGE,LAST_UPDATED\n5536872,31,stepname,1558162,2014-09-23 23:50:19.166,[NULL],STARTED ,30,2672,0,2672,0,0,0,0,EXECUTING,,2014-09-24 00:19:08.697\n```\n\nThe job execution was in status UNKNOWN, and the step execution was in status STARTED.\n\n```java\nJobExecution lastExecution = jobRepository.getLastJobExecution(job.getName(), jobParameters);\nif (lastExecution != null) {\n    if (!job.isRestartable()) {\n        throw new JobRestartException(\"JobInstance already exists and is not restartable\");\n    }\n    /*\n     * validate here if it has stepExecutions that are UNKNOWN\n     * retrieve the previous execution and check\n     */\n    for (StepExecution execution : lastExecution.getStepExecutions()) {\n        if (execution.getStatus() == BatchStatus.UNKNOWN) {\n            //throw\n            throw new JobRestartException(\"Step [\" + execution.getStepName() + \"] is of status UNKNOWN\"); \n        }//end if\n    }//end for            \n}\n```\n\n```java\n            List<JobExecution> executions = jobExecutionDao.findJobExecutions(jobInstance);\n\n            // check for running executions and find the last started\n            for (JobExecution execution : executions) {\n                if (execution.isRunning()) {\n                    throw new JobExecutionAlreadyRunningException(\"A job execution for this job is already running: \" \n                            + jobInstance);\n                }\n\n                BatchStatus status = execution.getStatus();\n                if (status == BatchStatus.COMPLETED || status == BatchStatus.ABANDONED) {\n                    throw new JobInstanceAlreadyCompleteException(\n                            \"A job instance already exists and is complete for parameters=\" + jobParameters\n                            + \".  If you want to run this job again, change the parameters.\");\n                }\n            }\n```\n\nSo the code is only checking whether the job execution is STARTED, or the step execution is UNKNOWN. In our case, it was the other way around.\n\n\n---\n\n**Affects:** 2.2.7, 3.0.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/61638d52bd5b4850b1eda85643355c624941cf6a\n\n**Backported to:** [4.0.0.M1](https://github.com/spring-projects/spring-batch/milestone/84?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1292", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2014-10-15 02:42:52", "closed": "2017-07-20 17:26:56", "commits": {}, "ttf": 1009.0002777777778, "commitsDetails": []}, {"title": "Possible race condition leading to NullPointerException in SynchronizationManagerSupport [BATCH-2313]", "body": "**[Chad Wilson](https://jira.spring.io/secure/ViewProfile.jspa?name=voiceinsideyou)** opened **[BATCH-2313](https://jira.spring.io/browse/BATCH-2313?redirect=false)** and commented\n\nWe recently migrated to Spring Batch 3.x a system that has been running fine in production for a number of years on older Spring Batch 2.x releases. While this has been running fine in production for a couple of months now, yesterday a batch failed with what appears to be some kind of race condition / multithreading bug.\n\nRe-running the batch completely (which would operate on exactly the same data in a re-run) worked fine so this is not easily reproducible.\n\nThe error was\n\n```\n08:25:21,432  [main] AbstractJob ERROR <execute> - Encountered fatal error executing job\norg.springframework.batch.core.JobExecutionException: Flow execution ended unexpectedly\n        at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:140)\n        at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:304)\n        at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:135)\n        at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)\n        at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:128)\n        at org.springframework.batch.core.launch.support.CommandLineJobRunner.start(CommandLineJobRunner.java:362)\n        at org.springframework.batch.core.launch.support.CommandLineJobRunner.main(CommandLineJobRunner.java:590)\n        at com.ml.elt.automarking.util.AutomarkBatchCommandLineRunner.main(AutomarkBatchCommandLineRunner.java:14)\nCaused by: org.springframework.batch.core.job.flow.FlowExecutionException: Ended flow=ECIJob at state=ECIJob.loadXMLMaster with exception\n        at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:171)\n        at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:141)\n        at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:134)\n        ... 7 more\nCaused by: java.lang.NullPointerException\n        at org.springframework.batch.core.scope.context.SynchronizationManagerSupport.decrement(SynchronizationManagerSupport.java:149)\n        at org.springframework.batch.core.scope.context.SynchronizationManagerSupport.close(SynchronizationManagerSupport.java:143)\n        at org.springframework.batch.core.scope.context.SynchronizationManagerSupport.release(SynchronizationManagerSupport.java:193)\n        at org.springframework.batch.core.scope.context.StepSynchronizationManager.release(StepSynchronizationManager.java:112)\n        at org.springframework.batch.core.step.AbstractStep.doExecutionRelease(AbstractStep.java:284)\n        at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:274)\n        at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)\n        at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:64)\n        at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:67)\n        at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:162)\n        ... 9 more\n```\n\nIn the step that failed, the batch has been split into partitions with gridSize=2 running across 5 threads. it looks like the failure happened at the end of the step.\n\nHaving a look inside the code the NPE line is below. Could this be due to inconsistent synchronization or possibly an assumption that the count hasn't already been removed that is not true? Without being highly familiar with the code it looks a bit odd to me to synchronize on one field (counts) during increment, but another (contexts) during decrement.\n\n```java\nprivate void decrement() {\n\t\tE current = getCurrent().pop();\n\t\tif (current != null) {\n\t\t\tint remaining = counts.get(current).decrementAndGet(); // <--- PROBLEMATIC LINE\n\t\t\tif (remaining <= 0) {\n\t\t\t\tsynchronized (contexts) {\n\t\t\t\t\tcontexts.remove(current);\n\t\t\t\t\tcounts.remove(current);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void increment() {\n\t\tE current = getCurrent().peek();\n\t\tif (current != null) {\n\t\t\tAtomicInteger count;\n\t\t\tsynchronized (counts) {\n\t\t\t\tcount = counts.get(current);\n\t\t\t\tif (count == null) {\n\t\t\t\t\tcount = new AtomicInteger();\n\t\t\t\t\tcounts.put(current, count);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcount.incrementAndGet();\n\t\t}\n\t}\n```\n\n\n\n---\n\n**Affects:** 3.0.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/6863ace44dff7826a020ce55b920ab72a0838b48, https://github.com/spring-projects/spring-batch/commit/eafa7ee1525461d5af8618e3298a68ea830ff277\n", "url": "https://github.com/spring-projects/spring-batch/issues/1290", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-10-15 20:35:58", "closed": "2015-12-13 08:47:20", "commits": {}, "ttf": 423.0002777777778, "commitsDetails": []}, {"title": "Overriding transaction management [BATCH-2294]", "body": "**[Abhay](https://jira.spring.io/secure/ViewProfile.jspa?name=abhayp)** opened **[BATCH-2294](https://jira.spring.io/browse/BATCH-2294?redirect=false)** and commented\n\nSimpleBatchConfiguration which gets loaded by any of spring application, created transactionManager bean irrespective of whether that bean is already created or not. This results in overriding transaction manager\n\n`@ConditionalOnMissingBean` could be used for resolution of this issues\n\n\n---\n\n**Affects:** 3.0.1\n\n**Reference URL:** http://stackoverflow.com/q/25303163/3073323\n\n**Issue Links:**\n- [BATCH-2642](https://jira.spring.io/browse/BATCH-2642) Document how to make Spring Batch work with Spring Data JPA repositories\n (_**\"is depended on by\"**_)\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/609, and commits https://github.com/spring-projects/spring-batch/commit/a68d70043ae6c390a6a877cd435ccafec6cd9d62\n\n**Backported to:** [4.1.0.M3](https://github.com/spring-projects/spring-batch/milestone/95?closed=1)\n\n3 votes, 5 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1289", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2014-08-14 01:37:52", "closed": "2018-08-31 22:21:54", "commits": {}, "ttf": 1478.0002777777777, "commitsDetails": []}, {"title": "AsyncItemWriter should check for nulls [BATCH-2301]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2301](https://jira.spring.io/browse/BATCH-2301?redirect=false)** and commented\n\nWhen using the `AsyncItemProcessor` and `AsyncItemWriter`, the processor may return null values (values that are filtered out).  However, the `AsyncItemWriter` does not do null checks which can lead to NPEs in our OOTB `ItemWriter` implementations.\n\n\n---\n\n**Affects:** 3.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/1285", "user": "spring-issuemaster", "labels": ["in: integration", "type: bug"], "created": "2014-09-11 08:29:04", "closed": "2016-04-12 00:31:42", "commits": {}, "ttf": 578.0002777777778, "commitsDetails": []}, {"title": "Infinite loop if Exception is throws from ItemListener in onWriteError [BATCH-2322]", "body": "**[Jan \u010custovi\u0107](https://jira.spring.io/secure/ViewProfile.jspa?name=jcustovic)** opened **[BATCH-2322](https://jira.spring.io/browse/BATCH-2322?redirect=false)** and commented\n\nIf we have exception in `ItemProcessListener#onWriteError` it will be wrapped in `StepListenerFailedException` and since it is not in the `nonRetryableExceptionClasses` we will end up in infinite loop.\n\nThis exception class should be added to the list of `nonRetryableExceptionClasses` in `FaultTolerantStepBuilder` (NOTE: `SkipListenerFailedException` is in the list).\n\nThe same problem applies to versions 2.x.\n\n\n---\n\n**Affects:** 3.0.2\n\n**Attachments:**\n- [infinite-loop.zip](https://jira.spring.io/secure/attachment/22720/infinite-loop.zip) (_3.82 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/eb2f752b16c2df4f947fc2bc06481f22fbd002a2\n\n**Backported to:** [4.0.0.M1](https://github.com/spring-projects/spring-batch/milestone/84?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1282", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2014-11-27 06:34:24", "closed": "2017-07-20 17:30:12", "commits": {}, "ttf": 966.0002777777778, "commitsDetails": []}, {"title": "JobScope registered twice (Java Config/XML) causes errors [BATCH-2323]", "body": "**[Jean Detoeuf](https://jira.spring.io/secure/ViewProfile.jspa?name=thebignet)** opened **[BATCH-2323](https://jira.spring.io/browse/BATCH-2323?redirect=false)** and commented\n\nI'm facing an issue similar to [BATCH-2266](https://jira.spring.io/browse/BATCH-2266), but for JobScope instead.\n\nCaused by: org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class [class $Proxy278]: Common causes of this problem include using a final class or a non-visible class; nested exception is java.lang.IllegalArgumentException: Cannot subclass final class class $Proxy278\n\nThe bean is annotated with `@JobScope`.\n\nLooking at the commits from [BATCH-2266](https://jira.spring.io/browse/BATCH-2266), this fix was only for StepScope.  Do you think that the same fix is necessary for JobScope ?\n\n\n---\n\n**Affects:** 3.0.2\n", "url": "https://github.com/spring-projects/spring-batch/issues/1281", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-11-28 03:19:44", "closed": "2015-01-02 11:27:27", "commits": {}, "ttf": 35.000277777777775, "commitsDetails": []}, {"title": "JobExecutionContext not persisted when use custom ExitStatus [BATCH-2324]", "body": "**[Jeonggeun Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=redrebel)** opened **[BATCH-2324](https://jira.spring.io/browse/BATCH-2324?redirect=false)** and commented\n\nJobExecutionContext not persisted when use custom ExitStatus\n\nWhen I use custom ExitStatus (ex : new ExitStatus(\"COMPLETED1\") on step1,\nthere is not persisted step2.\n\nI used ExecutionContextPromotionListener, MapJobRespositoryFactory. too.\n\n{code:jobs.xml}\n<job id=\"test\" ...>\n\\<step id=\"step1\">\n\\<tasklet ref=\"changingTasklet\" />\n\\<next on=\"*\" to=\"step2\" />\n\\<listeners>\n\\<listener ref=\"promotionListener\"/>\n\\</listeners>\n\\</step1>\n\\<step2>\n\\<tasklet ref=\"readingTasklet\" />\n\\</step2>\n\n\\<bean id=\"promotionListener\" class=\"org.springfr.....ExecutionContextPromotionListener\">\n\\<property name=\"keys\" value=\"seqNum\" />\n\\</bean>\n\\<bean id=\"jobRepository\" class=\"org.springfr....MapJobRespositoryFactoryBean\">\n\\<property name=\"........ />\n\\</bean>\n``` \n\n{code:ChangingTasklet.java}\npublic class ChangingTasklet implements Tasklet, InitializingBean {\n....\n`@override`\npublic RepeatStatus execute(StepContribution contribution , ChunkContext chunkContext)\nthrows Exception {\n...\nStepExecution se = chunkContext.getStepContext().getStepExecution();\nse.getExecutionContext().putString(\"seqNum\", \"1\")\n\nchunkContext.getStepContext.getStepExecution.setExitStatus(new ExitStatus(\"COMPLETED1\");\nreturn RepeatStatus.FINISHED;\n}\n\n```\n\n{code:ReadingTasklet.java}\npublic class ChangingTasklet implements Tasklet, InitializingBean {\n....\n@override\npublic RepeatStatus execute(StepContribution contribution , ChunkContext chunkContext)\n  throws Exception {\n  ...\n  Map map = chunkContext.getStepContext().getJobExecutionContext();\n  String seqNum = (String)map.get(\"seqNum\");\n  \n  return RepeatStatus.FINISHED;\n}\n```\n\nI would expect that, step2's seqNum's value is \"1\". But sqlNum is null .\n\nIf be use custom ExitStatus , then JobExecutionContext not persisted .\n\nregular ExitStatus (ex: COMPLETED, FAILED, ...) was ok.\n\n\n---\n\n**Affects:** 3.0.2\n", "url": "https://github.com/spring-projects/spring-batch/issues/1280", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2014-12-03 18:28:41", "closed": "2015-02-06 08:02:17", "commits": {}, "ttf": 64.00027777777778, "commitsDetails": []}, {"title": "Incorrect write and filter counts reported by asynchronous writer [BATCH-2325]", "body": "**[Sudharma Karekar](https://jira.spring.io/secure/ViewProfile.jspa?name=kaiser101)** opened **[BATCH-2325](https://jira.spring.io/browse/BATCH-2325?redirect=false)** and commented\n\nThis is linked to an earlier issue [BATCH-2297](https://jira.spring.io/browse/BATCH-2297). If the processor filters out objects then the list passed to the asynchronous writer contains Futures whose get method would return null. This item is also reported incorrectly in the write count. I assume this is because the writer which is registered with the step contribution is the asynchronous writer and not the delegate which does the actual writing.\n\n\n---\nNo further details from [BATCH-2325](https://jira.spring.io/browse/BATCH-2325?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/1279", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2014-12-10 02:29:30", "closed": "2020-01-21 14:53:38", "commits": {}, "ttf": 1868.0002777777777, "commitsDetails": []}, {"title": "@Scheduled with fixedDelay fails on startup [BATCH-2327]", "body": "**[member sound](https://jira.spring.io/secure/ViewProfile.jspa?name=membersound)** opened **[BATCH-2327](https://jira.spring.io/browse/BATCH-2327?redirect=false)** and commented\n\nI'm starting batch jobs with `@Scheduled` with fixedDelay.\n\nSince latest version the jobs fails as it has not been registered yet to the job repository. This is solved if I put a initialDelay to the annotation. So I assume there are some loader timing issues.\n\nWhich may be critical for people also relying on `@Scheduled` with fixedDelay!\n\n```\n@Configuration\npublic class BatchConfig {\n\t@Bean\n\tpublic ApplicationContextFactory myJob() {\n\t\treturn new GenericApplicationContextFactory(MyJob.class);\n\t}\n}\n\n@Service\npublic class RunnerClass {\n\t@Autowired\n\tprivate JobRegistry jobRegistry;\n\n\t@Autowired\n\tprivate JobLauncher jobLauncher;\n\n\t@Scheduled(fixedDelay = 30000) //fix: , initialDelay = 5000)\n\tpublic void runJob() throws Exception {\n\t\t//init\n\t\tJob job = jobRegistry.getJob(MyJob.class.getSimpleName());\n\t\tjobLauncher.run(job, params);\n\t}\n}\n```\n\nRunning without the initialDelay throws the following exception:\n\n```\norg.springframework.batch.core.launch.NoSuchJobException: No job configuration with the name [myJob] was registered\n\tat org.springframework.batch.core.configuration.support.MapJobRegistry.getJob(MapJobRegistry.java:66) ~[spring-batch-core-3.0.2.RELEASE.jar:3.0.2.RELEASE]\n\tat org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54) [spring-context-4.1.3.RELEASE.jar:4.1.3.RELEASE]\n\tat org.springframework.scheduling.concurrent.ReschedulingRunnable.run(ReschedulingRunnable.java:81) [spring-context-4.1.3.RELEASE.jar:4.1.3.RELEASE]\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471) [?:1.7.0_51]\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:262) [?:1.7.0_51]\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178) [?:1.7.0_51]\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292) [?:1.7.0_51]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [?:1.7.0_51]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [?:1.7.0_51]\n\tat java.lang.Thread.run(Thread.java:744) [?:1.7.0_51]\n```\n\nspring-boot-1.2.0.RELEASE\n\n\n---\n\n**Affects:** 3.0.2\n", "url": "https://github.com/spring-projects/spring-batch/issues/1277", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2014-12-12 06:40:10", "closed": "2015-02-05 12:06:25", "commits": {}, "ttf": 55.000277777777775, "commitsDetails": []}, {"title": "PagingQueryProvider implementations should add parenthesis around where clause [BATCH-2328]", "body": "**[Jimmy Praet](https://jira.spring.io/secure/ViewProfile.jspa?name=jpraet)** opened **[BATCH-2328](https://jira.spring.io/browse/BATCH-2328?redirect=false)** and commented\n\nThe PagingQueryProvider implementations append the sort conditions to the configured where clause with AND. This is problematic if the where clause contains OR conditions, as the automatically appended AND takes precedence over the OR in the configured where clause.\n\n**Example:**\n\n```\nDb2PagingQueryProvider provider = new Db2PagingQueryProvider();\nprovider.setSelectClause(\"SELECT ID, COL_X, COL_Y\");\nprovider.setFromClause(\"FROM TEST\");\nprovider.setWhereClause(\"WHERE COL_X = 1 OR COL_Y = 1\");\nprovider.setSortKeys(Collections.singletonMap(\"ID\", Order.ASCENDING));\nSystem.out.println(provider.generateRemainingPagesQuery(20));\n```\n\nResults in\n\n```\nSELECT ID, COL_X, COL_Y FROM TEST \nWHERE COL_X = 1 OR COL_Y = 1 AND ((ID > ?)) \nORDER BY ID ASC FETCH FIRST 20 ROWS ONLY\n```\n\nBut this should be\n\n```\nSELECT ID, COL_X, COL_Y FROM TEST \nWHERE (COL_X = 1 OR COL_Y = 1) AND ((ID > ?)) \nORDER BY ID ASC FETCH FIRST 20 ROWS ONLY\n```\n\nAs a workaround the parenthesis can explicitly be added to the where clause.\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d7fe0ab8edb49a0e383195122cf64842e076177b, https://github.com/spring-projects/spring-batch/commit/b90dfa904c4bf7de13ecaa9f11c418468f1eb11d\n", "url": "https://github.com/spring-projects/spring-batch/issues/1276", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2014-12-18 06:33:16", "closed": "2015-02-05 11:54:29", "commits": {}, "ttf": 49.000277777777775, "commitsDetails": []}, {"title": "SystemCommandTasklet doesn't honor stopping. [BATCH-2331]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2331](https://jira.spring.io/browse/BATCH-2331?redirect=false)** and commented\n\nWhile the `SystemCommandTasklet` implements `StoppableTasklet` it does not actually check the job repository to see if a stop has been requested.\n\n\n---\n\n**Issue Links:**\n- [XD-2519](https://jira.spring.io/browse/XD-2519) Refactor Spark and Sqoop tasklets to use SystemCommandTasklet\n (_**\"is depended on by\"**_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/808121923b2985b6c5dd6fdd57ace48b9e254e3c, https://github.com/spring-projects/spring-batch/commit/fecbe075d462f0b0e1fadb151d9c11b0b5a2a348\n", "url": "https://github.com/spring-projects/spring-batch/issues/1273", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2014-12-22 08:44:41", "closed": "2014-12-31 10:17:43", "commits": {}, "ttf": 9.000277777777777, "commitsDetails": []}, {"title": "Error creating bean with name 'integrationRequestMappingHandlerMapping' when using SF 4.1.1 and SI 4.0.5 [BATCH-2319]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2319](https://jira.spring.io/browse/BATCH-2319?redirect=false)** and commented\n\nWhen upgrading Spring Batch Admin to Spring Framework 4.1.1.RELEASE and Spring Integration 4.0.5.BUILD-SNAPSHOT, we are getting the following exception from a few tests:\n\n```\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'integrationRequestMappingHandlerMapping': Initialization of bean failed; nested exception is org.springframework.context.ApplicationContextException: Cannot reinitialize with different application context: current one is [ResourceXmlApplicationContext:file:/Users/mminella/Documents/IntelliJWorkspace/spring-batch-admin/spring-batch-admin-sample/target/classes/META-INF/spring/batch/jobs/jobs-context.xml], passed-in one is [org.springframework.context.support.ClassPathXmlApplicationContext@53b59a48: startup date [Mon Nov 03 15:45:23 CST 2014]; root of context hierarchy]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:548)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:229)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:725)\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)\n\tat org.springframework.batch.core.configuration.support.GenericApplicationContextFactory$ResourceXmlApplicationContext.<init>(GenericApplicationContextFactory.java:161)\n\tat org.springframework.batch.core.configuration.support.GenericApplicationContextFactory.createApplicationContext(GenericApplicationContextFactory.java:66)\n\tat org.springframework.batch.core.configuration.support.AbstractApplicationContextFactory.createApplicationContext(AbstractApplicationContextFactory.java:170)\n\tat org.springframework.batch.core.configuration.support.DefaultJobLoader.doLoad(DefaultJobLoader.java:154)\n\tat org.springframework.batch.core.configuration.support.DefaultJobLoader.load(DefaultJobLoader.java:147)\n\tat org.springframework.batch.core.configuration.support.AutomaticJobRegistrar.start(AutomaticJobRegistrar.java:173)\n\tat org.springframework.batch.core.configuration.support.AutomaticJobRegistrar.onApplicationEvent(AutomaticJobRegistrar.java:139)\n\tat org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:151)\n\tat org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:128)\n\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331)\n\tat org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:773)\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:483)\n\tat org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)\n\tat org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)\n\tat org.springframework.batch.admin.sample.BootstrapTests.testBootstrapConfiguration(BootstrapTests.java:47)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74)\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211)\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:134)\nCaused by: org.springframework.context.ApplicationContextException: Cannot reinitialize with different application context: current one is [ResourceXmlApplicationContext:file:/Users/mminella/Documents/IntelliJWorkspace/spring-batch-admin/spring-batch-admin-sample/target/classes/META-INF/spring/batch/jobs/jobs-context.xml], passed-in one is [org.springframework.context.support.ClassPathXmlApplicationContext@53b59a48: startup date [Mon Nov 03 15:45:23 CST 2014]; root of context hierarchy]\n\tat org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:79)\n\tat org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)\n\tat org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1560)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:540)\n\t... 49 more\n```\n\nIn the tests where we see this behavior, we have the following SI chain configured in a child context:\n\n```xml\n<chain input-channel=\"input-files\" output-channel=\"job-requests\" xmlns=\"http://www.springframework.org/schema/integration\">\n     <filter method=\"filter\">\n          <bean class=\"org.springframework.batch.admin.integration.FileParentDirectoryFilter\" xmlns=\"http://www.springframework.org/schema/beans\">\n               <property name=\"parentName\" value=\"staging\" />\n          </bean>\n     </filter>\n     <service-activator>\n          <bean class=\"org.springframework.batch.admin.integration.FileToJobLaunchRequestAdapter\" xmlns=\"http://www.springframework.org/schema/beans\">\n               <property name=\"job\" ref=\"job1\" />\n          </bean>\n     </service-activator>\n     <transformer>\n          <bean class=\"org.springframework.batch.admin.integration.LastJobParametersJobLaunchRequestEnhancer\" xmlns=\"http://www.springframework.org/schema/beans\">\n               <property name=\"jobService\" ref=\"jobService\" />\n          </bean>\n     </transformer>\n</chain>\n```\n\nTo be specific, the tests where we are seeing this issue are:\norg.springframework.batch.admin.sample.BootstrapTests and org.springframework.batch.admin.sample.JobIntegrationTests\n\n\n---\n\n**Affects:** 3.0.2\n\n**Issue Links:**\n- [BATCHADM-202](https://jira.spring.io/browse/BATCHADM-202) Update dependencies to be Spring IO compliant\n (_**\"is depended on by\"**_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/7683700662370749fef71084d3108884af06a09b, https://github.com/spring-projects/spring-batch/commit/66776cc2cce8feec0aff7134ade36e0b0b4e2b37\n", "url": "https://github.com/spring-projects/spring-batch/issues/1271", "user": "spring-issuemaster", "labels": ["in: core", "status: waiting-for-reporter", "type: bug"], "created": "2014-11-03 13:49:59", "closed": "2014-11-05 15:23:52", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "There is a wrongly-spelled word, \"Rety\" [BATCH-2320]", "body": "**[Stanley Stewart](https://jira.spring.io/secure/ViewProfile.jspa?name=stanley9)** opened **[BATCH-2320](https://jira.spring.io/browse/BATCH-2320?redirect=false)** and commented\n\nThere is a wrongly-spelled word.\nI think that the word must be fixed from \"Rety\" to \"Retry\".\nSee the attached PNG file.\n\n\n---\n\n**Reference URL:** http://projects.spring.io/spring-batch/\n\n**Attachments:**\n- [spring-jira1.png](https://jira.spring.io/secure/attachment/22369/spring-jira1.png) (_168.33 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1270", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2014-11-17 07:48:35", "closed": "2014-12-30 15:21:48", "commits": {}, "ttf": 43.000277777777775, "commitsDetails": []}, {"title": "On startup using @EnableBatch get a warning indicating that stepScope and jobScope @Bean methods should be marked static [BATCH-2321]", "body": "**[Steve Ash](https://jira.spring.io/secure/ViewProfile.jspa?name=steve.ash)** opened **[BATCH-2321](https://jira.spring.io/browse/BATCH-2321?redirect=false)** and commented\n\nOn startup spring emits two warnings:\n\n2014-11-21 09:35:21,853  WARN          localhost-startStop-1 ion.ConfigurationClassEnhancer - `@Bean` method ScopeConfiguration.stepScope is non-static and returns an object assignable to Spring's BeanFactoryPostProcessor interface. This will result in a failure to process annotations such as `@Autowired`, `@Resource` and `@PostConstruct` within the method's declaring `@Configuration` class. Add the 'static' modifier to this method to avoid these container lifecycle issues; see `@Bean` javadoc for complete details\n\n2014-11-21 09:35:21,872  WARN          localhost-startStop-1 ion.ConfigurationClassEnhancer - `@Bean` method ScopeConfiguration.jobScope is non-static and returns an object assignable to Spring's BeanFactoryPostProcessor interface. This will result in a failure to process annotations such as `@Autowired`, `@Resource` and `@PostConstruct` within the method's declaring `@Configuration` class. Add the 'static' modifier to this method to avoid these container lifecycle issues; see `@Bean` javadoc for complete details\n\n\n---\n\n**Affects:** 3.0.2\n\n4 votes, 5 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1269", "user": "spring-issuemaster", "labels": ["status: duplicate", "type: bug"], "created": "2014-11-21 07:39:50", "closed": "2017-09-08 19:00:20", "commits": {}, "ttf": 1022.0002777777778, "commitsDetails": []}, {"title": "Hibernate OneToMany relationship fails with JoinColumn [BATCH-2333]", "body": "**[matt crowe](https://jira.spring.io/secure/ViewProfile.jspa?name=grunlowen)** opened **[BATCH-2333](https://jira.spring.io/browse/BATCH-2333?redirect=false)** and commented\n\nWhen autowiring the Job, Spring Batch will fail if there is a ManyToOne relationship referenced that does not have a corresponding OneToMany, but instead uses a JoinColumn. The identical code works outside of Spring Batch. Using OneToMany is not always possible, which makes the workaround not always feasible.\n\nSample code:\n\n```java\n@JoinColumn(name=\"SOME_ID\", referencedColumnName=\"THIS_ID\")\n@OneToMany(targetEntity=ManyClass.class, fetch=FetchType.LAZY)\nprivate Set<ManyClass> pendedReasons;\n```\n\nException: (notice org.hibernate.cfg.annotations.CollectionBinder.bindCollectionSecondPass(CollectionBinder.java:1460)\n\n```\njava.lang.reflect.InvocationTargetException\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n        at java.lang.reflect.Method.invoke(Unknown Source)\n        at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:53)\n        at java.lang.Thread.run(Unknown Source)\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'receivableJobs': Injection of autowired dependencies failed; nested exception is java.lang.NullPointerException\n        at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)\n        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)\n        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)\n        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)\n        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)\n        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)\n        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)\n        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)\n        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691)\n        at org.springframework.boot.SpringApplication.run(SpringApplication.java:320)\n        at org.springframework.boot.SpringApplication.run(SpringApplication.java:952)\n        at org.springframework.boot.SpringApplication.run(SpringApplication.java:941)\n        at com.hcsc.css.batch.opermart.ReceivableBatchRunTarget.main(ReceivableBatchRunTarget.java:14)\n        ... 6 more\nCaused by: java.lang.NullPointerException\n        at org.hibernate.cfg.annotations.CollectionBinder.bindCollectionSecondPass(CollectionBinder.java:1460)\n        at org.hibernate.cfg.annotations.CollectionBinder.bindOneToManySecondPass(CollectionBinder.java:864)\n        at org.hibernate.cfg.annotations.CollectionBinder.bindStarToManySecondPass(CollectionBinder.java:779)\n        at org.hibernate.cfg.annotations.CollectionBinder$1.secondPass(CollectionBinder.java:728)\n        at org.hibernate.cfg.CollectionSecondPass.doSecondPass(CollectionSecondPass.java:70)\n        at org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1697)\n        at org.hibernate.cfg.Configuration.secondPassCompile(Configuration.java:1426)\n        at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1846)\n        at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1930)\n        at org.springframework.orm.hibernate4.LocalSessionFactoryBuilder.buildSessionFactory(LocalSessionFactoryBuilder.java:343)\n        at org.springframework.orm.hibernate4.LocalSessionFactoryBean.buildSessionFactory(LocalSessionFactoryBean.java:431)\n        at org.springframework.orm.hibernate4.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:416)\n        at com.hcsc.css.batch.opermart.configuration.ReceivableConfiguration.sessionFactory(ReceivableConfiguration.java:43)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n        at java.lang.reflect.Method.invoke(Unknown Source)\n        at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.inject(AutowiredAnnotationBeanPostProcessor.java:589)\n        at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)\n        at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)\n        ... 21 more\n```\n\n\n\n---\nNo further details from [BATCH-2333](https://jira.spring.io/browse/BATCH-2333?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/1268", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: invalid", "type: bug"], "created": "2014-12-23 09:50:50", "closed": "2019-10-30 20:58:25", "commits": {}, "ttf": 1772.0002777777777, "commitsDetails": []}, {"title": "Writer.write(..) executed twice with same data on Exception [BATCH-2334]", "body": "**[Wolfgang Grossinger](https://jira.spring.io/secure/ViewProfile.jspa?name=pueffl)** opened **[BATCH-2334](https://jira.spring.io/browse/BATCH-2334?redirect=false)** and commented\n\nI have a quite simple job which looks like:\n\n```xml\n<batch:job id=\"auswertungTodJob\" \n     restartable=\"true\" >\n     <batch:step id=\"auswertungTodStep\" >\n          <batch:tasklet transaction-manager=\"transactionManager\">\n               <batch:chunk reader=\"auswertungTodReader\" writer=\"auswertungWorkbenchWriter\"\n                        commit-interval=\"1\" skip-limit=\"100\">\n                        <batch:listeners>\n                                 <batch:listener ref=\"zpsTransactionManager\" />\n                                 <batch:listener ref=\"zpsProcessingListener\" />\n                        </batch:listeners>\n                        <batch:skippable-exception-classes>\n                                 <batch:include class=\"at.gv.bmi.zps.shared.exceptions.ZpsUserException\"/>\n                        </batch:skippable-exception-classes>\n               </batch:chunk>\n          </batch:tasklet>\n     </batch:step>\n     <batch:validator ref=\"auswertungParamValidator\" />\n     <batch:listeners>\n          <batch:listener ref=\"zpsBatchInitializer\" />\n     </batch:listeners>\n</batch:job>\n```\n\nWhen an exception occurres in:\n\n```java\n\t@Override\n\tpublic void write(List<? extends AuswertungItem> items) throws Exception {\n\t\t\n\t\ttry {\n\t\t\tfor (AuswertungItem auswertung: items) {\ndoSomething();\t\t\t\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Exception occurred: \", e);\n\t\t\tthrow e;\n\t\t}\n\t}\n```\n\nthe method will be executed a second time.\n\n\n---\n\n**Affects:** 3.0.2\n", "url": "https://github.com/spring-projects/spring-batch/issues/1267", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2015-01-08 01:58:41", "closed": "2015-01-12 01:12:26", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "Documentation: ItemFailureLoggerListener Java code doesn't compile [BATCH-2339]", "body": "**[David MARTIN](https://jira.spring.io/secure/ViewProfile.jspa?name=dmartin)** opened **[BATCH-2339](https://jira.spring.io/browse/BATCH-2339?redirect=false)** and commented\n\nThe logger in the code sample doesn't use the right exception name, as specified in the method:\n\n```\n    public void onReadError(Exception ex) {\n        logger.error(\"Encountered error on read\", e);\n    }\n\n    public void onWriteError(Exception ex, Object item) {\n        logger.error(\"Encountered error on write\", e);\n    }\n```\n\nIt should be 'ex' and not 'e'.\n\n\n---\n\n**Affects:** 3.0.3\n\n**Reference URL:** http://docs.spring.io/spring-batch/trunk/reference/html/patterns.html#loggingItemProcessingAndFailures\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/e3b7782a1a66613b1c6d3135cfc15f08bcf55ec3, https://github.com/spring-projects/spring-batch/commit/04d167e024ae7b1adc5443d8e83528c661e86745\n", "url": "https://github.com/spring-projects/spring-batch/issues/1263", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2015-01-21 08:45:35", "closed": "2015-03-06 08:22:44", "commits": {}, "ttf": 43.000277777777775, "commitsDetails": []}, {"title": "Documentation missing referenced image [BATCH-2340]", "body": "**[Andrew Lane Carr](https://jira.spring.io/secure/ViewProfile.jspa?name=aliasdhacker)** opened **[BATCH-2340](https://jira.spring.io/browse/BATCH-2340?redirect=false)** and commented\n\nIn section 1.5 \"Batch Processing Strategies\", under strategy 4, \"Partitioning Approaches\", there is the following reference to an image:\n\n\"The following picture illustrates the partitioning approach:\"\n\nHowever, there is no image.\n\n\n---\n\n**Affects:** 3.0.3\n\n**Reference URL:** http://docs.spring.io/spring-batch/trunk/reference/html/spring-batch-intro.html#springBatchBackground\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/a991ea4f9ac464ad45749f7722ffab10279b71bb, https://github.com/spring-projects/spring-batch/commit/acbe718d78532bd760f9f76b3220377c4b27bfda\n", "url": "https://github.com/spring-projects/spring-batch/issues/1262", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2015-01-24 17:29:46", "closed": "2015-03-06 09:43:37", "commits": {}, "ttf": 40.000277777777775, "commitsDetails": []}, {"title": "JdbcPagingItemReader does not work with DISTINCT in SQL SERVER [BATCH-2341]", "body": "**[Driss Amri](https://jira.spring.io/secure/ViewProfile.jspa?name=amridri)** opened **[BATCH-2341](https://jira.spring.io/browse/BATCH-2341?redirect=false)** and commented\n\nUsing the JdbcPagingItemReader in combination with this PagingQueryProvider:\n\n`@Bean`\npublic PagingQueryProvider queryProvider() {\nSqlPagingQueryProviderFactoryBean factory = new SqlPagingQueryProviderFactoryBean();\nfactory.setDataSource(dataSource);\nfactory.setDatabaseType(\"SQLSERVER\");\nfactory.setSelectClause(\"SELECT DISTINCT projectnummer\");\nfactory.setFromClause(\"FROM project\");\nfactory.setSortKey(\"projectnummer\");\n\nit will use the SqlServerPagingQueryProvider to generate a TOP query, but this will generate bad syntax for SQL server:\n\norg.springframework.jdbc.BadSqlGrammarException: StatementCallback; bad SQL grammar [SELECT TOP 100 DISTINCT projectnummer FROM project ORDER BY projectnummer ASC]; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: Incorrect syntax near the keyword 'DISTINCT'.\n\nCorrect syntax would be\nSELECT DISTINCT TOP 100 projectnummer FROM project\n\nIs there any workaround for this?\n\n\n---\n\n**Affects:** 3.0.3\n", "url": "https://github.com/spring-projects/spring-batch/issues/1261", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2015-01-26 01:50:53", "closed": "2015-01-26 12:52:04", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "RetryState Abstraction Documentation is lacking [BATCH-2342]", "body": "**[Andrew Lane Carr](https://jira.spring.io/secure/ViewProfile.jspa?name=aliasdhacker)** opened **[BATCH-2342](https://jira.spring.io/browse/BATCH-2342?redirect=false)** and commented\n\nThe RetryState abstraction is explained briefly.  An example of implementing/injecting this abstraction would be helpful.\n\n\n---\n\n**Reference URL:** http://docs.spring.io/spring-batch/reference/html/retry.html\n", "url": "https://github.com/spring-projects/spring-batch/issues/1260", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2015-01-26 06:27:16", "closed": "2015-02-05 10:07:47", "commits": {}, "ttf": 10.000277777777777, "commitsDetails": []}, {"title": "Job scoped beans can not be injected into job scoped beans [BATCH-2337]", "body": "**[Cihad Baskoy](https://jira.spring.io/secure/ViewProfile.jspa?name=aihal)** opened **[BATCH-2337](https://jira.spring.io/browse/BATCH-2337?redirect=false)** and commented\n\nJob scoped beans can not be injected into job scoped beans. We have an XML configuration like\n\n```\n\t<bean id=\"bondStaticPopulationFetcher\" class=\"com.cs.emg.riskagg.bondstatic.refresh.BondStaticPopulationFetcher\" scope=\"job\" >\n\t\t<property name=\"bondHolder\" ref=\"bondHolder\" />\n\t</bean>\n\n\t<bean id=\"bondHolder\" class=\"com.cs.emg.riskagg.bondstatic.refresh.BondHolder\" scope=\"job\" />\n```\n\nThen receive an error with\n\n```\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.bondStaticPopulationFetcher' defined in class path resource [bond-static-beans.xml]: Initialization of bean failed; nested exception is org.springframework.beans.ConversionNotSupportedException: Failed to convert property value of type 'com.sun.proxy.$Proxy1 implementing org.springframework.aop.scope.ScopedObject,java.io.Serializable,org.springframework.aop.framework.AopInfrastructureBean,org.springframework.aop.SpringProxy,org.springframework.aop.framework.Advised' to required type 'com.refresh.BondHolder' for property 'bondHolder'; nested exception is java.lang.IllegalStateException: Cannot convert value of type [com.sun.proxy.$Proxy1 implementing org.springframework.aop.scope.ScopedObject,java.io.Serializable,org.springframework.aop.framework.AopInfrastructureBean,org.springframework.aop.SpringProxy,org.springframework.aop.framework.Advised] to required type [com.refresh.BondHolder] for property 'bondHolder': no matching editors or conversion strategy found\n```\n\n\n\n---\n\n**Affects:** 3.0.2\n\n**Reference URL:** http://stackoverflow.com/questions/27381721/spring-batch-job-scoped-beans-can-not-be-injected-into-job-or-step-scope\n", "url": "https://github.com/spring-projects/spring-batch/issues/1259", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2015-01-20 02:25:45", "closed": "2015-01-20 07:56:18", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "StaxEventItemWriter should assert that open() has been called [BATCH-2343]", "body": "**[Esben Stenwig](https://jira.spring.io/secure/ViewProfile.jspa?name=estenwig)** opened **[BATCH-2343](https://jira.spring.io/browse/BATCH-2343?redirect=false)** and commented\n\nIf the StaxEventItemWriter is some how not registrered as a stream open is not called and it fails with a NullPointerException.\n\nI think an improvement could be to Assert that open has been called when running write().\n\n\n---\n\n**Affects:** 2.2.7\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/934fcad6c2cd2dc8e455d67760c027c25605d044\n\n**Backported to:** [4.0.0.M2](https://github.com/spring-projects/spring-batch/milestone/85?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1258", "user": "spring-issuemaster", "labels": ["has: backports", "type: bug"], "created": "2015-01-27 00:17:39", "closed": "2017-07-20 17:32:33", "commits": {}, "ttf": 905.0002777777778, "commitsDetails": []}, {"title": "FaultTolerantChunkProcess ignoring retry count [BATCH-2344]", "body": "**[Andrew Lane Carr](https://jira.spring.io/secure/ViewProfile.jspa?name=aliasdhacker)** opened **[BATCH-2344](https://jira.spring.io/browse/BATCH-2344?redirect=false)** and commented\n\nUsing the `FaultTolerantChunkProcessor` with the following settings:\n\n```xml\n<constructor-arg name=\"itemProcessor\" ref=\"myItemProcessor\" />\n<constructor-arg name=\"itemWriter\" ref=\"writer\" />\n<constructor-arg name=\"batchRetryTemplate\" ref=\"batchRetryTemplate\" />\n<property name=\"buffering\" value=\"true\" />\n<property name=\"processSkipPolicy\" ref=\"skipPolicy\"/>\n<property name=\"writeSkipPolicy\" ref=\"skipPolicy\"/>\n<property name=\"processorTransactional\" value=\"true\" />\n```\n\nIt appears to loop infinitely when an exception is thrown on an item during item writing.\n\nWe see here the chunk handler starting to process items:\n\n```\n DEBUG org.springframework.batch.integration.chunk.ChunkProcessorChunkHandler - Handling chunk: ChunkRequest: jobId=0, sequence=0, contribution=[StepContribution: read=0, written=0, filtered=0, readSkips=0, writeSkips=0, processSkips=0, exitStatus=EXECUTING], item count=5\n\n=== Processing the items: ===\n\nDEBUG org.springframework.retry.support.RetryTemplate - Retry: count=0\n2015-01-29 17:37:18,810 [messageListenerContainer-1] DEBUG com.seic.poc.batch.MyItemProcessor - process: 1001\n2015-01-29 17:37:18,810 [messageListenerContainer-1] DEBUG org.springframework.retry.support.RetryTemplate - Retry: count=0\n2015-01-29 17:37:18,810 [messageListenerContainer-1] DEBUG com.seic.poc.batch.MyItemProcessor - process: 1002\n\n=== Writing the items: ===\n\nDEBUG org.springframework.batch.core.step.item.FaultTolerantChunkProcessor - Attempting to write: [items=[{id:1001,name:staff 1,date:Tue Jul 30 00:00:00 EDT 2013}, {id:1002,name:staff 2,date:Thu Jul 31 00:00:00 EDT 2014}, {id:1003,name:staff 3,date:Thu Jul 30 00:00:00 EDT 2015}, {id:1004,name:staff 4,date:Sun Jul 31 00:00:00 EDT 2016}, {id:1005,name:staff 5,date:Sun Jul 30 00:00:00 EDT 2017}], skips=[]]\n```\n\nThat works fine.   Now I have set item 1009 to throw an exception on write.  The exception is of class \"MyException\" and I have this handler:\n\n```xml\n<bean id=\"retryPolicy\" class=\"org.springframework.retry.policy.ExceptionClassifierRetryPolicy\">\n\t\t<property name=\"policyMap\">\n\t\t\t<map>\n\t\t\t\t<entry key=\"com.seic.poc.batch.MyException\">\n\t\t\t\t\t<bean class=\"org.springframework.retry.policy.SimpleRetryPolicy\">\n\t\t\t\t\t\t<property name=\"maxAttempts\" value=\"3\" />\n\t\t\t\t\t</bean>\n\t\t\t\t</entry>\n\t\t\t</map>\n\t\t</property>\n</bean>\n```\n\nNow we see the exception thrown:\n\nDEBUG com.seic.poc.batch.MyItemWriter - slave1:write:report:1009\n2015-01-29 17:37:18,837 [messageListenerContainer-1] DEBUG org.springframework.retry.support.RetryTemplate - Checking for rethrow: count=1\n2015-01-29 17:37:18,837 [messageListenerContainer-1] DEBUG org.springframework.retry.support.RetryTemplate - Rethrow in retry for policy: count=1\n2015-01-29 17:37:18,838 [messageListenerContainer-1] DEBUG org.springframework.jms.listener.DefaultMessageListenerContainer - Initiating transaction rollback on application exception\norg.springframework.messaging.MessageHandlingException: com.seic.poc.batch.MyException: Retry?\n\n=== Note count = 1 ===\n\nThe exception is thrown again when operation retries:\n\nNotice the timestamp, this is the next attempt to write but count is still 1\n\nDEBUG com.seic.poc.batch.MyItemWriter - slave1:write:report:1009\n2015-01-29 17:37:19,853 [messageListenerContainer-1] DEBUG org.springframework.retry.support.RetryTemplate - Checking for rethrow: count=1\n2015-01-29 17:37:19,854 [messageListenerContainer-1] DEBUG org.springframework.retry.support.RetryTemplate - Rethrow in retry for policy: count=1\n2015-01-29 17:37:19,854 [messageListenerContainer-1] DEBUG org.springframework.jms.listener.DefaultMessageListenerContainer - Initiating transaction rollback on application exception\norg.springframework.messaging.MessageHandlingException: com.seic.poc.batch.MyException: Retry?\n\nPlease see the full log in the reference link.\n\n\n---\n\n**Affects:** 3.0.3\n\n**Reference URL:** http://pastebin.com/QFPgHiGT\n\n**Attachments:**\n- [projects.zip](https://jira.spring.io/secure/attachment/22772/projects.zip) (_32.99 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1257", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2015-01-29 14:46:22", "closed": "2020-01-21 15:45:58", "commits": {}, "ttf": 1818.0002777777777, "commitsDetails": []}, {"title": "First flow never executed when running parrallel flows [BATCH-2346]", "body": "**[Walter Morykon](https://jira.spring.io/secure/ViewProfile.jspa?name=asgard)** opened **[BATCH-2346](https://jira.spring.io/browse/BATCH-2346?redirect=false)** and commented\n\nWhen attempting to execute multiple flow in parallel\ne.g.\n\n```java\nFlowBilder flowBuilder = FlowBuilder<SimpleFlow>(\"Parallel Flows\")\n                .start(flowA)\n                .split(new SimpleAsyncTaskExecutor())\n                .add(flowB, flowC)\n                .build()\n\n```\n\nThe result is that flowB and flowC run in parallel, but flowA never runs.\n\nLooking at the add method of the FlowBuilder class\n\n```java\npublic FlowBuilder<Q> add(Flow... flows) {\n    Collection<Flow> list = new ArrayList<Flow>(Arrays.asList(flows));\n    String name = \"split\" + (parent.splitCounter++);\n    int counter = 0;\n    State one = parent.currentState;\n    Flow flow = null;\n\n    if (!(one instanceof FlowState)) {\n        FlowBuilder<Flow> stateBuilder = new FlowBuilder<Flow>(name + \"_\" + (counter++));\n        stateBuilder.currentState = one;\n        flow = stateBuilder.build();\n    }\n\n    if (flow != null) {\n        list.add(flow);\n    }\n\n    State next = parent.createState(list, executor);\n    parent.currentState = next;\n    return parent;\n}\n```\n\nSince flowA is wrapped in a FlowState it will not be added to the list and hence will not be run by the executor.\n\n\n---\n\n**Affects:** 3.0.3\n\n2 votes, 4 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1256", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2015-02-02 08:55:07", "closed": "2015-02-05 10:12:25", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "JobExplorer.findRunningJobExecutions does not work correctly [BATCH-2345]", "body": "**[Taras Golovach](https://jira.spring.io/secure/ViewProfile.jspa?name=tago)** opened **[BATCH-2345](https://jira.spring.io/browse/BATCH-2345?redirect=false)** and commented\n\nIn a project I use spring-batch version 3.0.2, as a part of cleanup for processes that stuck I use ```\nJobExplorer.findRunningJobExecutions(...)\n\n```but that function return empty set. After digging I found next problem: spring-batch use SQL like\n``` SELECT E.JOB_EXECUTION_ID, ... from %PREFIX%JOB_EXECUTION E ... WHERE ... E.END_TIME is NULL ... \n```. After running long job, I got that from beginning 3 Dates in %PREFIX%JOB_EXECUTION (CREATE_TIME, START_TIME, END_TIME) have same value. This mean that SQL will always return empty set.\n```\n\n\n\n---\n\n**Affects:** 3.0.2\n\n**Reference URL:** http://stackoverflow.com/questions/28216392/jobexplorer-findrunningjobexecutions-does-not-work-correctly\n\n1 votes, 3 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1255", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2015-01-30 00:37:09", "closed": "2018-05-16 21:51:52", "commits": {}, "ttf": 1202.0002777777777, "commitsDetails": []}, {"title": "Memory leak in DefaultJobLoader [BATCH-2347]", "body": "**[Sebastien Dubois](https://jira.spring.io/secure/ViewProfile.jspa?name=dsebastien)** opened **[BATCH-2347](https://jira.spring.io/browse/BATCH-2347?redirect=false)** and commented\n\nTo load the jobs and populate the job registry, we use the DefaultJobLoader class provided by Spring batch: https://github.com/spring-projects/spring-batch/blob/587680ba56d03d1acd18a75ee00abea84e81038f/spring-batch-core/src/main/java/org/springframework/batch/core/configuration/support/DefaultJobLoader.java\n\nInternally the DefaultJobLoader maintains two hashmaps:\n1) contexts\n2) contextToJobNames\n\nWhen the clear() method in called, only the first hashmap is cleared.\nIn most cases it doesn't cause any issues because applications will usually load their jobs only once.\n\nFor applications such as ours that need to clear loaded jobs and reload them, this causes a memory leak since the DefaultJobLoader retains a reference to the previously loaded jobs, preventing garbage collection.\n\nThe fix is trivial to implement and shouldn't have side effects:\nensure that the 'contextToJobNames' map is cleared right after the other one.\n\n\n---\n\n**Affects:** 2.1.9, 3.0.3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/8b324620722517c29ba52d608802bf48a9a1003d, https://github.com/spring-projects/spring-batch/commit/1e2042788af5df72e0dc5072557baac5a711e8a1\n\n2 votes, 4 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1254", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2015-02-04 05:52:11", "closed": "2015-03-06 10:00:57", "commits": {}, "ttf": 30.00027777777778, "commitsDetails": []}, {"title": "Can't use parameters for Neo4jItemReader statements [BATCH-2350]", "body": "**[Florent LIM](https://jira.spring.io/secure/ViewProfile.jspa?name=flim)** opened **[BATCH-2350](https://jira.spring.io/browse/BATCH-2350?redirect=false)** and commented\n\nThere is no possibility to passing parameters values to a Neo4jItemReader statement.\nThe Neo4jItemReader actually has the property 'parameterValues', but it couldnt be set.\n\nspring-batch/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/data/Neo4jItemReader.java\n\n\n---\n\n**Affects:** 3.0.3\n", "url": "https://github.com/spring-projects/spring-batch/issues/1251", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2015-02-19 04:12:16", "closed": "2015-02-19 15:51:10", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "When using java config and importing XML, step/job scoped beans don't get proxied. [BATCH-2351]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2351](https://jira.spring.io/browse/BATCH-2351?redirect=false)** and commented\n\n\n---\n\n**Reference URL:** http://stackoverflow.com/questions/28457107/spring-batch-scope-issue-while-using-spring-boot/28616094?\n\n6 votes, 12 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1250", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2015-02-20 07:49:51", "closed": "2019-11-21 11:54:33", "commits": {}, "ttf": 1735.0002777777777, "commitsDetails": []}, {"title": "Assertion errors in StaxEventItemReader [BATCH-2352]", "body": "**[Krishna Bhamidipati](https://jira.spring.io/secure/ViewProfile.jspa?name=sirdap)** opened **[BATCH-2352](https://jira.spring.io/browse/BATCH-2352?redirect=false)** and commented\n\nIn the afterPropertiesSet method, there are two notNull assertions on the field fragmentRootElementNames. The latter assertion should be changed to notEmpty instead.\n\n```\nAssert.notNull(fragmentRootElementNames, \"The FragmentRootElementNames must not be null\");\nAssert.notNull(fragmentRootElementNames, \"The FragmentRootElementNames must not be empty\");\n```\n\nAlso, the following error message is incorrect. It should be corrected to \"must _not_ contain\"\n\n```\nAssert.hasText(fragmentRootElementName.getLocalPart(), \"The FragmentRootElementNames must contain empty elements\");\n```\n\n\n\n---\n\n**Affects:** 3.0.3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/4c72e0407f28f12ada5ec94ce21603238e1b39c2, https://github.com/spring-projects/spring-batch/commit/63c07774623ab631cb1291191ad1d2be3678dc9f\n", "url": "https://github.com/spring-projects/spring-batch/issues/1249", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2015-02-20 08:13:37", "closed": "2015-03-06 11:07:50", "commits": {}, "ttf": 14.000277777777777, "commitsDetails": []}, {"title": "GenericApplicationContextFactory - *Aware callbacks called twice on child context [BATCH-2358]", "body": "**[Daniel Guggi](https://jira.spring.io/secure/ViewProfile.jspa?name=dguggi)** opened **[BATCH-2358](https://jira.spring.io/browse/BATCH-2358?redirect=false)** and commented\n\nhi,\n\nwhen using GenericApplicationContextFactory (e.g. spring-batch) in order to create Child-Contexts, the *Aware callbacks are called twice on the Child-Context(s)?\n\nsee SomeTest.java\n\n**test output:**\n\n> in parent application context\n> \n>> Creating Child Bean\n>> 1: setEnvironment\n>> 1: in child app context has parent: true\n>> 2: setEnvironment\n>> 2: in child app context has parent: false\n\n\n\n---\n\n**Attachments:**\n- [SomeTest.java](https://jira.spring.io/secure/attachment/22673/SomeTest.java) (_2.22 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1244", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2015-03-04 08:57:20", "closed": "2015-05-15 09:44:57", "commits": {}, "ttf": 72.00027777777778, "commitsDetails": []}, {"title": "CommandLineJobRunner - Content defined after an empty line is ignored when pipe mechanism is used [BATCH-2359]", "body": "**[Sandra Parsick](https://jira.spring.io/secure/ViewProfile.jspa?name=sparsick)** opened **[BATCH-2359](https://jira.spring.io/browse/BATCH-2359?redirect=false)** and commented\n\nThe job arguments are stored in a file that looks like the following code snippet.\n\n```\n#\nfoo=bar\n\nfoo2=bar2\n```\n\nWhen I call CommandLineJobRunner after a pipe, it ignores the second job argument (`foo2=bar2`).\n\n```\ncat jobParameterFile | java -classpath foo.jar org.springframework.batch.core.launch.support.CommandLineJobRunner jobs/jobName.xml jobName\n```\n\n\n\n---\n\n**Affects:** 3.0.3\n", "url": "https://github.com/spring-projects/spring-batch/issues/1243", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2015-03-13 05:50:24", "closed": "2015-04-15 11:34:02", "commits": {}, "ttf": 33.000277777777775, "commitsDetails": []}, {"title": "Paged queries with alias aren't working correctly [BATCH-2360]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2360](https://jira.spring.io/browse/BATCH-2360?redirect=false)** and commented\n\n\n---\n\n**Affects:** 3.0.3\n\n**Reference URL:** http://stackoverflow.com/questions/28989996/using-jdbcpagingitemreader-causing-join-statements-causing-mysqlintegrityconstra/28994455?noredirect=1#comment46240497_28994455\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/02cfe20225d230f82878ac453fb222351f2dc292, https://github.com/spring-projects/spring-batch/commit/e3fd881218146dbf8432f249d8efe2ce533eee7c\n", "url": "https://github.com/spring-projects/spring-batch/issues/1242", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2015-03-13 09:57:35", "closed": "2015-05-15 12:33:59", "commits": {}, "ttf": 63.000277777777775, "commitsDetails": []}, {"title": "The Page number keeps increasing between Job runs in the RepositoryItemReader [BATCH-2365]", "body": "**[Steven Doolan](https://jira.spring.io/secure/ViewProfile.jspa?name=steven.doolan@gmail.com)** opened **[BATCH-2365](https://jira.spring.io/browse/BATCH-2365?redirect=false)** and commented\n\nWe have a custom Spring Bean that implements the `org.springframework.batch.item.data.RepositoryItemReader`.  For the first batch run, the page numbers go from 0 to N (number of pages in report).  On the next run of the batch, the page numbers start at N + 1, and then usually fail because the subsequent report did not have that many pages (see example log below).\n\nCould you find a way to reinitialize the `RepositaryItemReader` between batch runs please?\n\n**I found a temporary solution:**\n1. I copied the RepositoryItemReader into my own RepositoryItemReader and modified the doClose method to set the page and current variables to zero:\n\n```\n@Override\nprotected void doClose() throws Exception {\n    page = 0;\n    current = 0;\n}\n```\n\n1. Then in my RepositoryItemReader implementation I implemented StepExecutionListener, and implemented the afterStep method as:\n\n```\n@Override\npublic ExitStatus afterStep(StepExecution stepExecution) {\n    try {\n        super.doClose();\n    } catch (Exception e) {\n        LOG.error(\"cannot do close after step\", e);\n    }\n    return null;\n}\n```\n\n1. Then I was able to run the batch job multiple times with different job parameters.\n\n**Example RepositoryItemReader log output for two subsequent job runs:**\n\n```\nJob Execution 1:\n15:56:07.822 [pool-2-thread-1] DEBUG c.l.r.a.b.i.reader.MyItemReader - Reading page 0\n15:56:08.329 [pool-2-thread-1] DEBUG c.l.r.a.b.i.reader.MyItemReader - Reading page 1\n15:56:08.827 [pool-2-thread-1] DEBUG c.l.r.a.b.i.reader.MyItemReader - Reading page 2\n15:56:09.353 [pool-2-thread-1] DEBUG c.l.r.a.b.i.reader.MyItemReader - Reading page 3\n15:56:09.889 [pool-2-thread-1] DEBUG c.l.r.a.b.i.reader.MyItemReader - Reading page 4\n\n...\n\nJob Execution 2:\n15:56:17.067 [pool-2-thread-1] DEBUG c.l.r.a.b.i.reader.MyItemReader - Reading page 5\n15:56:17.116 [pool-2-thread-1] DEBUG c.l.r.a.b.i.reader.MyItemReader - Reading page 6\n15:56:17.161 [pool-2-thread-1] DEBUG c.l.r.a.b.i.reader.MyItemReader - Reading page 7\n15:56:17.205 [pool-2-thread-1] DEBUG c.l.r.a.b.i.reader.MyItemReader - Reading page 8\n15:56:17.249 [pool-2-thread-1] DEBUG c.l.r.a.b.i.reader.MyItemReader - Reading page 9\n15:56:17.295 [pool-2-thread-1] DEBUG c.l.r.a.b.i.reader.MyItemReader - Reading page 10\n```\n\n\n\n---\n\n**Affects:** 3.0.3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/169fe1771392237ac60f3da1503dc44f36ccedd7, https://github.com/spring-projects/spring-batch/commit/84fc0c3f7c9a838215e9720c984007432c1d8434\n", "url": "https://github.com/spring-projects/spring-batch/issues/1238", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2015-03-18 00:13:15", "closed": "2015-03-31 13:49:13", "commits": {}, "ttf": 13.000277777777777, "commitsDetails": []}, {"title": "ItemProcessListener.onProcessError() not called when using AsycnItemProcessor [BATCH-2371]", "body": "**[Dominik Bartholdi](https://jira.spring.io/secure/ViewProfile.jspa?name=domi)** opened **[BATCH-2371](https://jira.spring.io/browse/BATCH-2371?redirect=false)** and commented\n\nWe wanna speed it up our jobs with parallel processing. But when ever we turn on parallel processing, `ItemProcessListener.onProcessError()` is not called anymore, but only `ItemProcessListener.beforeProcess()` and `ItemProcessListener.afterProcess()` are called.\n\nWe need this to be able to report on processing errors.\n\nI created a simple project showing the problem: https://github.com/imod/parallel-batch\n\n\n---\n\n**Affects:** 3.0.3\n\n**Reference URL:** https://github.com/imod/parallel-batch\n\n**Issue Links:**\n- [BATCH-2773](https://jira.spring.io/browse/BATCH-2773) Document how to handle asynchronous processing errors\n\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/9059a9e83ee42024c423bba4f9ed1dab2d4ab19c, https://github.com/spring-projects/spring-batch/commit/2e8e7f67be1cc1b350228e5e861d0e8b5da93549\n\n**Backported to:** [4.0.0.M1](https://github.com/spring-projects/spring-batch/milestone/84?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1233", "user": "spring-issuemaster", "labels": ["has: backports", "status: declined", "type: bug"], "created": "2015-04-02 03:34:23", "closed": "2018-11-13 16:08:07", "commits": {}, "ttf": 1321.0002777777777, "commitsDetails": []}, {"title": "Spring-batch 3.0.3 Multiple jobs running simultaneously results in Primary Key violation [BATCH-2372]", "body": "**[Ayushya Devmurari](https://jira.spring.io/secure/ViewProfile.jspa?name=pathfinder2104)** opened **[BATCH-2372](https://jira.spring.io/browse/BATCH-2372?redirect=false)** and commented\n\nWhen trying to launch multiple jobs at the same time it results into the Primary key violation exception for the BATCH_JOB_INSTANCE table.\n\nHere is the stack trace :\n[ERROR] 2015-04-07 18:50:40.991 [org.springframework.scheduling.quartz.SchedulerFactoryBean#3_Worker-1] BatchJobScheduler executeInternal -\nViolation of PRIMARY KEY constraint 'PK__BATCH_JO__4848154A7F60ED59'. Cannot insert duplicate key in object 'dbo.BATCH_JOB_INSTANCE'. The duplicate key value is (0).\norg.hibernate.exception.ConstraintViolationException: Violation of PRIMARY KEY constraint 'PK__BATCH_JO__4848154A7F60ED59'. Cannot insert duplicate key in object 'dbo.BATCH_JOB_INSTANCE'. The duplicate key value is (0).\nat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:128) ~[hibernate-core-4.1.9.Final.jar:4.1.9.Final]\nat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:49) ~[hibernate-core-4.1.9.Final.jar:4.1.9.Final]\nat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:125) ~[hibernate-core-4.1.9.Final.jar:4.1.9.Final]\nat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:110) ~[hibernate-core-4.1.9.Final.jar:4.1.9.Final]\nat org.hibernate.engine.jdbc.internal.proxy.AbstractStatementProxyHandler.continueInvocation(AbstractStatementProxyHandler.java:129) ~[hibernate-core-4.1.9.Final.jar:4.1.9.Final]\nat org.hibernate.engine.jdbc.internal.proxy.AbstractProxyHandler.invoke(AbstractProxyHandler.java:81) ~[hibernate-core-4.1.9.Final.jar:4.1.9.Final]\nat com.sun.proxy.$Proxy70.executeUpdate(Unknown Source) ~[?:?]\nat org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:824) ~[spring-jdbc-3.2.3.RELEASE.jar:3.2.3.RELEASE]\nat org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:818) ~[spring-jdbc-3.2.3.RELEASE.jar:3.2.3.RELEASE]\nat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:589) ~[spring-jdbc-3.2.3.RELEASE.jar:3.2.3.RELEASE]\nat org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:818) ~[spring-jdbc-3.2.3.RELEASE.jar:3.2.3.RELEASE]\nat org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:874) ~[spring-jdbc-3.2.3.RELEASE.jar:3.2.3.RELEASE]\nat org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:878) ~[spring-jdbc-3.2.3.RELEASE.jar:3.2.3.RELEASE]\nat org.springframework.batch.core.repository.dao.JdbcJobInstanceDao.createJobInstance(JdbcJobInstanceDao.java:115) ~[spring-batch-core-3.0.3.RELEASE.jar:3.0.3.RELEASE]\nat org.springframework.batch.core.repository.support.SimpleJobRepository.createJobExecution(SimpleJobRepository.java:135) ~[spring-batch-core-3.0.3.RELEASE.jar:3.0.3.RELEASE]\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.7.0_71]\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[?:1.7.0_71]\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.7.0_71]\nat java.lang.reflect.Method.invoke(Method.java:606) ~[?:1.7.0_71]\nat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317) ~[spring-aop-3.2.3.RELEASE.jar:3.2.3.RELEASE]\nat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183) ~[spring-aop-3.2.3.RELEASE.jar:3.2.3.RELEASE]\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150) ~[spring-aop-3.2.3.RELEASE.jar:3.2.3.RELEASE]\nat org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:96) ~[spring-tx-3.2.3.RELEASE.jar:3.2.3.RELEASE]\nat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:260) ~[spring-tx-3.2.3.RELEASE.jar:3.2.3.RELEASE]\nat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:94) ~[spring-tx-3.2.3.RELEASE.jar:3.2.3.RELEASE]\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) ~[spring-aop-3.2.3.RELEASE.jar:3.2.3.RELEASE]\nat org.springframework.batch.core.repository.support.AbstractJobRepositoryFactoryBean$1.invoke(AbstractJobRepositoryFactoryBean.java:172) ~[spring-batch-core-3.0.3.RELEASE.jar:3.0.3.RELEASE]\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) ~[spring-aop-3.2.3.RELEASE.jar:3.2.3.RELEASE]\nat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) ~[spring-aop-3.2.3.RELEASE.jar:3.2.3.RELEASE]\nat com.sun.proxy.$Proxy95.createJobExecution(Unknown Source) ~[?:?]\nat org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:125) ~[spring-batch-core-3.0.3.RELEASE.jar:3.0.3.RELEASE]\nat com.abc.testme.batchjobs.util.BatchJobUtils.runJob(BatchJobUtils.java:154) ~[BatchJobUtils.class:?]\nat com.abc.testme.batchjobs.util.BatchJobUtils.runJobWithCheckForRunningExecutions(BatchJobUtils.java:136) ~[BatchJobUtils.class:?]\nat com.abc.testme.batchjobs.util.BatchJobUtils.runJob(BatchJobUtils.java:80) ~[BatchJobUtils.class:?]\nat com.abc.testme.batchjobs.scheduler.BatchJobScheduler.executeInternal(BatchJobScheduler.java:52) [BatchJobScheduler.class:?]\nat org.springframework.scheduling.quartz.QuartzJobBean.execute(QuartzJobBean.java:113) [spring-context-support-3.2.3.RELEASE.jar:3.2.3.RELEASE]\nat org.quartz.core.JobRunShell.run(JobRunShell.java:216) [quartz-1.8.5.jar:?]\nat org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:549) [quartz-1.8.5.jar:?]\nCaused by: com.microsoft.sqlserver.jdbc.SQLServerException: Violation of PRIMARY KEY constraint 'PK__BATCH_JO__4848154A7F60ED59'. Cannot insert duplicate key in object 'dbo.BATCH_JOB_INSTANCE'. The duplicate key value is (0).\nat com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:216) ~[sqljdbc4-4.0.jar:?]\nat com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1515) ~[sqljdbc4-4.0.jar:?]\nat com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.doExecutePreparedStatement(SQLServerPreparedStatement.java:404) ~[sqljdbc4-4.0.jar:?]\nat com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement$PrepStmtExecCmd.doExecute(SQLServerPreparedStatement.java:350) ~[sqljdbc4-4.0.jar:?]\nat com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:5696) ~[sqljdbc4-4.0.jar:?]\nat com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:1715) ~[sqljdbc4-4.0.jar:?]\nat com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:180) ~[sqljdbc4-4.0.jar:?]\nat com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:155) ~[sqljdbc4-4.0.jar:?]\nat com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.executeUpdate(SQLServerPreparedStatement.java:314) ~[sqljdbc4-4.0.jar:?]\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.7.0_71]\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[?:1.7.0_71]\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.7.0_71]\nat java.lang.reflect.Method.invoke(Method.java:606) ~[?:1.7.0_71]\nat org.hibernate.engine.jdbc.internal.proxy.AbstractStatementProxyHandler.continueInvocation(AbstractStatementProxyHandler.java:122) ~[hibernate-core-4.1.9.Final.jar:4.1.9.Final]\n... 33 more\n\nI have posted my configuration on the link provided : http://stackoverflow.com/questions/29493484/primary-key-violation-in-spring-batchs-batch-job-instance-table-while-running-j?noredirect=1#comment47186282_29493484\n\n\n---\n\n**Affects:** 3.0.3\n\n**Reference URL:** http://stackoverflow.com/questions/29493484/primary-key-violation-in-spring-batchs-batch-job-instance-table-while-running-j?noredirect=1#comment47186282_29493484\n", "url": "https://github.com/spring-projects/spring-batch/issues/1232", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2015-04-14 05:48:44", "closed": "2015-05-18 21:59:12", "commits": {}, "ttf": 34.000277777777775, "commitsDetails": []}, {"title": "Update schema-mysql.sql to use consistent engines [BATCH-2373]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2373](https://jira.spring.io/browse/BATCH-2373?redirect=false)** and commented\n\nThe `schema-mysql.sql` file is currently coded half MyISAM and InnoDB.  It should all be InnoDB.\n\n\n---\n\n**Affects:** 3.0.3\n\n**Reference URL:** http://stackoverflow.com/questions/29622004/spring-batch-3-0-3-get-updates-to-tables-using-non-transactional-storage-engine\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/55ca2bc8958aa9cc59a8bef0aa1c744e6678b318, https://github.com/spring-projects/spring-batch/commit/51f7f1f75429cd354c5396cc8290f9cbda3ada5e\n\n0 votes, 5 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1231", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2015-04-14 05:57:47", "closed": "2016-06-13 12:09:52", "commits": {}, "ttf": 426.0002777777778, "commitsDetails": []}, {"title": "Multiple jobs fails with SQLTransactionRollbackException: transaction rollback: serialization failure [BATCH-2374]", "body": "**[Kritarth](https://jira.spring.io/secure/ViewProfile.jspa?name=kritarthd)** opened **[BATCH-2374](https://jira.spring.io/browse/BATCH-2374?redirect=false)** and commented\n\nI have 2 jobs in a spring batch application. On start up of the application, I am able to see below exception. When I run the batches individually, it runs fine.\n\norg.springframework.dao.ConcurrencyFailureException: PreparedStatementCallback; SQL [INSERT into BATCH_JOB_INSTANCE(JOB_INSTANCE_ID, JOB_NAME, JOB_KEY, VERSION) values (?, ?, ?, ?)]; transaction rollback: serialization failure; nested exception is java.sql.SQLTransactionRollbackException: transaction rollback: serialization failure\nat org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:71)\nat org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)\nat org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)\nat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:660)\nat org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:909)\nat org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:970)\nat org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:975)\nat org.springframework.batch.core.repository.dao.JdbcJobInstanceDao.createJobInstance(JdbcJobInstanceDao.java:115)\nat org.springframework.batch.core.repository.support.SimpleJobRepository.createJobExecution(SimpleJobRepository.java:135)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\nat java.lang.reflect.Method.invoke(Unknown Source)\nat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\nat org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)\nat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:281)\nat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\nat org.springframework.batch.core.repository.support.AbstractJobRepositoryFactoryBean$1.invoke(AbstractJobRepositoryFactoryBean.java:172)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\nat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)\nat com.sun.proxy.$Proxy66.createJobExecution(Unknown Source)\nat org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:125)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\nat java.lang.reflect.Method.invoke(Unknown Source)\nat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\nat org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\nat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)\nat com.sun.proxy.$Proxy64.run(Unknown Source)\nat com.comcast.batch.config.ValidationBatchConfiguration.startMyJob(ValidationBatchConfiguration.java:161)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\nat java.lang.reflect.Method.invoke(Unknown Source)\nat org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:65)\nat org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)\nat java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)\nat java.util.concurrent.FutureTask.runAndReset(Unknown Source)\nat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(Unknown Source)\nat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\nat java.lang.Thread.run(Unknown Source)\nCaused by: java.sql.SQLTransactionRollbackException: transaction rollback: serialization failure\nat org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)\nat org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)\nat org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source)\nat org.hsqldb.jdbc.JDBCPreparedStatement.executeUpdate(Unknown Source)\nat org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:102)\nat org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:916)\nat org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:909)\nat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:644)\n... 46 common frames omitted\nCaused by: org.hsqldb.HsqlException: transaction rollback: serialization failure\nat org.hsqldb.error.Error.error(Unknown Source)\nat org.hsqldb.error.Error.error(Unknown Source)\nat org.hsqldb.Session.executeCompiledStatement(Unknown Source)\nat org.hsqldb.Session.execute(Unknown Source)\n... 52 common frames omitted\n\n\n---\n\n**Affects:** 3.0.3\n", "url": "https://github.com/spring-projects/spring-batch/issues/1230", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2015-04-15 12:00:06", "closed": "2015-11-09 19:43:50", "commits": {}, "ttf": 208.00027777777777, "commitsDetails": []}, {"title": "Spring batch - JSR 352 failing to rollback and retry when an skippable exception is thrown in the writer [BATCH-2376]", "body": "**[Ravikiran Butti](https://jira.spring.io/secure/ViewProfile.jspa?name=rave763)** opened **[BATCH-2376](https://jira.spring.io/browse/BATCH-2376?redirect=false)** and commented\n\nI am using Spring Batch -JSR 352  job design.\n\nIn the writer I have 3 JDBC calls. If i throw an skippable exception after 2 JDBC calls have been successfully executed , then I could find the Spring batch is not able to rollback the transaction for the chunk and retry the chunk by placing the commit size as one. I am receiving the following execption after which the entire chunk is getting skipped and we are having an chunk commit. As a result the data already written to 2 JDBC tables are getting persisted missing the 3rd table data.\n\n```\n20 Apr 2015 18:38:28,811 ERROR [gov.state.nextgen.in.batch.sdx.chunk.writer.SdxRcvDlyWriter.writeItems(SdxRcvDlyWriter.java:74)] - Error while writing sdxRcvRecord :Exception occured during  processing \n\tat gov.state.nextgen.in.batch.sdx.bo.impl.SdxRcvDlyBoImpl.write(SdxRcvDlyBoImpl.java:125)\n\tat gov.state.nextgen.in.batch.sdx.chunk.writer.SdxRcvDlyWriter.writeItems(SdxRcvDlyWriter.java:65)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:94)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)\n\tat java.lang.reflect.Method.invoke(Method.java:619)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\n\tat org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:133)\n\tat org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:121)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)\n\tat com.sun.proxy.$Proxy18.writeItems(Unknown Source)\n\tat org.springframework.batch.jsr.item.ItemWriterAdapter.write(ItemWriterAdapter.java:55)\n\tat org.springframework.batch.core.jsr.step.item.JsrChunkProcessor.doPersist(JsrChunkProcessor.java:243)\n\tat org.springframework.batch.core.jsr.step.item.JsrFaultTolerantChunkProcessor$5.doWithRetry(JsrFaultTolerantChunkProcessor.java:298)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:263)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:168)\n\tat org.springframework.batch.core.step.item.BatchRetryTemplate.execute(BatchRetryTemplate.java:222)\n\tat org.springframework.batch.core.jsr.step.item.JsrFaultTolerantChunkProcessor.persist(JsrFaultTolerantChunkProcessor.java:348)\n\tat org.springframework.batch.core.jsr.step.item.JsrChunkProcessor.process(JsrChunkProcessor.java:114)\n\tat org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:75)\n\tat org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:406)\n\tat org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:330)\n\tat org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:133)\n\tat org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:271)\n\tat org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:77)\n\tat org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:368)\n\tat org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)\n\tat org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:144)\n\tat org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:257)\n\tat org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:198)\n\tat org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)\n\tat org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:64)\n\tat org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:67)\n\tat org.springframework.batch.core.jsr.job.flow.support.state.JsrStepState.handle(JsrStepState.java:53)\n\tat org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:165)\n\tat org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:144)\n\tat org.springframework.batch.core.jsr.job.flow.JsrFlowJob.doExecute(JsrFlowJob.java:82)\n\tat org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:304)\n\tat org.springframework.batch.core.jsr.launch.JsrJobOperator$2.run(JsrJobOperator.java:675)\n\tat java.lang.Thread.run(Thread.java:795)\n20 Apr 2015 18:38:50,157 DEBUG [org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:293)] - Checking for rethrow: count=1 \n20 Apr 2015 18:38:52,584 DEBUG [org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:313)] - Retry failed last attempt: count=1 \n20 Apr 2015 18:38:53,403 DEBUG [org.springframework.batch.core.jsr.step.item.JsrFaultTolerantChunkProcessor$6.recover(JsrFaultTolerantChunkProcessor.java:333)] - Skipping after failed write \norg.springframework.batch.core.step.item.ForceRollbackForWriteSkipException: Force rollback on skippable exception so that skipped item can be located.\n\tat org.springframework.batch.core.jsr.step.item.JsrFaultTolerantChunkProcessor$5.doWithRetry(JsrFaultTolerantChunkProcessor.java:317)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:263)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:168)\n\tat org.springframework.batch.core.step.item.BatchRetryTemplate.execute(BatchRetryTemplate.java:222)\n\tat org.springframework.batch.core.jsr.step.item.JsrFaultTolerantChunkProcessor.persist(JsrFaultTolerantChunkProcessor.java:348)\n\tat org.springframework.batch.core.jsr.step.item.JsrChunkProcessor.process(JsrChunkProcessor.java:114)\n\tat org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:75)\n\tat org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:406)\n\tat org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:330)\n\tat org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:133)\n\tat org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:271)\n\tat org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:77)\n\tat org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:368)\n\tat org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)\n\tat org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:144)\n\tat org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:257)\n\tat org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:198)\n\tat org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)\n\tat org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:64)\n\tat org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:67)\n\tat org.springframework.batch.core.jsr.job.flow.support.state.JsrStepState.handle(JsrStepState.java:53)\n\tat org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:165)\n\tat org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:144)\n\tat org.springframework.batch.core.jsr.job.flow.JsrFlowJob.doExecute(JsrFlowJob.java:82)\n\tat org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:304)\n\tat org.springframework.batch.core.jsr.launch.JsrJobOperator$2.run(JsrJobOperator.java:675)\n\tat java.lang.Thread.run(Thread.java:795)\nCaused by: gov.state.nextgen.framework.batch.exception.NGBatchSkipRecordException: gov.state.nextgen.in.batch.exception.INBatchException: Exception occured during  processing \n\tat gov.state.nextgen.in.batch.sdx.chunk.writer.SdxRcvDlyWriter.writeItems(SdxRcvDlyWriter.java:76)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:94)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)\n\tat java.lang.reflect.Method.invoke(Method.java:619)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\n\tat org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:133)\n\tat org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:121)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)\n\tat com.sun.proxy.$Proxy18.writeItems(Unknown Source)\n\tat org.springframework.batch.jsr.item.ItemWriterAdapter.write(ItemWriterAdapter.java:55)\n\tat org.springframework.batch.core.jsr.step.item.JsrChunkProcessor.doPersist(JsrChunkProcessor.java:243)\n\tat org.springframework.batch.core.jsr.step.item.JsrFaultTolerantChunkProcessor$5.doWithRetry(JsrFaultTolerantChunkProcessor.java:298)\n\t... 26 more\nCaused by: gov.state.nextgen.in.batch.exception.INBatchException: Exception occured during  processing \n\tat gov.state.nextgen.in.batch.sdx.bo.impl.SdxRcvDlyBoImpl.write(SdxRcvDlyBoImpl.java:125)\n\tat gov.state.nextgen.in.batch.sdx.chunk.writer.SdxRcvDlyWriter.writeItems(SdxRcvDlyWriter.java:65)\n\t... 41 more20 Apr 2015 18:39:14,808 DEBUG [org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:88)] - Inputs not busy, ended: false \n20 Apr 2015 18:39:17,985 DEBUG [org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:437)] - Applying contribution: [StepContribution: read=2, written=0, filtered=0, readSkips=0, writeSkips=1, processSkips=0, exitStatus=EXECUTING] \n20 Apr 2015 18:39:18,984 INFO  [gov.state.nextgen.in.batch.sdx.chunk.writer.SdxRcvDlyWriter.checkpointInfo(SdxRcvDlyWriter.java:87)] - ParisRcvFedWriter - checkpointInfo(): step name: process, step execution id: 14939 \n20 Apr 2015 18:39:19,314 TRACE [org.springframework.transaction.support.TransactionSynchronizationManager.getResource(TransactionSynchronizationManager.java:140)] - Retrieved value [org.springframework.jdbc.datasource.ConnectionHolder@5c4a884f] for key [org.apache.commons.dbcp.BasicDataSource@d9bdc230] bound to thread [SimpleAsyncTaskExecutor-1] \n20 Apr 2015 18:39:19,314 DEBUG [org.springframework.transaction.support.AbstractPlatformTransactionManager.handleExistingTransaction(AbstractPlatformTransactionManager.java:472)] - Participating in existing transaction \n20 Apr 2015 18:39:19,314 TRACE [org.springframework.transaction.interceptor.TransactionAspectSupport.prepareTransactionInfo(TransactionAspectSupport.java:447)] - Getting transaction for [org.springframework.batch.core.repository.support.SimpleJobRepository.updateExecutionContext] \n20 Apr 2015 18:39:19,315 DEBUG [org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:908)] - Executing prepared SQL update \n20 Apr 2015 18:39:19,315 DEBUG [org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:627)] - Executing prepared SQL statement [UPDATE BATCH_STEP_EXECUTION_CONTEXT SET SHORT_CONTEXT = ?, SERIALIZED_CONTEXT = ? WHERE STEP_EXECUTION_ID = ?] \n```\n\nI am attaching my configuration files for reference. By debugging I could find my insert statements are getting executed under transaction managed by spring and I am sure there is no issue with the transaction manager configuration\n\n\n---\n\n**Affects:** 3.0.4\n\n**Reference URL:** http://stackoverflow.com/questions/29622986/spring-batch-jsr-352-retry-fails-when-skip-exception-in-thrown-in-writer\n\n**Attachments:**\n- [baseContext.xml](https://jira.spring.io/secure/attachment/22753/baseContext.xml) (_5.36 kB_)\n- [IN-RCSDX-DLY.xml](https://jira.spring.io/secure/attachment/22754/IN-RCSDX-DLY.xml) (_1.79 kB_)\n\n**Referenced from:** pull request https://github.com/rbutti/SpringBatch/tree/master/SpringJSR352\n\n**Backported to:** [4.0.0.M1](https://github.com/spring-projects/spring-batch/milestone/84?closed=1)\n\n2 votes, 4 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1228", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "in: infrastructure", "in: retry", "status: declined", "type: bug"], "created": "2015-04-20 06:21:48", "closed": "2017-07-20 17:28:30", "commits": {}, "ttf": 822.0002777777778, "commitsDetails": []}, {"title": "MultiResourceItemReader delegates close() even if noInput==true [BATCH-2378]", "body": "**[Tommy](https://jira.spring.io/secure/ViewProfile.jspa?name=tommy)** opened **[BATCH-2378](https://jira.spring.io/browse/BATCH-2378?redirect=false)** and commented\n\nIf no resources were found, no resource will be set on the delegate, and the delegate won't be opened at all as expected.\nUnfortunately, the close method is always called on the delegate.\n\nProbably it would be better to call close on the delegate only if it has been opened before.\n\n> `@Override`\n> public void close() throws ItemStreamException {\n> super.close();\n> if (!noInput) {    \n> delegate.close();\n> }  \n> noInput = false;\n> }\n\n\n\n---\n\n**Affects:** 3.0.3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/ab80c33a2ac4727388e27628ce3c2f48e0de136e, https://github.com/spring-projects/spring-batch/commit/567f26631872b18ec08de82bd67ac8042592eac2\n", "url": "https://github.com/spring-projects/spring-batch/issues/1226", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2015-04-27 07:19:46", "closed": "2015-05-15 13:19:08", "commits": {}, "ttf": 18.00027777777778, "commitsDetails": []}, {"title": "DelimitedLineTokenizer allows null and empty string as delimiters [BATCH-2380]", "body": "**[Matthew Ouyang](https://jira.spring.io/secure/ViewProfile.jspa?name=mouyang)** opened **[BATCH-2380](https://jira.spring.io/browse/BATCH-2380?redirect=false)** and commented\n\nIn doTokenize, there are several delimiter.length() calls which will cause a NullPointerException if the delimiter is null.\n\nIf empty string is passed in as a delimiter, then this degenerates to an identity mapping and this would not be useful.\n\nEither of these situations can happen if the delimiter gets set dynamically at runtime.\n\n\n---\n\n**Affects:** 3.0.3\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/368, and commits https://github.com/spring-projects/spring-batch/commit/248b5a69a763f4aa8881a879160f6462d8010ee2\n\n**Backported to:** [4.0.0.M1](https://github.com/spring-projects/spring-batch/milestone/84?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1224", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2015-04-29 23:30:11", "closed": "2017-07-20 17:27:08", "commits": {}, "ttf": 812.0002777777778, "commitsDetails": []}, {"title": "job parameters are not binding to itemreaders resource attribute [BATCH-2382]", "body": "**[thulasiram](https://jira.spring.io/secure/ViewProfile.jspa?name=thulasi29n)** opened **[BATCH-2382](https://jira.spring.io/browse/BATCH-2382?redirect=false)** and commented\n\nHi,\nplease find below exception when trying to get job parameter values for resource attribute in item reader..\n---------------------------------------------------------------------------------------------------------------\n\njava\n----\n\n```java\npublic static void main(String[] args) {\n\n\t\tString[] springConfig  = \n\t\t\t{\t\"resources/spring/batch/config/database.xml\", \n\t\t\t\t\"resources/spring/batch/config/context.xml\",\n\t\t\t\t\"resources/spring/batch/jobs/csvtodb.xml\" \n\t\t\t};\n\t\t\n\t\tApplicationContext context = \n\t\t\t\tnew ClassPathXmlApplicationContext(springConfig);\n\t\t\n\t\tJobLauncher jobLauncher = (JobLauncher) context.getBean(\"jobLauncher\");\n\t\tJob job = (Job) context.getBean(\"reporttodb_Job123\");\n\t\n\t\ttry {\n             String conv_name= \"reporttodb.csv\"; \n\t\t\tJobParameters jobParameters = new JobParametersBuilder().addString(\"resource\", conv_name).toJobParameters();\n\t\n\t\t//\tSystem.out.println(\"param==\"+jobParameters.getString(\"reader\"));\n\t\t\tJobExecution execution = jobLauncher.run(job, jobParameters);\n\t\n\t\t\tSystem.out.println(\"Exit Status : \" + execution.getStatus());\n```\n\n--------------------\n\nxml\n---\n\n```xml\n<bean id=\"cvsFileItemReader\" class=\"org.springframework.batch.item.file.FlatFileItemReader\" scope=\"step\">\n \n\t<!-- Read a csv file -->\n\t<property name=\"resource\" value=\"classpath:resources/cvs/input/#{jobParameters['resource']}\" />\n \n\t<property name=\"lineMapper\">\n\t\t<bean class=\"org.springframework.batch.item.file.mapping.DefaultLineMapper\">\n```\n\n-------------------------------\n\nerror\n-----\n\nCaused by: java.lang.IllegalStateException: Input resource must exist (reader is in 'strict' mode): class path resource [resources/cvs/input/#{jobParameters['resource']}]\nat org.springframework.batch.item.file.FlatFileItemReader.doOpen(FlatFileItemReader.java:251)\nat org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:144)\n\n\n---\nNo further details from [BATCH-2382](https://jira.spring.io/browse/BATCH-2382?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/1222", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2015-05-06 03:32:57", "closed": "2015-05-11 09:06:03", "commits": {}, "ttf": 5.000277777777778, "commitsDetails": []}, {"title": "Slow performance for jobs with large number of steps due to usage of CopyOnWriteArraySet in JobExecution [BATCH-2384]", "body": "**[Szymon Dembek](https://jira.spring.io/secure/ViewProfile.jspa?name=demboos)** opened **[BATCH-2384](https://jira.spring.io/browse/BATCH-2384?redirect=false)** and commented\n\nI'm using Spring batch jobs with quite large number of steps (several thousands - don't ask why...).\n\nI've noticed a huge degradation of performance when  starting/restarting my jobs. I traced the problem to the fact that JobExecution is using for it's stepsExecutions collection the CopyOnWriteArraySet collection.\n\nAnd for instance in the SimpleJobRepository.getLastStepExecution method, we have an iteration over every job execution for a given job instance. This loads all step executions\n\n```java\nstepExecutionDao.addStepExecutions(jobExecution);\n```\n\nso as a result, for every job execution, the stepsExecutions collection is builded by adding it's steps one by one. Imagine how many copy-on-write operations that is (especially when the last step executions are added).\n\nI imagine there must be a reason the CopyOnWriteArraySet collection was used. It even  says in it's java docs that it's suitable only for small collections, when there might be interference from many concurrent threads (iterators rely on unchanging snapshots). But I can't imagine how this applies to batch job execution - are job executions cached internally and accessed (modified) by concurrent threads?\n\n\n---\n\n**Affects:** 3.0.3\n\n**Attachments:**\n- [WORKAROUND_Example_SimpleStepExecutionSplitter.java](https://jira.spring.io/secure/attachment/23506/WORKAROUND_Example_SimpleStepExecutionSplitter.java) (_12.78 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/fa286dc1e92bfbc75d918c19f820c5d0333ae6fa\n\n**Backported to:** [4.0.0.RC1](https://github.com/spring-projects/spring-batch/milestone/88?closed=1)\n\n7 votes, 10 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1220", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2015-05-15 00:32:32", "closed": "2017-11-02 17:51:57", "commits": {}, "ttf": 902.0002777777778, "commitsDetails": []}, {"title": "NativeEnvironmentRepository,clean() method does not work on windows. [BATCH-2390]", "body": "**[Douglass Parker](https://jira.spring.io/secure/ViewProfile.jspa?name=douglassparker)** opened **[BATCH-2390](https://jira.spring.io/browse/BATCH-2390?redirect=false)** and commented\n\nNativeEnvironmentRepository,clean() method does not work on windows.  E.g. spring.cloud.config.server.native.searchLocations=file:/app/config,\n\nThis code works on Unix or Linux, but not Windows:\n\nif (normal.startsWith(pattern)\n&& !normal.substring(pattern.length()).contains(\"/\")) {\nmatches = true;\nbreak;\n}\n\nnormal = C:\\app\\config\\demo.yml\npattern = C:/app/config/\n\nEntering the property in the Windows format does not fix the issue.\n\nnormal is calculated by:\n\nString normal = name;\nif (normal.startsWith(\"file:\")) {\nnormal = new File(normal.substring(\"file:\".length())).getAbsolutePath();\n}\n\nOn windows, getAbsolutePath() returns the path using a back slash for the path delimiter.\n\n\n---\n\n**Affects:** 3.0.4\n", "url": "https://github.com/spring-projects/spring-batch/issues/1214", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2015-06-05 10:17:34", "closed": "2015-06-05 10:40:35", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Spring Batch - JSR 352 failing to rollback when skippable exception is thrown in item processor [BATCH-2393]", "body": "**[Rolland Hobbie](https://jira.spring.io/secure/ViewProfile.jspa?name=rllndhbb)** opened **[BATCH-2393](https://jira.spring.io/browse/BATCH-2393?redirect=false)** and commented\n\nI am using Spring Batch JSR 352 job design.\n\nIn the item processor I have a JDBC call. If I throw a skippable exception after the JDBC call, Spring Batch invokes the SkipListener#onSkipInProcess(java.lang.Object, java.lang.Throwable) method in the current transaction, and does not rollback. This produces unexpected results, as the JDBC call in the item processor is committed. This is also inconsistent with native Spring Batch which rolls back the current transaction, and then reprocessing the chunk before invoking the SkipListener just before committing the transaction.\n\nI have attached a test case implementation using native Spring Batch (works as expected) and JSR 352 Spring Batch (which fails).\n\n\n---\n\n**Affects:** 3.0.4\n\n**Attachments:**\n- [JsrBatch.zip](https://jira.spring.io/secure/attachment/22900/JsrBatch.zip) (_7.25 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1210", "user": "spring-issuemaster", "labels": ["in: core", "in: infrastructure", "status: declined", "type: bug"], "created": "2015-06-09 15:57:25", "closed": "2015-07-09 11:35:56", "commits": {}, "ttf": 29.00027777777778, "commitsDetails": []}, {"title": "JsonLineMapper uses older codehaus jackson dependency [BATCH-2395]", "body": "**[Jeffrey Ellin](https://jira.spring.io/secure/ViewProfile.jspa?name=jeffellin)** opened **[BATCH-2395](https://jira.spring.io/browse/BATCH-2395?redirect=false)** and commented\n\ndependencies on codehaus should be updated to com.fasterxml.jackson  Codehaus namespace is deprecated.  Since the JsonLineMapper uses imports from the codehaus namespace using newer versions of jackson will not work.\n\n\n---\n\n**Affects:** 3.0.4\n\n**Reference URL:** https://github.com/spring-projects/spring-batch/blob/3.0.4.RELEASE/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/mapping/JsonLineMapper.java\n\n**Backported to:** [4.0.0.M2](https://github.com/spring-projects/spring-batch/milestone/85?closed=1)\n\n7 votes, 3 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1207", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2015-06-10 06:46:51", "closed": "2017-07-20 17:32:00", "commits": {}, "ttf": 771.0002777777778, "commitsDetails": []}, {"title": "Heavy use of memory to convert a context value to String if it is a collection [BATCH-2396]", "body": "**[Kong TO](https://jira.spring.io/secure/ViewProfile.jspa?name=newlight77)** opened **[BATCH-2396](https://jira.spring.io/browse/BATCH-2396?redirect=false)** and commented\n\nOne of my client has one batch where 20+ collections are stored in the context so they can be accessible in every step of the job.\n\nWhen calling executionContext.put(\"key\", collection), the collection is converted to String :\nAssert.isInstanceOf(Serializable.class, value, \"Value: [ \" + value + \"must be serializable.\");\n\nIf the collection is big... memory usage is growing fast. I know it is not a good practice to store collections within the context, but not everyone would expect this to happen.\n\nKong\n\n\n---\n\n**Affects:** 3.0.4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/f78aa275c045cf35168f7a9f081e7b3709f338ae\n\n**Backported to:** [4.0.0.M2](https://github.com/spring-projects/spring-batch/milestone/85?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1206", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2015-06-11 08:11:10", "closed": "2017-07-20 17:32:59", "commits": {}, "ttf": 770.0002777777778, "commitsDetails": []}, {"title": "XML configuration of tasklet method does not configure parameters [BATCH-2397]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2397](https://jira.spring.io/browse/BATCH-2397?redirect=false)** and commented\n\nWhen configuring a `tasklet` element via XML, there is a short cut version of the configuration that allows the use of a bean that does not implement the `Tasklet` interface.  When using this option, Spring Batch automatically wraps the other bean in a `MethodInvokingTaskletAdapter`, however it doesn't address the passing of the parameters `Tasklet#execute` normally expects (even though the documentation for the schema element says the signatures should be the same).\n\n\n---\n\n**Affects:** 3.0.4\n\n**Reference URL:** http://stackoverflow.com/questions/30783646/how-to-call-a-specific-method-of-a-tasklet\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/567, and commits https://github.com/spring-projects/spring-batch/commit/79f3a67883712413d7f3340b926c5b3e30f4960f, https://github.com/spring-projects/spring-batch/commit/b49eea78de98a1971b924dc93c90c7dcbc714d51\n\n2 votes, 2 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1205", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2015-06-11 12:07:52", "closed": "2018-02-06 08:42:53", "commits": {}, "ttf": 970.0002777777778, "commitsDetails": []}, {"title": "rename beanRefContext.xml [BATCH-2405]", "body": "**[Jimmy Praet](https://jira.spring.io/secure/ViewProfile.jspa?name=jpraet)** opened **[BATCH-2405](https://jira.spring.io/browse/BATCH-2405?redirect=false)** and commented\n\nWe are in the process of migrating several applications from spring batch 2.2.7 to 3.0.4.\n\nOn application startup we get the following exception:\n\n```\n[7/23/15 11:18:01:149 CEST] 00032b0b GenericXmlApp W org.springframework.context.support.AbstractApplicationContext refresh Exception encountered during context initialization - cancelling refresh attempt\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jobRepository': Cannot resolve reference to bean 'dataSource' while setting bean property 'dataSource'; \nnested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.apache.commons.dbcp.BasicDataSource] for bean with name 'dataSource' defined in class path resource [baseContext.xml]; \nnested exception is java.lang.ClassNotFoundException: org.apache.commons.dbcp.BasicDataSource\n```\n\nWe are bootstrapping our applications with a StartupBean (EJB) on WebSphere, annotated with `@Interceptors(SpringBeanAutowiringInterceptor.class)`. The `SpringBeanAutowiringInterceptor` will load our `beanRefContext.xml` via the `ContextSingletonBeanFactoryLocator`.\n\nNow with spring-batch 3.0.4, the `ContextSingletonBeanFactoryLocator` will not only load our own application specific `beanRefContext.xml`, but also the one that is included in spring-batch-core.jar, causing the exception mentioned above.\n\nThere is no way to configure an alternate `beanRefContext.xml` location in `SpringBeanAutowiringInterceptor`.\n\nI suggest that the `beanRefContext.xml` be renamed to something like `JSR-352-beanRefContext.xml` so it doesn't conflict with client applications that are already using `ContextSingletonBeanFactoryLocator` in one way or another to bootstrap their application context from the default `classpath*:beanRefContext.xml` location.\n\n`JsrJobOperator` can be modified to use `org.springframework.context.access.ContextSingletonBeanFactoryLocator.getInstance(String)`\n\n\n---\n\n**Affects:** 3.0.4, 3.0.7\n\n**Backported to:** [4.0.0.M2](https://github.com/spring-projects/spring-batch/milestone/85?closed=1)\n\n1 votes, 4 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1197", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2015-07-23 04:37:21", "closed": "2017-07-20 17:35:32", "commits": {}, "ttf": 728.0002777777778, "commitsDetails": []}, {"title": "NoSuchBeanDefinitionException with \"modular = true\" + generics + @Stepscope [BATCH-2413]", "body": "**[Roar Bjurstr\u00f8m](https://jira.spring.io/secure/ViewProfile.jspa?name=roarbjur)** opened **[BATCH-2413](https://jira.spring.io/browse/BATCH-2413?redirect=false)** and commented\n\nWhile trying to upgrade from spring batch 2 -> 3 in my current project, i've encountered a strange problem. It seems like use of the following combination:\n- `@EnableBatchProcessing`(modular = true)\n- Have a step that uses generics\n- And have a reader that is annotated with `@Stepscope` (but i am guessing the problem is not reader specific)\n  ...will cause a NoSuchBeanDefinitionException.\n\nI have recreated the problem in a test, see: https://gist.github.com/anonymous/0a8eec133affb0fddbc2\n\nIt seems like there are 3 ways to work around this issue:\n1. Change `@EnableBatchProcessing`(modular = true) to `@EnableBatchProcessing`(modular = false) (line 51)\n\n2. Remove generics. In this case i would have to change:\n\n```\n        @Bean\n        public Step step(StaxEventItemReader<HibernateEntity> reader) {\n            //Irrelevant method information\n        }\n\n        @Bean\n        @StepScope\n        public StaxEventItemReader<HibernateEntity> reader() throws JAXBException {\n            //Irrelevant method information\n        }\n    \n```\n\nto\n\n```\n         @Bean\n        public Step step(StaxEventItemReader reader) {\n              //Irrelevant method information\n        }\n\n        @Bean\n        @StepScope\n        public StaxEventItemReader reader() throws JAXBException {\n             //Irrelevant method information\n        }\n```\n\n3. Remove the `@StepScope` annotation (line 163).\n\nSince i am upgrading a large project, neither of these solutions are practical. Am I missing something here?\n\nI have tried with version 3.0.4 and 3.1.0-SNAPSHOT (as of 05.08.2015).\n\n\n---\n\n**Affects:** 4.0.0, 3.0.4\n\n**Attachments:**\n- [stacktrace_batch_2413.txt](https://jira.spring.io/secure/attachment/22970/stacktrace_batch_2413.txt) (_17.95 kB_)\n- [StepScopModularTest.java](https://jira.spring.io/secure/attachment/22969/StepScopModularTest.java) (_7.81 kB_)\n\n3 votes, 5 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1190", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2015-08-05 23:34:01", "closed": "2020-01-23 11:23:58", "commits": {}, "ttf": 1631.0002777777777, "commitsDetails": []}, {"title": "Optimistic locking issue when updating step execution Spring Batch 3.0.3.RELEASE [BATCH-2418]", "body": "**[Gaurang](https://jira.spring.io/secure/ViewProfile.jspa?name=gaurangbhatt)** opened **[BATCH-2418](https://jira.spring.io/browse/BATCH-2418?redirect=false)** and commented\n\nHi,\n\nI am working on trying to solve this issue since last 3 weeks. It is a blocker issue because it is stopping us from using spring batch as ETL solution for our project. We are using partition oriented processing for partitioning large files into step executions. Each step execution will then use Chunk oriented processing to read, process and write data based on the start & end index in the execution context.\n\nIf I run the process with just 1 partition the process completes without any exception (which means there is no issue with the application code - reader, processor & writer). The process starts failing the moment I add more partitions or even increase the number of threads in the chunk's task executor (tried both ThreadPoolExecutor and org.springframework.core.task.SimpleAsyncTaskExecutor). I am also catching Throwable everywhere and I don't see any exception thrown by any code except the one reported below. Out of say 100 partitions, the process starts throwing this exception after processing approximately 60 partitions.\n\nOn job repository I tried SERIALIZABLE, READ_COMMITTED isolation levels but that also did not work. Changing the database from PostgresSQL to Oracle did not help.\n\nI have looked at all the comments on bugs reported by other users with similar issue and tried everything. Please let me know if you need any other information logs, configuration files, etc. Appreciate your help and response.\n\n**+Exception:+**\n\n```java\n2015-08-12 20:55:04 ERROR o.s.b.c.s.t.TaskletStep:[SimpleAsyncTaskExecutor-14]:458 - JobRepository failure forcing rollback\norg.springframework.dao.OptimisticLockingFailureException: Attempt to update step execution id=50 with wrong version (12), where current version is 13\n\tat org.springframework.batch.core.repository.dao.JdbcStepExecutionDao.updateStepExecution(JdbcStepExecutionDao.java:255) ~[spring-batch-core-3.0.3.RELEASE.jar:3.0.3.RELEASE]\n\tat org.springframework.batch.core.repository.support.SimpleJobRepository.update(SimpleJobRepository.java:191) ~[spring-batch-core-3.0.3.RELEASE.jar:3.0.3.RELEASE]\n\tat sun.reflect.GeneratedMethodAccessor116.invoke(Unknown Source) ~[na:na]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[na:1.7.0_79]\n\tat java.lang.reflect.Method.invoke(Unknown Source) ~[na:1.7.0_79]\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317) ~[spring-aop-4.1.6.RELEASE.jar:4.1.6.RELEASE]\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190) ~[spring-aop-4.1.6.RELEASE.jar:4.1.6.RELEASE]\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) ~[spring-aop-4.1.6.RELEASE.jar:4.1.6.RELEASE]\n\tat org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99) ~[spring-tx-4.1.6.RELEASE.jar:4.1.6.RELEASE]\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:281) ~[spring-tx-4.1.6.RELEASE.jar:4.1.6.RELEASE]\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) ~[spring-tx-4.1.6.RELEASE.jar:4.1.6.RELEASE]\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.1.6.RELEASE.jar:4.1.6.RELEASE]\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207) ~[spring-aop-4.1.6.RELEASE.jar:4.1.6.RELEASE]\n\tat com.sun.proxy.$Proxy102.update(Unknown Source) ~[na:na]\n\tat sun.reflect.GeneratedMethodAccessor116.invoke(Unknown Source) ~[na:na]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[na:1.7.0_79]\n\tat java.lang.reflect.Method.invoke(Unknown Source) ~[na:1.7.0_79]\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317) ~[spring-aop-4.1.6.RELEASE.jar:4.1.6.RELEASE]\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190) ~[spring-aop-4.1.6.RELEASE.jar:4.1.6.RELEASE]\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) ~[spring-aop-4.1.6.RELEASE.jar:4.1.6.RELEASE]\n\tat org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127) ~[spring-batch-core-3.0.3.RELEASE.jar:3.0.3.RELEASE]\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.1.6.RELEASE.jar:4.1.6.RELEASE]\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207) ~[spring-aop-4.1.6.RELEASE.jar:4.1.6.RELEASE]\n\tat com.sun.proxy.$Proxy58.update(Unknown Source) ~[na:na]\n\tat org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:452) [spring-batch-core-3.0.3.RELEASE.jar:3.0.3.RELEASE]\n\tat org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:330) [spring-batch-core-3.0.3.RELEASE.jar:3.0.3.RELEASE]\n\tat org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:133) [spring-tx-4.1.6.RELEASE.jar:4.1.6.RELEASE]\n\tat org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:271) [spring-batch-core-3.0.3.RELEASE.jar:3.0.3.RELEASE]\n\tat org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:77) [spring-batch-core-3.0.3.RELEASE.jar:3.0.3.RELEASE]\n\tat org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262) [spring-batch-infrastructure-3.0.3.RELEASE.jar:3.0.3.RELEASE]\n\tat java.lang.Thread.run(Unknown Source) [na:1.7.0_79]\n```\n\n\n\n---\n\n**Affects:** 3.0.3\n\n**Attachments:**\n- [job.xml](https://jira.spring.io/secure/attachment/22984/job.xml) (_4.59 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1185", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2015-08-12 19:43:06", "closed": "2015-08-14 14:41:51", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Dependency on deprecated ParameterizedRowMapper [BATCH-2414]", "body": "**[Bart Kummel](https://jira.spring.io/secure/ViewProfile.jspa?name=bkummel)** opened **[BATCH-2414](https://jira.spring.io/browse/BATCH-2414?redirect=false)** and commented\n\nSee [BATCH-2369](https://jira.spring.io/browse/BATCH-2369). That issue says the dependency should have been removed in 3.0.4, but it is still there and causes a `ClassNotFoundException` when Batch 3.0.4 is used with Spring Core 4.2.\\*.\n\nI found at least one dependency on `ParameterizedRowMapper`: in `JdbcJobInstanceDao` at line 191.\n\n\n---\n\n**Affects:** 3.0.4\n\n**Attachments:**\n- [Schermafbeelding 2015-08-06 om 11.02.57.png](https://jira.spring.io/secure/attachment/22971/Schermafbeelding+2015-08-06+om+11.02.57.png) (_132.85 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/b61440dc760864cecb17df1054928d292c7c0f7a\n", "url": "https://github.com/spring-projects/spring-batch/issues/1181", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2015-08-06 02:04:00", "closed": "2015-08-06 11:19:07", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "5.1 Chunk-Oriented Processing does not represent the actual implementation [BATCH-2423]", "body": "**[Iwasa Kazmi](https://jira.spring.io/secure/ViewProfile.jspa?name=iwasakazmi)** opened **[BATCH-2423](https://jira.spring.io/browse/BATCH-2423?redirect=false)** and commented\n\nIn reference documentation, diagram and code of concept in the section \"5.1 Chunk-Oriented Processing\" http://docs.spring.io/spring-batch/trunk/reference/html/configureStep.html#chunkOrientedProcessing\nseems to be different from the actual implementation of the ChunkOrientedTasklet.\n\nAccording to the description, ItemProcessor will be called immediately after the ItemReader was called once.\n\nIn actual implementation of ChunkOrientedTasklet, ItemReader will be called repeatedly for collecting item, then ItemProcessor will be called repeatedly for each collected items.\n\nCurrent description may lead to the wrong step design and may lead to the performance issue.\n\n\n---\n\n**Affects:** 4.0.1, 4.1.0.RC1\n\n**Reference URL:** https://stackoverflow.com/questions/26655281/spring-batch-documentation-about-chunk-oriented-step-versus-reality\n\n**Issue Links:**\n- [BATCH-2534](https://jira.spring.io/browse/BATCH-2534) Commit interval\n (_**\"is duplicated by\"**_)\n\n1 votes, 3 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1179", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2015-08-26 09:00:37", "closed": "2020-01-20 11:05:25", "commits": {}, "ttf": 1608.0002777777777, "commitsDetails": []}, {"title": "Spring batch issue with double quote with version 1.1.2 [BATCH-2424]", "body": "**[sandeep sandy](https://jira.spring.io/secure/ViewProfile.jspa?name=jr.sonu)** opened **[BATCH-2424](https://jira.spring.io/browse/BATCH-2424?redirect=false)** and commented\n\nThe batch application I am working on reads and processes lines from a delimited text file. Application to use a `FlatFileReader` to read the delimited text file,\n`test.txt`\n\n    ( aa|bb|cc|vv|nn|mm|ff|gg|ee|\"rr|gg|jj||||ii| )\n\nBut the issue is that some of the data in the file has double quote, I need to process the data with double quote.\n\nUnfortunately `FieldSet` method in spring batch is reading string after double quote has single string. Even if there are two or three double quote its throwing an exception my program throwing an exception.\nexception:\n\n```java\nArrayIndexOutOfBoundsException: Array index out of range,\nmapping.DefaultFieldSet.readAndTrim(DefaultFieldSet.java).\n```\n\nAnyone come across this issue, if so, what would be the proper resolution?\n\nManipulating the data itself is not an option unfortunately. I have tried adding an escape character before every double quote, but an exception is still thrown regardless.\n\nAny help would be greatly appreciated.\n\n&mdash;\n\nI have added below property tag to my DelimiterLineTokenizer then issues has been resolved but some time I'm getting an error \"**item.DefaultItemFailureHandler - Error encountered while reading**\",\n\"\\*Caused by:\norg.springframework.batch.core.JobInterruptedException: JobExecution interrupted.*\"\n\n```xml\n<Property name=\"lineTokenizer\"> \n<beanclass=\"org.springframework.batch.item.file.transform.DelimitedLineTokenizer\">\n<property name=\"quoteCharacter\" value=\"@\" /> \n</bean> \n</property> \n```\n\nAny help can Be greatly appreciated.\n\nI'm currently using spring batch version 1.1.2, I'm unable to process the data with single double quote (I mean only with one double quote). I'm getting the exception as:\n\"\\***quartz.SimpleThreadPoolTaskExecutor - Error while executing the Runnable:\norg.springframework.batch.core.UnexpectedJobExecutionException: Unexpected checked exception in job execution***\"\n\n\"\\***org.springframework.batch.core.JobInterruptedException: JobExecution interrupted.\nat org.springframework.batch.core.job.SimpleJob.execute***\"\nAgain manipulating the data is not an option. I have seen many other post but no one is using spring batch 1.1.2 at this time. version upgrade is not option too.\nAny help greatly appreciated.\n\n\n---\n\n**Affects:** 1.1.2\n", "url": "https://github.com/spring-projects/spring-batch/issues/1178", "user": "spring-issuemaster", "labels": ["in: core", "in: integration", "status: invalid", "type: bug"], "created": "2015-08-27 14:59:45", "closed": "2019-01-29 08:35:57", "commits": {}, "ttf": 1250.0002777777777, "commitsDetails": []}, {"title": "SimpleJobLauncher validate if stepExecutions that are UNKNOWN doen't work. [BATCH-2425]", "body": "**[John Ray](https://jira.spring.io/secure/ViewProfile.jspa?name=johnraychina)** opened **[BATCH-2425](https://jira.spring.io/browse/BATCH-2425?redirect=false)** and commented\n\nThis problem is found in method  SimpleJobLauncher.run(),\n\nfirst, get last job execution:\n\nJobExecution lastExecution = jobRepository.getLastJobExecution(job.getName(), jobParameters);\n\nthen iterate over the last job execution to validate step executions:\n\nlastExecution.getStepExecutions()\n\nbut  the SimpleJobRepository only query for %prefix%JOB_EXECUTION\nit never go to %prefix%JOB_STEP_EXECUTION\n\nso, lastExecution.getStepExecutions() always return a empty collection\nwhich mean you never validate the steps.\n\n\n---\n\n**Affects:** 2.2.7\n", "url": "https://github.com/spring-projects/spring-batch/issues/1177", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2015-08-28 07:56:10", "closed": "2019-10-25 15:20:26", "commits": {}, "ttf": 1519.0002777777777, "commitsDetails": []}, {"title": "Wrong assert message on property validation [BATCH-2427]", "body": "**[Rodrigo Henrique Nonose](https://jira.spring.io/secure/ViewProfile.jspa?name=rhnonose)** opened **[BATCH-2427](https://jira.spring.io/browse/BATCH-2427?redirect=false)** and commented\n\nProperty assertion message is wrong in class org.springframework.batch.item.file.mapping.PatternMatchingCompositeLineMapper.java:74\n\nIt says \"The 'fieldSetMappers' property must be non-empty\" when it should say \"The 'patternMatcher' property must be non-null\"\n\n\n---\n\n**Affects:** 3.0.4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d23497b0c936ecb4611fc1b89117370abfa9a7cd, https://github.com/spring-projects/spring-batch/commit/b7b2bb3127f626b057a2ae24c2c2655f58e29c55\n", "url": "https://github.com/spring-projects/spring-batch/issues/1176", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2015-09-01 20:24:32", "closed": "2015-11-25 22:58:41", "commits": {}, "ttf": 85.00027777777778, "commitsDetails": []}, {"title": "Restarting a stopped job that contains child jobs does not work [BATCH-2429]", "body": "**[Martin Green](https://jira.spring.io/secure/ViewProfile.jspa?name=martinwgreen)** opened **[BATCH-2429](https://jira.spring.io/browse/BATCH-2429?redirect=false)** and commented\n\nI have a job that has multiple steps and each step references a job (child jobs if you like). If I stop this job the child step in the child job gets set to a status of STOPPED as does the child job. The parent job gets set to a status of STOPPED but the parent job step that references the child job that was executing gets set to a status of COMPLETE - and this is the issue I believe. If I restart the parent job it does not restart correctly as it thinks the step that contained the child job that was STOPPED is set to COMPLETE and so it skips over it and goes to the next step. The parent job eventually completes ok but it has not processed all the data as the STOPPED child job was not restarted by the parent job and consequently all the processing has not taken place. In my case many transactions were not processed on restart.\n\n\n---\n\n**Affects:** 2.2.7\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/ca847e27601ed67bc00f670e971d243188ef2f6a\n\n**Backported to:** [4.0.0.M1](https://github.com/spring-projects/spring-batch/milestone/84?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1173", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2015-09-03 02:53:07", "closed": "2017-07-20 17:29:17", "commits": {}, "ttf": 686.0002777777778, "commitsDetails": []}, {"title": "NullPointerException when @EnableBatchProcessing with BatchConfigurer [BATCH-2430]", "body": "**[Raph C](https://jira.spring.io/secure/ViewProfile.jspa?name=raphc)** opened **[BATCH-2430](https://jira.spring.io/browse/BATCH-2430?redirect=false)** and commented\r\n\r\nHi,\r\n\r\nI noticed Spring-batch causes a NullPointerException when I configure my context like this (`@EnableBatchProcessing` and BatchConfigurer)\r\n\r\n```\r\n@EnableBatchProcessing\r\npublic class ImpFidBatchConfiguration implements BatchConfigurer {\r\n....\r\n}\r\n```\r\n\r\nIt seems that Spring register a default SimpleBatchConfiguration whereas I set mine by implementing BatchConfigurer.\r\n\r\n```\r\n2015-09-03 15:12:21.932 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registered bean definition for imported @Configuration class org.springframework.batch.core.configuration.annotation.ScopeConfiguration \r\n2015-09-03 15:12:21.934 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registering bean definition for @Bean method org.springframework.batch.core.configuration.annotation.ScopeConfiguration.stepScope() \r\n2015-09-03 15:12:21.934 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registering bean definition for @Bean method org.springframework.batch.core.configuration.annotation.ScopeConfiguration.jobScope() \r\n2015-09-03 15:12:21.934 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registered bean definition for imported @Configuration class org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration \r\n2015-09-03 15:12:21.934 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registering bean definition for @Bean method org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration.jobRepository() \r\n2015-09-03 15:12:21.934 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registering bean definition for @Bean method org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration.jobLauncher() \r\n2015-09-03 15:12:21.944 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registering bean definition for @Bean method org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration.jobRegistry() \r\n2015-09-03 15:12:21.944 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registering bean definition for @Bean method org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration.jobExplorer() \r\n2015-09-03 15:12:21.944 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registering bean definition for @Bean method org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration.transactionManager() \r\n2015-09-03 15:12:21.944 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registering bean definition for @Bean method org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration.jobBuilders() \r\n2015-09-03 15:12:21.944 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registering bean definition for @Bean method org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration.stepBuilders() \r\n2015-09-03 15:12:21.944 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registered bean definition for imported @Configuration class com.bouygtel.inthd.batch.impfid.ImpFidBatchConfiguration \r\n2015-09-03 15:12:21.954 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registering bean definition for @Bean method com.bouygtel.inthd.batch.impfid.ImpFidBatchConfiguration.prepare() \r\n2015-09-03 15:12:21.954 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registering bean definition for @Bean method com.bouygtel.inthd.batch.impfid.ImpFidBatchConfiguration.extractArchive() \r\n2015-09-03 15:12:21.954 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registering bean definition for @Bean method com.bouygtel.inthd.batch.impfid.ImpFidBatchConfiguration.stepScope() \r\n2015-09-03 15:12:21.954 INFO [main] DefaultListableBeanFactory - Overriding bean definition for bean 'stepScope' with a different definition: replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.batch.core.configuration.annotation.ScopeConfiguration; factoryMethodName=stepScope; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/batch/core/configuration/annotation/ScopeConfiguration.class]] with [Root bean: class [com.bouygtel.inthd.batch.impfid.ImpFidBatchConfiguration]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=stepScope; initMethodName=null; destroyMethodName=(inferred); defined in class com.bouygtel.inthd.batch.impfid.ImpFidBatchConfiguration] \r\n2015-09-03 15:12:21.954 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registering bean definition for @Bean method com.bouygtel.inthd.batch.impfid.ImpFidBatchConfiguration.jobScope() \r\n2015-09-03 15:12:21.954 INFO [main] DefaultListableBeanFactory - Overriding bean definition for bean 'jobScope' with a different definition: replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.batch.core.configuration.annotation.ScopeConfiguration; factoryMethodName=jobScope; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/batch/core/configuration/annotation/ScopeConfiguration.class]] with [Root bean: class [com.bouygtel.inthd.batch.impfid.ImpFidBatchConfiguration]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=jobScope; initMethodName=null; destroyMethodName=(inferred); defined in class com.bouygtel.inthd.batch.impfid.ImpFidBatchConfiguration] \r\n2015-09-03 15:12:21.954 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registering bean definition for @Bean method com.bouygtel.inthd.batch.impfid.ImpFidBatchConfiguration.repositoryFactoryBean() \r\n2015-09-03 15:12:21.954 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registering bean definition for @Bean method com.bouygtel.inthd.batch.impfid.ImpFidBatchConfiguration.itemFailureLoggerListener() \r\n2015-09-03 15:12:21.964 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registering bean definition for @Bean method com.bouygtel.inthd.batch.impfid.ImpFidBatchConfiguration.prepareTasklet() \r\n2015-09-03 15:12:21.964 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registering bean definition for @Bean method com.bouygtel.inthd.batch.impfid.ImpFidBatchConfiguration.getJobExplorer() \r\n2015-09-03 15:12:21.964 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registering bean definition for @Bean method com.bouygtel.inthd.batch.impfid.ImpFidBatchConfiguration.getJobLauncher() \r\n2015-09-03 15:12:21.964 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registering bean definition for @Bean method com.bouygtel.inthd.batch.impfid.ImpFidBatchConfiguration.getJobRepository() \r\n2015-09-03 15:12:21.964 DEBUG [main] ConfigurationClassBeanDefinitionReader - Registering bean definition for @Bean method com.bouygtel.inthd.batch.impfid.ImpFidBatchConfiguration.getTransactionManager() \r\n```\r\n\r\nBTW when I launch a job I get a NullPointerException because the JobRepository used to create the JobExecution instance (the default one) is not the same as this one injected in my flowJob instance (which is my own JobRepository). When the job try to update (AbstractJob.updateStatus) the JobExecution it fails :(\r\n\r\n```\r\n2015-09-03 15:12:22.911 ERROR [main] AbstractJob - Encountered fatal error executing job java.lang.NullPointerException: null\r\n\tat org.springframework.batch.core.repository.dao.MapJobExecutionDao.synchronizeStatus(MapJobExecutionDao.java:158) ~[spring-batch-core-3.0.2.RELEASE.jar:3.0.2.RELEASE]\r\n\tat org.springframework.batch.core.repository.support.SimpleJobRepository.update(SimpleJobRepository.java:161) ~[spring-batch-core-3.0.2.RELEASE.jar:3.0.2.RELEASE]\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_40]\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_40]\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_40]\r\n\tat java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_40]\r\n```\r\n\r\n\r\n---\r\n\r\n**Affects:** 3.0.2\r\n", "url": "https://github.com/spring-projects/spring-batch/issues/1172", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2015-09-03 13:31:05", "closed": "2020-01-24 13:50:09", "commits": {}, "ttf": 1604.0002777777777, "commitsDetails": []}, {"title": "RetryListener seems to be incorrectly decumented [BATCH-2437]", "body": "**[Lubos Krnac](https://jira.spring.io/secure/ViewProfile.jspa?name=lkrnac)** opened **[BATCH-2437](https://jira.spring.io/browse/BATCH-2437?redirect=false)** and commented\n\n[RetryListener](http://docs.spring.io/spring-batch/trunk/reference/htmlsingle/#retryListeners) in docs suppose to have three methods. But I can't find such interface in latest [JavaDocs](http://docs.spring.io/spring-batch/apidocs/org/springframework/batch/core/jsr/RetryListener.html) (nor in my local Spring Batch version).\n\n\n---\nNo further details from [BATCH-2437](https://jira.spring.io/browse/BATCH-2437?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/1167", "user": "spring-issuemaster", "labels": ["in: documentation", "status: invalid", "type: bug"], "created": "2015-09-16 20:28:02", "closed": "2019-10-21 09:22:06", "commits": {}, "ttf": 1495.0002777777777, "commitsDetails": []}, {"title": "JobOperator needs a new method to pass parameters [BATCH-2438]", "body": "**[Petar Tahchiev](https://jira.spring.io/secure/ViewProfile.jspa?name=ptahchiev)** opened **[BATCH-2438](https://jira.spring.io/browse/BATCH-2438?redirect=false)** and commented\n\nAt the moment `JobOperator` has only the following method:\n\n```\njobOperator.startNextInstance(\"ncsvImportJob\");\n```\n\nThere needs to be another method to also pass parameters like this:\n\n```\njobOperator.startNextInstance(\"ncsvImportJob\", parameters);\n```\n\n\n\n---\nNo further details from [BATCH-2438](https://jira.spring.io/browse/BATCH-2438?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/1165", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2015-09-17 16:06:24", "closed": "2020-01-24 15:06:16", "commits": {}, "ttf": 1589.0002777777777, "commitsDetails": []}, {"title": "JsrPartitionHandler method handler does not properly shutdown ThreadPoolTaskExecutor  [BATCH-2439]", "body": "**[mark kouba](https://jira.spring.io/secure/ViewProfile.jspa?name=markrk505)** opened **[BATCH-2439](https://jira.spring.io/browse/BATCH-2439?redirect=false)** and commented\n\nThe handle method of the JsrPartitionHandler class creates a ThreadPoolTaskExecutor locally but then it never calls shutdown or destroy before exiting from the method.  This has the effect in a standalone application of prevent the process from ending properly.  I would also assume this is a memory leak potentially in other scenarios.\n\nI have attached a simple app that replicates the problem.  I assume you guys can get the dependencies needed to get the app to run.\n\nI also made the edit to spring batch core and built my own version and confirmed that it does fix the problem.\n\n\n---\n\n**Affects:** 4.0.0, 3.0.5\n\n**Attachments:**\n- [partitiontest2.zip](https://jira.spring.io/secure/attachment/23120/partitiontest2.zip) (_4.75 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1164", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2015-09-18 19:29:02", "closed": "2015-11-25 22:35:55", "commits": {}, "ttf": 68.00027777777778, "commitsDetails": []}, {"title": "When an error is thrown on write and another error is thrown on process during retry, the job gets in a infinite loop and never finishes. [BATCH-2442]", "body": "**[Yoann GENDRE](https://jira.spring.io/secure/ViewProfile.jspa?name=ygendre)** opened **[BATCH-2442](https://jira.spring.io/browse/BATCH-2442?redirect=false)** and commented\n\nJob get in a infinite loop when an exception is first thrown during write and a second exception is thrown during the retry on processing the first item of the chunk.\n\nIn attachment, maven project with a job test case with commit-interval = 5 and skip-limit=3\n\n* read 5 String from ListItemReader\n* process String - increment count item processed - throw an exception if count = 6 (first process after first exception)\n* write items - throw an exception on first chunk\n\nIt seems inputs is never set to busy=false in method scan of FaultTolerantChunkProcessor. (output is never empty)\nFor now I can't see where the problem come from...\n\n\n---\n\n**Affects:** 2.2.7\n\n**Attachments:**\n- [Batch2442IgnoredItems.zip](https://jira.spring.io/secure/attachment/27496/Batch2442IgnoredItems.zip) (_2.53 kB_)\n- [FaultTolerantChunkProcessor.java](https://jira.spring.io/secure/attachment/23143/FaultTolerantChunkProcessor.java) (_19.27 kB_)\n- [test-case-infiniteLoopOnretry.zip](https://jira.spring.io/secure/attachment/23144/test-case-infiniteLoopOnretry.zip) (_13.00 kB_)\n\n**Issue Links:**\n- [BATCH-2302](https://jira.spring.io/browse/BATCH-2302) exception on process while recovering from rollback on write causes deadlock\n\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/592, and commits https://github.com/spring-projects/spring-batch/commit/c1b79e5946e6bd2fa9b194833bdcb6917579dcd5, https://github.com/spring-projects/spring-batch/commit/dc4175784c4de4e988b30d743004068d6f175a9c, https://github.com/spring-projects/spring-batch/commit/30a4d4373ba29634179f3d58f3d150162bde24ee, https://github.com/spring-projects/spring-batch/commit/ef13ea0fa48312148bda354959886fa93b991b10, https://github.com/spring-projects/spring-batch/commit/346dcce78764985f5ff8cae1d1bc521f45f12a12, https://github.com/spring-projects/spring-batch/commit/cc6f60871e7515f539b9876f57962d9baae5c743\n\n**Backported to:** [4.1.0.M1](https://github.com/spring-projects/spring-batch/milestone/93?closed=1), [4.0.2](https://github.com/spring-projects/spring-batch/milestone/91?closed=1), [3.0.10](https://github.com/spring-projects/spring-batch/milestone/92?closed=1)\n\n0 votes, 6 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1160", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "in: retry", "type: bug"], "created": "2015-10-02 16:53:32", "closed": "2019-10-30 19:25:02", "commits": {}, "ttf": 1489.0002777777777, "commitsDetails": []}, {"title": "IllegalAccessException when running JaCoCo [BATCH-2446]", "body": "**[Christian Weiss](https://jira.spring.io/secure/ViewProfile.jspa?name=chriweis)** opened **[BATCH-2446](https://jira.spring.io/browse/BATCH-2446?redirect=false)** and commented\n\nIm MapStepExecutionDao on line 62 all fields of a class are set accessible. This conflicts with JaCoCo as it adds an synthetic field, thus an IllegalAccessException is thrown.\nAn easy fix is described in the reference URL.\n\n\n---\n\n**Affects:** 2.2.7\n\n**Reference URL:** https://github.com/jacoco/eclemma/issues/59\n\n**Issue Links:**\n- [BATCH-2683](https://jira.spring.io/browse/BATCH-2683) Check field is not synthetic in BeanWrapperFieldExtractor\n\n", "url": "https://github.com/spring-projects/spring-batch/issues/1156", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2015-10-22 09:50:00", "closed": "2020-01-30 13:21:14", "commits": {}, "ttf": 1561.0002777777777, "commitsDetails": []}, {"title": "MySQLMaxValueIncrementer javadoc indicates MyISAM engine should be use while create script uses InnoDB [BATCH-2451]", "body": "**[Marrache Mickael](https://jira.spring.io/secure/ViewProfile.jspa?name=miko95)** opened **[BATCH-2451](https://jira.spring.io/browse/BATCH-2451?redirect=false)** and commented\n\nThe javadoc of the MySQLMaxValueIncrementer class says:\n\n**The sequence is kept in a table; there should be one sequence table per table that needs an auto-generated key. The table type of the sequence table should be MyISAM so the sequences are allocated without regard to any transactions that might be in progress.**\n\nHowever, the create script for MySQL provides the following DDL:\n\n```java\nCREATE TABLE BATCH_STEP_EXECUTION_SEQ (\n\tID BIGINT NOT NULL,\n\tUNIQUE_KEY CHAR(1) NOT NULL,\n\tconstraint UNIQUE_KEY_UN unique (UNIQUE_KEY)\n) ENGINE=InnoDB;\n\nCREATE TABLE BATCH_JOB_EXECUTION_SEQ (\n\tID BIGINT NOT NULL,\n\tUNIQUE_KEY CHAR(1) NOT NULL,\n\tconstraint UNIQUE_KEY_UN unique (UNIQUE_KEY)\n) ENGINE=InnoDB;\n\nCREATE TABLE BATCH_JOB_SEQ (\n\tID BIGINT NOT NULL,\n\tUNIQUE_KEY CHAR(1) NOT NULL,\n\tconstraint UNIQUE_KEY_UN unique (UNIQUE_KEY)\n) ENGINE=InnoDB;\n```\n\nYou can see that the specified engine is InnoDB. Who is right? Is it an important consideration?\n\n\n---\n\n1 votes, 2 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1151", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2015-11-11 09:27:04", "closed": "2018-02-06 23:00:21", "commits": {}, "ttf": 818.0002777777778, "commitsDetails": []}, {"title": "StaxEventItemReader with Jaxb2Marshaller doesn't work if schema is set [BATCH-2453]", "body": "**[Alain giller](https://jira.spring.io/secure/ViewProfile.jspa?name=gillera)** opened **[BATCH-2453](https://jira.spring.io/browse/BATCH-2453?redirect=false)** and commented\n\nWhen the property schema is defined in jaxb, Spring batch throws an SAXParseException. Without the schema property, it works fine except it doesn't do any validation...\nHere the spring batch config, the problem is the same with java config.\n\n```xml\n<bean id=\"personneItemReader\" class=\"org.springframework.batch.item.xml.StaxEventItemReader\">\n    <property name=\"resource\" value=\"classpath:personnes.xml\" />\n    <property name=\"fragmentRootElementName\" value=\"personne\" />\n    <property name=\"unmarshaller\" ref=\"jaxb2Marshaller\" />\n</bean>\n\n<bean id=\"jaxb2Marshaller\" class=\"org.springframework.oxm.jaxb.Jaxb2Marshaller\">\n    <property name=\"classesToBeBound\">\n        <list>\n            <value>com.docapost.batch.xml.Personnes</value>\n        </list>\n    </property>\n    <property name=\"schema\" value=\"classpath:personnes.xsd\" />\n</bean>\n```\n\n\n\n---\n\n**Affects:** 3.0.5\n\n**Attachments:**\n- [stacktrace.log](https://jira.spring.io/secure/attachment/23214/stacktrace.log) (_14.48 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1149", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2015-11-11 15:47:08", "closed": "2020-02-05 14:06:12", "commits": {}, "ttf": 1546.0002777777777, "commitsDetails": []}, {"title": "processing order of listeners in CompositeChunkListener does not match all other Composite...Listener [BATCH-2455]", "body": "**[Hansjoerg Wingeier](https://jira.spring.io/secure/ViewProfile.jspa?name=hansjoerg)** opened **[BATCH-2455](https://jira.spring.io/browse/BATCH-2455?redirect=false)** and commented\n\nIn package org.springframework.batch.core.listener, all CompositeListener (CompositeItemProcessListener, CompositeItemReaderListener, CompositeItemWriteListener, CompositeJobExecutionListener, CompositeStepExecutionListener) which have before/after methods, use the normal order of the list in the before-Method and the reverse order in the afterMethod.\n\nE.g. CompositeStepExecutionListener\n\n```java\n      public ExitStatus afterStep(StepExecution stepExecution) {\n\t\tfor (Iterator<StepExecutionListener> iterator = list.reverse(); iterator.hasNext();) {\n\t        ....\n\t\t}\n\t\treturn stepExecution.getExitStatus();\n\t}\n\n\tpublic void beforeStep(StepExecution stepExecution) {\n\t\tfor (Iterator<StepExecutionListener> iterator = list.iterator(); iterator.hasNext();) {\n                  ...\n\t\t}\n\t}\n```\n\nHowever, it is implemented the other way around in the CompositeChunkListener: The reverse-iterator is used in the beforeChunk-method and the normal iterator is used in the afterChunk-method:\n\n```java\n\tpublic void afterChunk(ChunkContext context) {\n\t\tfor (Iterator<ChunkListener> iterator = listeners.iterator(); iterator.hasNext();) {\n                ...\n\t\t}\n\t}\n\n\tpublic void beforeChunk(ChunkContext context) {\n\t\tfor (Iterator<ChunkListener> iterator = listeners.reverse(); iterator.hasNext();) {\n                 ...\n\t\t}\n\t}\n```\n\nThis is especially confusing, if you write  listeners that implements both interfaces StepExecutionListener and ChunkListener. The beforeStep methods get called in the order you add them, but the beforeChunk method are called in the reverse order.\n\n\n\n---\n\n**Affects:** 3.0.4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/9322fe6fae3433b367869db0f9c8ce81c758370a\n\n**Backported to:** [4.0.0.RC1](https://github.com/spring-projects/spring-batch/milestone/88?closed=1)\n\n1 votes, 3 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1147", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2015-11-24 07:09:30", "closed": "2017-11-02 15:40:14", "commits": {}, "ttf": 709.0002777777778, "commitsDetails": []}, {"title": "New Return Type in BatchAutoConfiguration prevents overwritting with own ExitCodeGenerator [BATCH-2458]", "body": "**[Hansjoerg Wingeier](https://jira.spring.io/secure/ViewProfile.jspa?name=hansjoerg)** opened **[BATCH-2458](https://jira.spring.io/browse/BATCH-2458?redirect=false)** and commented\n\nIn spring-boot-autoconfigure Version 1.3.0, the return type in class BatchAutoConfigure changed for methode jobExecutionExitCodeGenerator().\nOld Version 1.2.5\n\n```java\n@Bean\n@ConditionalOnMissingBean\npublic ExitCodeGenerator jobExecutionExitCodeGenerator() {\n     return new JobExecutionExitCodeGenerator();\n}\n```\n\nnew Version 1.3.0\n\n```java\n@Bean\n@ConditionalOnMissingBean\npublic JobExecutionExitCodeGenerator jobExecutionExitCodeGenerator() {\n     return new JobExecutionExitCodeGenerator();\n}\n```\n\nIn order to define your own ExitCodeGenerator, it was possible to instantiate a Bean which iplemented ExitCodeGenerator, e.g.\n\n```java\n@Bean\npublic ExitCodeGenerator anotherExitCodeGenerator() {\n    return new AnotherExitCodeGenerator();\n}\n```\n\nSince `@ConditionalOnMissingBean` on  jobExecutionExitCodeGenerator() checked for the Interface in Version 1.2.5 (the return type of the method), AnotherExitCodeGenerator just needed to implement ExitCodeGenerator in order to oversteer the definition in the BatchAutoConfiguration.\n\nHowever, with Version 1.3.0 this is no longer possible. You must derive your own ExitCodeGenerator from JobExecutionExitCodeGenerator in order to oversteer it.\n\nI suggest either changing the return type back to ExitCodeGenerator or adapting the `@ConditionalOnMissingBean` to `@ConditionalOnMissingBean`(ExitCodeGenerator.class) .\n\n\n\n---\n\n**Affects:** 3.0.5\n", "url": "https://github.com/spring-projects/spring-batch/issues/1144", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2015-12-09 14:38:50", "closed": "2015-12-11 09:54:04", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "JdbcPagingItemReader [BATCH-2465]", "body": "**[cm](https://jira.spring.io/secure/ViewProfile.jspa?name=cm)** opened **[BATCH-2465](https://jira.spring.io/browse/BATCH-2465?redirect=false)** and commented\n\nif sortKeys is't unique key, the query sql(remainingPagesSql)---'select a,b,c from table where c>? limit 2' can lose data,for example:\na b c\n1 2 1\n2 2 2\n3 3 2\n4 5 3\nthe third row will lose.\nremainingPagesSql --- 'select a,b,c from table limit pageSize*(pageNo-1),pageSize'  and the last querySql --- 'select a,b,c from table limit pageSize*(pageNo-1),the sum of the table - pageSize*pageNo' is OK?\n\n\n---\n\n**Affects:** 3.0.6\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/568, and commits https://github.com/spring-projects/spring-batch/commit/9bd7c1b431f3c345ce277ccfb6a97605d4071339, https://github.com/spring-projects/spring-batch/commit/54f3a5c837551a2f3b619e14c6a737c25f698187\n\n**Backported to:** [3.0.9](https://github.com/spring-projects/spring-batch/milestone/83?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1137", "user": "spring-issuemaster", "labels": ["has: backports", "in: documentation", "type: bug"], "created": "2016-01-20 02:50:02", "closed": "2018-02-06 08:25:33", "commits": {}, "ttf": 748.0002777777778, "commitsDetails": []}, {"title": "FTP resource exception [BATCH-2466]", "body": "**[Milan Plancik](https://jira.spring.io/secure/ViewProfile.jspa?name=plancik.m)** opened **[BATCH-2466](https://jira.spring.io/browse/BATCH-2466?redirect=false)** and commented\n\nDear spring-batch team,\n\nI am getting unpredictable system exception which I am not able to debug, because when I am debugging it, no exception occurs at all. If I put breakpoint at some (not random place) then I see following exception (Also the exception occurs sometimes without any breakpoint):\n\njava.io.FileNotFoundException: URL [ftp://user:password@host//'MAINVIEW.DATASET'] cannot be resolved to absolute file path because it does not reside in the file system: ftp://user:password@host//'MAINVIEW.DATASET'\nat org.springframework.util.ResourceUtils.getFile(ResourceUtils.java:218)\nat org.springframework.core.io.AbstractFileResolvingResource.getFile(AbstractFileResolvingResource.java:52)\nat org.springframework.core.io.UrlResource.getFile(UrlResource.java:212)\nat com.swissre.g10.cds.ct.batch.G10UnloadFileItemReader.doRead(G10UnloadFileItemReader.java:44)\nat com.swissre.g10.cds.ct.batch.G10UnloadFileItemReader.doRead(G10UnloadFileItemReader.java:18)\nat org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:88)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:597)\nat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:302)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\nat org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:133)\nat org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:121)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\nat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:208)\nat $Proxy54.read(Unknown Source)\nat org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:91)\nat org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:157)\nat org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:116)\nat org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:374)\nat org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)\nat org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:144)\nat org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:110)\nat org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:69)\nat org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:406)\nat org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:330)\nat org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:133)\nat org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:271)\nat org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:81)\nat org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:374)\nat org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)\nat org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:144)\nat org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:257)\nat org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:200)\nat org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:139)\nat org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:136)\nat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)\nat java.util.concurrent.FutureTask.run(FutureTask.java:138)\nat java.lang.Thread.run(Thread.java:662)\n\nI do not understand the stacktrace - Method G10UnloadFileItemReader.doRead does not contain any call to UrlResource.getFile method.\n\nI am using apache commons net for ftp resource, because the limited jdk ftp implementation is missing some functionality. I created custom reader for reading ftp resource, which reads ftp file successfully, but sometimes unpredictable exception occurs. I attached files...\n\nCould you please have a look into the issue, please?\n\n\n---\n\n**Affects:** 3.0.6\n\n**Attachments:**\n- [Debugging.png](https://jira.spring.io/secure/attachment/23276/Debugging.png) (_170.41 kB_)\n- [G10CTBatchJobSpringConfig.java](https://jira.spring.io/secure/attachment/23271/G10CTBatchJobSpringConfig.java) (_5.21 kB_)\n- [G10FtpReader.java](https://jira.spring.io/secure/attachment/23275/G10FtpReader.java) (_1.85 kB_)\n- [G10FtpReaderFactory.java](https://jira.spring.io/secure/attachment/23274/G10FtpReaderFactory.java) (_2.62 kB_)\n- [G10MultiResourcePartitioner.java](https://jira.spring.io/secure/attachment/23273/G10MultiResourcePartitioner.java) (_2.67 kB_)\n- [G10UnloadFileItemReader.java](https://jira.spring.io/secure/attachment/23272/G10UnloadFileItemReader.java) (_2.29 kB_)\n- [TestBatch.java](https://jira.spring.io/secure/attachment/23270/TestBatch.java) (_6.23 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1136", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2016-01-27 08:57:53", "closed": "2018-10-05 22:49:30", "commits": {}, "ttf": 982.0002777777778, "commitsDetails": []}, {"title": "Why does AbstractLineTokenizer have so many private fields (as opposed to protected)? [BATCH-2469]", "body": "**[Arnaldo Piccinelli](https://jira.spring.io/secure/ViewProfile.jspa?name=arnaldopiccinelli@gmail.com)** opened **[BATCH-2469](https://jira.spring.io/browse/BATCH-2469?redirect=false)** and commented\n\nAbstractLineTokenizer.tokenize is a public method, meaning I can override it if necessary.\nHowever, every single non-local and non-parameter object is class-private, meaning that if I overrode AbstractLineTokenizer.tokenize, I cannot use any of the class-level fields.\n\nThis means I have to duplicate all of the fields in my own class, which starts to get close to my having to fully implement my own replacement instead of extending AbstractLineTokenizer.\n\nFields of AbstractLineTokenizer that are used by tokenize should be protected so they can be used by subclasses.\n\nAddition: methods such as adjustTokenCountIfNecessary(List\\<String>) also have the same problem.\n\n\n---\n\n**Affects:** 3.0.6\n", "url": "https://github.com/spring-projects/spring-batch/issues/1133", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2016-02-01 18:55:50", "closed": "2016-02-01 19:35:07", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Neo4jItemReader is incompatible with Spring Data Neo4J from the Hopper release train [BATCH-2473]", "body": "**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[BATCH-2473](https://jira.spring.io/browse/BATCH-2473?redirect=false)** and commented\n\nSpring Batch is incompatible with the version of Spring Data Neo4J that's in the Hopper release train. Tests for `Neo4JItemReader` fail:\n\n```\njava.lang.NoClassDefFoundError: java.lang.NoClassDefFoundError: org/springframework/data/neo4j/conversion/ResultConverter\njava.lang.NoClassDefFoundError: org/springframework/data/neo4j/conversion/ResultConverter\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Class.java:348)\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:58)\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:49)\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:69)\n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:50)\n\tat sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:497)\n\tat org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)\n\tat org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\tat org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)\n\tat org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)\n\tat com.sun.proxy.$Proxy2.processTestClass(Unknown Source)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:105)\n\tat sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:497)\n\tat org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)\n\tat org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\tat org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:355)\n\tat org.gradle.internal.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:64)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: java.lang.ClassNotFoundException: org.springframework.data.neo4j.conversion.ResultConverter\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:381)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n\t... 25 more\n```\n\n\n\n---\n\n**Affects:** 3.0.6\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/b160996576fd46cf68f76b90edc5f2ea3e8fa17e, https://github.com/spring-projects/spring-batch/commit/81d5e7aa2d15d3c6b028950b980580ebbc097666\n", "url": "https://github.com/spring-projects/spring-batch/issues/1129", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2016-02-16 15:04:40", "closed": "2016-04-19 00:07:45", "commits": {}, "ttf": 62.000277777777775, "commitsDetails": []}, {"title": "Error/Bug on MultiResourcePartitioner [BATCH-2474]", "body": "**[lino yabut](https://jira.spring.io/secure/ViewProfile.jspa?name=linoyabut)** opened **[BATCH-2474](https://jira.spring.io/browse/BATCH-2474?redirect=false)** and commented\n\nMultiResourcePartitioner is not updating the value of\n\n{stepExecutionContext['fileName']} if I renamed the file that I have processed before.\nInitially, I processed \"FILE1.TXT\" and for some reasons the processing fails then I renamed the file to \"FILE2.TXT\" Spring batch still looking for \"FILE1.TXT\". So my work around is to delete all records on BATCH_STEP_EXECUTION_CONTEXT in order to pickup the file.\n\nI am not sure if this a bug or maybe I missing some configurations but I am expecting that the spring batch will always pickup the files in the directory and not in the DB.\n\n\n---\n\n**Affects:** 3.0.6\n\n**Reference URL:** http://stackoverflow.com/questions/35351141/spring-batch-error-bug-on-multiresourcepartitioner\n", "url": "https://github.com/spring-projects/spring-batch/issues/1128", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2016-02-17 18:42:06", "closed": "2016-02-18 15:48:31", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Oracle Error on creating new Batch Job [BATCH-2475]", "body": "**[Peter Sch\u00e4fer](https://jira.spring.io/secure/ViewProfile.jspa?name=nightrider)** opened **[BATCH-2475](https://jira.spring.io/browse/BATCH-2475?redirect=false)** and commented\n\nWhen launching a Batch Job, the following exception is thrown:\n2016-02-18 03:20:01.686 ERROR 16635 --- [nio-8082-exec-6] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.dao.CannotSerializeTransactionException: PreparedStatementCallback; SQL [INSERT into BATCH_JOB_INSTANCE(JOB_INSTANCE_ID, JOB_NAME, JOB_KEY, VERSION) values (?, ?, ?, ?)]; ORA-08177: can't serialize access for this transaction\n; nested exception is java.sql.SQLException: ORA-08177: can't serialize access for this transaction\n] with root cause\n\njava.sql.SQLException: ORA-08177: can't serialize access for this transaction\n\nSee attached stack trace.\n\nThe error is hard to reproduce.\nWe tried the following work-around:\n<batch:job-repository id=\"jobRepository\"\n...isolation-level-for-create=\"READ_COMMITTED\"\n... />\n\nwith little success.\n\n\n\n---\n\n**Affects:** 3.0.6\n\n**Reference URL:** https://stackoverflow.com/questions/22364432/spring-batch-ora-08177-cant-serialize-access-for-this-transaction-when-running\n\n**Attachments:**\n- [StackTrace.log](https://jira.spring.io/secure/attachment/23310/StackTrace.log) (_10.31 kB_)\n\n6 votes, 11 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1127", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2016-02-18 08:47:45", "closed": "2020-01-31 16:13:08", "commits": {}, "ttf": 1443.0002777777777, "commitsDetails": []}, {"title": "Spring batch doesn't support multiple job repositories (or 1 repository with shifting data source) in the same JVM [BATCH-2476]", "body": "**[Gustavo Lopes](https://jira.spring.io/secure/ViewProfile.jspa?name=artefacto)** opened **[BATCH-2476](https://jira.spring.io/browse/BATCH-2476?redirect=false)** and commented\n\nThe static StepSynchronizationManager.manager keeps state in such a way that it becomes impossible to run at the same time two steps belonging to different jobs but where:\n\na) the jobs have the same id,\nb) the steps have the same name and\nc) the steps have the same id.\n\nThis situation may arise if more than one repository is in use (or there is one repository, but it uses different data sources at the same time).\n\nSee the linked StackOverflow thread for more details. The problem can be reproduced with https://gist.github.com/cataphract/6b0619a2e28ec3b36739\n\n\n---\n\n**Affects:** 3.0.6\n\n**Reference URL:** http://stackoverflow.com/a/35544379/127724\n", "url": "https://github.com/spring-projects/spring-batch/issues/1126", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2016-02-22 01:31:23", "closed": "2020-02-05 16:41:07", "commits": {}, "ttf": 1444.0002777777777, "commitsDetails": []}, {"title": "spring.schemas still points to 2.2 instead of 3.0 [BATCH-2477]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2477](https://jira.spring.io/browse/BATCH-2477?redirect=false)** and commented\n\n\n---\n\n**Affects:** 3.0.6\n\n**Reference URL:** http://stackoverflow.com/questions/35560555/spring-batch-3-0-6-points-to-the-2-2-schema\n\n1 votes, 1 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1125", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2016-02-22 20:18:44", "closed": "2016-04-19 21:16:27", "commits": {}, "ttf": 57.000277777777775, "commitsDetails": []}, {"title": "Section 8.1 (RepeatTemplate) erroneously refers to ExitStatus [BATCH-2484]", "body": "**[Joshua Hyde](https://jira.spring.io/secure/ViewProfile.jspa?name=jrh3k5)** opened **[BATCH-2484](https://jira.spring.io/browse/BATCH-2484?redirect=false)** and commented\n\nSection 8.1 found here:\n\nhttp://docs.spring.io/spring-batch/reference/html/repeat.html\n\n...erroneously refers to the `RepeatCallback` returning an `ExitStatus` value when demonstrating how to use it with a `RepeatTemplate`.\n\nTable 8.1 under section 8.1.2 also erroneously describes the table as containing `ExitStatus` values, despite the table actually being filled with `RepeatStatus` values.\n\nSection 8.6 also makes reference to `ExitStatus` which is likely erroneous.\n\n\n---\nNo further details from [BATCH-2484](https://jira.spring.io/browse/BATCH-2484?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/1119", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2016-03-04 20:44:16", "closed": "2020-02-06 12:00:34", "commits": {}, "ttf": 1433.0002777777777, "commitsDetails": []}, {"title": "Spring batch fails to autodetect database type DB2AS400 or DB2VSE [BATCH-2481]", "body": "**[Coby Pritchard](https://jira.spring.io/secure/ViewProfile.jspa?name=silentsmuggler)** opened **[BATCH-2481](https://jira.spring.io/browse/BATCH-2481?redirect=false)** and commented\n\nDB2 connections to the AS/400 report incorrectly back as DB2 z/OS. The\ncurrent AS/400 reports Database Product Name as \"DB2 UDB for AS/400\".\nDatabase Product Version has three possible return values based on\nproduct used:\nJTOpen reports \"07.01.0000 V7R1m0\".\nNative Driver reports \"V7R1M0\".\nPRDID reports \"QSQ07010\"\n\n\n---\n\n**Affects:** 3.0.6\n\n**Attachments:**\n- [BATCH-2481.patch](https://jira.spring.io/secure/attachment/23333/BATCH-2481.patch) (_5.95 kB_)\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/402\n", "url": "https://github.com/spring-projects/spring-batch/issues/1115", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2016-02-27 04:51:54", "closed": "2018-01-03 14:48:04", "commits": {}, "ttf": 676.0002777777778, "commitsDetails": []}, {"title": "SimpleStepExecutionSplitter#split returns a Set that has unaddressable elements [BATCH-2490]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2490](https://jira.spring.io/browse/BATCH-2490?redirect=false)** and commented\n\nThe `SimpleStepExecutionSplitter` creates a `HashSet` of `StepExecutions` to be returned.  Once the `HashSet` is populated, it's passed to the `JobRepository` to be saved.  During the saving, the job execution id for each `StepExecution` in the set is updated, thereby changing the hashcode of each object.  This renders each of the `StepExecution` unreferenceable without looping through the `Set`.  See the reference URL for more information about this type of issue.\n\n\n---\n\n**Affects:** 3.0.6\n\n**Reference URL:** http://stackoverflow.com/questions/254441/hashset-remove-and-iterator-remove-not-working\n", "url": "https://github.com/spring-projects/spring-batch/issues/1112", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2016-03-24 22:26:00", "closed": "2016-04-20 16:44:13", "commits": {}, "ttf": 26.00027777777778, "commitsDetails": []}, {"title": "CommandLineJobRunner unsorts command line options [BATCH-2491]", "body": "**[B. K. Oxley (binkley)](https://jira.spring.io/secure/ViewProfile.jspa?name=binkley)** opened **[BATCH-2491](https://jira.spring.io/browse/BATCH-2491?redirect=false)** and commented\n\n(This issue may affect other version; I'm still investigating.)\n\n`CommandLineJobRunner` unsorts the command line options, thus:\n\norg.springframework.batch.core.launch.support.CommandLineJobRunner.java:555:\n\n```java\nSet<String> opts = new HashSet<String>();\nList<String> params = new ArrayList<String>();\n```\n\nUsing `HashSet` instead of a `LinkedHashSet` undoes the ordering of option flags from the command line.  Although harmless for execution, this worsens debugging and error reporting.  The memory/performance impact of `LinkedHashSet` in this case is minimal: there are only so many command line options.\n\n\n---\n\n**Affects:** 3.0.5\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/575, and commits https://github.com/spring-projects/spring-batch/commit/8684ff91f2458893954213a0989070783ace5096, https://github.com/spring-projects/spring-batch/commit/daf0ecfc9fe9cc66c5ca5f00a94f8803715bedb4\n", "url": "https://github.com/spring-projects/spring-batch/issues/1111", "user": "spring-issuemaster", "labels": ["in: core", "status: waiting-for-reporter", "type: bug"], "created": "2016-03-28 22:19:36", "closed": "2018-02-28 08:36:36", "commits": {}, "ttf": 701.0002777777778, "commitsDetails": []}, {"title": "Strange ordering of open, close, and before/after step listeners in AbstractStep [BATCH-2493]", "body": "**[Michael Werle](https://jira.spring.io/secure/ViewProfile.jspa?name=mkw)** opened **[BATCH-2493](https://jira.spring.io/browse/BATCH-2493?redirect=false)** and commented\n\nIn `AbstractStep#execute`, the following happens, in order:\n1. BeforeStep listeners invoked\n2. `AbstractStep#open`\n3. `AbstractStep#doExecute`\n4. AfterStep listeners invoked\n5. `AbstractStep#close`\n\nI discovered this when using a generic step listener to mount and unmount a zip filesystem and tried to use `AbstractItemCountingItemStreamItemReader#doOpen` and `AbstractItemCountingItemStreamItemReader#doClose` to open and close a resource; closing the resource failed because the underlying filesystem had already been unmounted.  It was confusing that code inside the step executed _after_ the listeners were invoked.\n\nTo me, it seems that the order should be:\n1. Before step listeners invoked\n2. `AbstractStep#open`\n3. `AbstractStep#doExecute`\n4. `AbstractStep#close`\n5. After step listeners invoked\n\nObviously, this would be a breaking change for anyone that depended on the old order.\n\n\n---\n\n**Affects:** 3.0.6\n\n**Issue Links:**\n- [BATCH-2098](https://jira.spring.io/browse/BATCH-2098) FileItemReader should close the underlying reader before the step listener\n (_**\"duplicates\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1109", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2016-04-05 01:50:33", "closed": "2019-11-08 22:03:37", "commits": {}, "ttf": 1312.0002777777777, "commitsDetails": []}, {"title": "Update FlatFileItemWriter#setAppendAllowed to only set shouldDeleteIfExists when appropriate [BATCH-2495]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2495](https://jira.spring.io/browse/BATCH-2495?redirect=false)** and commented\n\nAs noted in this [comment](https://jira.spring.io/browse/BATCH-1224?focusedCommentId=128470&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-128470) the setter for `append` automatically sets the flag for `shouldDeleteIfExists` to `false` regardless of the value passed to the setter.  This automatic setting really should only occur when the value passed to the setter is true (which is handled via the `afterPropertiesSet` already).\n\n\n---\n\n**Affects:** 2.1.6\n\n**Reference URL:** http://stackoverflow.com/questions/36434643/org-springframework-batch-item-itemstreamexception-file-already-exists-spring/36444140#36444140\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/0c466339e502c4be07790b65c78afc2d226075bb\n\n**Backported to:** [4.0.0.M1](https://github.com/spring-projects/spring-batch/milestone/84?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1107", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2016-04-06 15:18:42", "closed": "2017-07-20 17:28:05", "commits": {}, "ttf": 470.0002777777778, "commitsDetails": []}, {"title": "HibernateItemReaderHelper is incompatible with Hibernate 5.1 [BATCH-2496]", "body": "**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[BATCH-2496](https://jira.spring.io/browse/BATCH-2496?redirect=false)** and commented\n\nSpring Boot 1.4 will use Hibernate 5.1 by default. Spring Batch's `HibernateItemReaderHelper` is incompatible with Hibernate 5.1. Its `close()` method blows up with a `NoSuchMethodError`. For example:\n\n```\njava.lang.NoSuchMethodError: org.hibernate.Session.close()Ljava/sql/Connection;\n\tat org.springframework.batch.item.database.HibernateItemReaderHelper.close(HibernateItemReaderHelper.java:200)\n\tat org.springframework.batch.item.database.HibernateCursorItemReader.doClose(HibernateCursorItemReader.java:229)\n\tat org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.close(AbstractItemCountingItemStreamItemReader.java:133)\n\tat org.springframework.batch.item.database.AbstractDataSourceItemReaderIntegrationTests.onTearDownAfterTransaction(AbstractDataSourceItemReaderIntegrationTests.java:71)\n\tat sun.reflect.GeneratedMethodAccessor78.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n```\n\nThe underlying cause is that the signature of `org.hibernate.Session.close()` has changed from returning `java.sql.Connection` in Hibernate 4.3 to returning `void` in 5.1. Calling `close()` via reflection will allow `HibernateItemReaderHelper` to work with both Hibernate versions.\n\n\n---\n\n**Affects:** 3.0.6\n\n**Reference URL:** https://build.spring.io/browse/PLATFORM-COM-78\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/7d2c1a1ecaa38e25292731a5235a932392e829b9, https://github.com/spring-projects/spring-batch/commit/7c081c6dafcb590501b2037a8be21af8c45993fe\n", "url": "https://github.com/spring-projects/spring-batch/issues/1106", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2016-04-11 20:38:07", "closed": "2016-04-21 04:25:15", "commits": {}, "ttf": 9.000277777777777, "commitsDetails": []}, {"title": "reader doesn't provide handle if line start with \"#\" in any file [BATCH-2497]", "body": "**[Varun Maurya](https://jira.spring.io/secure/ViewProfile.jspa?name=varunmaurya)** opened **[BATCH-2497](https://jira.spring.io/browse/BATCH-2497?redirect=false)** and commented\n\nI am using Spring batch to process 1000s of file which would have Millions of lines . I have created a Spring batch application which reads multiple file and write the same.But when i tested my app with production input files, I am not able to read the file content. The only difference between prod and non-prod file is that in prod file each line start with \"#\" whereas non-prod file doesn't. How can i get handle of data from file where line starts with #.\n\nPlease let me know if you need more deatails from my side\n\nThanks,\nVarun\n\n\n---\n\n**Affects:** 3.0.6\n", "url": "https://github.com/spring-projects/spring-batch/issues/1105", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2016-04-15 19:39:38", "closed": "2016-04-15 19:56:37", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "SimpleStepExecutionSplitter split method not working on job restart [BATCH-2499]", "body": "**[Dhruv Patel](https://jira.spring.io/secure/ViewProfile.jspa?name=dhruv.patel20@gmail.com)** opened **[BATCH-2499](https://jira.spring.io/browse/BATCH-2499?redirect=false)** and commented\n\nOn a job restart (via the JobOperator), the SimpleStepExecutionSplitter's split method is falling over on on line 207:\nint splitSize = (int) context.getLong(key, gridSize);\n\nThis is because the gridSize stored in the ExecutionContext is an integer rather than a long. So there is a ClassCastException in ExecutionContext (line 281). As we are restarting an existing JobExecution, it is using the stored parameters in the STEP_EXECUTION_CONTEXT database table in the SHORT_CONTEXT column eg:\n{\"SimpleStepExecutionSplitter.GRID_SIZE\":4,\"batch.stepType\":\"org.springframework.batch.core.partition.support.PartitionStep\"}\n\nWhen it is loading the existing StepExecution - it is loading it as an int rather than a long - hence why the SimpleStepExecutionSplitter is breaking.\n\n\n---\n\n**Affects:** 3.0.6\n\n4 votes, 4 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1104", "user": "spring-issuemaster", "labels": ["status: invalid", "type: bug"], "created": "2016-04-21 11:03:49", "closed": "2017-09-08 19:02:02", "commits": {}, "ttf": 505.0002777777778, "commitsDetails": []}, {"title": "MultiResourceItemWriter with StaxEventItemWriter restarts at position 0 [BATCH-2500]", "body": "**[Anne-Lore Montagne](https://jira.spring.io/secure/ViewProfile.jspa?name=anne-lore%20montagne)** opened **[BATCH-2500](https://jira.spring.io/browse/BATCH-2500?redirect=false)** and commented\n\nWhen restarting, instead of appending at the end of the file, the writer opens the file for writing at position 0. The items written in the file beforehand are lost.\n\nThe MultiResourceItemWriter doesn't set the flag 'opened' to true in its open() method.\n\n```java\nif (executionContext.containsKey(getExecutionContextKey(CURRENT_RESOURCE_ITEM_COUNT))) {\n\t// It's a restart\n\tdelegate.open(executionContext);\n}\nelse {\n\topened = false;\n}\n```\n\nAs a consequence, when the write() function is called, a new ExecutionContext is passed to the delegate.\n\n```java\nif (!opened) {\n\tFile file = setResourceToDelegate();\n\t// create only if write is called\n\tfile.createNewFile();\n\tAssert.state(file.canWrite(), \"Output resource \" + file.getAbsolutePath() + \" must be writable\");\n\tdelegate.open(new ExecutionContext());\n\topened = true;\n}\n```\n\nThis behaviour is fine in conjunction with a FlatFileItemWriter as in the sample\nhttps://github.com/spring-projects/spring-batch/blob/master/spring-batch-samples/src/main/resources/jobs/iosample/multiResource.xml\n\nbut the StaxEventItemWriter requires the old execution context to retrieve the position when opening:\n\n```java\nstartAtPosition = executionContext.getLong(getExecutionContextKey(RESTART_DATA_NAME));\n```\n\nInstead of appending at the end of the file, it opens the file for writing at position 0.\n\nChanging the open() method in MultiResourceItemWriter by setting the flag 'opened' to true seems to fix the issue (tested with a FlatFileItemWriter and StaxEventItemWriter).\n\n```java\nif (executionContext.containsKey(getExecutionContextKey(CURRENT_RESOURCE_ITEM_COUNT))) {\n\t// It's a restart\n\tdelegate.open(executionContext);\n\topened = true;\n}\nelse {\n\topened = false;\n}\n```\n\n\n\n---\n\n**Affects:** 3.0.6\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/e2147e24955c1c7933eb133f5797b26313bbf991\n", "url": "https://github.com/spring-projects/spring-batch/issues/1103", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2016-04-21 12:26:18", "closed": "2017-08-03 14:48:05", "commits": {}, "ttf": 469.0002777777778, "commitsDetails": []}, {"title": "ChunkMessageChannelItemWriter Reply Channel Issues [BATCH-2508]", "body": "**[shuvham agarwal](https://jira.spring.io/secure/ViewProfile.jspa?name=shuvam@bits)** opened **[BATCH-2508](https://jira.spring.io/browse/BATCH-2508?redirect=false)** and commented\n\nThe ChunkMessageChannelItemWriter won't work in a multi-threaded environment, even when using step scope - all requests are sharing the same reply channel.\nThe handler should be using a replyChannel header (one per step) instead of referencing a channel in the application context.\nSee similar code in the **MessageChannelPartitionHandler** which was fixed to use a unique queue for each new request.\nEven there, I'm not sure there's ever a valid case for explicitly injecting a shared channel.\n\n\n---\n\n**Affects:** 3.0.7\n\n**Reference URL:** http://stackoverflow.com/questions/37332048/spring-batch-how-to-configure-remote-chunking-for-multiple-jobs-running-in-a-t\n\n**Issue Links:**\n- [BATCH-2228](https://jira.spring.io/browse/BATCH-2228) Remote-chunking implementation does not support parallel executions of the same job\n (_**\"duplicates\"**_)\n- [BATCH-2507](https://jira.spring.io/browse/BATCH-2507) ChunkMessageChannelItemWriter Reply Channel Issues\n (_**\"duplicates\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1095", "user": "spring-issuemaster", "labels": ["in: integration", "status: duplicate", "type: bug"], "created": "2016-05-20 20:24:09", "closed": "2019-10-19 22:24:53", "commits": {}, "ttf": 1247.0002777777777, "commitsDetails": []}, {"title": "AutomaticJobRegistrar's event listening is unnecessarily broad and can lead to problems with early instantiation [BATCH-2506]", "body": "**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[BATCH-2506](https://jira.spring.io/browse/BATCH-2506?redirect=false)** and commented\n\n`AutomaticJobRegistrar` implements `ApplicationListener<ApplicationEvent>` but its only actually interested in events that are subclasses of `ApplicationContextEvent`. An unwanted side-effect of it listening to all `ApplicationEvents` is that it can be instantiated very early. In the situation described in [this Spring Boot issue](https://github.com/spring-projects/spring-boot/issues/2395#issuecomment-217879259) that can lead to a failure as `ModularBatchConfiguration.jobRegistrar` is called before `ModularBatchConfiguration` has been fully initialized.\n\nThe problem can be avoided by tightening up the signature so that `AutomaticJobRegistrar` implements `ApplicationListener<ApplicationEvent>`. I've implemented this change and tested it against the reproduction in the Boot issue. It resolves the problem. Pull request to follow.\n\n\n---\n\n**Affects:** 3.0.7\n\n**Reference URL:** https://github.com/spring-projects/spring-boot/issues/2395#issuecomment-217879259\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/a28afe09e530e4bfc941f20d4cbc2c5fc2949b80, https://github.com/spring-projects/spring-batch/commit/5867606f4bd9395d98f1ec4f7a90184ddb3d4925\n\n1 votes, 4 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1094", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2016-05-11 12:32:32", "closed": "2016-07-21 03:27:10", "commits": {}, "ttf": 70.00027777777778, "commitsDetails": []}, {"title": "Unable to get job step names when using java config [BATCH-2509]", "body": "**[Filip Hrisafov](https://jira.spring.io/secure/ViewProfile.jspa?name=filiphr)** opened **[BATCH-2509](https://jira.spring.io/browse/BATCH-2509?redirect=false)** and commented\n\nWhen constructing a complex flow job with parallel using different `FlowBuilder`(s) then you cannot locate a step in the job.\n\nThe issue is that the `FlowBuilder` creates a `SimpleFlow` who's `afterPropertiesSet` method is never called which is responsible for populating the `stateMap` of the flow.\n\nThere is no issue during running of a Job (Flow) since the the initialize method is called in the start method of the flow.\n\n\n---\n\n**Affects:** 3.0.7\n", "url": "https://github.com/spring-projects/spring-batch/issues/1093", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2016-05-25 13:26:15", "closed": "2020-02-12 14:15:33", "commits": {}, "ttf": 1358.0002777777777, "commitsDetails": []}, {"title": "org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [org.springframework.jms.listener.DefaultMessageListenerContainer] is defined: expected single matching bean but found 2: [BATCH-2512]", "body": "**[Gursahib](https://jira.spring.io/secure/ViewProfile.jspa?name=sahib34)** opened **[BATCH-2512](https://jira.spring.io/browse/BATCH-2512?redirect=false)** and commented\n\nHave created two listener containers each with different id but instances of DefaultMessageListenerContainer  in one Jms-application-setup.xml(sample Name), Requirement to filter the messages coming from One Queue based on MessageSelector filter.\nOn startup it throws the exception saying No Unique Defination.\nAny suggestions plz\n\n\n---\nNo further details from [BATCH-2512](https://jira.spring.io/browse/BATCH-2512?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/1090", "user": "spring-issuemaster", "labels": ["status: invalid", "type: bug"], "created": "2016-06-13 06:50:53", "closed": "2018-10-05 22:22:43", "commits": {}, "ttf": 844.0002777777778, "commitsDetails": []}, {"title": "Hibernate 5.2 incompatibility [BATCH-2514]", "body": "**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[BATCH-2514](https://jira.spring.io/browse/BATCH-2514?redirect=false)** and commented\n\nI'm not sure exactly what's going on here just yet, but it would appear that Batch 3.0.7 is not compatible with Hibernate 5.2. Numerous tests fail with a stack very similar to this:\n\n```\njava.lang.NullPointerException\n\tat org.springframework.batch.item.AbstractItemStreamItemReaderTests.tearDown(AbstractItemStreamItemReaderTests.java:50)\n\tat org.springframework.batch.item.database.AbstractDatabaseItemStreamItemReaderTests.tearDown(AbstractDatabaseItemStreamItemReaderTests.java:46)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:497)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:33)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:112)\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:56)\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:66)\n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)\n\tat sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:497)\n\tat org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)\n\tat org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\tat org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)\n\tat org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)\n\tat com.sun.proxy.$Proxy2.processTestClass(Unknown Source)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:109)\n\tat sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:497)\n\tat org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)\n\tat org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\tat org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:360)\n\tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54)\n\tat org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)org.hibernate.MappingException: org.hibernate.MappingException: Could not instantiate persister org.hibernate.persister.entity.SingleTableEntityPersister\norg.hibernate.MappingException: Could not instantiate persister org.hibernate.persister.entity.SingleTableEntityPersister\n\tat org.hibernate.persister.internal.PersisterFactoryImpl.createEntityPersister(PersisterFactoryImpl.java:112)\n\tat org.hibernate.persister.internal.PersisterFactoryImpl.createEntityPersister(PersisterFactoryImpl.java:77)\n\tat org.hibernate.metamodel.internal.MetamodelImpl.initialize(MetamodelImpl.java:128)\n\tat org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:296)\n\tat org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:476)\n\tat org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:707)\n\tat org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:723)\n\tat org.springframework.orm.hibernate4.LocalSessionFactoryBuilder.buildSessionFactory(LocalSessionFactoryBuilder.java:372)\n\tat org.springframework.orm.hibernate4.LocalSessionFactoryBean.buildSessionFactory(LocalSessionFactoryBean.java:454)\n\tat org.springframework.orm.hibernate4.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:439)\n\tat org.springframework.batch.item.database.HibernateCursorItemReaderCommonTests.createSessionFactory(HibernateCursorItemReaderCommonTests.java:50)\n\tat org.springframework.batch.item.database.HibernateCursorItemReaderCommonTests.getItemReader(HibernateCursorItemReaderCommonTests.java:31)\n\tat org.springframework.batch.item.AbstractItemReaderTests.setUp(AbstractItemReaderTests.java:40)\n\tat org.springframework.batch.item.AbstractItemStreamItemReaderTests.setUp(AbstractItemStreamItemReaderTests.java:44)\n\tat org.springframework.batch.item.database.AbstractDatabaseItemStreamItemReaderTests.setUp(AbstractDatabaseItemStreamItemReaderTests.java:40)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:497)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:112)\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:56)\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:66)\n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)\n\tat sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:497)\n\tat org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)\n\tat org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\tat org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)\n\tat org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)\n\tat com.sun.proxy.$Proxy2.processTestClass(Unknown Source)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:109)\n\tat sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:497)\n\tat org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)\n\tat org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\tat org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:360)\n\tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54)\n\tat org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: java.lang.ArrayIndexOutOfBoundsException: 10\n\tat org.hibernate.engine.spi.SessionFactoryImplementor.getDialect(SessionFactoryImplementor.java:286)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.generateLocker(AbstractEntityPersister.java:1755)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.initLockers(AbstractEntityPersister.java:1742)\n\tat org.hibernate.persister.entity.SingleTableEntityPersister.<init>(SingleTableEntityPersister.java:433)\n\tat sun.reflect.GeneratedConstructorAccessor814.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:422)\n\tat org.hibernate.persister.internal.PersisterFactoryImpl.createEntityPersister(PersisterFactoryImpl.java:96)\n\t... 56 more\n```\n\n\n\n---\n\n**Affects:** 3.0.7\n\n**Backported to:** [4.0.0.M1](https://github.com/spring-projects/spring-batch/milestone/84?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1089", "user": "spring-issuemaster", "labels": ["has: backports", "type: bug"], "created": "2016-06-17 15:42:10", "closed": "2017-07-20 17:30:30", "commits": {}, "ttf": 398.0002777777778, "commitsDetails": []}, {"title": "Typo in log statement from AbstractListenerFactoryBean:isListener [BATCH-2513]", "body": "**[Nick Vanderhoven](https://jira.spring.io/secure/ViewProfile.jspa?name=nickvdh)** opened **[BATCH-2513](https://jira.spring.io/browse/BATCH-2513?redirect=false)** and commented\n\nExample log statement from `org.springframework.batch.core.listener.AbstractListenerFactoryBean`\n\n```\n2015-05-07 10:40:22,733 WARN  [main] org.springframework.batch.item.ItemReader is an interface.  The implementing class will not be queried for annotation based listener configurations.  If using @StepScope on a @Bean method, be sure to return the implementing class so listner annotations can be used.\n```\n\nThe typo is that _listner_ should be _listener_.\n\nThe Spring Boot Batch example is also returning the ItemReader, so this log statement will probably come up more than might be expected at first sight.\n\n\n---\n\n**Affects:** 3.0.7\n\n**Reference URL:** http://stackoverflow.com/a/30096121/1960816\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/424, and commits https://github.com/spring-projects/spring-batch/commit/f7e10909f92e04d6a3048ff3a357552b530bc75d, https://github.com/spring-projects/spring-batch/commit/95e909ca901d593d8046f1c111095c11d2429739\n\n**Backported to:** [4.0.0.M1](https://github.com/spring-projects/spring-batch/milestone/84?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1088", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2016-06-15 05:32:58", "closed": "2019-01-29 08:15:40", "commits": {}, "ttf": 958.0002777777778, "commitsDetails": []}, {"title": "Parsing thousand of XMLs files - MultiResourcePartitioner / SimpleStepExecutionSplitter / commit-interval [BATCH-2520]", "body": "**[Alex Donovan](https://jira.spring.io/secure/ViewProfile.jspa?name=alexdonovann)** opened **[BATCH-2520](https://jira.spring.io/browse/BATCH-2520?redirect=false)** and commented\n\nIn test, i have a directory with at least 100 xml files (each file > 500 kb) which i parse with StaxEventItemReader and write to the database. In production i will have more than 100 000 files in one directory.\nI have a processor who returns 1 beans for 1 file, and with the commit-interval at 10, at every 10 read, the itemWriter receives the 10 beans.\nWhile using MultiResourceItemReader with no multithreading, everything works fine.\n\nBut with MultiResourcePartitioner and 10 threads, if i have more than 100 files in the directory, it is very slow doing the method split in the class SimpleStepExecutionSplitter.\n\nfor (Entry<String, ExecutionContext> context : contexts.entrySet()) {\n\n    \t\t// Make the step execution name unique and repeatable\n    \t\tString stepName = this.stepName + STEP_NAME_SEPARATOR + context.getKey();\n    \n    \t\tStepExecution currentStepExecution = jobExecution.createStepExecution(stepName);\n    \n    \t\tboolean startable = getStartable(currentStepExecution, context.getValue());\n    \n    \t\tif (startable) {\n    \t\t\tset.add(currentStepExecution);\n    \t\t}\n    \t}\n\nAnd something i don't understand is that the ItemWriter does not receive 10 beans at a time, but 1 by 1, it's like it does not care about the commit-interval. The processor will return 10 beans (1 bean by thread), and the writer will get 1 by 1.\nIt's like spring batch count 10 hits in the processor (1 by thread) but does not regroup the 10 hits for the writer.\n\nSo i have two problems :\n- Why jobRepository.addAll(set) is very slow ?\n- If i want the itemWriter to receive 10 beans by 10 beans, i have to custom the processor so that i add into a list of beans, and when the size of the list is 10 return to the itemWriter the list, and i have to synchronized the process.\n\nThe processor :\npublic int returnInterval;\n\n    private static List<RequestBean> multiThreadList = new ArrayList<RequestBean>();\n    \n    @Override\n    public List<RequestBean> process(Object item) throws Exception {\t\t\n    \t\n    \tsynchronized (this) {\n    \t\tmultiThreadList.add(new RequestBuilder().build(item, jobControlService));\n    \t\t\n    \t\tif(multiThreadList.size() == returnInterval) {\n    \t\t\tList<RequestBean> rb = new ArrayList<RequestBean>(multiThreadList);\n    \t\t\tmultiThreadList.clear();\n    \t\t\treturn rb;\n    \t\t}\n    \t\t\n    \t\treturn null;\n    \t}\n    \t\n    }\n\nThe Writer :\npublic void write(List<? extends NodeValue> items) throws Exception {\nif(items != null && items.size() > 0) {\nsynchronized (this) {\nList\\<NodeValue> lNodeValue = new ArrayList\\<NodeValue>();\nfor(Object obj : (List\\<RequestBean>) items.get(0)) {\nRequestBean rb = (RequestBean) obj;\nlNodeValue.addAll(rb.getlNodeValue());\n}\n\n    \t\t\t//super.write(lNodeValue);\n    \t\t\tlNodeValue.clear();\n    \t\t}\n    \t}\n    }\n\nAnd the xml conf file :\n\n\\<bean id=\"partitioner\" class=\"org.springframework.batch.core.partition.support.MultiResourcePartitioner\" scope=\"step\">\n\t\t\\<property name=\"resources\" value=\"#{jobParameters['inboundDir']}\" />\n\t\\</bean>\n\n    <batch:job id=\"appJob\">\n    \t<batch:step id=\"stepMultiThread\">\n    \t\t<batch:partition step=\"appStep\" partitioner=\"partitioner\">\n    \t\t\t<batch:handler grid-size=\"1\" task-executor=\"asyncTaskExecutor\" />\n    \t\t</batch:partition>\n    \t</batch:step> \n    </batch:job>\n    \n    <batch:step id=\"appStep\">\n    \t<batch:tasklet>\n    \t\t<batch:chunk reader=\"xmlItemReader\" writer=\"dbWriter\"\n    \t\t\tprocessor=\"processorApp\" commit-interval=\"10\" skip-policy=\"alwaysSkipParsingError\">\n    \t\t</batch:chunk>\n    \t</batch:tasklet>\n    </batch:step>\n    \n    <bean id=\"asyncTaskExecutor\" class=\"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor\">\n        <property name=\"corePoolSize\" value=\"10\" />\n        <property name=\"maxPoolSize\" value=\"1000\" />\n        <property name=\"allowCoreThreadTimeOut\" value=\"true\" />\n    </bean>\n\n\\<bean id=\"xmlItemReader\" class=\"org.springframework.batch.item.xml.StaxEventItemReader\" scope=\"step\">\n\t\t\\<!-- ROOT DEFAULT - CHANGED IN LAUNCHER WITH THE ARGUMENT -->\n\t\t\\<property name=\"fragmentRootElementName\" value=\"#{jobParameters['fragmentRootElementName']}\" />\n\t\t\\<property name=\"unmarshaller\" ref=\"reportUnmarshaller\" />\n\t\t\\<property name=\"resource\" value=\"#{stepExecutionContext['fileName']}\" />\n\t\\</bean>\n\n    <bean id=\"processorApp\" class=\"....processor.FilterProcessorApp\">\n    \t<!-- commit-interval -->\n    \t<property name=\"returnInterval\" value=\"10\" />\n    </bean>\n\n\\<bean id=\"reportUnmarshaller\" class=\"org.springframework.oxm.jaxb.Jaxb2Marshaller\">\n\t\t\\<property name=\"classesToBeBound\">\n\t\t\t\\<list>\n\t\t\t\t\\<value>com...bean1\\</value>\n\t\t\t\t\\<value>com...bean2\\</value>\n\t\t\t\t\\<value>com...bean3\\</value>\n\t\t\t\t\\<value>com...bean4\\</value>\n\t\t\t\\</list>\n\t\t\\</property>\n\t\\</bean>\n\\<bean id=\"dbWriter\" class=\"....writers.JdbcBatchItemDbWriter\">\n\t\t\\<property name=\"dataSource\" ref=\"dataSource\" />\n\t\t\\<property name=\"sql\">\n\t\t\t\\<value>\n\t           \t\\<![CDATA[\n\t           \t\tINSERT INTO NODE_VALUE_BATCH (id, elm_id,elm_lib,elm_value,dest_table,dest_colonne,obligatoire,ordre,position_pk,unique_uid_file) \n\t           \t\tVALUES (SEQ_ID_REQ.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n\t           \t]]>\n\t\t\t\\</value>\n\t\t\\</property>\n\t    \\<property name=\"itemPreparedStatementSetter\">\n\t\t\t\\<bean class=\"....statementsetter.PreparedStatementSetter\" />\n\t\t\\</property>\n\\</beans>\n\nIf i don't synchronize using that :\n\nThe processor :\n\npublic class FilterProcessorApp implements ItemProcessor<Object, RequestBean> {\n\n    @Autowired\n    public JobControlService jobControlService;\n    \n    @Override\n    public RequestBean process(Object item) throws Exception {\n    \treturn new RequestBuilder().build(item, jobControlService);\n    }\n\n}\n\nThe Writer :\n\npublic void write(List<? extends NodeValue> items) throws Exception {\nfor(Object obj : items) {\nRequestBean rb = (RequestBean) obj;\nlNodeValue.addAll(rb.getlNodeValue());\n}\nsuper.write(lNodeValue);\nlNodeValue.clear();\n}\n\nThe Writer will always get just 1 RequestBean in MultiThreading.\n\nThank you for the reading =) Hope i was clear.\n\n\n\n---\n\n**Affects:** 3.0.7\n", "url": "https://github.com/spring-projects/spring-batch/issues/1083", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2016-07-21 12:14:36", "closed": "2020-02-13 15:29:23", "commits": {}, "ttf": 1302.0002777777777, "commitsDetails": []}, {"title": "Two minor typo's in the documentation [BATCH-2519]", "body": "**[S. Feenstra](https://jira.spring.io/secure/ViewProfile.jspa?name=sfeenstra)** opened **[BATCH-2519](https://jira.spring.io/browse/BATCH-2519?redirect=false)** and commented\n\n??ItemReadListener, ItemProcessListener, and **ItemWriteListner** all provide mechanisms for being notified of errors??\n[spring.io file](http://docs.spring.io/spring-batch/reference/html/configureStep.html)\n[github file](https://github.com/spring-projects/spring-batch/blob/master/src/site/docbook/reference/step.xml#L919)\n\n??throw new PoisonPillException(\"**Posion** pill detected: \" + item);??\n[spring.io file](http://docs.spring.io/spring-batch/reference/html/patterns.html)\n[github file](https://github.com/spring-projects/spring-batch/blob/master/src/site/docbook/reference/common-patterns.xml#L92)\n\n\n---\n\n**Affects:** 3.0.7, 3.0.8\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/b158b46c16ece5a6663d70017bd61a0b4a3f9784, https://github.com/spring-projects/spring-batch/commit/2dd8f60cbfa1ed045f56b2d96a26223ac485c134, https://github.com/spring-projects/spring-batch/commit/19160b42963adf156d22f2ca1f8b5f3b5d6a9ead\n\n**Backported to:** [3.0.9](https://github.com/spring-projects/spring-batch/milestone/83?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1082", "user": "spring-issuemaster", "labels": ["has: backports", "in: documentation", "type: bug"], "created": "2016-07-21 09:04:57", "closed": "2018-01-10 12:29:51", "commits": {}, "ttf": 538.0002777777778, "commitsDetails": []}, {"title": "Job key hash returns different result for restart when using date parameter [BATCH-2522]", "body": "**[Angel D. Segarra](https://jira.spring.io/secure/ViewProfile.jspa?name=asegarra)** opened **[BATCH-2522](https://jira.spring.io/browse/BATCH-2522?redirect=false)** and commented\n\nI noticed this when we had to restart a job the next day using the JobOperator.restart method it created a new Job Instance instead of restarting the previous failed one, running subsequent restarts of the original failed job execution was restarting the new JobInstance giving back a job completed exception. What I believe is happening is that when a new job run is created it is including the millisecond portion when calculating the job key, DATE paremeters in BATCH_JOB_EXECUTION_PARAMS are not being stored with milliseconds in MySQL so upon restart the milisecond portion is not there resulting in a new Job Instance. The batch provided script for MySQL uses DATETIME which has supported fractional seconds since 5.6.4 released in 2011 but needs to be declared specifically to use it\nsee http://dev.mysql.com/doc/refman/5.7/en/fractional-seconds.html. Otherwise another option might be to store dates as long and do the conversion. At the very least please consider adding a note to the documentation concerning restart for platforms where Spring Batch does not support restarting OOTB if using date as parameters.\n\n\n---\n\n**Affects:** 3.0.7\n\n**Issue Links:**\n- [BATCH-1379](https://jira.spring.io/browse/BATCH-1379) MySQL does not support millisecond accuracy in timestamps (problem for JobParameters)\n (_**\"duplicates\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1080", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2016-08-10 15:47:36", "closed": "2019-10-19 21:15:39", "commits": {}, "ttf": 1165.0002777777777, "commitsDetails": []}, {"title": "Not incrementer for DB2AS400 [BATCH-2525]", "body": "**[David Ortega](https://jira.spring.io/secure/ViewProfile.jspa?name=yrch1)** opened **[BATCH-2525](https://jira.spring.io/browse/BATCH-2525?redirect=false)** and commented\n\nMy database's name is resolved by org.springframework.batch.support.DatabaseType fromMetaData as DB2AS400, that's fine but when spring tries to initialize the JobRepository it doesn't find any incrementer in DataFieldMaxValueIncrementer.getIncrementer beacause there isn't any if for \"DB2AS400\"\n\nCaused by: java.lang.IllegalArgumentException: databaseType argument was not on the approved list\nat org.springframework.batch.item.database.support.DefaultDataFieldMaxValueIncrementerFactory.getIncrementer(DefaultDataFieldMaxValueIncrementerFactory.java:114) ~[spring-batch-infrastructure-3.0.7.RELEASE.jar:3.0.7.RELEASE]\nat org.springframework.batch.core.repository.support.JobRepositoryFactoryBean.createJobInstanceDao(JobRepositoryFactoryBean.java:212) ~[spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\nat org.springframework.batch.core.repository.support.AbstractJobRepositoryFactoryBean.getTarget(AbstractJobRepositoryFactoryBean.java:195) ~[spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\nat org.springframework.batch.core.repository.support.AbstractJobRepositoryFactoryBean.initializeProxy(AbstractJobRepositoryFactoryBean.java:183) ~[spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\nat org.springframework.batch.core.repository.support.AbstractJobRepositoryFactoryBean.afterPropertiesSet(AbstractJobRepositoryFactoryBean.java:191) ~[spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\nat org.springframework.batch.core.repository.support.JobRepositoryFactoryBean.afterPropertiesSet(JobRepositoryFactoryBean.java:205) ~[spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\nat org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer.createJobRepository(DefaultBatchConfigurer.java:124) ~[spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\nat org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer.initialize(DefaultBatchConfigurer.java:99) ~[spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n... 23 common frames omitted\n\n\n---\n\n**Affects:** 3.0.7\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/51b201df5029b854779038f907702de5cb7cc464, https://github.com/spring-projects/spring-batch/commit/8402f102421d77340b3a15020e7f2755df61666c\n\n**Backported to:** [4.0.0.RC1](https://github.com/spring-projects/spring-batch/milestone/88?closed=1), [3.0.9](https://github.com/spring-projects/spring-batch/milestone/83?closed=1)\n\n1 votes, 3 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1077", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2016-08-11 15:54:33", "closed": "2017-11-02 18:30:31", "commits": {}, "ttf": 448.0002777777778, "commitsDetails": []}, {"title": "Commit interval [BATCH-2534]", "body": "**[sunny bindal](https://jira.spring.io/secure/ViewProfile.jspa?name=sunny)** opened **[BATCH-2534](https://jira.spring.io/browse/BATCH-2534?redirect=false)** and commented\n\naccording to the logic commit interval work as these:-\nList items = new Arraylist();\nfor(int i = 0; i < commitInterval; i++){\nObject item = itemReader.read()\nObject processedItem = itemProcessor.process(item);\nitems.add(processedItem);\n}\nitemWriter.write(items);\n\nBUt in actually it is not as specified in \"org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(StepContribution, ChunkContext)\" it first read to the full commit interval then process and then calls write. It is :-\n\nList items = new Arraylist();\nfor(int i = 0; i < commitInterval; i++){\nObject item = itemReader.read()\nitems.add(processedItem);\n}for(int i = 0; i < commitInterval; i++){\nObject processedItem = itemProcessor.process(item);\n}\nitemWriter.write(items);\n\nPlease look into this.\n\n\n---\n\n**Affects:** 3.0.7\n\n**Issue Links:**\n- [BATCH-2423](https://jira.spring.io/browse/BATCH-2423) 5.1 Chunk-Oriented Processing does not represent the actual implementation\n (_**\"duplicates\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1069", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2016-09-15 13:40:06", "closed": "2019-10-19 22:20:04", "commits": {}, "ttf": 1129.0002777777777, "commitsDetails": []}, {"title": "String encoding [BATCH-2532]", "body": "**[Sudhish Madhavan](https://jira.spring.io/secure/ViewProfile.jspa?name=sudhish1)** opened **[BATCH-2532](https://jira.spring.io/browse/BATCH-2532?redirect=false)** and commented\n\nHello,\n\nIt appears JdbcExecutionContextDao.java is forcing the result(String to be in ASCII).\nhttps://github.com/spring-projects/spring-batch/blob/master/spring-batch-core/src/main/java/org/springframework/batch/core/repository/dao/JdbcExecutionContextDao.java#L300\n\nresults = new String(out.toByteArray(), \"ISO-8859-1\");\n\nShouldnt this be UTF-8/16? We are running this on db2/os. We are running on an UTF-8 compatible OS (which defaults to EBCDIC but supports UTF-8 fully) .\n\nCan this code also support UTF-8 instead of just ASCII?\n\n\n\n---\n\n**Affects:** 3.0.7\n\n**Reference URL:** https://github.com/spring-projects/spring-batch/blob/master/spring-batch-core/src/main/java/org/springframework/batch/core/repository/dao/JdbcExecutionContextDao.java#L300\n\n1 votes, 4 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1068", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2016-09-06 20:52:44", "closed": "2018-05-02 20:34:33", "commits": {}, "ttf": 602.0002777777778, "commitsDetails": []}, {"title": "@Primary datasource with @EnableBatchProcessing does not work for using multiple datasources [BATCH-2537]", "body": "**[Kiichi Kuramoto](https://jira.spring.io/secure/ViewProfile.jspa?name=kuramotoki)** opened **[BATCH-2537](https://jira.spring.io/browse/BATCH-2537?redirect=false)** and commented\n\nIn Spring Batch 3.0.7 when I define multiple datasources in JavaConfig and run application, an exception occures below:\n\n```\njava.lang.IllegalStateException: Failed to execute CommandLineRunner\n\tat org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:803) [spring-boot-1.4.1.RELEASE.jar:1.4.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:784) [spring-boot-1.4.1.RELEASE.jar:1.4.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.afterRefresh(SpringApplication.java:771) [spring-boot-1.4.1.RELEASE.jar:1.4.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:316) [spring-boot-1.4.1.RELEASE.jar:1.4.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1186) [spring-boot-1.4.1.RELEASE.jar:1.4.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1175) [spring-boot-1.4.1.RELEASE.jar:1.4.1.RELEASE]\n\tat com.example.BatchMultidatasourceApplication.main(BatchMultidatasourceApplication.java:59) [classes/:na]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_77]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_77]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_77]\n\tat java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_77]\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:147) [idea_rt.jar:na]\nCaused by: java.lang.IllegalStateException: To use the default BatchConfigurer the context must contain no more thanone DataSource, found 2\n\tat org.springframework.batch.core.configuration.annotation.AbstractBatchConfiguration.getConfigurer(AbstractBatchConfiguration.java:108) ~[spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n\tat org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration.initialize(SimpleBatchConfiguration.java:114) ~[spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n\tat org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$ReferenceTargetSource.createObject(SimpleBatchConfiguration.java:142) ~[spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n\tat org.springframework.aop.target.AbstractLazyCreationTargetSource.getTarget(AbstractLazyCreationTargetSource.java:86) ~[spring-aop-4.3.3.RELEASE.jar:4.3.3.RELEASE]\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:192) ~[spring-aop-4.3.3.RELEASE.jar:4.3.3.RELEASE]\n\tat com.sun.proxy.$Proxy44.getJobInstances(Unknown Source) ~[na:na]\n\tat org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner.getNextJobParameters(JobLauncherCommandLineRunner.java:133) ~[spring-boot-autoconfigure-1.4.1.RELEASE.jar:1.4.1.RELEASE]\n\tat org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner.execute(JobLauncherCommandLineRunner.java:214) ~[spring-boot-autoconfigure-1.4.1.RELEASE.jar:1.4.1.RELEASE]\n\tat org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner.executeLocalJobs(JobLauncherCommandLineRunner.java:233) ~[spring-boot-autoconfigure-1.4.1.RELEASE.jar:1.4.1.RELEASE]\n\tat org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner.launchJobFromProperties(JobLauncherCommandLineRunner.java:125) ~[spring-boot-autoconfigure-1.4.1.RELEASE.jar:1.4.1.RELEASE]\n\tat org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner.run(JobLauncherCommandLineRunner.java:119) ~[spring-boot-autoconfigure-1.4.1.RELEASE.jar:1.4.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:800) [spring-boot-1.4.1.RELEASE.jar:1.4.1.RELEASE]\n\t... 11 common frames omitted\n```\n\nThis is because AbstractBatchConfiguration to claims \"one\" dataSource with creating DefaultBatchConfigurer as conditions, although autowiring Collection\\<DataSource> type.\n\nIn Spring Boot Reference Guide, mentions that:\n\n\" You might want to mark one of them as `@Primary` if you are using the default auto-configuration for JDBC or JPA (then that one will be picked up by any `@Autowired` injections).\"\n\nhttp://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-two-datasources\n\nI tried this way, but my application did not work because of exceptions above.\n\nTherefore, I think that the dataSources field in AbstractBatchConfiguration shoud be defined not as Collection\\<DataSource> but as DataSource.\n\n\n---\n\n**Affects:** 3.0.7\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/581, and commits https://github.com/spring-projects/spring-batch/commit/7a9a2a9c50c0e1f7b103dd8e81e283e3503a85bb\n\n1 votes, 9 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1065", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2016-09-30 11:03:48", "closed": "2018-02-28 08:21:35", "commits": {}, "ttf": 515.0002777777778, "commitsDetails": []}, {"title": "Multiple Job Intance for same job parameters [BATCH-2542]", "body": "**[Ali Shahbour](https://jira.spring.io/secure/ViewProfile.jspa?name=shahbour)** opened **[BATCH-2542](https://jira.spring.io/browse/BATCH-2542?redirect=false)** and commented\n\nAdding LocalDateTime to job parameters and doing restart (if job fails) will trigger a completely new job_instance (different id).\n\nThe reason for this is that at first run milliseconds are taken into consideration when generating the parameters_key, while when we do a job restart parameters are loaded from DB without the millisecond and thus a new instance is created .\n\nI tried adding support to millisecond in the database but still spring_batch saved the date without millisecond.\n\nMy workaround was to save epoch time as long instead of date_time\n\n\n---\n\n**Issue Links:**\n- [BATCH-1379](https://jira.spring.io/browse/BATCH-1379) MySQL does not support millisecond accuracy in timestamps (problem for JobParameters)\n (_**\"duplicates\"**_)\n\n1 votes, 2 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1060", "user": "spring-issuemaster", "labels": ["status: duplicate", "type: bug"], "created": "2016-10-03 19:43:42", "closed": "2019-10-19 21:15:26", "commits": {}, "ttf": 1111.0002777777777, "commitsDetails": []}, {"title": "Problem with parallel job launching in Spring Batch [BATCH-2544]", "body": "**[Chaitanya](https://jira.spring.io/secure/ViewProfile.jspa?name=vchetu)** opened **[BATCH-2544](https://jira.spring.io/browse/BATCH-2544?redirect=false)** and commented\n\nI have a situation to launch parallel job in Spring batch. We have exposed an API for file upload which we are inserting in Orient database. The UI make a call to underlying rest controller which launch a job for inserting the data. We are using SimpleAsyncTaskExecutor as well as SimpleJobLauncher for launching the job. We have observed that internal implementation of Spring batch is not synchronized once it inserts the created JobId into database, which cause two thread to get same jobId and cause TransactionRollBack exception. Also at each step the spring batch data management in DB(in memory Sql or external sql) is not synchronized.\n\nWe have referred to stack overflow other questions but increasing the concurrency limit as well using ThreadPoolTaskExecutor did not work. We think this because, spring batch internal implementation is not synchronized.\n\nAny idea how we can achieve parallel job launch? Increasing application instance does not guarantee concurrency as it can not handle users more than number of instance.\n\n\n---\n\n**Affects:** 3.0.7\n\n**Reference URL:** http://stackoverflow.com/questions/39898850/parallel-job-launch-issue-in-spring-batch\n\n2 votes, 3 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1058", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2016-10-06 14:39:29", "closed": "2020-02-19 14:49:10", "commits": {}, "ttf": 1231.0002777777777, "commitsDetails": []}, {"title": "SimpleStepExecutionSplitter queries lastStep by JobInstance and Stepname [BATCH-2550]", "body": "**[Georg Hendlmeier](https://jira.spring.io/secure/ViewProfile.jspa?name=gehen)** opened **[BATCH-2550](https://jira.spring.io/browse/BATCH-2550?redirect=false)** and commented\n\nSimpleStepExecutionSplitter:245\n\nIf the job has nested partitions, then the job instance has more than one step execution with the same name derived from partition name. So it finds an already Starting StepExecution which leads to exception\n\nSimpleStepExecutionSplitter:296\n\n\n---\n\n**Affects:** 3.0.7\n", "url": "https://github.com/spring-projects/spring-batch/issues/1052", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2016-10-21 11:18:29", "closed": "2020-02-19 16:42:40", "commits": {}, "ttf": 1216.0002777777777, "commitsDetails": []}, {"title": "FlatFileItemWriter Builder [BATCH-2553]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2553](https://jira.spring.io/browse/BATCH-2553?redirect=false)** and commented\n\nCreate a builder for the ```\nFlatFileItemWriter\n\n```\n```\n\n\n\n---\n\n**Affects:** 3.0.7\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/a6f7ad3373cc740ef6e454e1a544239cf42a2566\n\n**Backported to:** [4.0.0.M1](https://github.com/spring-projects/spring-batch/milestone/84?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1049", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2016-10-27 15:07:36", "closed": "2017-07-20 17:31:15", "commits": {}, "ttf": 266.0002777777778, "commitsDetails": []}, {"title": "Spring Retry README.md misleading about SimpleRetryPolicy [BATCH-2557]", "body": "**[John Hartnup](https://jira.spring.io/secure/ViewProfile.jspa?name=ukslim)** opened **[BATCH-2557](https://jira.spring.io/browse/BATCH-2557?redirect=false)** and commented\n\nApologies if this is the wrong project in which to report this. There doesn't seem to be a JIRA project specifically for spring-retry.\n\nSpring Retry's Readme.md says:\n\n```\n      \n      SimpleRetryPolicy policy = new SimpleRetryPolicy();\n      policy.setRetryableExceptions(new Class[] {Exception.class});\n\n```\n\n... but `SimpleRetryPolicy` does not have a `setRetryableExceptions` method.\n\nYou can pass `Map<Class<? extends Throwable>, Boolean> retryableExceptions` as a constructor parameter -- Readme should say this instead.\n\n\n---\n\n**Affects:** 3.0.5, 3.0.7\n\n**Reference URL:** https://github.com/spring-projects/spring-retry/issues/61\n", "url": "https://github.com/spring-projects/spring-batch/issues/1046", "user": "spring-issuemaster", "labels": ["in: documentation", "type: bug"], "created": "2016-11-10 17:14:39", "closed": "2018-01-03 14:50:46", "commits": {}, "ttf": 418.0002777777778, "commitsDetails": []}, {"title": "Issue with storing the Job Context in database if serialized context has Unicode characters [BATCH-2559]", "body": "**[SreeH](https://jira.spring.io/secure/ViewProfile.jspa?name=sreeharsha)** opened **[BATCH-2559](https://jira.spring.io/browse/BATCH-2559?redirect=false)** and commented\n\nLooks like 'JdbcExecutionContextDao' class has Character encoding set to 'ISO-8859-1' and couldn't find any way to set charset encoding as 'UTF-8' or something else using spring configuration files.\nImplemented a custom class by implementing 'ExecutionContextSerializer' overriding serialize and deserialize methods. Try to convert the map to xml using jaxb and store and the context. By default, the jaxb Marshaller seems to use UTF-8 encoding when generating XML data to a java.io.OutputStream (ByteArrayOutputStream is received from spring batch framework) and spring batch is using 'Latin-1' charset to convert ByteArray to String. Hope because of this some unicode and non-latin-1 characters are not encoded correctly.\n\nAfter changing the Charset to UTF-8 in 'JdbcExecutionContextDao.java' file, the issue was resolved\n\n\n---\n\n**Affects:** 3.0.7\n\n**Reference URL:** http://stackoverflow.com/questions/40675146/issue-with-charset-encoding-in-springbatch-if-context-is-stored-in-database\n", "url": "https://github.com/spring-projects/spring-batch/issues/1044", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2016-11-23 08:46:47", "closed": "2019-11-12 15:34:19", "commits": {}, "ttf": 1084.0002777777777, "commitsDetails": []}, {"title": "Retry not working with FaultTolerantStepBuilder [BATCH-2562]", "body": "**[Christoph Kamil Wozniak](https://jira.spring.io/secure/ViewProfile.jspa?name=woezelmann)** opened **[BATCH-2562](https://jira.spring.io/browse/BATCH-2562?redirect=false)** and commented\n\nWhen using the FaultTolerantStepBuilder to define a retry policy, no reties are triggered on Exceptions in ItemReader.\n\nPOC:\n\n```java\n@Configuration\n@EnableBatchProcessing\npublic static class TestConfiguration {\n\n    // other beans\n\n    @Bean\n    @Qualifier(\"importFullJob\")\n    public Job importFullJob(ItemReader itemReader) {\n        TaskletStep mockStep = stepBuilderFactory.get(\"mockStep\")\n                .chunk(1)\n                .faultTolerant()\n                .retry(RestClientException.class)\n                .retryLimit(10)\n                .reader(itemReader)\n                .processor(item -> \"processed\")\n                .writer(items -> {\n                })\n                .build();\n\n        return jobBuilderFactory.get(\"importFullJob\").start(mockStep).build();\n    }\n\n    @Bean\n    @JobScope\n    public ItemReader itemReader() {\n        return new ItemReader() {\n\n            @Override\n            public Object read() throws Exception {\n                System.out.println(\"try read\");\n\n                throw new RestClientException(\"booom\");\n            }\n        };\n    }\n}\n```\n\nInstead of 10 retries Exception is thrown only once:\n\n```java\norg.springframework.batch.core.step.skip.NonSkippableReadException: Non-skippable exception during read\n    at org.springframework.batch.core.step.item.FaultTolerantChunkProvider.read(FaultTolerantChunkProvider.java:105) ~[spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:116) ~[spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:374) ~[spring-batch-infrastructure-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215) ~[spring-batch-infrastructure-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:144) ~[spring-batch-infrastructure-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:110) ~[spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:69) ~[spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:406) ~[spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:330) ~[spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:133) ~[spring-tx-4.2.7.RELEASE.jar:4.2.7.RELEASE]\n    at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:271) ~[spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:81) ~[spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:374) ~[spring-batch-infrastructure-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215) ~[spring-batch-infrastructure-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:144) ~[spring-batch-infrastructure-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:257) ~[spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:200) [spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148) [spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:392) [spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:135) [spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:306) [spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:135) [spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    at java.lang.Thread.run(Thread.java:745) [?:1.8.0_72]\nCaused by: org.springframework.web.client.RestClientException: buuuum\n    at org.woezelmann.batch.starter.FullImportStarterIT$TestConfiguration$1.read(FullImportStarterIT.java:256) ~[test-classes/:?]\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_72]\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_72]\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_72]\n    at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_72]\n    at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:302) ~[spring-aop-4.2.7.RELEASE.jar:4.2.7.RELEASE]\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190) ~[spring-aop-4.2.7.RELEASE.jar:4.2.7.RELEASE]\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) ~[spring-aop-4.2.7.RELEASE.jar:4.2.7.RELEASE]\n    at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:133) ~[spring-aop-4.2.7.RELEASE.jar:4.2.7.RELEASE]\n    at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:121) ~[spring-aop-4.2.7.RELEASE.jar:4.2.7.RELEASE]\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.2.7.RELEASE.jar:4.2.7.RELEASE]\n    at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:208) ~[spring-aop-4.2.7.RELEASE.jar:4.2.7.RELEASE]\n    at com.sun.proxy.$Proxy68.read(Unknown Source) ~[?:?]\n    at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:91) ~[spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    at org.springframework.batch.core.step.item.FaultTolerantChunkProvider.read(FaultTolerantChunkProvider.java:87) ~[spring-batch-core-3.0.7.RELEASE.jar:3.0.7.RELEASE]\n    ... 22 more\n```\n\n\n\n---\n\n**Affects:** 3.0.7\n\n**Issue Links:**\n- [BATCH-2643](https://jira.spring.io/browse/BATCH-2643) retry can't use in reader?\n (_**\"is duplicated by\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1042", "user": "spring-issuemaster", "labels": ["in: retry", "status: declined", "type: bug"], "created": "2016-12-09 10:29:01", "closed": "2019-10-19 22:06:26", "commits": {}, "ttf": 1044.0002777777777, "commitsDetails": []}, {"title": "Infinite loop when an error is thrown on write and another error is thrown on process during retry [BATCH-2565]", "body": "**[Yoann GENDRE](https://jira.spring.io/secure/ViewProfile.jspa?name=ygendre)** opened **[BATCH-2565](https://jira.spring.io/browse/BATCH-2565?redirect=false)** and commented\n\nJob get in a infinite loop when an exception is first thrown during write and a second exception is thrown during the retry on processing the first item of the chunk.\n\nThis issue is the same as https://jira.spring.io/browse/BATCH-2442 created in october 20015 and never commented by anyone...\nThe proposed correction in class FaultTolerantChunkProcessor in the pull request is a little bit different.\n\nIn pull request a test case illustrating the problem :\n\n* Step with commit-interval=5\n\n* 7 items (item1,item2,item3,item4,item5,item6,item7) in input\n\n* Writer fail on 1rst chunk (writer.cpt=1)\n\n* Processor fail on 1rst item during scan (processor.cpt=6) and on 2nd item during scan (processor.cpt=7)\n\n* Expected output =\n  Item:id=3,nbProcessed=2,nbWritten=2\n  Item:id=4,nbProcessed=2,nbWritten=2\n  Item:id=5,nbProcessed=2,nbWritten=2\n  Item:id=6,nbProcessed=1,nbWritten=1\n  Item:id=7,nbProcessed=1,nbWritten=1\n\nIn the test cas a step listener is used to stop the infinite loop and throw an exception when chunk number > 200\n\n\n---\n\n**Affects:** 3.0.7\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/445\n", "url": "https://github.com/spring-projects/spring-batch/issues/1039", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2017-01-03 16:51:10", "closed": "2017-01-09 16:57:44", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "BATCH-1955 created a bug for me [BATCH-2571]", "body": "**[Robin Krom](https://jira.spring.io/secure/ViewProfile.jspa?name=robink)** opened **[BATCH-2571](https://jira.spring.io/browse/BATCH-2571?redirect=false)** and commented\n\nI upgraded to 3.0.7 and had a hard time getting my batch to run, the problem was that Date object are not mapped to the correct type.\n\nWhile tracking the bug, I noticed that with the change made for [BATCH-1955](https://jira.spring.io/browse/BATCH-1955) for any item that implements Map the itemSqlParameterSourceProvider is no longer called.\n\nSee: https://github.com/spring-projects/spring-batch/commit/408de3c75f24373918d219634796899dde7f9929#diff-0\n\nI would suggest making a change which checks if \"itemSqlParameterSourceProvider\" is set, and if so use it.\n\n\n---\n\n**Affects:** 3.0.7\n\n**Reference URL:** https://github.com/spring-projects/spring-batch/commit/408de3c75f24373918d219634796899dde7f9929#diff-0\n\n**Backported to:** [4.0.0.M2](https://github.com/spring-projects/spring-batch/milestone/85?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1033", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2017-01-23 10:11:22", "closed": "2017-07-20 17:32:45", "commits": {}, "ttf": 178.00027777777777, "commitsDetails": []}, {"title": "Incompatible with the latest Spring 5 snapshots [BATCH-2572]", "body": "**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[BATCH-2572](https://jira.spring.io/browse/BATCH-2572?redirect=false)** and commented\n\n`BeanFactoryLocator` has been dropped in the latest Spring Framework 5 snapshots. See https://jira.spring.io/browse/SPR-15154 for details. This breaks `JsrJobOperator` and its tests which use `ContextSingletonBeanFactoryLocator`. It may break other parts of Batch too, I haven't done an exhaustive search.\n\n\n---\n\n**Affects:** 4.0.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/a6c4dacbbe63012b6a73996c75ae9f36502d409e\n\n**Backported to:** [4.0.0.M2](https://github.com/spring-projects/spring-batch/milestone/85?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1032", "user": "spring-issuemaster", "labels": ["has: backports", "type: bug"], "created": "2017-01-23 20:32:45", "closed": "2017-07-20 17:33:14", "commits": {}, "ttf": 177.00027777777777, "commitsDetails": []}, {"title": "A WARN log has been outputted for @Bean method that support custom scope [BATCH-2574]", "body": "**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[BATCH-2574](https://jira.spring.io/browse/BATCH-2574?redirect=false)** and commented\n\nI've create a spring-batch application on Spring Boot (1.4.4.RELEASE). It work, but a warning log has been outputted as follow:\n\n```\n2017-01-29 00:18:50.690  WARN 3701 --- [           main] o.s.c.a.ConfigurationClassEnhancer       : @Bean method ScopeConfiguration.stepScope is non-static and returns an object assignable to Spring's BeanFactoryPostProcessor interface. This will result in a failure to process annotations such as @Autowired, @Resource and @PostConstruct within the method's declaring @Configuration class. Add the 'static' modifier to this method to avoid these container lifecycle issues; see @Bean javadoc for complete details.\n2017-01-29 00:18:50.709  WARN 3701 --- [           main] o.s.c.a.ConfigurationClassEnhancer       : @Bean method ScopeConfiguration.jobScope is non-static and returns an object assignable to Spring's BeanFactoryPostProcessor interface. This will result in a failure to process annotations such as @Autowired, @Resource and @PostConstruct within the method's declaring @Configuration class. Add the 'static' modifier to this method to avoid these container lifecycle issues; see @Bean javadoc for complete details.\n```\n\nThis behavior is working as design ?\n\n\n---\n\n**Affects:** 3.0.7\n\n**Issue Links:**\n- [BATCH-2161](https://jira.spring.io/browse/BATCH-2161) WARN: `@Bean` method StepScopeConfiguration.stepScope is non-static\n (_**\"duplicates\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1030", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2017-01-28 15:40:55", "closed": "2019-10-19 22:13:58", "commits": {}, "ttf": 994.0002777777778, "commitsDetails": []}, {"title": "Upgrade Jettison to 1.3.x [BATCH-2575]", "body": "**[Derek Lewis](https://jira.spring.io/secure/ViewProfile.jspa?name=dlewis1788)** opened **[BATCH-2575](https://jira.spring.io/browse/BATCH-2575?redirect=false)** and commented\n\nSpring Batch currently depends on Jettison 1.2, which conflicts with other Spring Boot modules, like Spring Cloud Netflix. Specifically, Eureka has a dependency for Jettison 1.3.x. If an application utilizes both Eureka and Spring Batch, then XStream exceptions are generated when utilizing JobExplorer.\n\nJettison 1.2 is also very old. It was released in 2010.\n\n\n---\n\n**Affects:** 3.0.7\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/4ad00166f84eb6df1e0a3bf1a3900ed70e09858d\n\n**Backported to:** [4.0.0.M2](https://github.com/spring-projects/spring-batch/milestone/85?closed=1)\n\n0 votes, 5 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1028", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2017-01-31 16:59:41", "closed": "2019-01-14 18:20:01", "commits": {}, "ttf": 713.0002777777778, "commitsDetails": []}, {"title": "Unable to detect database type with SQLServer JDBC driver [BATCH-2577]", "body": "**[Marcus Henrique Barbosa](https://jira.spring.io/secure/ViewProfile.jspa?name=marcusbarbosa)** opened **[BATCH-2577](https://jira.spring.io/browse/BATCH-2577?redirect=false)** and commented\n\nI got this error when I tried to run Spring Boot 1.5.1-RELEASE with SQLServer JDBC driver.\n\nCaused by: java.lang.IllegalStateException: Unable to detect database type\nat org.springframework.boot.autoconfigure.AbstractDatabaseInitializer.getDatabaseName(AbstractDatabaseInitializer.java:80) ~[spring-boot-autoconfigure-1.5.1.RELEASE.jar:1.5.1.RELEASE]\nat org.springframework.boot.autoconfigure.batch.BatchDatabaseInitializer.getDatabaseName(BatchDatabaseInitializer.java:54) ~[spring-boot-autoconfigure-1.5.1.RELEASE.jar:1.5.1.RELEASE]\nat org.springframework.boot.autoconfigure.AbstractDatabaseInitializer.initialize(AbstractDatabaseInitializer.java:61) ~[spring-boot-autoconfigure-1.5.1.RELEASE.jar:1.5.1.RELEASE]\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_111]\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_111]\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_111]\nat java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_111]\nat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:366) ~[spring-beans-4.3.6.RELEASE.jar:4.3.6.RELEASE]\nat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:311) ~[spring-beans-4.3.6.RELEASE.jar:4.3.6.RELEASE]\nat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:134) ~[spring-beans-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n... 18 common frames omitted\n\nThis is the code that throws the exception above:\n\nString productName = JdbcUtils.commonDatabaseName(JdbcUtils\n.extractDatabaseMetaData(this.dataSource, \"getDatabaseProductName\")\n.toString());\nDatabaseDriver databaseDriver = DatabaseDriver.fromProductName(productName);\nif (databaseDriver == DatabaseDriver.UNKNOWN) {\nthrow new IllegalStateException(\"Unable to detect database type\");\n}\n\n\n---\n\n**Reference URL:** http://stackoverflow.com/questions/42073194/unable-to-detect-database-type\n", "url": "https://github.com/spring-projects/spring-batch/issues/1026", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2017-02-07 16:17:57", "closed": "2017-02-07 21:30:39", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "DelimitedLineTokenizer always interprets quotes [BATCH-2581]", "body": "**[Sebastian Droeppelmann](https://jira.spring.io/secure/ViewProfile.jspa?name=sdroeppel)** opened **[BATCH-2581](https://jira.spring.io/browse/BATCH-2581?redirect=false)** and commented\n\nMy problem is that the DelimitedLineTokenizer always witches on inQuoted when encountering a quote character. This results in following strange situation.\n\nfor a file build up like:\n\n```none\nPID, Type, Size, Order Price, Sales Price\n1, LP, 12\", 5.99, 12.99\n```\n\nwhich i would guess should be default interpreted as:\n\n|PID|Type|Size|OrderPrice|Sales Price|\n|:---|:---|:---|:---|:---|\n|1|LP|12\"|5.99|12.99|\n\nwill be interpreted as\n\n|PID|Type|Size|OrderPrice|Sales Price|\n|:---|:---|:---|:---|:---|\n|1|LP|12\",5.99,12.99|||\n\nThere are multiple ways i could imagine solving it with the default DelimitedLineTokenizer.\n\nEither modify the quote char so that one is able to set an empty char. This way it implicitly never detects a quote, which is not possible currently since char does not allow to set empty chars.\nThe nicer way would be to create a ignoreQuotes(boolean) method + Field which defaults to the current behaviour, but is settable to true, which then would result in isQuoteCharacter to always return false.\n\nI know there are several options for me to solve it without modifying, but I think one should be able to handle the usecase given above by the default delimitedLineTokenizer.\n\nI will just put them here in case somebody stumbles upon the same problem while this issue is open.\n\n**Possible Quickfixes**\n1. I could set a strange char as quote but I find it not nice because if I have a description column then I might encounter even the most exotic chars, which I might have picked as delimiter. So this is no option for me.\n2. I could extend the class and override is quote character to always return false.\n\n\n\n---\n\n**Affects:** 3.0.7\n\n**Issue Links:**\n- [BATCH-1771](https://jira.spring.io/browse/BATCH-1771) DelimitedLineTokenizer : Bug with quote character inside an unquoted field\n (_**\"duplicates\"**_)\n- [BATCH-2820](https://jira.spring.io/browse/BATCH-2820) Line tokenizer: Invalid quote char\n (_**\"is duplicated by\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1022", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2017-03-04 22:53:34", "closed": "2019-10-30 15:38:19", "commits": {}, "ttf": 969.0002777777778, "commitsDetails": []}, {"title": "Cannot use in-memory JobRepository if there are multiple DataSource beans in context [BATCH-2586]", "body": "**[Eric McIntyre](https://jira.spring.io/secure/ViewProfile.jspa?name=mac@riversoforion.com)** opened **[BATCH-2586](https://jira.spring.io/browse/BATCH-2586?redirect=false)** and commented\n\nWhen I try to create a Spring Boot Batch application with an in-memory JobRepository, the context loading fails if I have more than 1 DataSource bean defined.\n\nI followed the directions [in the JavaDoc](http://docs.spring.io/spring-batch/trunk/apidocs/org/springframework/batch/core/configuration/annotation/EnableBatchProcessing.html) to enable the in-memory JobRepository. It works, as long as I have exactly 0 or 1 DataSource beans defined. However, if I have multiple DataSource beans (for instance, DataSources that the batch process steps will be using), then the context fails to load due to ambiguous dependencies.\n\nAttached is a simple Spring Boot project demonstrating this problem. The 2 key classes are BatchConfig and OtherConfig:\n\n_BatchConfig:_\n\n```java\n@Configuration\n@EnableBatchProcessing\npublic class BatchConfig extends DefaultBatchConfigurer {\n\n    /*\n    Despite trying to create an in-memory JobRepository, the context will not\n    load if it finds more than one DataSource bean. If the intent is to use an\n    in-memory repository, the absence or presence of a DataSource should be\n    irrelevant.\n     */\n    @Override\n    protected JobRepository createJobRepository() throws Exception {\n\n        MapJobRepositoryFactoryBean factory = new MapJobRepositoryFactoryBean(new ResourcelessTransactionManager());\n        return factory.getObject();\n    }\n}\n```\n\n_OtherConfig:_\n\n```java\n@Configuration\npublic class OtherConfig {\n\n    /*\n    With these bean definitions, the context fails to load because it cannot\n    decide which DataSource bean to use.\n\n    Comment the bean definitions below, and the context will load.\n     */\n    @Bean\n    public DataSource appDataSource() {\n\n        JdbcDataSource ds = new JdbcDataSource();\n        ds.setURL(\"jdbc:h2:mem:\");\n        return ds;\n    }\n\n\n    @Bean\n    public PlatformTransactionManager appTransactionManager() {\n\n        return new DataSourceTransactionManager(appDataSource());\n    }\n\n\n    @Bean\n    TransactionAwareDataSourceProxy transactionAwareDataSource() {\n\n        return new TransactionAwareDataSourceProxy(appDataSource());\n    }\n}\n```\n\nRunning or testing the above code results in a stacktrace:\n\n```\nCaused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type 'javax.sql.DataSource' available: expected single matching bean but found 2: appDataSource,transactionAwareDataSource\n\tat org.springframework.beans.factory.config.DependencyDescriptor.resolveNotUnique(DependencyDescriptor.java:173)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066)\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.inject(AutowiredAnnotationBeanPostProcessor.java:659)\n\t... 64 more\n```\n\nThis might be a duplicate or related to [BATCH-2537](https://jira.spring.io/browse/BATCH-2537).\n\n\n---\n\n**Affects:** 3.0.7\n\n**Attachments:**\n- [spring-batch-demo.zip](https://jira.spring.io/secure/attachment/23826/spring-batch-demo.zip) (_55.82 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1017", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2017-03-30 23:56:20", "closed": "2017-04-13 16:59:22", "commits": {}, "ttf": 13.000277777777777, "commitsDetails": []}, {"title": "RepositoryItemReader reads failed items over and over again [BATCH-2589]", "body": "**[Jannik Hell](https://jira.spring.io/secure/ViewProfile.jspa?name=jahe123)** opened **[BATCH-2589](https://jira.spring.io/browse/BATCH-2589?redirect=false)** and commented\n\nI use a RepositoryItemReader to read records from a database via a Spring Data repository.\n\nI expected to get 99 successfully read items by fetching 100 items (pageSize of the RepositoryItemReader) when one fails due to a JPA mapping problem (InvalidDataAccessApiUsageException).\n\nBut thats currently not the case.\nThe currentItemCount gets incremented in the AbstractItemCountingItemStreamItemReader (Line: 87), but inside the doPageRead() method of the RepositoryItemReader the currentItemCount is ignored and a page counter attribute is used to construct the PageRequest for the Repository. But the page counter doesn't get incremented in the doRead() method of the RepositoryItemReader (Line: 156) due to an Exception thrown within doPageRead().\n\nThis results in 100 read errors whereas just one of them happens to be the flawed one.\n\nI also set the pageSize to 1 but this didn't work either as the currentItemCount increases over time but page counter doesn't: [^variables-in-intellij.png]\n\n\n---\n\n**Affects:** 3.0.7\n\n**Attachments:**\n- [variables-in-intellij.png](https://jira.spring.io/secure/attachment/24910/variables-in-intellij.png) (_26.39 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/8fa5929a440ecdf90c7601fa3238509a488a21c3\n\n1 votes, 3 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/1015", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2017-04-28 14:55:37", "closed": "2019-01-29 08:16:00", "commits": {}, "ttf": 640.0002777777778, "commitsDetails": []}, {"title": "Add Builder for JMSItemReader [BATCH-2602]", "body": "**[Glenn Renfro](https://jira.spring.io/secure/ViewProfile.jspa?name=grenfro)** opened **[BATCH-2602](https://jira.spring.io/browse/BATCH-2602?redirect=false)** and commented\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/3850e4c2fe61a691d914bd35e62f036bb26e47c5\n\n**Backported to:** [4.0.0.M2](https://github.com/spring-projects/spring-batch/milestone/85?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/1001", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2017-05-10 14:45:04", "closed": "2017-07-20 17:36:06", "commits": {}, "ttf": 71.00027777777778, "commitsDetails": []}, {"title": "Chunk oriented step builders must validate that an ItemWriter is provided [BATCH-2624]", "body": "**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[BATCH-2624](https://jira.spring.io/browse/BATCH-2624?redirect=false)** and commented\n\nUsing Java based configuration in a project we accidentally created a chunk based step without a writer.\n\n```\nstepBuilder.chunk(50).reader(someReader).processor(someProcessor).build();\n```\n\nThe `SimpleChunkProcessor` expects both the `ItemProcessor` and `ItemWriter` to be set (according to the validation done in the `afterPropertiesSet` method.\n\n```\n@Override\nprotected Tasklet createTasklet() {\n     Assert.state(reader != null, \"ItemReader must be provided\");\n     Assert.state(processor != null || writer != null, \"ItemWriter or ItemProcessor must be provided\");\n     RepeatOperations repeatOperations = createChunkOperations();\n     SimpleChunkProvider<I> chunkProvider = new SimpleChunkProvider<I>(reader, repeatOperations);\n     SimpleChunkProcessor<I, O> chunkProcessor = new SimpleChunkProcessor<I, O>(processor, writer);\n     chunkProvider.setListeners(new ArrayList<StepListener>(itemListeners));\n     chunkProcessor.setListeners(new ArrayList<StepListener>(itemListeners));\n     ChunkOrientedTasklet<I> tasklet = new ChunkOrientedTasklet<I>(chunkProvider, chunkProcessor);\n     tasklet.setBuffering(!readerTransactionalQueue);\n     return tasklet;\n}\n```\n\nThe `createTasklet` method in both the `SimpleStepBuilder` as well as the `FaultTolerantStepBuilder` accept a `null` `ItemWriter` as long as there is a processor. I would expect a `ItemWriter` next to an `ItemReader` to be mandatory (which is also what is expressed in the Spring Batch Documentation) but the java config isn't enforcing this, leading to unexpected behavior.\n\nIn the XML configuration an `ItemReader` and `ItemWriter` are required where an `ItemProcessor` is optional. (See the `ChunkElementParser` for that).\n\nThe change that lead to this was introduced in [BATCH-1520](https://jira.spring.io/browse/BATCH-1520) by `@david_syer` (so maybe there is a valid reason for this, but still it is weird that XML and Java config lead to different results).\n\n\n---\n\n**Affects:** 3.0.7\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/491\n\n**Backported to:** [4.1.0.M1](https://github.com/spring-projects/spring-batch/milestone/93?closed=1), [4.0.2](https://github.com/spring-projects/spring-batch/milestone/91?closed=1), [3.0.10](https://github.com/spring-projects/spring-batch/milestone/92?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/979", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2017-06-22 08:44:10", "closed": "2018-05-29 11:20:47", "commits": {}, "ttf": 341.0002777777778, "commitsDetails": []}, {"title": "Infinite loop on job restart when step was repeated [BATCH-2630]", "body": "**[Cameron Hurd](https://jira.spring.io/secure/ViewProfile.jspa?name=churd)** opened **[BATCH-2630](https://jira.spring.io/browse/BATCH-2630?redirect=false)** and commented\n\nWhen a job that included repeated steps is restarted, an infinite loop can occur.\n\nThe following is logged over and over during the loop:\n\n```\n2017-07-07 09:24:55 INFO  SimpleStepHandler:217 - Step already complete or not restartable, so no action to execute: StepExecution: id=1, version=3, name=loadPersonsFromFileStep, status=COMPLETED, exitStatus=CONTINUE, readCount=1, filterCount=0, writeCount=1 readSkipCount=0, writeSkipCount=0, processSkipCount=0, commitCount=1, rollbackCount=0, exitDescription=\n```\n\nThis looks like its due to they way SimpleJobRepository.getLastStepExecution compares startTime to find the last step execution.  Using MySQL this DATETIME is only accurate to the nearest second, so if the repeated step is quick enough then the wrong step is returned.  Modifying the MySQL type to DATETIME(6) to include fractional seconds seems to address the issue.  But changing this getLastStepExecution to let the step execution ID be the tie breaker seems like it would also fix the bug.\n\nContrived a sample job to show the bug:  https://github.com/cameronhurd/SpringBatchInfiniteLoopExample\n\n\n---\n\n**Affects:** 3.0.7\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/0506d3793e50a606cd9739ce896de5d80b474e8e, https://github.com/spring-projects/spring-batch/commit/9256148cf2193b7497148ddfe42ce89aa459694f, https://github.com/spring-projects/spring-batch/commit/1b35bff3ec0a681827e507562572f14550a6717f\n", "url": "https://github.com/spring-projects/spring-batch/issues/975", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2017-07-07 13:34:07", "closed": "2017-07-19 14:34:33", "commits": {}, "ttf": 12.000277777777777, "commitsDetails": []}, {"title": "same record gets repeated till commit-interval [BATCH-2625]", "body": "**[Pratibha](https://jira.spring.io/secure/ViewProfile.jspa?name=pratibha)** opened **[BATCH-2625](https://jira.spring.io/browse/BATCH-2625?redirect=false)** and commented\n\nI have written a spring batch program where I have implemented custom reader and writer classes.\nWhen I keep commit-interval more than one then records get repeated to the commit interval size.\n\nFor e.g. I am reading data from my input csv file as\nId, Name\n1, Akash\n2, John\n3, Daksh\n\nAnd commit-interval=\"2\"\nIn this case writer receives records as\n1, Akash\n1, Akash\n3, Daksh\n\n(first record gets repeated till commit-interval and then the records after commit-interval, the intermediate records gets skipped somewhere)\n\n\n---\n\n**Affects:** 3.0.4\n", "url": "https://github.com/spring-projects/spring-batch/issues/972", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2017-06-23 10:35:54", "closed": "2017-06-23 16:43:14", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Fix off-by-one error in DelimitedLineTokenizer on blank strings [BATCH-2633]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2633](https://jira.spring.io/browse/BATCH-2633?redirect=false)** and commented\n\nWhen parsing a blank line, the `DelimitedLineTokenizer` will be off by one.\n\n\n---\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/496\n\n**Backported to:** [4.0.0.M3](https://github.com/spring-projects/spring-batch/milestone/86?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/970", "user": "spring-issuemaster", "labels": ["has: backports", "type: bug"], "created": "2017-07-25 18:45:19", "closed": "2017-07-25 18:45:25", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": " retry can't use in reader? [BATCH-2643]", "body": "**[lly835](https://jira.spring.io/secure/ViewProfile.jspa?name=lly835)** opened **[BATCH-2643](https://jira.spring.io/browse/BATCH-2643?redirect=false)** and commented\n\nthrow exception in reader\n\n```java\n    @Bean\n    @StepScope\n    public FlatFileItemReader<Person> reader() {\n\n        FlatFileItemReader<Person> reader = new FlatFileItemReader<Person>();\n        reader.setResource(new ClassPathResource(\"sample-data.csv\"));\n        reader.setLineMapper(new DefaultLineMapper<Person>() {{\n            setLineTokenizer(new DelimitedLineTokenizer() {{\n                setNames(new String[] { \"firstName\", \"lastName\" });\n            }});\n            setFieldSetMapper(new BeanWrapperFieldSetMapper<Person>() {{\n                setTargetType(Person.class);\n            }});\n        }});\n//        return reader;\n        throw new RuntimeException(\"error...\");\n    }\n```\n\nuse retry in step\n\n```java\n@Bean\npublic Step step1(PersonItemProcessor processor, ItemReader reader) {\n    return stepBuilderFactory.get(\"step1\")\n            .<Person, Person> chunk(10)\n            .reader(reader)\n            .processor(processor)\n            .faultTolerant()\n            .retryPolicy(new AlwaysRetryPolicy())\n            .writer(writer())\n            .build();\n}\n```\n\nit would not retry\n\n\n---\n\n**Affects:** 3.0.7\n\n**Issue Links:**\n- [BATCH-2562](https://jira.spring.io/browse/BATCH-2562) Retry not working with FaultTolerantStepBuilder\n (_**\"duplicates\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/960", "user": "spring-issuemaster", "labels": ["in: retry", "status: duplicate", "type: bug"], "created": "2017-10-13 03:42:10", "closed": "2019-10-19 22:07:26", "commits": {}, "ttf": 736.0002777777778, "commitsDetails": []}, {"title": "JobStep does not update the ExitStatus of the StepExecution [BATCH-2647]", "body": "**[Eduardo Ferreira Jolo](https://jira.spring.io/secure/ViewProfile.jspa?name=eduardo.jolo)** opened **[BATCH-2647](https://jira.spring.io/browse/BATCH-2647?redirect=false)** and commented\n\nAs stated in the AbstractStep.doExecute(StepExecution stepExecution): \"Subclasses should set the `@link` ExitStatus on the `@link` StepExecution before returning.\"\n\nRight now the JobStep implementation of the doExecute method does not set the exit status before returning.\n\n\n---\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/547\n\n**Backported to:** [4.0.0.RC1](https://github.com/spring-projects/spring-batch/milestone/88?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/956", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2017-10-20 17:41:23", "closed": "2019-01-29 08:13:43", "commits": {}, "ttf": 465.0002777777778, "commitsDetails": []}, {"title": "The table 'BATCH_JOB_EXECUTION_PARAMS' is full [BATCH-2653]", "body": "**[lord-i-wil](https://jira.spring.io/secure/ViewProfile.jspa?name=a64011144)** opened **[BATCH-2653](https://jira.spring.io/browse/BATCH-2653?redirect=false)** and commented\n\n2017-11-20 10:03:00.039 ERROR 2931 --- [ool-1-thread-31] o.s.s.s.TaskUtils$LoggingErrorHandler    : Unexpected error occurred in scheduled task.\n\n    at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:649) ~[spring-jdbc-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]\n    at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:870) ~[spring-jdbc-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]\n    at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:931) ~[spring-jdbc-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]\n    at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:936) ~[spring-jdbc-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]\n    at sun.reflect.GeneratedMethodAccessor141.invoke(Unknown Source) ~[na:na]\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]\n    at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]\n    at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:333) ~[spring-aop-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) ~[spring-aop-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]\n    at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) ~[spring-tx-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]\n    at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213) ~[spring-aop-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]\n    at com.sun.proxy.$Proxy46.createJobExecution(Unknown Source) ~[na:na]\n    at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:125) ~[spring-batch-core-3.0.8.RELEASE.jar!/:3.0.8.RELEASE]\n    at org.springframework.batch.core.launch.JobLauncher$run.call(Unknown Source) ~[na:na]\n    at com.vivo.cloudplatform.datasync.config.BootstrapConfig.startCronJobOfSendImei(BootstrapConfig.groovy:195) ~[classes!/:1.0.0.RELEASE]\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144]\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]\n    at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]\n    at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]\n    at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:65) ~[spring-context-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]\n    at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54) ~[spring-context-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]\n    at org.springframework.scheduling.concurrent.ReschedulingRunnable.run(ReschedulingRunnable.java:81) [spring-context-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_144]\n    at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_144]\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_144]\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [na:1.8.0_144]\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_144]\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_144]\n    at java.lang.Thread.run(Thread.java:748) [na:1.8.0_144]\n\nCaused by: java.sql.SQLException: The table 'BATCH_JOB_EXECUTION_PARAMS' is full\nat com.mysql.jdbc.SQLError.createSQLException(SQLError.java:964) ~[mysql-connector-java-5.1.44.jar!/:5.1.44]\nat com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3973) ~[mysql-connector-java-5.1.44.jar!/:5.1.44]\nat com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3909) ~[mysql-connector-java-5.1.44.jar!/:5.1.44]\nat com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2527) ~[mysql-connector-java-5.1.44.jar!/:5.1.44]\nat com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2680) ~[mysql-connector-java-5.1.44.jar!/:5.1.44]\nat com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2487) ~[mysql-connector-java-5.1.44.jar!/:5.1.44]\nat com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858) ~[mysql-connector-java-5.1.44.jar!/:5.1.44]\nat com.mysql.jdbc.PreparedStatement.executeUpdateInternal(PreparedStatement.java:2079) ~[mysql-connector-java-5.1.44.jar!/:5.1.44]\nat com.mysql.jdbc.PreparedStatement.executeUpdateInternal(PreparedStatement.java:2013) ~[mysql-connector-java-5.1.44.jar!/:5.1.44]\nat com.mysql.jdbc.PreparedStatement.executeLargeUpdate(PreparedStatement.java:5104) ~[mysql-connector-java-5.1.44.jar!/:5.1.44]\nat com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:1998) ~[mysql-connector-java-5.1.44.jar!/:5.1.44]\nat com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.executeUpdate(NewProxyPreparedStatement.java:105) ~[c3p0-0.9.1.2.jar!/:0.9.1.2]\nat org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:877) ~[spring-jdbc-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]\nat org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:870) ~[spring-jdbc-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]\nat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:633) ~[spring-jdbc-4.3.11.RELEASE.jar!/:4.3.11.RELEASE]\n... 46 common frames omitted\n\n\n---\n\n**Affects:** 3.0.8\n", "url": "https://github.com/spring-projects/spring-batch/issues/950", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2017-11-20 07:13:59", "closed": "2017-11-20 15:22:35", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Inconsistent documentation about aborting a job [BATCH-2654]", "body": "**[caio amaral](https://jira.spring.io/secure/ViewProfile.jspa?name=camaral)** opened **[BATCH-2654](https://jira.spring.io/browse/BATCH-2654?redirect=false)** and commented\n\nThe Javadoc from `JobOperator#abandon(long)` states that an ABANDONED job execution can be restarted.\n\n```\n* An abandoned job execution can be\n* restarted, but a stopping one cannot.\n```\n\nhttps://github.com/spring-projects/spring-batch/blob/4.0.0.RC1/spring-batch-core/src/main/java/org/springframework/batch/core/launch/JobOperator.java\n\nThe HTML documentation says that the job cannot be restarted.\n\n```\n4.6.6 Aborting a Job\n...\n A job execution whose status is ABANDONED will not be restarted by the framework.\n```\n\nhttps://docs.spring.io/spring-batch/4.0.x/reference/html/job.html#aborting-a-job\n\nThe actual behavior is that the ABANDONED job cannot be restarted, and STOPPING job can be restart.(It seems an strange decision to me, but it is not the point of this ticket)\nSo the HTML documentation is correct and the Javadoc needs to be fixed.\n\nAlso, there is a small error on the HTML, as it refers to `JobService` instead of `JobOperator`.\n\n```\nThere is a utility in Spring Batch Admin JobService to abort a job execution.\n```\n\n\n\n---\n\n**Affects:** 3.0.8, 4.0.0.RC1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/8a223e35c6e236d2b1a50b1fa03f49cfba9dafb4, https://github.com/spring-projects/spring-batch/commit/5d883a3e61916ea67d2f5d33a3e2ca80e931dbbc\n\n**Backported to:** [3.0.9](https://github.com/spring-projects/spring-batch/milestone/83?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/949", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "in: documentation", "type: bug"], "created": "2017-11-22 12:52:32", "closed": "2017-11-22 16:40:25", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Revert the behavior of DelimitedLineTokenizer to pre-4 [BATCH-2657]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2657](https://jira.spring.io/browse/BATCH-2657?redirect=false)** and commented\n\nDelimitedLineTokenizer was refactored to improve its performance but its behavior was also slightly changed.  When the input is an empty csv string with double quotes, e.g. the java String line = \"\"\"\"; the tokenizer returns the same String, whereas before it was returning an empty string.\n\nThis is due to the condition checking for quotes to remove not stripping the double quotes from the empty csv string (because its length is 2 and the code check for strictly greater than 2). The previous code is there\n\n```\nif (isQuoted(value)) { \n```\n\nand checking for double quotes at the start and end of the string without special handling for the empty string.\n\n\n---\n\n**Affects:** 4.0.0.RC1\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/552, and commits https://github.com/spring-projects/spring-batch/commit/62a580f52db5cbf5acdc24756aafcb5628eb947f\n", "url": "https://github.com/spring-projects/spring-batch/issues/946", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2017-11-27 21:57:35", "closed": "2019-01-29 08:15:17", "commits": {}, "ttf": 427.0002777777778, "commitsDetails": []}, {"title": "Raised in error - please delete [BATCH-2658]", "body": "**[Spazbob](https://jira.spring.io/secure/ViewProfile.jspa?name=spazbob1)** opened **[BATCH-2658](https://jira.spring.io/browse/BATCH-2658?redirect=false)** and commented\n\nPlease close - raised in error due to Maven misconfiguration!\n\n\n---\nNo further details from [BATCH-2658](https://jira.spring.io/browse/BATCH-2658?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/945", "user": "spring-issuemaster", "labels": ["status: invalid", "type: bug"], "created": "2017-11-28 08:15:01", "closed": "2017-11-28 16:58:43", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "i am not able to create bin in Spring [BATCH-2660]", "body": "**[Abhishek Kumar](https://jira.spring.io/secure/ViewProfile.jspa?name=ak58925)** opened **[BATCH-2660](https://jira.spring.io/browse/BATCH-2660?redirect=false)** and commented\n\nHi All,\n\nWe are not able to create new bin , getting error.\nBean creation is like:\n\n\\<bean id=\"commodityOptionsBloombergFileReader\"\nclass=\"org.springframework.batch.item.file.MultiResourceItemReader\"\nscope=\"step\">\n\\<property name=\"resources\"\nvalue=\"file:${pst.citi.risk.fs.commodity.bloombergFile}\" />\n\\<property name=\"delegate\" ref=\"flatFileItemReader\" />\n\\</bean>\n\n    <bean id=\"flatFileItemReader\" class=\"org.springframework.batch.item.file.FlatFileItemReader\"\n    \tscope=\"step\">\n    \t<property name=\"linesToSkip\" value=\"70\" />\n    \t<property name=\"lineMapper\">\n    \t\t<bean class=\"org.springframework.batch.item.file.mapping.DefaultLineMapper\">\n    \t\t\t<property name=\"lineTokenizer\">\n    \t\t\t\t<bean\n    \t\t\t\t\tclass=\"org.springframework.batch.item.file.transform.DelimitedLineTokenizer\">\n    \t\t\t\t\t<property name=\"delimiter\" value=\"|\" />\n    \t\t\t\t\t<property name=\"strict\" value=\"false\" />\n    \t\t\t\t</bean>\n    \t\t\t</property>\n    \t\t\t<property name=\"fieldSetMapper\">\n    \t\t\t\t<bean\n    \t\t\t\t\tclass=\"com.citi.risk.credit.calc.stresstestanalytics.batch.mapper.CommodityOptionsBloombergFieldSetMapper\" />\n    \t\t\t</property>\n    \t\t</bean>\n    \t</property>\n    </bean>\n\nWe are trying above approach but getting below error:\n\n2017-11-20 14:18:21,109 ERROR [main] AbstractStep:212 -\nEncountered an error executing the step\n\njava.lang.ArrayIndexOutOfBoundsException: 8\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\norg.springframework.batch.item.file.MultiResourceItemReader.readNextItem(MultiResourceItemReader.java:130)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at org.springframework.batch.item.file.MultiResourceItemReader.read(MultiResourceItemReader.java:108)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\nsun.reflect.GeneratedMethodAccessor200.invoke(Unknown Source)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\njava.lang.reflect.Method.invoke(Method.java:606)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\norg.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\norg.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\norg.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\norg.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:131)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\norg.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:119)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\norg.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\norg.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\ncom.sun.proxy.$Proxy7.read(Unknown Source)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\norg.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:90)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\norg.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:148)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\norg.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:108)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\norg.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:367)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\norg.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:214)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\norg.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:143)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\norg.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:103)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0at\norg.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:68)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\norg.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:386)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\norg.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:264)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\norg.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:76)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\norg.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:258)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\njava.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\njava.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 at\njava.lang.Thread.run(Thread.java:745)\n\n\n\n---\nNo further details from [BATCH-2660](https://jira.spring.io/browse/BATCH-2660?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/944", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2017-11-29 13:07:42", "closed": "2018-10-05 21:18:29", "commits": {}, "ttf": 310.0002777777778, "commitsDetails": []}, {"title": "Filter count become incorrect when a skip happen in the writer [BATCH-2663]", "body": "**[Alexis NICOLAS](https://jira.spring.io/secure/ViewProfile.jspa?name=nyamiou)** opened **[BATCH-2663](https://jira.spring.io/browse/BATCH-2663?redirect=false)** and commented\n\nHello,\n\nSo I have an application for which I recently added the possibility to have a skip in the writer and I've saw that the filter count value became completely wrong, it become even way bigger than the read count which doesn't make much sense, especially since I have processorNonTransactional set to true which means the processor is not called again in this case.\n\nI did a test with a chunk size of 30, with 10 items filtered on the chunk and an exception in the initial call to the writer to force the scanning mode (chunk items processed one by one to find the one responsible for the exception and skip it), what I saw after the full chunk was a filter count of 210 which seems to be 10 + (30-10)*10 meaning that the filter count of 10 would have been added each time when processing again an item during the scanning.\n\nBest regards,\n\nAlexis NICOLAS\n\n\n---\n\n**Affects:** 3.0.8\n\n**Attachments:**\n- [batch-2663.zip](https://jira.spring.io/secure/attachment/25325/batch-2663.zip) (_50.15 kB_)\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/565, and commits https://github.com/spring-projects/spring-batch/commit/c78701a871110b12e1f59026234baee956295f2e\n", "url": "https://github.com/spring-projects/spring-batch/issues/941", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2017-12-13 11:52:14", "closed": "2018-02-06 08:26:13", "commits": {}, "ttf": 54.000277777777775, "commitsDetails": []}, {"title": "ORA-08177: can't serialize access for this transaction [BATCH-2665]", "body": "**[Lokesh Reddy](https://jira.spring.io/secure/ViewProfile.jspa?name=mlokesh1812@gmail.com)** opened **[BATCH-2665](https://jira.spring.io/browse/BATCH-2665?redirect=false)** and commented\n\nHi when i am running the spring batch i am getting the following exception\n\n```\njava.lang.IllegalStateException: Failed to execute CommandLineRunner\n\tat org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:735) [spring-boot-1.5.7.RELEASE.jar!/:1.5.7.RELEASE]\n\tat org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:716) [spring-boot-1.5.7.RELEASE.jar!/:1.5.7.RELEASE]\n\tat org.springframework.boot.SpringApplication.afterRefresh(SpringApplication.java:703) [spring-boot-1.5.7.RELEASE.jar!/:1.5.7.RELEASE]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:304) [spring-boot-1.5.7.RELEASE.jar!/:1.5.7.RELEASE]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.7.RELEASE.jar!/:1.5.7.RELEASE]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.7.RELEASE.jar!/:1.5.7.RELEASE]\n\tat com.wk.gbs.txnbilling.batch.TxnbillingBatchReaderApplication.main(TxnbillingBatchReaderApplication.java:10) [classes!/:0.0.1-SNAPSHOT]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_151]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_151]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_151]\n\tat java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_151]\n\tat org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [txnbilling-batch-reader-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT]\n\tat org.springframework.boot.loader.Launcher.launch(Launcher.java:87) [txnbilling-batch-reader-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT]\n\tat org.springframework.boot.loader.Launcher.launch(Launcher.java:50) [txnbilling-batch-reader-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT]\n\tat org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) [txnbilling-batch-reader-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT]\nCaused by: org.springframework.dao.CannotSerializeTransactionException: PreparedStatementCallback; SQL [INSERT INTO BATCH_JOB_EXECUTION_CONTEXT (SHORT_CONTEXT, SERIALIZED_CONTEXT, JOB_EXECUTION_ID) VALUES(?, ?, ?)]; ORA-08177: can't serialize access for this transaction\n; nested exception is java.sql.SQLException: ORA-08177: can't serialize access for this transaction\n```\n\ni am using factoryBean.setIsolationLevelForCreate(\"ISOLATION_READ_COMMITTED\");\t\nand intrans for all the batch related tables are set to 3\nI read in the spring forums Changing the ISOLATION_READ_COMMITTED to ISOLATION_DEFAULT is going ti fix the issue is it the right way of doing it please suggest\n\n\n---\n\n**Affects:** 4.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/939", "user": "spring-issuemaster", "labels": ["in: build", "status: duplicate", "type: bug"], "created": "2017-12-22 16:45:08", "closed": "2019-01-29 08:26:19", "commits": {}, "ttf": 402.0002777777778, "commitsDetails": []}, {"title": "Stopping a job from a different JVM throws a NoSuchJobException [BATCH-2667]", "body": "**[Ouerghi Yassine](https://jira.spring.io/secure/ViewProfile.jspa?name=evilkid)** opened **[BATCH-2667](https://jira.spring.io/browse/BATCH-2667?redirect=false)** and commented\n\nI have 2 projects:\n* a batch project, with a simple job and a single step.\n* a project that manages batches, by starting, stopping them ...\n\nBoth projects points to the same database,\nwhen trying to stop a job, using the JobExecutionId, from the 2nd project, I get a NoSuchJobException, even though the job is successfully stopped.\n\nHere is the complete stacktrace:\n\n```\n2018-01-02 16:34:34.426  WARN 4831 --- [ XNIO-2 task-13] o.s.b.c.l.support.SimpleJobOperator      : Cannot find Job object\n\norg.springframework.batch.core.launch.NoSuchJobException: No job configuration with the name [5e205b35-8d39-4689-9106-6b13c285cd27] was registered\n\tat org.springframework.batch.core.configuration.support.MapJobRegistry.getJob(MapJobRegistry.java:66)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:333)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\n\tat org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)\n\tat com.sun.proxy.$Proxy187.getJob(Unknown Source)\n\tat org.springframework.batch.core.launch.support.SimpleJobOperator.stop(SimpleJobOperator.java:403)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:333)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)\n\tat com.sun.proxy.$Proxy189.stop(Unknown Source)\n\tat com.advyteam.sirh.batch.ws.service.JobRunService.stopJob(JobRunService.java:36)\n\tat com.advyteam.sirh.batch.ws.service.JobRunService$$FastClassBySpringCGLIB$$57ada3d4.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:738)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:85)\n\tat com.advyteam.sirh.batch.ws.aop.logging.LoggingAspect.logAround(LoggingAspect.java:85)\n\tat sun.reflect.GeneratedMethodAccessor342.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:629)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:618)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\tat org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:673)\n\tat com.advyteam.sirh.batch.ws.service.JobRunService$$EnhancerBySpringCGLIB$$f4ea2d6b.stopJob(<generated>)\n\tat com.advyteam.sirh.batch.ws.web.rest.JobConfigResource.stopJobInstance(JobConfigResource.java:73)\n\tat com.advyteam.sirh.batch.ws.web.rest.JobConfigResource$$FastClassBySpringCGLIB$$2c739847.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:738)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:85)\n\tat com.advyteam.sirh.batch.ws.aop.logging.LoggingAspect.logAround(LoggingAspect.java:85)\n\tat sun.reflect.GeneratedMethodAccessor342.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:629)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:618)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\tat org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:673)\n\tat com.advyteam.sirh.batch.ws.web.rest.JobConfigResource$$EnhancerBySpringCGLIB$$2372eaa4.stopJobInstance(<generated>)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:687)\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:790)\n\tat io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:85)\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:129)\n\tat com.codahale.metrics.servlet.AbstractInstrumentedFilter.doFilter(AbstractInstrumentedFilter.java:111)\n\tat io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)\n\tat org.springframework.boot.web.filter.ApplicationContextHeaderFilter.doFilterInternal(ApplicationContextHeaderFilter.java:55)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)\n\tat io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)\n\tat org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:110)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)\n\tat org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)\n\tat org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\n\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\n\tat org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\n\tat org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\n\tat org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\n\tat org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\n\tat com.advyteam.sirh.batch.ws.security.jwt.JWTFilter.doFilter(JWTFilter.java:36)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\n\tat org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\n\tat org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\n\tat org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\n\tat org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\n\tat org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\n\tat org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)\n\tat org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)\n\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)\n\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)\n\tat io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)\n\tat org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)\n\tat org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)\n\tat io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84)\n\tat io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62)\n\tat io.undertow.servlet.handlers.ServletChain$1.handleRequest(ServletChain.java:64)\n\tat io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36)\n\tat io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:131)\n\tat io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57)\n\tat io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)\n\tat io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46)\n\tat io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64)\n\tat io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60)\n\tat io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77)\n\tat io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43)\n\tat io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)\n\tat io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)\n\tat io.undertow.servlet.handlers.SessionRestoringHandler.handleRequest(SessionRestoringHandler.java:119)\n\tat io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:292)\n\tat io.undertow.servlet.handlers.ServletInitialHandler.access$100(ServletInitialHandler.java:81)\n\tat io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:138)\n\tat io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:135)\n\tat io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:48)\n\tat io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43)\n\tat io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:272)\n\tat io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:81)\n\tat io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:104)\n\tat io.undertow.server.Connectors.executeRootHandler(Connectors.java:332)\n\tat io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:812)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n```\n\nThe code for running/stoping jobs:\n\n```java\npackage com.advyteam.sirh.batch.ws.service;\n\n\nimport org.apache.commons.io.IOUtils;\nimport org.springframework.batch.core.explore.JobExplorer;\nimport org.springframework.batch.core.launch.JobExecutionNotRunningException;\nimport org.springframework.batch.core.launch.JobOperator;\nimport org.springframework.batch.core.launch.NoSuchJobExecutionException;\nimport org.springframework.batch.core.repository.JobRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.util.StringJoiner;\nimport java.util.UUID;\n\n@Service\npublic class JobRunService {\n\n    @Value(\"${application.dirbatchrunner}\")\n    private String BATCH_JAR;\n\n    @Autowired\n    private JobOperator jobOperator;\n\n\n    public boolean stopJob(Long jobExecutionId) {\n        try {\n            return jobOperator.stop(jobExecutionId);\n        } catch (NoSuchJobExecutionException | JobExecutionNotRunningException e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n\n    public String runjob(final String jarname) {\n        UUID uuid = UUID.randomUUID();\n\n        if (!new File(jarname).exists()) {\n            throw new IllegalArgumentException(\"Jar file does not exist\");\n        }\n        if (!new File(BATCH_JAR).exists()) {\n            throw new IllegalArgumentException(\"Runner jar file does not exist\");\n        }\n\n\n        try {\n            System.out.println(\"processing job: \" + jarname);\n            ProcessBuilder pb = new ProcessBuilder(\"/usr/bin/java\",\n                String.format(\"-Dloader.path=%s\", jarname),\n                \"-jar\",\n                BATCH_JAR,\n                \"--job.name=\" + uuid.toString()\n            );\n\n            new Thread(() -> {\n                try {\n                    Process process = pb.inheritIO().start();\n                    process.waitFor();\n                    System.out.println(jarname + \" done with code \" + process.exitValue());\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }).start();\n\n            return uuid.toString();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n}\n```\n\nIm not sure if this is related or not, but resuming stopped jobs does not seem to work either, and getting same exception: NoSuchJobException\n\n\n---\n\n**Affects:** 3.0.8\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/566, and commits https://github.com/spring-projects/spring-batch/commit/7b3d4388f1e546c3e9260ab0df8d828355ea8f55, https://github.com/spring-projects/spring-batch/commit/d81ab76823b7a620d22912061f37442c3263a78d\n\n**Backported to:** [3.0.9](https://github.com/spring-projects/spring-batch/milestone/83?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/937", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2018-01-02 16:12:44", "closed": "2018-02-06 08:27:16", "commits": {}, "ttf": 34.000277777777775, "commitsDetails": []}, {"title": "Build failing on CET timezone [BATCH-2668]", "body": "**[Mahmoud Ben Hassine](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenhassine)** opened **[BATCH-2668](https://jira.spring.io/browse/BATCH-2668?redirect=false)** and commented\n\nThe build is failing when the default timezone of the JVM is CET:\n\n```\n~/projects/spring-batch$ ./gradlew build\nStarting a Gradle Daemon, 1 incompatible and 1 stopped Daemons could not be reused, use --status for details\n\n...\n\norg.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapperTests > testDefaultConversion FAILED\n    org.springframework.validation.BindException at BeanWrapperFieldSetMapperTests.java:475\n\n1474 tests completed, 1 failed, 1 skipped\n:spring-batch-infrastructure:test FAILED\n\nFAILURE: Build failed with an exception.\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\n\nBUILD FAILED\n\nTotal time: 1 mins 41.117 secs\n```\n\nThe failing test is the following:\n\n```\norg.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapperTests#testDefaultConversion\n```\n\nHere is the complete stack trace:\n\n```\norg.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors\nField error in object 'target' on field 'varDate': rejected value [Thu Jan 04 09:05:50 CET 2018]; codes [typeMismatch.target.varDate,typeMismatch.varDate,typeMismatch.java.util.Date,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.varDate,varDate]; arguments []; default message [varDate]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Date' for property 'varDate'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [java.util.Date] for value 'Thu Jan 04 09:05:50 CET 2018'; nested exception is java.lang.IllegalArgumentException]\n\n\tat org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:200)\n\tat org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapperTests.testDefaultConversion(BeanWrapperFieldSetMapperTests.java:475)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\n\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\n```\n\n\n\n---\n\n**Affects:** 4.0.0\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/559, and commits https://github.com/spring-projects/spring-batch/commit/a0773cac9bb2a33ba00369586871bf5719f0da28\n", "url": "https://github.com/spring-projects/spring-batch/issues/936", "user": "spring-issuemaster", "labels": ["in: build", "type: bug"], "created": "2018-01-04 08:28:17", "closed": "2019-01-29 08:26:05", "commits": {}, "ttf": 389.0002777777778, "commitsDetails": []}, {"title": "Rejected Job can not be restarted [BATCH-2675]", "body": "**[Heiko Does](https://jira.spring.io/secure/ViewProfile.jspa?name=nekator)** opened **[BATCH-2675](https://jira.spring.io/browse/BATCH-2675?redirect=false)** and commented\n\nWe had a Problem in one of our batch applications, because our queue capacity was too small.\nSo some of the jobs resulted in an TaskRejectedException and the job was marked as FAILED in the database. After we figured that out we wanted to restarted the failed jobs via JobOperator.restart method. This resulted in an JobExecutionAlreadyRunningException because the job had no end time and thishttps://github.com/spring-projects/spring-batch/blob/master/spring-batch-core/src/main/java/org/springframework/batch/core/repository/support/SimpleJobRepository.java#L119 check failed.\n\nI my opinion this behaviour is not correct and i would suggest to add a end time when a task ist rejected (https://github.com/spring-projects/spring-batch/blob/master/spring-batch-core/src/main/java/org/springframework/batch/core/launch/support/SimpleJobLauncher.java#L167) so that the job could be restarted.\n\n\n\n---\n\n**Affects:** 3.0.9, 4.0.1, 4.1.0.RC1\n\n**Issue Links:**\n- [BATCH-2760](https://jira.spring.io/browse/BATCH-2760) Failed JobExecution due to unavailable TaskExecutor leaves End Time unpopulated\n (_**\"is duplicated by\"**_)\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/659, and commits https://github.com/spring-projects/spring-batch/commit/b28238e4b5e8633430f9a8c5f0579fa9f9d132ae, https://github.com/spring-projects/spring-batch/commit/13ca0e0089e88bb460754192c4295080a4c4cb54, https://github.com/spring-projects/spring-batch/commit/f8f8a02a4d0ea111b638f9d48f3b3fae84fee200\n\n**Backported to:** [4.0.2](https://github.com/spring-projects/spring-batch/milestone/91?closed=1), [3.0.10](https://github.com/spring-projects/spring-batch/milestone/92?closed=1)\n\n0 votes, 5 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/930", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2018-01-29 08:12:26", "closed": "2018-12-19 12:31:57", "commits": {}, "ttf": 324.0002777777778, "commitsDetails": []}, {"title": "No runners created when there is no data source bean [BATCH-2677]", "body": "**[Ramesh Pabbati](https://jira.spring.io/secure/ViewProfile.jspa?name=rameshpa)** opened **[BATCH-2677](https://jira.spring.io/browse/BATCH-2677?redirect=false)** and commented\n\nIn this class\n\npublic class BatchConfiguration {\n\nwithout the following annotation\n\n```java\n@Autowired\npublic DataSource dataSource;\n```\n\nNothing runs after initialization. No runners are configured so this method has nothing to run\n\n```java\nprivate void callRunners(ApplicationContext context, ApplicationArguments args) {\n     List<Object> runners = new ArrayList<Object>();\n     runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());\n     runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());\n     AnnotationAwareOrderComparator.sort(runners);\n     for (Object runner : new LinkedHashSet<Object>(runners)) {\n          if (runner instanceof ApplicationRunner) {\n               callRunner((ApplicationRunner) runner, args);\n          }\n          if (runner instanceof CommandLineRunner) {\n               callRunner((CommandLineRunner) runner, args);\n          }\n     }\n}\n```\n\nBy adding the datasource bean everything works as expected. My batch application makes an API calls to get data, processes the received information and writes to local files.\n\nHere is the class with company specific information deleted\n\n```java\n@Configuration\n@EnableBatchProcessing\npublic class BatchConfiguration {\n\n    @Autowired\n    public JobBuilderFactory jobBuilderFactory;\n\n    @Autowired\n    public StepBuilderFactory stepBuilderFactory;\n\n//    DO NOT REMOVE THIS BEAN EVEN THOUGH NO DB IS USED IN THIS PROJECT, THIS BEAN IS\n//    INITIALIZING CommandLineRunner BEAN WHICH IS NEEDED TO RUN BATCH JOB\n    @Autowired\n    public DataSource dataSource;\n\n\n    public BatchConfiguration (....)\n    {\n...\n    }\n\n    @Bean\n    public ItemReader<LocalProgramInformationWithName> reader() {\n\n        ItemReader<LocalProgramInformationWithName> reader = null;\n\n        try {\n            reader = new ReadLocalProgramInformation(localProgramScheduleFileName, stationNames);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        return reader;\n    }\n\n    @Bean\n    public WatchAbcScheduleProcessor processor() {\n\n        return new WatchAbcScheduleProcessor(\n                proxyServer, proxyPort, stationTimeZones, stationNewsProgramPrefixes, watchAbcApiEndPoint);\n    }\n\n    @Bean\n    public ItemWriter<BroadcastProgramScheduleWithName> writer() {\n\n        ItemWriter<BroadcastProgramScheduleWithName> writer = new WriteWatchAbcScheduleWriter(schedulesOutputDir);\n\n        return writer;\n    }\n\n     @Bean\n    public Job buildScheduleJob(JobCompletionNotificationListener listener) {\n        return jobBuilderFactory.get(\"buildScheduleJob\")\n                .incrementer(new RunIdIncrementer())\n                .listener(listener)\n                .flow(buildOneStationSchedule())\n                .end()\n                .build();\n    }\n\n    @Bean\n    public Step buildOneStationSchedule() {\n        return stepBuilderFactory.get(\"buildOneStationSchedule\")\n                .<LocalProgramInformationWithName, BroadcastProgramScheduleWithName> chunk(1)\n                .reader(reader())\n                .processor(processor())\n                .writer(writer())\n                .build();\n    }\n\n}\n```\n\n\n\n---\n\n**Affects:** 4.0.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/928", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2018-02-02 22:39:57", "closed": "2019-01-29 08:24:42", "commits": {}, "ttf": 360.0002777777778, "commitsDetails": []}, {"title": "JobParameters deserialization fails [BATCH-2680]", "body": "**[Madis Liias](https://jira.spring.io/secure/ViewProfile.jspa?name=madis)** opened **[BATCH-2680](https://jira.spring.io/browse/BATCH-2680?redirect=false)** and commented\n\norg.springframework.batch.core.step.job.JobStep#doExecute adds JobParameters into executionContext. This will be serialized into BATCH_STEP_EXECUTION_CONTEXT, but deserialization will fail if using the default org.springframework.batch.core.repository.dao.Jackson2ExecutionContextStringSerializer.\n\n**Example unit test if using empty JobParameters:**\n\n```java\n  @Test\n  public void testDeserializingJob() throws Exception {\n    Jackson2ExecutionContextStringSerializer serializer = new Jackson2ExecutionContextStringSerializer();\n\n    Map<String, Object> m = new HashMap<>();\n    m.put(\"params\", new JobParameters());\n\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    serializer.serialize(m, out);\n    String serialized = new String(out.toByteArray(), \"ISO-8859-1\");\n\n    InputStream is = new ByteArrayInputStream(serialized.getBytes(StandardCharsets.UTF_8));\n    Map<String, Object> deserialized = serializer.deserialize(is);\n  }\n```\n\n```\ncom.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field \"empty\" (class org.springframework.batch.core.JobParameters), not marked as ignorable (one known property: \"parameters\"])\n at [Source: (ByteArrayInputStream); line: 1, column: 116] (through reference chain: java.util.HashMap[\"params\"]->org.springframework.batch.core.JobParameters[\"empty\"])\n\n\tat com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:60)\n\tat com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty(DeserializationContext.java:822)\n\tat com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:1152)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1567)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(BeanDeserializerBase.java:1545)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:374)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159)\n\tat com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer._deserialize(AsArrayTypeDeserializer.java:116)\n\tat com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.deserializeTypedFromAny(AsArrayTypeDeserializer.java:71)\n\tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserializeWithType(UntypedObjectDeserializer.java:712)\n\tat com.fasterxml.jackson.databind.deser.std.MapDeserializer._readAndBindStringKeyMap(MapDeserializer.java:529)\n\tat com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:364)\n\tat com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:29)\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4001)\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3065)\n\tat org.springframework.batch.core.repository.dao.Jackson2ExecutionContextStringSerializer.deserialize(Jackson2ExecutionContextStringSerializer.java:59)\n```\n\n**Example unit test if using non-empty JobParameters:**\n\n```java\n  @Test\n  public void testDes() throws Exception {\n    Jackson2ExecutionContextStringSerializer serializer = new Jackson2ExecutionContextStringSerializer();\n\n    Map<String, JobParameter> jobParametersMap = new HashMap<>();\n    jobParametersMap.put(\"paramName\", new JobParameter(\"paramValue\"));\n\n    Map<String, Object> m = new HashMap<>();\n    m.put(\"params\", new JobParameters(jobParametersMap));\n\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    serializer.serialize(m, out);\n    String serialized = new String(out.toByteArray(), \"ISO-8859-1\");\n\n    InputStream is = new ByteArrayInputStream(serialized.getBytes(StandardCharsets.UTF_8));\n    Map<String, Object> deserialized = serializer.deserialize(is);\n  }\n```\n\n```\ncom.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `org.springframework.batch.core.JobParameter` (although at least one Creator exists): cannot deserialize from Object value (no delegate- or property-based Creator)\n at [Source: (ByteArrayInputStream); line: 1, column: 114] (through reference chain: java.util.HashMap[\"params\"]->org.springframework.batch.core.JobParameters[\"parameters\"]->java.util.LinkedHashMap[\"paramName\"])\n\n\tat com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:63)\n\tat com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1342)\n\tat com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator(DeserializationContext.java:1031)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1275)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:325)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159)\n\tat com.fasterxml.jackson.databind.deser.std.MapDeserializer._readAndBindStringKeyMap(MapDeserializer.java:527)\n\tat com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:364)\n\tat com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:29)\n\tat com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer._deserialize(AsArrayTypeDeserializer.java:116)\n\tat com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.deserializeTypedFromObject(AsArrayTypeDeserializer.java:61)\n\tat com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserializeWithType(MapDeserializer.java:400)\n\tat com.fasterxml.jackson.databind.deser.impl.FieldProperty.deserializeAndSet(FieldProperty.java:138)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:368)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159)\n\tat com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer._deserialize(AsArrayTypeDeserializer.java:116)\n\tat com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.deserializeTypedFromAny(AsArrayTypeDeserializer.java:71)\n\tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserializeWithType(UntypedObjectDeserializer.java:712)\n\tat com.fasterxml.jackson.databind.deser.std.MapDeserializer._readAndBindStringKeyMap(MapDeserializer.java:529)\n\tat com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:364)\n\tat com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:29)\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4001)\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3065)\n\tat org.springframework.batch.core.repository.dao.Jackson2ExecutionContextStringSerializer.deserialize(Jackson2ExecutionContextStringSerializer.java:59)\n```\n\n\n\n---\n\n**Affects:** 4.0.0\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/580, and commits https://github.com/spring-projects/spring-batch/commit/b0ffe551131aeca59885b8ae6b41dcdaa5f13777\n\n1 votes, 4 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/927", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2018-02-07 15:10:46", "closed": "2019-01-29 08:23:34", "commits": {}, "ttf": 355.0002777777778, "commitsDetails": []}, {"title": "Check field is not synthetic in BeanWrapperFieldExtractor [BATCH-2683]", "body": "**[C\u00e9dric Sarre](https://jira.spring.io/secure/ViewProfile.jspa?name=cedric.sarre)** opened **[BATCH-2683](https://jira.spring.io/browse/BATCH-2683?redirect=false)** and commented\n\nHello!\n\nI have defined a class extended BeanWrapperFieldExtractor class.\nI am overriding the extract method with the following code:\n\n```java\n@Override\npublic Object[] extract(T item) {\n\treturn Arrays.asList(super.extract(item))\n\t\t.stream()\n\t\t.map(value -> value == null ? \"NULL\" : value.toString().toUpperCase())\n\t\t.map(value -> \"\\\"\" + value + \"\\\"\")\n\t\t.toArray();\n}\n```\n\nI am using Jacoco plugin to have my code coverage but during build of my application, I have the following error:\n\n```\nCaused by: org.springframework.beans.NotReadablePropertyException: Invalid property '$jacocoData' of bean class [com.xx.xx.xx.xx.CdCsv]: Bean property '$jacocoData' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter?\n\tat org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyValue(AbstractNestablePropertyAccessor.java:619)\n\tat org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyValue(AbstractNestablePropertyAccessor.java:609)\n\tat xx.xx.xx.xx.common.ConfigurableBeanWrapperFieldExtractor.extract(ConfigurableBeanWrapperFieldExtractor.java:33)\n\tat org.springframework.batch.item.file.transform.ExtractorLineAggregator.aggregate(ExtractorLineAggregator.java:54)\n\tat org.springframework.batch.item.file.FlatFileItemWriter.write(FlatFileItemWriter.java:270)\n\tat org.springframework.batch.core.step.item.SimpleChunkProcessor.writeItems(SimpleChunkProcessor.java:175)\n\tat org.springframework.batch.core.step.item.SimpleChunkProcessor.doWrite(SimpleChunkProcessor.java:151)\n\tat org.springframework.batch.core.step.item.FaultTolerantChunkProcessor$3.doWithRetry(FaultTolerantChunkProcessor.java:330)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:287)\n\t... 61 common frames omitted\n```\n\nIn order to collect execution data JaCoCo instruments the classes under test which adds two members to the classes: a private static field $jacocoData and a private static method $jacocoInit(). Both members are marked as synthetic (as explained in http://www.jacoco.org/jacoco/trunk/doc/faq.html)\n\nThe method extract of BeanWrapperFieldExtractor doesn't manage the check of synthetic members. A fix could be to add a check like:\n\n```java\npublic Object[] extract(T item) {\n\tList<Object> values = new ArrayList<Object>();\n\n\tBeanWrapper bw = new BeanWrapperImpl(item);\n\tfor (String propertyName : this.names) {\n\t\tField field = ReflectionUtils.findField(item.getClass(), propertyName);\n\t\tif (field == null || !field.isSynthetic()) {\n\t\t\tvalues.add(bw.getPropertyValue(propertyName));\n\t\t}\n\t}\n\treturn values.toArray();\n}\n```\n\n\n\n---\n\n**Affects:** 4.0.0\n\n**Issue Links:**\n- [BATCH-2446](https://jira.spring.io/browse/BATCH-2446) IllegalAccessException when running JaCoCo\n\n\n1 votes, 2 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/925", "user": "spring-issuemaster", "labels": ["in: infrastructure", "type: bug"], "created": "2018-02-22 11:08:19", "closed": "2020-01-30 14:10:10", "commits": {}, "ttf": 707.0002777777778, "commitsDetails": []}, {"title": "In-memory repository with Spring Boot [BATCH-2704]", "body": "**[Nicolas Roussel](https://jira.spring.io/secure/ViewProfile.jspa?name=nroussel)** opened **[BATCH-2704](https://jira.spring.io/browse/BATCH-2704?redirect=false)** and commented\n\nThere are several problems that prevent users from using an in-memory repository with Spring Boot :\n* The **documentation** is incorrect: this one needs a dataSource (https://docs.spring.io/spring-batch/4.0.x/reference/html/index-single.html#inMemoryRepository)\n\n* **spring-boot-starter-batch** depends on **HikariCP**. Then, DataSourceConfiguration$Hikari tries to create a HikariDataSource... This fails if we have no database.\n\n* Adding a MapJobRepositoryFactoryBean doesn't work, it seems that we need to redefine the configurer\n\nTo make this work I need to:\n1. Exclude HikariCP\n2. Add a component extending DefaultBatchConfigurer\n\n\n\n---\n\n**Reference URL:** https://docs.spring.io/spring-batch/4.0.x/reference/html/index-single.html#inMemoryRepository\n", "url": "https://github.com/spring-projects/spring-batch/issues/905", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2018-03-14 11:10:55", "closed": "2018-03-14 15:07:50", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Is there a way to set the writer to write more than one record while processing? I need to create records and the number to be created is determined dynamically.  Using just the JdbcBatchItemWriter I get the only the last record. [BATCH-2706]", "body": "**[Tom Cummins](https://jira.spring.io/secure/ViewProfile.jspa?name=tomc)** opened **[BATCH-2706](https://jira.spring.io/browse/BATCH-2706?redirect=false)** and commented\n\n\n---\n\n**Affects:** 3.0.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/902", "user": "spring-issuemaster", "labels": ["status: invalid", "type: bug"], "created": "2018-03-22 17:04:43", "closed": "2018-03-22 17:22:32", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "When the jobstep defined in my jobstep refers to a job defined in another configuration file, there will be an error of \"NoSuchBeanDefinitionException\" [BATCH-2713]", "body": "**[Arthor](https://jira.spring.io/secure/ViewProfile.jspa?name=arthor.qu)** opened **[BATCH-2713](https://jira.spring.io/browse/BATCH-2713?redirect=false)** and commented\n\nI define a jobstep in spring-batch-admin,When the jobstep defined in my jobstep refers to a job defined in another configuration file, there will be an error of \"NoSuchBeanDefinitionException: No bean named 'ComputeJFJob' is defined\"\n\n\n---\n\n**Affects:** 3.0.8\n\n**Attachments:**\n- [about jobstep.xlsx](https://jira.spring.io/secure/attachment/25588/about+jobstep.xlsx) (_688.82 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/894", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2018-04-20 10:12:02", "closed": "2018-04-23 07:38:24", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "id \"input.file.name\" in the documentation of Spring Batch Integration is not valid [BATCH-2719]", "body": "**[Constantino Cronemberger](https://jira.spring.io/secure/ViewProfile.jspa?name=ccronemberger)** opened **[BATCH-2719](https://jira.spring.io/browse/BATCH-2719?redirect=false)** and commented\n\nWhen I use \"input.file.name\" with the following code:\n\n```java\n@Bean\n@StepScope\npublic ItemReader sampleReader(@Value(\"#{jobParameters[input.file.name]}\") String resource) {\n...\n    FlatFileItemReader flatFileItemReader = new FlatFileItemReader();\n    flatFileItemReader.setResource(new FileSystemResource(resource));\n...\n    return flatFileItemReader;\n}\n```\n\nI get the following error:\n\n```java\nCaused by: java.lang.IllegalArgumentException: Path must not be null\n\tat org.springframework.util.Assert.notNull(Assert.java:193) ~[spring-core-5.0.5.RELEASE.jar:5.0.5.RELEASE]\n\tat org.springframework.core.io.FileSystemResource.<init>(FileSystemResource.java:86) ~[spring-core-5.0.5.RELEASE.jar:5.0.5.RELEASE]\n\tat hello.BatchConfigurer.reader(BatchConfigurer.java:89) ~[classes/:na]\n```\n\nUsing the name \"input_file_name\" it works.\n\nThis string appears in two places, in the `@Value` annotation and in the call to jobParametersBuilder.addString.\n\n\n---\n\n**Reference URL:** https://github.com/spring-projects/spring-batch/blob/master/spring-batch-docs/asciidoc/spring-batch-integration.adoc\n", "url": "https://github.com/spring-projects/spring-batch/issues/888", "user": "spring-issuemaster", "labels": ["in: documentation", "status: declined", "type: bug"], "created": "2018-05-09 16:48:51", "closed": "2020-02-27 13:18:41", "commits": {}, "ttf": 658.0002777777778, "commitsDetails": []}, {"title": "FlatFileItemWriterBuilder requires a Resource [BATCH-2720]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2720](https://jira.spring.io/browse/BATCH-2720?redirect=false)** and commented\n\nIf a user wants to create a `FlatFileItemWriter`\u00a0that is decorated with the `MultiResourceItemWriter`, they would not want to set the `Resource`.\u00a0 However, the `.build()`\u00a0method on the `FlatFileItemWriterBuilder`\u00a0requires a resource to be set.\n\n\n---\n\n**Affects:** 4.0.1\n\n**Backported to:** [4.3.0.M1](https://github.com/spring-projects/spring-batch/milestone/109?closed=1), [4.2.1](https://github.com/spring-projects/spring-batch/milestone/108?closed=1), [4.1.3](https://github.com/spring-projects/spring-batch/milestone/103?closed=1), [4.0.4](https://github.com/spring-projects/spring-batch/milestone/102?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/887", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2018-05-10 17:08:47", "closed": "2019-11-15 17:11:07", "commits": {}, "ttf": 554.0002777777778, "commitsDetails": []}, {"title": "Incorrect remote chunking sample in documentation [BATCH-2721]", "body": "**[Mahmoud Ben Hassine](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenhassine)** opened **[BATCH-2721](https://jira.spring.io/browse/BATCH-2721?redirect=false)** and commented\n\nThere are some minor errors in the remote chunking [section](https://docs.spring.io/spring-batch/4.0.x/reference/html/spring-batch-integration.html#remote-chunking) of the documentation:\n\n* First, the diagram shows an item reader on the worker side, but in remote chunking, the reading happens on the master side and items are sent over the wire\n* The `Step4` label is better if it was `Step3`\n* The `chunkJob` method of the code example takes an `ItemReader` as parameter but uses a method call/reference in the `stepBuilderFactory.reader` method\n* The `chunkHandler` bean is not needed on the master side\n* According to [the documentation](https://docs.spring.io/spring-batch/trunk/reference/html/scalability.html#remoteChunking), the middleware has to be durable, but in the code example, we declare the JMS subscription as non durable: `.configureListenerContainer(c -> c.subscriptionDurable(false))`\n* The term \"slave\" is better renamed to \"worker\"\n\nIt would be also great to add a remote chunking sample to the `spring-batch-samples` module.\n\n\n---\n\n**Affects:** 4.0.1\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/603, and commits https://github.com/spring-projects/spring-batch/commit/026bbe056b147edf63b5239e1c980410f5059524, https://github.com/spring-projects/spring-batch/commit/d69e46ec29518e88626d3254e78b768d3b836411\n\n**Backported to:** [4.1.0.M1](https://github.com/spring-projects/spring-batch/milestone/93?closed=1), [4.0.2](https://github.com/spring-projects/spring-batch/milestone/91?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/886", "user": "spring-issuemaster", "labels": ["has: backports", "in: documentation", "type: bug"], "created": "2018-05-14 11:31:51", "closed": "2018-05-29 11:21:52", "commits": {}, "ttf": 14.000277777777777, "commitsDetails": []}, {"title": "Existing failed job is restarted, even if new job contains different job parameters [BATCH-2711]", "body": "**[Tonie](https://jira.spring.io/secure/ViewProfile.jspa?name=uzwane)** opened **[BATCH-2711](https://jira.spring.io/browse/BATCH-2711?redirect=false)** and commented\n\nCreated a Spring Batch job as described in the documentation 'Getting Started - Creating a Batch Service' (https://spring.io/guides/gs/batch-processing/) in order to show the issue.  SQLServer is used as database for the meta-data tables as well as the business data table.\n\nThe job reads a .csv file with with 6 records and the ItemProcess throws an exception on the 4th record. The job then stops and the meta-data tables are updated correctly. Job parameters used for the job is: parm=0 fileName=error.csv\n\nAfter this a new job is started with the same job name, but different parameters: parm=1 fileName=new.csv.  What happens is that Spring Batch restart the failed job with the errors again.  Even if the new job contains different parameters.\n\nThis worked perfectly as expected in version 3.0.8, but the issue occurred when upgraded to version 4.0.1.\n\nLogs from 3.0.8 shows the following:\n\n```\nmain] o.s.b.a.b.JobLauncherCommandLineRunner   : Running default command line with: [param=1, inputFile=sample-data-1.csv]\r\nmain] o.s.b.c.r.s.JobRepositoryFactoryBean     : No database type set, using meta data indicating: SQLSERVER\r\nmain] o.s.b.c.l.support.SimpleJobLauncher      : No TaskExecutor has been set, defaulting to synchronous executor.\r\nmain] o.s.b.c.l.support.SimpleJobLauncher      : Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [inputFile=sample-data-1.csv, run.id=1, param=1]\r\n```\n\nLogs from 4.0.1 shows the following:\n\n```\nmain] o.s.b.c.r.s.JobRepositoryFactoryBean     : No database type set, using meta data indicating: SQLSERVER\r\nmain] o.s.b.c.l.support.SimpleJobLauncher      : No TaskExecutor has been set, defaulting to synchronous executor.\r\nmain] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup\r\nmain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'dataSource' has been autodetected for JMX exposure\r\nmain] o.s.j.e.a.AnnotationMBeanExporter        : Located MBean 'dataSource': registering with JMX server as MBean [com.zaxxer.hikari:name=dataSource,type=HikariDataSource]\r\nmain] hello.Application                        : Started Application in 2.157 seconds (JVM running for 2.592)\r\nmain] o.s.b.a.b.JobLauncherCommandLineRunner   : Running default command line with: [param=1, inputFile=sample-data-1.csv]\r\nmain] o.s.b.c.l.support.SimpleJobLauncher      : Job: [FlowJob: [name=importUserJob]] launched with the following parameters: [{inputFile=sample-data-error.csv, param=0, run.id=1}]\r\n```\n\nNotice the difference in parameters used in SimpleJobLauncher, even if JobLauncherCommandLineRunner in both cases show the same correct parameters.\n\n\n\n---\n\n**Affects:** 4.0.1\n\n**Issue Links:**\n- [BATCH-2741](https://jira.spring.io/browse/BATCH-2741) Job Parameter Overwrite Issue\n (_**\"is duplicated by\"**_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/ebf156d529d4df53718ef320612aa5336129d626, https://github.com/spring-projects/spring-batch/commit/5328fb2d213d22357b3796606492d15b87a1cbbe\n\n**Backported to:** [4.0.2](https://github.com/spring-projects/spring-batch/milestone/91?closed=1)\n\n4 votes, 8 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/882", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2018-04-17 17:37:05", "closed": "2018-11-06 10:48:30", "commits": {}, "ttf": 202.00027777777777, "commitsDetails": []}, {"title": "Xml/Java toggle is not working in the single HTML page version of the reference documentation [BATCH-2728]", "body": "**[Mahmoud Ben Hassine](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenhassine)** opened **[BATCH-2728](https://jira.spring.io/browse/BATCH-2728?redirect=false)** and commented\n\nThe Xml/Java toggle for code examples is working fine for individual sections but it is missing in the single HTML page version: https://docs.spring.io/spring-batch/4.1.x/reference/html/index-single.html .\n\n\n---\n\n**Affects:** 4.0.1, 4.1.0.M1\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/611\n\n**Backported to:** [4.0.2](https://github.com/spring-projects/spring-batch/milestone/91?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/876", "user": "spring-issuemaster", "labels": ["has: backports", "in: documentation", "type: bug"], "created": "2018-06-05 08:59:03", "closed": "2018-06-11 12:38:51", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "Incorrect remote partitioning sample in the documentation [BATCH-2730]", "body": "**[Mahmoud Ben Hassine](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenhassine)** opened **[BATCH-2730](https://jira.spring.io/browse/BATCH-2730?redirect=false)** and commented\n\nThere are some minor errors in the remote partitioning [section](https://docs.spring.io/spring-batch/4.0.x/reference/html/spring-batch-integration.html#remote-partitioning) of the documentation. The code example of the partitioned step is incorrect:\n\n```\npublic Job personJob() {\n                return jobBuilderFactory.get(\"personJob\")\n                                .start(stepBuilderFactory.get(\"step1.master\")\n                                                .partitioner(partitionHandler())\n                                                .build())\n                                .build();\n }\n```\n\nwhile it should be:\n\n```\npublic Job personJob() {\n                return jobBuilderFactory.get(\"personJob\")\n                                .start(stepBuilderFactory.get(\"step1.master\")\n                                                .partitioner(\"step1.worker\", partitioner())\n                                                .partitionHandler(partitionHandler())\n                                                .build())\n                                .build();\n }\n```\n\nMoreover, the code example shows all beans in the same bloc without mentioning which ones should be declared on the master side and which ones should be declared on the worker side. This is confusing. It should either use profiles or separate the master's configuration from the worker's configuration.\n\nFinally, it would be great to add a remote partitioning sample to the `spring-batch-samples` module (current samples show only local partitioning).\n\n\n---\n\n**Affects:** 4.0.1, 4.1.0.M1\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/612, and commits https://github.com/spring-projects/spring-batch/commit/5730f380e28a822681b6685a69695ee54a0edec6, https://github.com/spring-projects/spring-batch/commit/2c5b7b59e84384b3ea3520a1e01cc46e59a7b3ca\n\n**Backported to:** [4.0.2](https://github.com/spring-projects/spring-batch/milestone/91?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/875", "user": "spring-issuemaster", "labels": ["has: backports", "in: documentation", "type: bug"], "created": "2018-06-08 08:00:51", "closed": "2018-07-05 19:35:24", "commits": {}, "ttf": 27.00027777777778, "commitsDetails": []}, {"title": "java.sql.SQLException: ORA-12899: value too large for column BATCH_STEP_EXECUTION.EXIT_MESSAGE (actual: 2502, maximum: 2500) [BATCH-2731]", "body": "**[Oleksandr Gavenko](https://jira.spring.io/secure/ViewProfile.jspa?name=gavenkoa)** opened **[BATCH-2731](https://jira.spring.io/browse/BATCH-2731?redirect=false)** and commented\n\nWe throwed exception with 2 YEN SIGN in message and for too long stack trace we got:\n\n\u00a0\n\n` at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:84)`\n` at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)`\n` at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)`\n` at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:649)`\n` at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:870)`\n` at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:931)`\n` at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:936)`\n` at org.springframework.batch.core.repository.dao.JdbcStepExecutionDao.updateStepExecution(JdbcStepExecutionDao.java:244)`\n` at org.springframework.batch.core.repository.support.SimpleJobRepository.update(SimpleJobRepository.java:191)`\n` at sun.reflect.GeneratedMethodAccessor240.invoke(Unknown Source)`\n` at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)`\n` at java.lang.reflect.Method.invoke(Method.java:498)`\n` at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:333)`\n` at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)`\n` at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)`\n` at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)`\n` at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)`\n` at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)`\n` at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)`\n` at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)`\n` at com.sun.proxy.$Proxy207.update(Unknown Source)`\n` at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:260)`\n` at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)`\n` at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:64)`\n` at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:67)`\n` at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:169)`\n` at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:144)`\n` at org.springframework.batch.core.job.flow.FlowStep.doExecute(FlowStep.java:90)`\n` at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:200)`\n` at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:139)`\n` at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:136)`\n` at java.util.concurrent.FutureTask.run(FutureTask.java:266)`\n` at org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottlingRunnable.run(SimpleAsyncTaskExecutor.java:268)`\n` at java.lang.Thread.run(Thread.java:748)`\n` Caused by: java.sql.SQLException: ORA-12899: value too large for column \"BATCH_STEP_EXECUTION\".\"EXIT_MESSAGE\" (actual: 2502, maximum: 2500)`\n` at oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:445)`\n` at oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:396)`\n` at oracle.jdbc.driver.T4C8Oall.processError(T4C8Oall.java:879)`\n` at oracle.jdbc.driver.T4CTTIfun.receive(T4CTTIfun.java:450)`\n` at oracle.jdbc.driver.T4CTTIfun.doRPC(T4CTTIfun.java:192)`\n` at oracle.jdbc.driver.T4C8Oall.doOALL(T4C8Oall.java:531)`\n` at oracle.jdbc.driver.T4CPreparedStatement.doOall8(T4CPreparedStatement.java:207)`\n` at oracle.jdbc.driver.T4CPreparedStatement.executeForRows(T4CPreparedStatement.java:1044)`\n` at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:1329)`\n` at oracle.jdbc.driver.OraclePreparedStatement.executeInternal(OraclePreparedStatement.java:3584)`\n` at oracle.jdbc.driver.OraclePreparedStatement.executeUpdate(OraclePreparedStatement.java:3665)`\n` at oracle.jdbc.driver.OraclePreparedStatementWrapper.executeUpdate(OraclePreparedStatementWrapper.java:1352)`\n` at org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:105)`\n` at org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:105)`\n` at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:877)`\n` at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:870)`\n` at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:633)`\n` ... 31 common frames omitted`\n\nBatch sources for JdbcStepExecutionDao.java has:\n\n` String exitDescription = truncateExitDescription(stepExecution.getExitStatus().getExitDescription());`\n\nand truncateExitDescription() knows nothing about multibyte charsets:\n\n`return description.substring(0, exitMessageLength);`\n\n\n\n---\n\n**Affects:** 3.0.7\n\n**Issue Links:**\n- [BATCH-2091](https://jira.spring.io/browse/BATCH-2091) Declare DDL with VARCHAR( n char)\n (_**\"duplicates\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/874", "user": "spring-issuemaster", "labels": ["status: duplicate", "type: bug"], "created": "2018-06-22 05:36:18", "closed": "2018-10-04 12:55:31", "commits": {}, "ttf": 104.00027777777778, "commitsDetails": []}, {"title": "Order of invoking FlatFileHeaderCallBack and ItemWriterListener. [BATCH-2733]", "body": "**[Stanislav](https://jira.spring.io/secure/ViewProfile.jspa?name=serdiuk)** opened **[BATCH-2733](https://jira.spring.io/browse/BATCH-2733?redirect=false)** and commented\n\nI use FlatFileItemWriter for recording data to file. But i want to write dynamic header depending on coming data for my file.\u00a0I am trying to use combination with two interface: FlatFileHeaderCallback and ItemWriterListener. I have two problems.\n\nFirst, if class is implementing two interface FlatFileHeaderCallback and ItemWriterListeners, the listener does not invoke.\n\n```java\n@Component\npublic class TestListennerCallBack implements ItemWriteListener<String>, FlatFileHeaderCallback{\n   @Override\n   public void writeHeader(Writer writer) throws IOException {\n      System.out.println(\"Initializing header\");\n   }\n\n   @Override\n   public void beforeWrite(List<? extends String> items) {\n      System.out.println(\"Hello from writer listener\");\n   }\n\n   @Override\n   public void afterWrite(List<? extends String> items) {\n\n   }\n\n   @Override\n   public void onWriteError(Exception exception, List<? extends String> items) {\n\n   }\n}\n\n.....\n\nreturn stepBuilderFactory.get(\"testStep\")\n      .<String, String>chunk(1000)\n      .reader(reader)\n      .writer(writer)\n      .listener(callback)\n      .build();\n```\n\n\u00a0\n\nSecond, if i create two different classes implementing this interfaces and add these components where they are needed, the first invoking will be header callback. And second will be writer listener. The order is very important for me. Because, i want to initialize header string depending on data into listener. And than write this string into headercall back.\u00a0I was sure that itemwritelistener will be invoke first. Why is it not so? Or is any way to initialize header?\n\n\n---\nNo further details from [BATCH-2733](https://jira.spring.io/browse/BATCH-2733?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/872", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2018-07-02 12:38:02", "closed": "2018-07-02 14:29:44", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "AbstractCursorItemReader doClose() method is not reentrant [BATCH-2737]", "body": "**[Tommy](https://jira.spring.io/secure/ViewProfile.jspa?name=tommy)** opened **[BATCH-2737](https://jira.spring.io/browse/BATCH-2737?redirect=false)** and commented\n\nThe following warning coming up from the `DisposableBeanAdapter`, when it tries to destroy any reader extended from the `AbstractCursorItemReader` by the auto-discovered `close()` method.\n`DisposableBeanAdapter : Invocation of destroy method 'close' failed on bean with name 'reader': org.springframework.batch.item.ItemStreamException: Error while closing item reader`\n\nSince the invocation of the `close()` method is already part of the Spring-Batch life-cycle, the `doClose()` method of this class should be reentrant.\nThe problem lies in the incomplete check around resetting the `autoCommit` state of the underlying connection, which does not respect the already closed connection.\n\nThe check should look like something similar\n\n```java\nif(this.con != null && !this.conn.isClosed()) {\n\tthis.con.setAutoCommit(this.initialConnectionAutoCommit);\n}\n```\n\n\n\n---\n\n**Affects:** 4.0.0\n\n1 votes, 2 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/868", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2018-07-08 19:19:52", "closed": "2020-03-18 20:47:54", "commits": {"999ef54328cc06153f924509e23b095384959c02": {"commitGHEventType": "referenced", "commitUser": "benas"}, "e398c3ea6590d0cb75871d79f990e6fab48414c0": {"commitGHEventType": "referenced", "commitUser": "benas"}, "4a9001ea169a75e1ca5c0f7ade1d45e51fc899a5": {"commitGHEventType": "referenced", "commitUser": "benas"}}, "ttf": 619.0002777777778, "commitsDetails": [{"commitHash": "999ef54328cc06153f924509e23b095384959c02", "commitGHEventType": "referenced", "commitUser": "benas", "commitParents": ["f94446878ba7e070c95b3b7e53d1f8491f1126c5"], "nameRev": "999ef54328cc06153f924509e23b095384959c02 tags/4.3.0-M1~51", "commitMessage": "Add extra check on connection state in AbstractCursorItemReader#doClose\n\nIssue #868\n", "commitDateTime": "2020-03-18 21:38:42", "authoredDateTime": "2020-03-18 21:38:42", "commitGitStats": [{"filePath": "spring-batch-infrastructure/src/main/java/org/springframework/batch/item/database/AbstractCursorItemReader.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AbstractCursorItemReader.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.item.database.AbstractCursorItemReader.doClose()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "e398c3ea6590d0cb75871d79f990e6fab48414c0", "commitGHEventType": "referenced", "commitUser": "benas", "commitParents": ["1a6ecfdb5d7a86fc0c674dfd73d830e64a5aa53a"], "nameRev": "e398c3ea6590d0cb75871d79f990e6fab48414c0 tags/4.2.2.RELEASE~6", "commitMessage": "Add extra check on connection state in AbstractCursorItemReader#doClose\n\nIssue #868\n", "commitDateTime": "2020-03-18 21:48:46", "authoredDateTime": "2020-03-18 21:38:42", "commitGitStats": [{"filePath": "spring-batch-infrastructure/src/main/java/org/springframework/batch/item/database/AbstractCursorItemReader.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AbstractCursorItemReader.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.item.database.AbstractCursorItemReader.doClose()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "4a9001ea169a75e1ca5c0f7ade1d45e51fc899a5", "commitGHEventType": "referenced", "commitUser": "benas", "commitParents": ["abe29ad376219a99850f04a7f591fcbbfc61b6e9"], "nameRev": "4a9001ea169a75e1ca5c0f7ade1d45e51fc899a5 tags/4.1.4.RELEASE~4", "commitMessage": "Add extra check on connection state in AbstractCursorItemReader#doClose\n\nIssue #868\n", "commitDateTime": "2020-03-18 21:52:04", "authoredDateTime": "2020-03-18 21:38:42", "commitGitStats": [{"filePath": "spring-batch-infrastructure/src/main/java/org/springframework/batch/item/database/AbstractCursorItemReader.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AbstractCursorItemReader.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.item.database.AbstractCursorItemReader.doClose()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["999ef54328cc06153f924509e23b095384959c02"], "filteredCommitsReason": {"duplicated": 2, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-batch-infrastructure/src/main/java/org/springframework/batch/item/database"], "changesInPackagesSPOON": ["org.springframework.batch.item.database.AbstractCursorItemReader.doClose()"]}, {"title": "FlatFileItemReaderBuilder class - TAB character is not set as a delimiter [BATCH-2738]", "body": "**[Valentin CHIVU](https://jira.spring.io/secure/ViewProfile.jspa?name=vchivu)** opened **[BATCH-2738](https://jira.spring.io/browse/BATCH-2738?redirect=false)** and commented\n\nHi Spring Batch Team,\n\nMy name is Valentin, I am from Romania, I am Java Application Developer and I work for a project by using Spring Batch Core framework.\nMy project requires to create a batch which reads data from a simple flat file with TAB character as a field separator.\n\nI use your new feature Spring Batch Core 4 class\u00a0**org.springframework.batch.item.file.builder.FlatFileItemReaderBuilder.DelimitedBuilder<T>**. In my code, I want to set the TAB delimiter by the next sequence:\n\nFlatFileItemReaderBuilder\\<MyData> flatFileItemReaderBuilder = new FlatFileItemReaderBuilder<>();\nFlatFileItemReaderBuilder.DelimitedBuilder\\<MyData> flatFileItemReaderBuilderDelimited = flatFileItemReaderBuilder.delimited();\nflatFileItemReaderBuilderDelimited.delimiter(DelimitedLineTokenizer.DELIMITER_TAB);\n// flatFileItemReaderBuilderDelimited.delimiter(\"\\t\");\n\nI've found\u00a0**+the TAB character is not set as a delimiter+**\u00a0on the field\u00a0**org.springframework.batch.item.file.builder.FlatFileItemReaderBuilder.DelimitedBuilder.delimiter**. I've found that, in general, the delimiter is set by the method\u00a0**org.springframework.batch.item.file.builder.FlatFileItemReaderBuilder.DelimitedBuilder.build()**\u00a0at line 631, by the sequence:\n\u00a0\nif(StringUtils.hasText(this.delimiter)) {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tokenizer.setDelimiter(this.delimiter);\n}\n\nHere the delimiter is checked against the method\u00a0**org.springframework.util.StringUtils.hasText(String)**. According to the hasText() method specification, \"this method returns true if the String is not null, its length is greater than 0, and it contains at least one non-whitespace character.\" But in the case of TAB character, the string contains only one character (i.e. TAB character) which is a whitespace character, thus the condition is not valid, and the TAB character is not set as a delimiter.\n\nPlease correct me if I am wrong. As long as\u00a0**DelimitedLineTokenizer.DELIMITER_TAB**\u00a0constant exists, to exclude the TAB character was not an intention, and maybe this is a bug.\u00a0\n\u00a0\nI think the class\u00a0**FlatFileItemReaderBuilder**\u00a0is a very good idea. I have already used this class for other separators. I am looking forward to your feedback.\n\nP.S. For the moment, I have solved the problem by using the classic Spring Batch 3 style.\n\nBest Regards,\nValentin CHIVU\nJava Developer\nRomania\n\n\n---\n\n**Affects:** 4.0.1\n\n**Reference URL:** https://stackoverflow.com/questions/51738718/flatfileitemreader-tab-delimiter-not-working\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/626, and commits https://github.com/spring-projects/spring-batch/commit/b11d49afd379ba112c46ec20dafb530c35ddb0df, https://github.com/spring-projects/spring-batch/commit/80d1a24f5287e1c26eaf264c49e0088412a9451b\n\n**Backported to:** [4.1.0.M3](https://github.com/spring-projects/spring-batch/milestone/95?closed=1), [4.0.2](https://github.com/spring-projects/spring-batch/milestone/91?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/866", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2018-07-08 19:50:39", "closed": "2018-08-31 17:24:25", "commits": {}, "ttf": 53.000277777777775, "commitsDetails": []}, {"title": "@Retryable does not work when component passed to Async Configuration [BATCH-2739]", "body": "**[Chris](https://jira.spring.io/secure/ViewProfile.jspa?name=springtings)** opened **[BATCH-2739](https://jira.spring.io/browse/BATCH-2739?redirect=false)** and commented\n\nFirstly, I'm sorry if this is the wrong way to create an issue in Spring.\u00a0\n\nThe following doesn't seem like expected behavior.\n\n\u00a0\n\nWhen I pass a component that has a `@Retryable` annotated method to\u00a0\n\nan async uncaught exception handler, the retryable doesn't work. When I debug\n\nI can see that there is no proxy object setup for the passed component.\n\nThe component is injected in the constructor of the async uncaught exception handler.\n\nIf I use `@Lazy` for the parameter, then everything is okay. Or if I use a setter method instead\n\nof constructor, then everything works.\n\nI'm attaching a sample main directory of the project.\u00a0\n\n\u00a0\n\nRepro Steps.\n\n1.)\u00a0 put break point at line 22 in TestScheduledTasks.java\n\n2.) put break point at line 15 in TestChrisComponent.java\n\n3.) Debug run the app.\n\n4.) when the debugger goes to break point 1), if you step forward, you should see no proxy\n\non the way to break point 2)\n\n5.) Add `@Lazy` to TestChrisComponent on line 19 in AsyncConfigurer.java\n\n\u00a0\n\nRepeat Step 3, and now you should see a proxy called.\n\n\u00a0\n\n\u00a0\n\nThanks!\n\n\u00a0\n\n\n---\n\n**Attachments:**\n- [main.zip](https://jira.spring.io/secure/attachment/25764/main.zip) (_3.27 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/865", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2018-07-09 12:29:30", "closed": "2020-02-27 13:51:47", "commits": {}, "ttf": 598.0002777777778, "commitsDetails": []}, {"title": "Job Parameter Overwrite Issue [BATCH-2741]", "body": "**[jojoldu](https://jira.spring.io/secure/ViewProfile.jspa?name=jojoldu)** opened **[BATCH-2741](https://jira.spring.io/browse/BATCH-2741?redirect=false)** and commented\n\nHi\r\nUpdate to Spring Boot 2.0 and use Spring Boot Batch.\r\nBut I have a part that works differently than Sprinb Boot 1.5 (Spring Batch 3.0).\r\n(Maybe the bug is right)\n\nAs far as I know, if there is a failed history in Spring Batch, when the same batch job is run\r\nI know that you are using the job parameter of the failed job.\r\nHowever, I know that if the same key and another value are passed to the Job parameter, it will be executed with the new value replaced.\n\nBut now it is not the latest version.\r\nIf there is a failure, the new value of the same key is not changed, and the job parameter of the failed job is always used.\n\nSo, if you use the latest version of Batch now, you should always delete the job meta table if there are any jobs that failed.\r\nOtherwise, no matter how you change the Job parameter, only the old failed Job parameter will be used.\n\nI found a problem in the Spring Batch code and sent a\u00a0[PR](https://github.com/spring-projects/spring-batch/pull/625).\n\n\n---\n\n**Affects:** 4.0.1\n\n**Issue Links:**\n- [BATCH-2711](https://jira.spring.io/browse/BATCH-2711) Existing failed job is restarted, even if new job contains different job parameters\n (_**\"duplicates\"**_)\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/625\n", "url": "https://github.com/spring-projects/spring-batch/issues/863", "user": "spring-issuemaster", "labels": ["status: duplicate", "type: bug"], "created": "2018-08-08 23:27:43", "closed": "2018-09-19 02:35:20", "commits": {}, "ttf": 41.000277777777775, "commitsDetails": []}, {"title": "MongoItemReader (AbstractPaginatedDataItemReader) doesnt skip correctly on multi reading context [BATCH-2742]", "body": "**[fawzi1414](https://jira.spring.io/secure/ViewProfile.jspa?name=fawzi1414)** opened **[BATCH-2742](https://jira.spring.io/browse/BATCH-2742?redirect=false)** and commented\n\nWhen using MongoItemReader (AbstractPaginatedDataItemReader) in a multi reading context\u00a0 (multi partition or multi thread)\u00a0\n\u00a0\u00a0\nThe jumpToItem doesn't save the page number nor the offset in the same page, or we lose it after method call, so each thread or partition will read from the 0 position which is incorrect .\n\u00a0\ni think that the correction must be done on\u00a0AbstractPaginatedDataItemReader and not on\u00a0MongoItemReader.\n\u00a0\n\u00a0\n\u00a0\nUse case: multi threading or patition context\n\u00a0\nreading\u00a0 a collection with 24 documents,\nTwo thread:\n1st thread(currentItemCount=0,\u00a0maxItemCount=12)\n2nd thread(currentItemCount=12,\u00a0maxItemCount=24)\npage size 10, each thread will read 12 documents.\n\u00a0\n\u00a0\nThe first thread will read correctly.\n\u00a0\nThe second thread\u00a0will read the elements from 10 to 24, because even we call the\u00a0 jumpToItem function\u00a0 ( jump to the second page (since the page size is 10) and skip the first 2 documents), we dont save the state.\n\u00a0\nSo the jump to count state must be saved (page ++ and save the iterator)\n\n\n---\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/628\n", "url": "https://github.com/spring-projects/spring-batch/issues/862", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2018-08-13 17:03:28", "closed": "2020-02-27 14:07:58", "commits": {}, "ttf": 562.0002777777778, "commitsDetails": []}, {"title": "Multithreaded step with Skip limit and throttle limit [BATCH-2744]", "body": "**[Madhusudhanan](https://jira.spring.io/secure/ViewProfile.jspa?name=madhu1991)** opened **[BATCH-2744](https://jira.spring.io/browse/BATCH-2744?redirect=false)** and commented\n\n\u00a0\r\nI have Multi-threaded Step with a throttle limit as 10(assume) and the skip limit for the job is been configured as 5. My input file which has 20 records, have more than 10 invalid records in it. In this case whenever my job fails, it doesn't fail when it reaches 5 negative cases. It stops somewhere around 12 or 13th failure.\n\n\n---\nNo further details from [BATCH-2744](https://jira.spring.io/browse/BATCH-2744?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/860", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2018-08-22 11:01:30", "closed": "2020-02-27 15:27:00", "commits": {}, "ttf": 554.0002777777778, "commitsDetails": []}, {"title": "java.lang.IllegalStateException: Failed to execute CommandLineRunner at org.springframework.boot.SpringApplication.callRunne [BATCH-2746]", "body": "**[Prateek](https://jira.spring.io/secure/ViewProfile.jspa?name=prateek512)** opened **[BATCH-2746](https://jira.spring.io/browse/BATCH-2746?redirect=false)** and commented\r\n\r\nI am developing Spring Boot + Batch XML based approach. While running the code, I get the below error.\r\n\u00a0\r\n\\{{}}\r\n\r\n```java\r\njava.lang.IllegalStateException: Failed to execute CommandLineRunner \r\n    at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:803) [spring-boot-2.0.4.RELEASE.jar:2.0.4.RELEASE] \r\n    at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:784) [spring-boot-2.0.4.RELEASE.jar:2.0.4.RELEASE] \r\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:338) [spring-boot-2.0.4.RELEASE.jar:2.0.4.RELEASE] \r\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:1258) [spring-boot-2.0.4.RELEASE.jar:2.0.4.RELEASE] \r\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:1246) [spring-boot-2.0.4.RELEASE.jar:2.0.4.RELEASE] \r\n    at com.mastercard.EdsjpaApplication.main(EdsjpaApplication.java:23) [classes/:na] \r\nCaused by: java.lang.NullPointerException: null \r\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_162] \r\n    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) ~[na:1.8.0_162] at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[na:1.8.0_162] \r\n    at java.lang.reflect.Method.invoke(Unknown Source) ~[na:1.8.0_162] \r\n    at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343) ~[spring-aop-5.0.8.RELEASE.jar:5.0.8.RELEASE] \r\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:197) ~[spring-aop-5.0.8.RELEASE.jar:5.0.8.RELEASE] \r\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.0.8.RELEASE.jar:5.0.8.RELEASE] \r\n    at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127) ~[spring-batch-core-4.0.1.RELEASE.jar:4.0.1.RELEASE] \r\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185) ~[spring-aop-5.0.8.RELEASE.jar:5.0.8.RELEASE] \r\n    at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.0.8.RELEASE.jar:5.0.8.RELEASE] \r\n    at com.sun.proxy.$Proxy69.getJobInstances(Unknown Source) ~[na:na] \r\n    at org.springframework.batch.core.JobParametersBuilder.getNextJobParameters(JobParametersBuilder.java:254) ~[spring-batch-core-4.0.1.RELEASE.jar:4.0.1.RELEASE] \r\n    at org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner.execute(JobLauncherCommandLineRunner.java:162) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] \r\n    at org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner.executeLocalJobs(JobLauncherCommandLineRunner.java:179) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] \r\n    at org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner.launchJobFromProperties(JobLauncherCommandLineRunner.java:134) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] \r\n    at org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner.run(JobLauncherCommandLineRunner.java:128) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] \r\n    at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:800) [spring-boot-2.0.4.RELEASE.jar:2.0.4.RELEASE] \r\n    ... 5 common frames omitted\r\n```\r\n\r\n**CommonConfig.java**\r\n\u00a0\r\n\\{{}}\r\n\r\n```java\r\n@Configuration\r\n@ComponentScan(\"com.XX\")\r\n@EnableBatchProcessing\r\n@PropertySource(\"classpath:database.properties\")\r\n@ImportResource({ \"classpath:jobs/XXXX.xml\"})\r\n@EnableJpaRepositories(basePackages = {\"com.XXXX.repository\"})\r\npublic class CommonConfig implements BatchConfigurer{\r\n    private JobRepository jobRepository;\r\n    private JobLauncher jobLauncher;\r\n    private JobExplorer jobExplorer;\r\n    @Inject \r\n    private DataSource dataSource;\r\n\r\n    @Inject\r\n    private PlatformTransactionManager transactionManager;\r\n\r\n    @Override\r\n    @Bean\r\n    public JobRepository getJobRepository() throws Exception {\r\n        return jobRepository;\r\n    }\r\n\r\n    @Override\r\n    public PlatformTransactionManager getTransactionManager() throws Exception {\r\n        return transactionManager;\r\n    }\r\n\r\n    @Override\r\n    @Bean\r\n    public JobLauncher getJobLauncher() throws Exception {\r\n        return jobLauncher;\r\n    }\r\n\r\n    @Override\r\n    @Bean\r\n    public JobExplorer getJobExplorer() throws Exception {\r\n        return jobExplorer;\r\n    }\r\n\r\n    /*private JobLauncher createJobLauncher() throws Exception {\r\n        SimpleJobLauncher jobLauncher = new SimpleJobLauncher();\r\n        jobLauncher.setJobRepository(jobRepository);\r\n        jobLauncher.setTaskExecutor( new SimpleAsyncTaskExecutor());\r\n        jobLauncher.afterPropertiesSet();\r\n        return jobLauncher;\r\n    }*/\r\n\r\n    /*protected JobRepository createJobRepository() throws Exception {\r\n        JobRepositoryFactoryBean factory = new JobRepositoryFactoryBean();\r\n        factory.setIsolationLevelForCreate(\"ISOLATION_SERIALIZABLE\");\r\n        factory.setDataSource(dataSource);\r\n        factory.setTransactionManager(transactionManager);\r\n        factory.setValidateTransactionState(false);\r\n        factory.afterPropertiesSet();\r\n        return factory.getObject();\r\n    }*/\r\n\r\n    @Bean\r\n    public JobBuilderFactory jobBuilderFactory(JobRepository jobRepository){\r\n        return new JobBuilderFactory(jobRepository);\r\n    }\r\n\r\n    @Bean   \r\n    public StepBuilderFactory stepBuilderFactory(JobRepository jobRepository, PlatformTransactionManager transactionManager){\r\n        return new StepBuilderFactory(jobRepository, transactionManager);\r\n    }\r\n}\r\n```\r\n\r\nDatabaseConfig.java\r\n\r\n\u00a0\r\n\r\n```java\r\n@Configuration\r\n @Component\r\n @PropertySource(\"classpath:database.properties\")\r\n public class DatabaseConfig {\r\n @Bean(name = \"dataSource\")\r\n public DataSource dataSource() throws IOException {\r\n OracleDataSource ds = null;\r\n XXXInfoFactory userInfoFactory = new XXXInfoFactory();\r\n XXUserInfo userInfo = userInfoFactory.getXXUserInfo(value);\r\n if (userInfo != null)\r\n{ ds = getDataSource(userInfo, edsurl); }\r\nreturn ds;\r\n }\r\n }\r\n```\r\n\r\n\u00a0\r\n\r\n**MyApplication.java**\r\n\r\n```java\r\n@SpringBootApplication\r\n@EnableAutoConfiguration(exclude = {DataSourceAutoConfiguration.class})\r\npublic class MyApplication implements CommandLineRunner{\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MyApplication.class, args);\r\n    }\r\n\r\n    @Override\r\n    public void run(String... args) throws Exception {\r\n        final ConfigurableApplicationContext context = SpringApplication.run(CommonConfig.class); \r\n    }\r\n}\r\n```\r\n\r\n\u00a0\r\n\r\n{{}}\r\n\r\n\r\n---\r\nNo further details from [BATCH-2746](https://jira.spring.io/browse/BATCH-2746?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/858", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2018-08-25 13:37:43", "closed": "2020-02-27 15:51:40", "commits": {}, "ttf": 551.0002777777778, "commitsDetails": []}, {"title": "Potential security vulnerabilities based on OWASP Dependency Check [BATCH-2748]", "body": "**[Petr Dvorak](https://jira.spring.io/secure/ViewProfile.jspa?name=joshis)** opened **[BATCH-2748](https://jira.spring.io/browse/BATCH-2748?redirect=false)** and commented\n\nAfter performing an OWASP Dependency Check on our project, we have discovered that there are possible security vulnerabilities in the \"core\" project (4.0.1.RELEASE), some of them with high severity.\n\n!Screen Shot 2018-08-29 at 17.56.14.png|width=383,height=226!\n\nCould you please have a look and possibly fix the issues, at least those with the highest\u00a0severity? Or - in case these are false positives - comment on the issues?\n\n\n---\n\n**Affects:** 4.0.1\n\n**Attachments:**\n- [dependency-check-report.html](https://jira.spring.io/secure/attachment/26003/dependency-check-report.html) (_520.31 kB_)\n- [dependency-check-report-wultra.html](https://jira.spring.io/secure/attachment/26004/dependency-check-report-wultra.html) (_1.05 MB_)\n- [Screen Shot 2018-08-29 at 17.56.14.png](https://jira.spring.io/secure/attachment/26000/Screen+Shot+2018-08-29+at+17.56.14.png) (_194.25 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/856", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2018-08-29 16:00:11", "closed": "2018-08-31 15:43:15", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Property default value differs from document [BATCH-2749]", "body": "**[btnoharadik](https://jira.spring.io/secure/ViewProfile.jspa?name=btnoharadik)** opened **[BATCH-2749](https://jira.spring.io/browse/BATCH-2749?redirect=false)** and commented\n\nThe default for the  [StaxEventItemReader](https://github.com/spring-projects/spring-batch/blob/master/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/xml/StaxEventItemReader.java)'s strict property API document is false, but the default value is set to true.\n\n```java\n/**\r\n  * In strict mode the reader will throw an exception on\r\n  * {@link #open(org.springframework.batch.item.ExecutionContext)} if the input resource does not exist.\r\n  * @param strict false by default\r\n  */\r\n public void setStrict(boolean strict) {\r\n      this.strict = strict;\r\n }\r\n```\n\n```java\nprivate boolean strict = true;\r\n```\n\nDefault value is true or false Which is correct?\n\n\n\n---\n\n**Affects:** 3.0.9, 4.0.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/7a3248cabf5eb59def5a217e6d6113c5617cdf70, https://github.com/spring-projects/spring-batch/commit/c075ffcbfc64254ae2b2a997ebbce8e6f6e2af7a, https://github.com/spring-projects/spring-batch/commit/9b8a6d1d1aeec6651730520fd8174f19788e8cf8, https://github.com/spring-projects/spring-batch/commit/c96ffb4950206a818c16b2a66bfb63a45b62c674\n\n**Backported to:** [4.1.0.RC1](https://github.com/spring-projects/spring-batch/milestone/96?closed=1), [4.0.2](https://github.com/spring-projects/spring-batch/milestone/91?closed=1), [3.0.10](https://github.com/spring-projects/spring-batch/milestone/92?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/855", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2018-09-04 08:50:44", "closed": "2018-09-04 19:53:36", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "The EXIT_MESSAGE columns of BATCH_JOB_EXECUTION and BATCH_STEP_EXECUTION are defined with bytes and not characters on Oracle [BATCH-2750]", "body": "**[Hans J\u00f8rgen Hoel](https://jira.spring.io/secure/ViewProfile.jspa?name=hansjorg)** opened **[BATCH-2750](https://jira.spring.io/browse/BATCH-2750?redirect=false)** and commented\n\nWhen raising an exception with a message containing one or more of what will end up as multi byte characters in the database, Spring Batch will exit with the following exception when running against an Oracle database:\n\n```java\norg.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL [UPDATE BATCH_STEP_EXECUTION set START_TIME = ?, END_TIME = ?, STATUS = ?, COMMIT_COUNT = ?, READ_COUNT = ?, FILTER_COUNT = ?, WRITE_COUNT = ?, EXIT_CODE = ?, EXIT_MESSAGE = ?, VERSION = ?, READ_SKIP_COUNT = ?, PROCESS_SKIP_COUNT = ?, WRITE_SKIP_COUNT = ?, ROLLBACK_COUNT = ?, LAST_UPDATED = ? where STEP_EXECUTION_ID = ? and VERSION = ?]; SQL state [72000]; error code [12899]; ORA-12899: value too large for column \"TESTIMPORT\".\"BATCH_STEP_EXECUTION\".\"EXIT_MESSAGE\" (actual: 2502, maximum: 2500)\r\n; nested exception is java.sql.SQLException: ORA-12899: value too large for column \"IMPORT\".\"BATCH_STEP_EXECUTION\".\"EXIT_MESSAGE\" (actual: 2502, maximum: 2500)\tat org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:89) ~[spring-jdbc-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\r\n\tat org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81) ~[spring-jdbc-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\r\n\tat org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81) ~[spring-jdbc-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\r\n\tat org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1402) ~[spring-jdbc-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\r\n\tat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:620) ~[spring-jdbc-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\r\n\tat org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:850) ~[spring-jdbc-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\r\n\tat org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:905) ~[spring-jdbc-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\r\n\tat org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:910) ~[spring-jdbc-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\r\n\tat org.springframework.batch.core.repository.dao.JdbcStepExecutionDao.updateStepExecution(JdbcStepExecutionDao.java:245) ~[spring-batch-core-4.0.1.RELEASE.jar!/:4.0.1.RELEASE]\r\n\tat org.springframework.batch.core.repository.support.SimpleJobRepository.update(SimpleJobRepository.java:195) ~[spring-batch-core-4.0.1.RELEASE.jar!/:4.0.1.RELEASE]\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]\r\n\tat java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]\r\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343) [spring-aop-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\r\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:197) [spring-aop-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\r\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\r\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294) ~[spring-tx-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\r\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98) ~[spring-tx-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\r\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185) [spring-aop-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\r\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) [spring-aop-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\r\n\tat com.sun.proxy.$Proxy47.update(Unknown Source) ~[na:na]\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]\r\n\tat java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]\r\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343) [spring-aop-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\r\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:197) [spring-aop-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\r\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\r\n\tat org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127) [spring-batch-core-4.0.1.RELEASE.jar!/:4.0.1.RELEASE]\r\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185) [spring-aop-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\r\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) [spring-aop-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\r\n\tat com.sun.proxy.$Proxy47.update(Unknown Source) ~[na:na]\r\n\tat org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:260) ~[spring-batch-core-4.0.1.RELEASE.jar!/:4.0.1.RELEASE]\r\n\tat org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148) [spring-batch-core-4.0.1.RELEASE.jar!/:4.0.1.RELEASE]\r\n\tat org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:66) [spring-batch-core-4.0.1.RELEASE.jar!/:4.0.1.RELEASE]\r\n\tat org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:67) [spring-batch-core-4.0.1.RELEASE.jar!/:4.0.1.RELEASE]\r\n\tat org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:169) [spring-batch-core-4.0.1.RELEASE.jar!/:4.0.1.RELEASE]\r\n\tat org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:144) [spring-batch-core-4.0.1.RELEASE.jar!/:4.0.1.RELEASE]\r\n\tat org.springframework.batch.core.job.flow.support.state.FlowState.handle(FlowState.java:56) [spring-batch-core-4.0.1.RELEASE.jar!/:4.0.1.RELEASE]\r\n\tat org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:169) [spring-batch-core-4.0.1.RELEASE.jar!/:4.0.1.RELEASE]\r\n\tat org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:144) [spring-batch-core-4.0.1.RELEASE.jar!/:4.0.1.RELEASE]\r\n\tat org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:136) [spring-batch-core-4.0.1.RELEASE.jar!/:4.0.1.RELEASE]\r\n\tat org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:308) [spring-batch-core-4.0.1.RELEASE.jar!/:4.0.1.RELEASE]\r\n\tat org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:141) [spring-batch-core-4.0.1.RELEASE.jar!/:4.0.1.RELEASE]\r\n\tat org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50) [spring-core-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\r\n\tat org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:134) [spring-batch-core-4.0.1.RELEASE.jar!/:4.0.1.RELEASE]\r\n\r\n \n```\n\nThe columns are define like this in schema-oracle10g.sql:\n\n```java\nEXIT_MESSAGE VARCHAR2(2500) \r\n```\n\nThis creates a column that can hold 2500 bytes. Changing to char solves the problem:\n\n```java\nEXIT_MESSAGE VARCHAR2(2500 char)\r\n```\n\n\n\n---\n\n**Affects:** 3.0.9, 4.0.1, 4.1.0.RC1\n\n**Issue Links:**\n- [BATCH-2091](https://jira.spring.io/browse/BATCH-2091) Declare DDL with VARCHAR( n char)\n (_**\"duplicates\"**_)\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/222\n", "url": "https://github.com/spring-projects/spring-batch/issues/854", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2018-09-05 09:28:16", "closed": "2018-10-03 09:18:00", "commits": {}, "ttf": 27.00027777777778, "commitsDetails": []}, {"title": "JsonFileItemWriter writes invalid json when write method called few times in a row. [BATCH-2752]", "body": "**[gd-estrepetov](https://jira.spring.io/secure/ViewProfile.jspa?name=gd-estrepetov)** opened **[BATCH-2752](https://jira.spring.io/browse/BATCH-2752?redirect=false)** and commented\n\nJsonFileItemWriter adds unnecessary \",\" when data is written in chunks to json file.\n\nCode to reproduce:\n\n```java\nList<String> firstList = Arrays.asList(\"one\", \"two\");\r\nList<String> secondList = Arrays.asList(\"three\", \"four\");\r\n\r\nJsonFileItemWriter<String> writer = new JsonFileItemWriterBuilder<String>()\r\n        .name(\"writer\")\r\n        .resource(new FileSystemResource(\"test.json\"))\r\n        .jsonObjectMarshaller(new JacksonJsonObjectMarshaller<>())\r\n        .build();\r\n\r\nwriter.open(new ExecutionContext());\r\nwriter.write(firstList);\r\nwriter.write(secondList);\r\n\r\nwriter.close();\r\n```\n\nResult:\n\n```java\n[\r\n \"one\",\r\n \"two\",\r\n \"three\",\r\n,\r\n \"four\"\r\n]\r\n```\n\n\n\n---\n\n**Affects:** 4.1.0.M3\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/636\n\n**Backported to:** [4.1.0.RC1](https://github.com/spring-projects/spring-batch/milestone/96?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/852", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2018-09-05 23:45:36", "closed": "2018-09-12 22:43:38", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "Thread interference in Partition [BATCH-2753]", "body": "**[ANUJ KHARE](https://jira.spring.io/secure/ViewProfile.jspa?name=anujkhare)** opened **[BATCH-2753](https://jira.spring.io/browse/BATCH-2753?redirect=false)** and commented\n\nI have created a Master slave Partition pattern in Spring batch using various blogs and Spring manual. It works perfectly fine in partitioning using FlatFileItemReader, ItemProcessor and writing to various files created by FlatFileItemWriter. Correct number of output files as per partitions are created and most of the files have correct output data, EXCEPT SOME,... WHERE THE RECORDS FROM OTHER PARTITION HAVE BEEN WRITTEN IN OTHER PARTITION. SAY THE IDS IN EACH LINE REPRESENTS LINE NUMBER AND HAVE RANGE OF RECORDS TO BE WRITTEN IN EACH FILE IS 10, SO IN 4TH PARTITION THE RECORDS SHOULD BE 41 TO 50, BUT THERE IS A THREAD INTERFERENCE AND VALUES ARE LIKE 41,42,100,44,45...\n\nSO ONE RECORD IS BEING PICKED BY THE SAME THREAD WHICH IS HOLDING THE PARTITION. NOT sure how?.\n\nI have tried to make everything synchronized as well, the ItemReader, Writer, Processor, Input, Output, but still suppose a Thread T1 is working on Partition P1, then range of that partition has to be processed, rather this I see in some partitions one record is sneaking in from other partition, picked by same Thread T1. QUITE STRANGE.\n\n\n---\n\n**Attachments:**\n- [Main Logic in Partitioner.PNG](https://jira.spring.io/secure/attachment/26014/Main+Logic+in+Partitioner.PNG) (_14.62 kB_)\n- [Master and Slave Partitioner.PNG](https://jira.spring.io/secure/attachment/26015/Master+and+Slave+Partitioner.PNG) (_30.27 kB_)\n- [Reader Writer.PNG](https://jira.spring.io/secure/attachment/26013/Reader+Writer.PNG) (_42.28 kB_)\n\n1 votes, 3 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/851", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2018-09-07 10:47:15", "closed": "2020-02-27 16:07:29", "commits": {}, "ttf": 538.0002777777778, "commitsDetails": []}, {"title": "The Javadoc on DelimitedLineTokenizer#substringWithTrimmedWhitespaceAndQuotesIfQuotesPresent is wrong [BATCH-2758]", "body": "**[bpagnier](https://jira.spring.io/secure/ViewProfile.jspa?name=bpagnier)** opened **[BATCH-2758](https://jira.spring.io/browse/BATCH-2758?redirect=false)** and commented\n\nNevermind, the Javadoc is clear I just didn't understand it correctly.\r\nYou can close the ticket !\n\n\n---\n\n**Affects:** 4.1.0.M3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/2d7caa322249789056a70951f59d852f075a0f2f, https://github.com/spring-projects/spring-batch/commit/96e6ae2fb5e5a4f8a329bd4699926551b2d86871\n\n**Backported to:** [4.2.0.M1](https://github.com/spring-projects/spring-batch/milestone/99?closed=1), [4.1.1](https://github.com/spring-projects/spring-batch/milestone/98?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/846", "user": "spring-issuemaster", "labels": ["has: backports", "in: documentation", "type: bug"], "created": "2018-09-13 15:06:46", "closed": "2019-01-10 15:13:01", "commits": {}, "ttf": 119.00027777777778, "commitsDetails": []}, {"title": "Failed JobExecution due to unavailable TaskExecutor leaves End Time unpopulated [BATCH-2760]", "body": "**[Dimitrios Liapis](https://jira.spring.io/secure/ViewProfile.jspa?name=dimitrisli)** opened **[BATCH-2760](https://jira.spring.io/browse/BATCH-2760?redirect=false)** and commented\n\nWhile executing [SimpleJobLauncher#run()](https://github.com/spring-projects/spring-batch/blob/547533fab072289c062916e51c589de36ea3dfe2/spring-batch-core/src/main/java/org/springframework/batch/core/launch/support/SimpleJobLauncher.java#L90) assuming that the [taskExecutor](https://github.com/spring-projects/spring-batch/blob/547533fab072289c062916e51c589de36ea3dfe2/spring-batch-core/src/main/java/org/springframework/batch/core/launch/support/SimpleJobLauncher.java#L134) cannot pick up the submitted Job Execution then a [TaskRejectedException](https://github.com/spring-projects/spring-batch/blob/547533fab072289c062916e51c589de36ea3dfe2/spring-batch-core/src/main/java/org/springframework/batch/core/launch/support/SimpleJobLauncher.java#L164) will be thrown [setting the Job Execution's status to FAILED](https://github.com/spring-projects/spring-batch/blob/547533fab072289c062916e51c589de36ea3dfe2/spring-batch-core/src/main/java/org/springframework/batch/core/launch/support/SimpleJobLauncher.java#L165)\n\n\u00a0\n\nOn the other hand when querying the JobExplorer via [SimpleJobExplorer#findRunningJobExecutions()](https://github.com/spring-projects/spring-batch/blob/148a93e7b4c0e0116b0a61b7530b1a62c32ec919/spring-batch-core/src/main/java/org/springframework/batch/core/explore/support/SimpleJobExplorer.java#L101) for running Job Executions the query that is issues is taking a decision expecting the **END TIME** to be null:\n\n[JDBC call](https://github.com/spring-projects/spring-batch/blob/3a2fc7d2ee2271d4bfda460139f454ddc35a4fa6/spring-batch-core/src/main/java/org/springframework/batch/core/repository/dao/JdbcJobExecutionDao.java#L299)\n\n[Query link](https://github.com/spring-projects/spring-batch/blob/3a2fc7d2ee2271d4bfda460139f454ddc35a4fa6/spring-batch-core/src/main/java/org/springframework/batch/core/repository/dao/JdbcJobExecutionDao.java#L87-L88)\u00a0\n\nor also quoted here:\n\n`SELECT E.JOB_EXECUTION_ID, E.START_TIME, E.END_TIME, E.STATUS, E.EXIT_CODE, E.EXIT_MESSAGE, E.CREATE_TIME, E.LAST_UPDATED, E.VERSION, E.JOB_INSTANCE_ID, E.JOB_CONFIGURATION_LOCATION from %PREFIX%JOB_EXECUTION E, %PREFIX%JOB_INSTANCE I where E.JOB_INSTANCE_ID=I.JOB_INSTANCE_ID and I.JOB_NAME=? *and E.END_TIME is NULL* order by E.JOB_EXECUTION_ID desc`\n\n\u00a0\n\nWe can fix that by either:\n\n\u00a0\n1. Enhancing the [GET_RUNNING_EXECUTIONS](https://github.com/spring-projects/spring-batch/blob/3a2fc7d2ee2271d4bfda460139f454ddc35a4fa6/spring-batch-core/src/main/java/org/springframework/batch/core/repository/dao/JdbcJobExecutionDao.java#L87-L88) query to also taking into account the above case\n2. or set the End Time directly when updating the Job Execution to FAILED Batch Status [here](https://github.com/spring-projects/spring-batch/blob/547533fab072289c062916e51c589de36ea3dfe2/spring-batch-core/src/main/java/org/springframework/batch/core/launch/support/SimpleJobLauncher.java#L165-L166)\n\n\u00a0\n\nWhat do you think? I can submit a PR for either case.\n\n\n---\n\n**Affects:** 3.0.9, 4.0.1, 4.1.0.RC1\n\n**Issue Links:**\n- [BATCH-2675](https://jira.spring.io/browse/BATCH-2675) Rejected Job can not be restarted\n (_**\"duplicates\"**_)\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/643\n", "url": "https://github.com/spring-projects/spring-batch/issues/844", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2018-09-25 15:24:55", "closed": "2018-10-18 22:26:09", "commits": {}, "ttf": 23.00027777777778, "commitsDetails": []}, {"title": "Incorrect @Nullable on StepListenerSupport#afterRead [BATCH-2763]", "body": "**[Mahmoud Ben Hassine](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenhassine)** opened **[BATCH-2763](https://jira.spring.io/browse/BATCH-2763?redirect=false)** and commented\n\n`org.springframework.batch.core.listener.StepListenerSupport#afterRead` declares the item to be nullable while `org.springframework.batch.core.ItemReadListener#afterRead` clearly says that the method will be called only for actual items, but not when the reader returns null. This is confirmed in the code of `SimpleChunkProvider`:\n\n```java\n/**\r\n * Surrounds the read call with listener callbacks.\r\n * @return the item or {@code null} if the data source is exhausted\r\n * @throws Exception is thrown if error occurs during read.\r\n */\r\n@Nullable\r\nprotected final I doRead() throws Exception {\r\n\ttry {\r\n\t\tlistener.beforeRead();\r\n\t\tI item = itemReader.read();\r\n\t\tif(item != null) {\r\n\t\t\tlistener.afterRead(item);\r\n\t\t}\r\n\t\treturn item;\r\n\t}\r\n\tcatch (Exception e) {\r\n\t\tif (logger.isDebugEnabled()) {\r\n\t\t\tlogger.debug(e.getMessage() + \" : \" + e.getClass().getName());\r\n\t\t}\r\n\t\tlistener.onReadError(e);\r\n\t\tthrow e;\r\n\t}\r\n}\r\n```\n\n\n\n---\n\n**Affects:** 4.1.0.RC1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/76f8cad29aaf881c50c2d9b9ca0967828f385eb4\n", "url": "https://github.com/spring-projects/spring-batch/issues/841", "user": "spring-issuemaster", "labels": ["in: core", "type: bug"], "created": "2018-10-13 10:12:48", "closed": "2018-10-24 13:39:55", "commits": {}, "ttf": 11.000277777777777, "commitsDetails": []}, {"title": "Test [BATCH-2777]", "body": "**[payal](https://jira.spring.io/secure/ViewProfile.jspa?name=bansal)** opened **[BATCH-2777](https://jira.spring.io/browse/BATCH-2777?redirect=false)** and commented\n\n\n---\nNo further details from [BATCH-2777](https://jira.spring.io/browse/BATCH-2777?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/828", "user": "spring-issuemaster", "labels": ["status: invalid", "type: bug"], "created": "2018-12-06 16:20:06", "closed": "2018-12-06 16:39:40", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "JdbcExecutionContextDao#afterPropertiesSet misses null ExecutionContextSerializer [BATCH-2779]", "body": "**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[BATCH-2779](https://jira.spring.io/browse/BATCH-2779?redirect=false)** and commented\n\nWhile normal creation of the `JdbcExecutionContextDao`\u00a0is handled by the `FactoryBean` implementations for the `JobRepository` and `JobExplorer`, the call to `afterPropertiesSet` does not confirm that the object created is completely valid.\u00a0 Specifically it does not validate that the `ExecutionContextSerializer`\u00a0is not null.\n\n\n---\n\n**Affects:** 4.0.0, 3.0.9\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/673\n\n**Backported to:** [4.1.1](https://github.com/spring-projects/spring-batch/milestone/98?closed=1), [4.0.2](https://github.com/spring-projects/spring-batch/milestone/91?closed=1), [3.0.10](https://github.com/spring-projects/spring-batch/milestone/92?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/826", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2018-12-10 23:24:49", "closed": "2019-01-29 08:17:31", "commits": {}, "ttf": 49.000277777777775, "commitsDetails": []}, {"title": "Connection closed for UPDATE BATCH_STEP_EXECUTION_CONTEXT [BATCH-2781]", "body": "**[gvemula](https://jira.spring.io/secure/ViewProfile.jspa?name=gvemula)** opened **[BATCH-2781](https://jira.spring.io/browse/BATCH-2781?redirect=false)** and commented\n\nWe are facing next error while updating tables. have anyone come across this?\n\nWe are using weblogic.\n\nERROR - JobRepository failure forcing exit with unknown status\r\norg.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL [UPDATE BATCH_STEP_EXECUTION_CONTEXT SET SHORT_CONTEXT = ?, SERIALIZED_CONTEXT = ? WHERE STEP_EXECUTION_ID = ?]; SQL state [null]; error code [0]; Connection closed; nested exception is java.sql.SQLException: Connection closed\r\nat org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:83)\r\nat org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80)\r\nat org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80)\r\nat org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:605)\r\nat org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:818)\r\nat org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:874)\r\nat org.springframework.batch.core.repository.dao.JdbcExecutionContextDao.persistSerializedContext(JdbcExecutionContextDao.java:230)\r\nat org.springframework.batch.core.repository.dao.JdbcExecutionContextDao.updateExecutionContext(JdbcExecutionContextDao.java:159)\r\nat org.springframework.batch.core.repository.support.SimpleJobRepository.updateExecutionContext(SimpleJobRepository.java:203)\r\nat sun.reflect.GeneratedMethodAccessor1864.invoke(Unknown Source)\r\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\nat java.lang.reflect.Method.invoke(Method.java:498)\r\nat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317)\r\nat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)\r\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)\n\n\n---\n\n**Attachments:**\n- [spring-batch-log.txt](https://jira.spring.io/secure/attachment/27361/spring-batch-log.txt) (_17.61 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/823", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2018-12-20 02:02:30", "closed": "2019-07-04 08:23:29", "commits": {}, "ttf": 196.00027777777777, "commitsDetails": []}, {"title": "Incorrect error message when an exception is thrown in JobExecutionListener#afterJob [BATCH-2782]", "body": "**[Mahmoud Ben Hassine](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenhassine)** opened **[BATCH-2782](https://jira.spring.io/browse/BATCH-2782?redirect=false)** and commented\n\nWhen a runtime exception is thrown in `org.springframework.batch.core.JobExecutionListener#afterJob`, the error message in the log is:\n\n```\nException encountered in afterStep callback\r\n```\n\nwhile it should be\n\n```\nException encountered in afterJob callback\r\n```\n\nHere is an example:\n\n```java\n//create job repository\r\nJobRepository jobRepository = new MapJobRepositoryFactoryBean().getObject();\r\n\r\n// create job\r\nAbstractJob job = new AbstractJob(\"myJob\") {\r\n\r\n\t@Override\r\n\tpublic Step getStep(String stepName) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic Collection<String> getStepNames() {\r\n\t\treturn Collections.emptyList();\r\n\t}\r\n\r\n\t@Override\r\n\tprotected void doExecute(JobExecution jobExecution) {\r\n\t\tSystem.out.println(\"executing job\");\r\n\t\tjobExecution.setStatus(BatchStatus.COMPLETED);\r\n\t\tjobExecution.setExitStatus(ExitStatus.COMPLETED);\r\n\t}\r\n\r\n\r\n};\r\njob.setJobRepository(jobRepository);\r\njob.registerJobExecutionListener(new JobExecutionListener() {\r\n\t@Override\r\n\tpublic void beforeJob(JobExecution jobExecution) {\r\n\t\tSystem.out.println(\"before job\");\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void afterJob(JobExecution jobExecution) {\r\n\t\tSystem.out.println(\"after job\");\r\n\t\tthrow new RuntimeException(\"Boom!\");\r\n\t}\r\n});\r\njob.afterPropertiesSet();\r\n\r\n// execute job\r\nJobExecution jobExecution = jobRepository.createJobExecution(\"myJob\", new JobParameters());\r\njob.execute(jobExecution);\r\n\r\n// prints:\r\n// before job\r\n// executing job\r\n// after job\r\n// Exception encountered in afterStep callback\r\n```\n\nThe job has no steps (which is completely valid) and the error message is obviously incorrect.\n\nBTW, errors [are handled for `JobExecutionListener#afterJob`](https://github.com/spring-projects/spring-batch/blob/master/spring-batch-core/src/main/java/org/springframework/batch/core/job/AbstractJob.java#L358-L362) but [not for `JobExecutionListener#beforeJob`](https://github.com/spring-projects/spring-batch/blob/master/spring-batch-core/src/main/java/org/springframework/batch/core/job/AbstractJob.java#L310) in `AbstractJob`. Errors in the `beforeJob` methods should also be logged for consistency.\n\n\n---\n\n**Affects:** 4.0.1, 4.1.0\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/30365edf589436ef5f7978bd97979fb608a15624, https://github.com/spring-projects/spring-batch/commit/2eb77c29bae1d637a8ab38c98c41f83984e67284, https://github.com/spring-projects/spring-batch/commit/bf06ca5438d1e1bf4bf7aad4f2db427999a748fa\n\n**Backported to:** [4.2.0.M1](https://github.com/spring-projects/spring-batch/milestone/99?closed=1), [4.1.2](https://github.com/spring-projects/spring-batch/milestone/101?closed=1), [4.0.3](https://github.com/spring-projects/spring-batch/milestone/100?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/822", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2019-01-04 13:45:05", "closed": "2019-04-02 08:25:33", "commits": {}, "ttf": 87.00027777777778, "commitsDetails": []}, {"title": "JobLauncherTestUtils doesn't always launch new job instance because generated job parameters aren't unique [BATCH-2783]", "body": "**[saikatbhadra](https://jira.spring.io/secure/ViewProfile.jspa?name=saikatbhadra)** opened **[BATCH-2783](https://jira.spring.io/browse/BATCH-2783?redirect=false)** and commented\r\n\r\nWe noticed that our integration tests for a batch job (with many tests) were failing intermittently.\u00a0 After debugging, I found that JobLauncherTestUtils.launchJob was\u00a0occasionally relaunching the same job instance. After looking at the code, I saw that a random number generator was being used which does not guarantee that the number generate would be unique. I believe a UUID would be more appropriate as strongly guarantees that an ID does not repeat (except in highly exceptional cases).\u00a0\r\n\r\nPull request here:\u00a0#3701 \r\n\r\n\r\n---\r\nNo further details from [BATCH-2783](https://jira.spring.io/browse/BATCH-2783?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/821", "user": "spring-issuemaster", "labels": ["has: backports", "in: test", "type: bug"], "created": "2019-01-11 23:31:57", "closed": "2020-05-19 08:29:28", "commits": {"670b6408daf80e15d1311671252d728c70bdaa3f": {"commitGHEventType": "referenced", "commitUser": "benas"}, "342554a72013af4d538c6d83fdff3c0c723f0339": {"commitGHEventType": "referenced", "commitUser": "benas"}}, "ttf": 493.0002777777778, "commitsDetails": [{"commitHash": "670b6408daf80e15d1311671252d728c70bdaa3f", "commitGHEventType": "referenced", "commitUser": "benas", "commitParents": ["28768dc0c681be774f02d3f35d5e49bb694c4d5b"], "nameRev": "670b6408daf80e15d1311671252d728c70bdaa3f tags/4.3.0-M1~24", "commitMessage": "Change getUniqueJobParameters() to use random number generator that has a lower chance of repeating\n\nIssue #821\n", "commitDateTime": "2020-05-19 10:04:47", "authoredDateTime": "2020-04-25 17:40:48", "commitGitStats": [{"filePath": "spring-batch-test/src/main/java/org/springframework/batch/test/JobLauncherTestUtils.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "spring-batch-test/src/test/java/org/springframework/batch/test/JobLauncherTestUtilsTests.java", "insertions": 17, "deletions": 0, "lines": 17}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JobLauncherTestUtils.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.test.JobLauncherTestUtils.getUniqueJobParameters()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "JobLauncherTestUtilsTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.test.JobLauncherTestUtilsTests.getUniqueJobParameters_doesNotRepeatJobParameters()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "342554a72013af4d538c6d83fdff3c0c723f0339", "commitGHEventType": "referenced", "commitUser": "benas", "commitParents": ["900a6738c4904f86e51499172bd61843c3bab447"], "nameRev": "342554a72013af4d538c6d83fdff3c0c723f0339 tags/4.2.3.RELEASE~6", "commitMessage": "Change getUniqueJobParameters() to use random number generator that has a lower chance of repeating\n\nIssue #821\n", "commitDateTime": "2020-05-19 10:24:05", "authoredDateTime": "2020-04-25 17:40:48", "commitGitStats": [{"filePath": "spring-batch-test/src/main/java/org/springframework/batch/test/JobLauncherTestUtils.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "spring-batch-test/src/test/java/org/springframework/batch/test/JobLauncherTestUtilsTests.java", "insertions": 17, "deletions": 0, "lines": 17}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JobLauncherTestUtils.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.test.JobLauncherTestUtils.getUniqueJobParameters()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "JobLauncherTestUtilsTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.test.JobLauncherTestUtilsTests.getUniqueJobParameters_doesNotRepeatJobParameters()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["670b6408daf80e15d1311671252d728c70bdaa3f"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "StaxEventItemReader does not allow to customise the XmlInputFactory [BATCH-2784]", "body": "**[Mahmoud Ben Hassine](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenhassine)** opened **[BATCH-2784](https://jira.spring.io/browse/BATCH-2784?redirect=false)** and commented\n\nAs of v4.1.0, it is not possible to use a custom `XmlInputFactory` with the `StaxEventItemReader`. This is necessary to be able to override the default settings of the factory before using it to create XML input streams.\n\n\n---\n\n**Affects:** 3.0.9, 4.0.1, 4.1.0\n\n**Backported to:** [4.0.2](https://github.com/spring-projects/spring-batch/milestone/91?closed=1), [3.0.10](https://github.com/spring-projects/spring-batch/milestone/92?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/820", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2019-01-14 15:05:29", "closed": "2019-01-14 15:09:46", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "How to fetch JPA repository from spring Batch [BATCH-2791]", "body": "**[Dayanand Pagam](https://jira.spring.io/secure/ViewProfile.jspa?name=dayanand.pagam)** opened **[BATCH-2791](https://jira.spring.io/browse/BATCH-2791?redirect=false)** and commented\n\nHello Team,\n\nI am using spring batch Itemreader to retrieve data from DB . But to fetch the data I want to use JPA repository instead of querysting.\n\nPlease let me know if there is any approach.\n\nThanks & Regards\n\nDayanand\n\n9930224746\n\n\n---\n\n**Affects:** 4.1.0\n", "url": "https://github.com/spring-projects/spring-batch/issues/813", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2019-02-01 05:16:00", "closed": "2019-02-01 08:43:14", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": " hibernate.default_batch_fetch_size option does not work in JpaPagingItemReader. [BATCH-2805]", "body": "**[jojoldu](https://jira.spring.io/secure/ViewProfile.jspa?name=jojoldu)** opened **[BATCH-2805](https://jira.spring.io/browse/BATCH-2805?redirect=false)** and commented\n\n(In Spring Boot Batch 2.1.3)\n\njpa I used hibernate.default_batch_fetch_size to improve performance, but it has no effect.\n\nFor JpaRepository and HibernateCursorItemRepository, these options work normally.\n\nAn N + 1 issue occurs.\n\nBelow is my test.\n\n\u00a0\n\nhttps://github.com/jojoldu/blog-code/blob/master/spring-batch-n1/src/main/java/com/jojoldu/batch/job/StoreBackupBatchConfiguration.java\n\n\u00a0\n\n\u00a0\n\n\n---\n\n**Affects:** 4.1.1\n", "url": "https://github.com/spring-projects/spring-batch/issues/802", "user": "spring-issuemaster", "labels": ["in: infrastructure", "status: declined", "type: bug"], "created": "2019-04-09 00:40:31", "closed": "2020-03-05 11:23:41", "commits": {}, "ttf": 331.0002777777778, "commitsDetails": []}, {"title": "When an error is thrown on process and an another error is thrown on write within a chunk during retry, the skippable item on write never processed. [BATCH-2818]", "body": "**[dornwelt](https://jira.spring.io/secure/ViewProfile.jspa?name=dornwelt)** opened **[BATCH-2818](https://jira.spring.io/browse/BATCH-2818?redirect=false)** and commented\n\nAfter the error [BATCH-2442](https://jira.spring.io/browse/BATCH-2442) has been fixed, the following error occurs: When an error is thrown on process and an another error is thrown on write within a chunk during retry, the write skip count is wrong and the onSkipInWrite - method on SkipListener never calls.\n\nIn attachment, the tescase testExceptionInProcessAndInWriteWithinChunk marked with \"CUSTOM\" and the possible solution that works for me.\n* read 6 items (chunk = 3)\n* while process last 3 items throw an error during process of item 4 and an error during write of item 6\n* The write skip count is 0. Expected 1.\n* The onSkipInWrite - method on SkipListener never calls\r\n  \u00a0\n\n\n\n---\n\n**Affects:** 4.1.0, 4.1.1, 4.1.2\n\n**Attachments:**\n- [FaultTolerantChunkProcessor.java](https://jira.spring.io/secure/attachment/26210/FaultTolerantChunkProcessor.java) (_20.89 kB_)\n- [FaultTolerantStepIntegrationTests.java](https://jira.spring.io/secure/attachment/26209/FaultTolerantStepIntegrationTests.java) (_9.10 kB_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/797", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2019-04-24 15:18:57", "closed": "2020-02-28 09:19:48", "commits": {}, "ttf": 309.0002777777778, "commitsDetails": []}, {"title": "Line tokenizer: Invalid quote char [BATCH-2820]", "body": "**[andre-castro-garcia](https://jira.spring.io/secure/ViewProfile.jspa?name=andre-castro-garcia)** opened **[BATCH-2820](https://jira.spring.io/browse/BATCH-2820?redirect=false)** and commented\n\nI'm using a FlatFileItemReaderBuilder to transfer some CSV files (in Brazilian Portuguese) to a MongoDB Database. In one of my records I have a line formatted as an example bellow:\n\n_03.730.263/0001-44;INSTITUCIONAL \"T' FUNDO DE INVESTIMENTO EM A\u00c7\u00d5ES;2005-03-22;2000-03-23.........._\n\nBecause the only one quote char (\") in the line, the tokenizer will not create all tokens. It occurs because he tries to find another quote char e there's no another char in the line.\n\nThe file that I'm trying to load:\u00a0http://dados.cvm.gov.br/dados/FI/CAD/DADOS/inf_cadastral_fi_20190503.csv\n\nExamples:\n\n1. Works on the rest of the lines:\n\n!image-2019-05-05-10-27-27-189.png!\n\n2. Not working on that line:\n\n!image-2019-05-05-10-39-37-889.png!\n\n\u00a0\n\n\n---\n\n**Attachments:**\n- [image-2019-05-05-10-27-27-189.png](https://jira.spring.io/secure/attachment/26214/image-2019-05-05-10-27-27-189.png) (_191.69 kB_)\n- [image-2019-05-05-10-39-37-889.png](https://jira.spring.io/secure/attachment/26213/image-2019-05-05-10-39-37-889.png) (_190.09 kB_)\n\n**Issue Links:**\n- [BATCH-2581](https://jira.spring.io/browse/BATCH-2581) DelimitedLineTokenizer always interprets quotes\n (_**\"duplicates\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/794", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2019-05-05 13:40:51", "closed": "2019-10-30 15:34:05", "commits": {}, "ttf": 178.00027777777777, "commitsDetails": []}, {"title": "Job Parameters are appended to same job when using incrementer [BATCH-2825]", "body": "**[Glenn Renfro](https://jira.spring.io/secure/ViewProfile.jspa?name=grenfro)** opened **[BATCH-2825](https://jira.spring.io/browse/BATCH-2825?redirect=false)** and commented\n\nWhen using an incrementer on a batch job that will be executed multiple times and for each execution the job keeps the job parameters from the previous examples.\n\nFor example:\n\nRun1 (with job param foo=bar) will have a job param of `foo=bar`\r\nRun2 (with job param foo=baz) will have a job param of `foo=baz`\r\nRun 3 (with job param baz=goo) will have a job param of `foo=baz, baz=goo`.\u00a0 Notice that foo=baz is still present even thought it was not passed in as a job param.\n\nAnd we are jut using the RunIdIncrementer as shown below:\n\n```java\n@Bean\r\npublic Job ingestJob() {\r\n return jobBuilderFactory.get(\"ingestJobMe\")\r\n    .incrementer(new RunIdIncrementer())\r\n    .flow(step1())\r\n    .end()\r\n    .build();\r\n}\r\n```\n\nThe batch execution stops this additive behavior if you remove the incrementer.\n\n\u00a0\n\n\n---\n\n**Affects:** 4.1.2\n", "url": "https://github.com/spring-projects/spring-batch/issues/789", "user": "spring-issuemaster", "labels": ["in: core", "status: declined", "type: bug"], "created": "2019-06-11 20:17:14", "closed": "2019-06-19 19:33:28", "commits": {}, "ttf": 7.000277777777778, "commitsDetails": []}, {"title": "JobLauncherTestUtils.launchStep() don't find step of a Flow with split [BATCH-2826]", "body": "**[atokle](https://jira.spring.io/secure/ViewProfile.jspa?name=atokle)** opened **[BATCH-2826](https://jira.spring.io/browse/BATCH-2826?redirect=false)** and commented\n\nI use spring-boot-starter-batch 2.1.5 that uses spring-batch 4.1.2\n\nI try to run two steps in parallell, and that works fine. I can also start the\u00a0JobLauncherTestUtils.launchJob(), and see that both steps is launched and runs.\n\nBut if I try to test a single step with\u00a0JobLauncherTestUtils.launchStep(\"step1\"), it throws an exception\u00a0\n\n```java\njava.lang.IllegalStateException: No Step found with name: [step1]\r\n at org.springframework.batch.test.JobLauncherTestUtils.launchStep(JobLauncherTestUtils.java:239)\r\n at org.springframework.batch.test.JobLauncherTestUtils.launchStep(JobLauncherTestUtils.java:189) \n```\n\n\u00a0\n\nThe batch is configured with Java Config like this.\u00a0(anymonized)\n\n```java\n@Configuration\r\n@ComponentScan(basePackageClasses = {UpdateStatusBatchConfig.class})\r\npublic class UpdateStatusBatchConfig {\r\n    private final JobBuilderFactory jobBuilderFactory;\r\n    private final StepBuilderFactory stepBuilderFactory;\r\n    private final MyDomainsstatusProcessor MyDomainsstatusProcessor;\r\n    private final MyDomainstatusWriter MyDomainstatusWriter;\r\n    private DataSource dataSource;    @Autowired\r\n    public UpdateStatusBatchConfig(JobBuilderFactory jobBuilderFactory,\r\n                                             StepBuilderFactory stepBuilderFactory,\r\n                                             @Qualifier(\"mydb.datasource\") DataSource dataSource,\r\n                                             MyDomainsstatusProcessor MyDomainsstatusProcessor,\r\n                                             MyDomainstatusWriter MyDomainstatusWriter) {\r\n        this.jobBuilderFactory = jobBuilderFactory;\r\n        this.stepBuilderFactory = stepBuilderFactory;\r\n        this.dataSource = dataSource;\r\n        this.MyDomainsstatusProcessor = MyDomainsstatusProcessor;\r\n        this.MyDomainstatusWriter = MyDomainstatusWriter;\r\n    }    \r\n\r\n    @Bean(\"splitFlow\")\r\n    Flow splitFlow(\r\n            @Qualifier(\"step2\") Step step2,\r\n            @Qualifier(\"step1\") Step step1) {\r\n        return new FlowBuilder<Flow>(\"splitFlow\")\r\n                .start(new FlowBuilder<Flow>(\"hentOgOppdaterFkOgYskStatuserFlow\").from(step2).build())\r\n                .split(new SimpleAsyncTaskExecutor())\r\n                .add(new FlowBuilder<Flow>(\"hentOgOppdaterAdrStatuserFlow\").from(step1).build())\r\n                .build();\r\n    }    \r\n\r\n    @Bean\r\n    public Job job1(\r\n            @Qualifier(\"splitFlow\") Flow splitFlow ) {\r\n        return jobBuilderFactory.get(\"job1\")\r\n                .incrementer(new RunIdIncrementer())\r\n                .start(splitFlow)\r\n                .end()\r\n                .build();\r\n    }    \r\n\r\n    @Bean(\"step2\")\r\n    public Step step2(\r\n            @Autowired MyDomainsMapper MyDomainsMapper) throws IOException {\r\n        return stepBuilderFactory.get(\"step2\")\r\n                .<MyDomain, MyDomainsStatus> chunk(1)\r\n                .faultTolerant()\r\n                .reader(MyDomain2Reader(MyDomainsMapper))\r\n                .processor(MyDomainsstatusProcessor)\r\n                .writer(MyDomainstatusWriter)\r\n                .build();\r\n    }    \r\n\r\n    @Bean(\"step1\")\r\n    public Step step1(\r\n            @Autowired MyDomainsMapper MyDomainsMapper) throws IOException {\r\n        return stepBuilderFactory.get(\"step1\")\r\n                .<MyDomain, MyDomainsStatus> chunk(1)\r\n                .faultTolerant()\r\n                .reader(MyDomain1Reader(MyDomainsMapper))\r\n                .processor(MyDomainsstatusProcessor)\r\n                .writer(MyDomainstatusWriter)\r\n                .build();\r\n    }    \r\n\r\n    @Bean(\"MyDomain1Reader\")\r\n    public JdbcCursorItemReader<MyDomain> MyDomain1Reader(@Autowired MyDomainsMapper MyDomainsMapper) throws IOException {\r\n        return new JdbcCursorItemReaderBuilder<MyDomain>()\r\n                .name(\"domain1ItemReader\")\r\n                .dataSource(dataSource)\r\n                .rowMapper(MyDomainsMapper)\r\n                .sql(new String(copyToByteArray(new ClassPathResource(\"MyDomain1.sql\").getInputStream()), Charset.forName(\"UTF-8\")))\r\n                .build();\r\n    }    \r\n\r\n    @Bean(\"MyDomain2Reader\")\r\n    public JdbcCursorItemReader<MyDomain> MyDomain2Reader(@Autowired MyDomainsMapper MyDomainsMapper) throws IOException {\r\n        return new JdbcCursorItemReaderBuilder<MyDomain>()\r\n                .name(\"domain2ItemReader\")\r\n                .dataSource(dataSource)\r\n                .rowMapper(MyDomainsMapper)\r\n                .sql(new String(copyToByteArray(new ClassPathResource(\"MyDomain2.sql\").getInputStream()), Charset.forName(\"UTF-8\")))\r\n                .build();\r\n    }\r\n}\n```\n\nIf I stop the test in the debugger at the line\u00a0JobLauncherTestUtils.launchStep(\"step1\") and inspects\u00a0\n\njobLauncherTestUtils.job.flow.startState.flows I can see the two subFlows but startState is null, and stateMap is empty.\u00a0\n\nIf I from debugger runs\u00a0\n\n((SimpleFlow) ((ArrayList) ((SplitState)((SimpleFlow)((FlowJob)jobLauncherTestUtils.job).flow).startState).flows).get(0)).afterPropertiesSet();\r\n((SimpleFlow) ((ArrayList) ((SplitState)((SimpleFlow)((FlowJob)jobLauncherTestUtils.job).flow).startState).flows).get(1)).afterPropertiesSet();\n\nI can see that the two fields is initialized, and\u00a0jobLauncherTestUtils will then find and run the step correctly.\n\n\n---\n\n**Affects:** 4.1.2\n", "url": "https://github.com/spring-projects/spring-batch/issues/788", "user": "spring-issuemaster", "labels": ["in: test", "type: bug"], "created": "2019-06-23 11:49:10", "closed": "2020-03-09 20:08:09", "commits": {}, "ttf": 260.0002777777778, "commitsDetails": []}, {"title": " JobExplorer.findJobInstancesByJobName(java.lang.String jobName, int start, int count) does not return job instances in descending order of job instance id [BATCH-2835]", "body": "**[hli-git3](https://jira.spring.io/secure/ViewProfile.jspa?name=hli-git3)** opened **[BATCH-2835](https://jira.spring.io/browse/BATCH-2835?redirect=false)** and commented\n\nJobExplorer.findJobInstancesByJobName(java.lang.String jobName, int start, int count) does not return a list of job instances in the descending order of created time(or job instance id).\u00a0\n\nThough the query used in\u00a0org.springframework.batch.core.repository.dao.JdbcJobInstanceDao\u00a0\n\nis:\n\nSELECT JOB_INSTANCE_ID, JOB_NAME from BATCH_JOB_INSTANCE where JOB_NAME like ? order by JOB_INSTANCE_ID desc\n\n,\n\nwhen I inspected the data in the list of job instances returned from the\u00a0.findJobInstancesByJobName , they are not ordered by job_instance_id.\n\n\u00a0\n\n\u00a0\n\n\n---\n\n**Affects:** 4.1.2\n", "url": "https://github.com/spring-projects/spring-batch/issues/781", "user": "spring-issuemaster", "labels": ["in: core", "status: invalid", "type: bug"], "created": "2019-07-25 15:15:53", "closed": "2019-08-26 18:05:26", "commits": {}, "ttf": 32.000277777777775, "commitsDetails": []}, {"title": "FlatFileItemReaderBuilder does not overrule comment prefixes in returned FlatFileItemReader [BATCH-2837]", "body": "**[Benne Otten](https://jira.spring.io/secure/ViewProfile.jspa?name=bolemeus)** opened **[BATCH-2837](https://jira.spring.io/browse/BATCH-2837?redirect=false)** and commented\n\nWhen using the FlatFileItemReaderBuilder to build your reader, it is not possible to overrule the comment prefixes defaults. Consider the following example\u00a0\n\n```java\n@Bean\r\npublic FlatFileItemReader<FieldSet> itemReader() {\r\n    return new FlatFileItemReaderBuilder<FieldSet>()\r\n            .name(\"itemReader\")\r\n            .resource(new ClassPathResource(\"file.xml\"))\r\n            .lineMapper(linemapper())\r\n            .comments(new String[]{})\r\n            .build();\r\n}\r\n```\n\nIn this example the default comment prefix of '#' is still set in the returned FlatFileItemReader. It took me a while to figure this out.\n\nIt's quite easy to circumvent this bug, like the next example, but it kinda defeats the purpose of using a builder.\n\n```java\n@Bean\r\npublic FlatFileItemReader<FieldSet> itemReader() {\r\n    FlatFileItemReader<FieldSet> itemReader = new FlatFileItemReaderBuilder<FieldSet>()\r\n            .name(\"itemReader\")\r\n            .resource(new ClassPathResource(\"file.xml\"))\r\n            .lineMapper(linemapper())\r\n            .build();\r\n    itemReader.setComments(new String[]{});\r\n    return itemReader;\r\n}\r\n```\n\nMaybe it's intentional to always set a comment prefix of '#', but I did not expect this. I'm using the reader to read some ancient file that does not adhere to modern guidelines.\n\n\n---\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/733\n\n**Backported to:** [4.3.0.M1](https://github.com/spring-projects/spring-batch/milestone/109?closed=1), [4.2.1](https://github.com/spring-projects/spring-batch/milestone/108?closed=1), [4.1.3](https://github.com/spring-projects/spring-batch/milestone/103?closed=1), [4.0.4](https://github.com/spring-projects/spring-batch/milestone/102?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/779", "user": "spring-issuemaster", "labels": ["has: backports", "type: bug"], "created": "2019-08-21 11:00:59", "closed": "2019-12-02 11:26:21", "commits": {}, "ttf": 103.00027777777778, "commitsDetails": []}, {"title": "Jackson2ExecutionContextStringSerializer fails when deserializing java.time.LocalDate [BATCH-2838]", "body": "**[Benne Otten](https://jira.spring.io/secure/ViewProfile.jspa?name=bolemeus)** opened **[BATCH-2838](https://jira.spring.io/browse/BATCH-2838?redirect=false)** and commented\n\nThe ObjectMapper used in the Jackson2ExecutionContextStringSerializer doesn't register the JavaTimeModule. Because of this you cannot put java.time objects in the Execution Context.\n\nI'd like to overrule the ObjectMapper used in the Jackson2ExecutionContextStringSerializer, and there's a setObjectMapper method for this very reason, but the objectmapper used in Jackson2ExecutionContextStringSerializer does register a JobParametersModule, which is a private inner class. This one does seem important, so overruling the used objectmapper seems a bad idea.\n\nThe simplest fix to this would be to register the JavaTimeModule in the Jackson2ExecutionContextStringSerializer, or to make the JobParametersModule public\n\n\n---\n\n**Issue Links:**\n- [BATCH-2828](https://jira.spring.io/browse/BATCH-2828) Allow for customisation of ObjectMapper in Jackson2ExecutionContextStringSerializer\n (_**\"duplicates\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/777", "user": "spring-issuemaster", "labels": ["status: duplicate", "type: bug"], "created": "2019-08-27 09:17:20", "closed": "2019-09-04 10:58:57", "commits": {}, "ttf": 8.000277777777777, "commitsDetails": []}, {"title": "Regression due to the fix of BATCH-2442 [BATCH-2840]", "body": "**[Conosci](https://jira.spring.io/secure/ViewProfile.jspa?name=conosci)** opened **[BATCH-2840](https://jira.spring.io/browse/BATCH-2840?redirect=false)** and commented\n\nI have a scenario where I believe this fix is causing another dangerous bug, some items don't end properly their lifecycle and are silenty ignored. The scenario is the following:\n* Job with 1 Step With Chunk Processing (ChunkSize=10)\n* Reader, Processor, Writer, all with faultTolerant() and skipPolicy(..) (Always Skip) and skipListener(..) to listen to 'onSkipInWrite' and 'onSkipInProcess'\n* Source Data with 3 Records: the first is a good record, the second is giving Processing Error and the third is giving Write Error (duplicate primary key against the first record)\n\nAt runtime, after the [BATCH-2442](https://jira.spring.io/browse/BATCH-2442) fix, the result is the following:\n1. Reader reads the 3 records chunk\n\n2. Processor start processing and meet Processing Error in the second record\n\n3. The System will skip (according to the configured policy) the second record and will invoke the SkipListener (onSkipInProcess) giving to the user the possibility to manage the issue\n\n4. The System will take the remaining 2 records (the first and the third), will process again them and will try to write them in chunk (same transaction)\n\n5. During the write the database will return exception (duplicate primary key)\n\n6. The System will go in 'recovery' mode and will start processing the two items one by one\n\n7. Now during the scan the following code will execute:\n\n   1. //BATCH-2442 : do not scan skipped items\r\n      if (!inputs.getSkips().isEmpty()) {\r\n      \u00a0 if (outputIterator.hasNext()) \\{ \u00a0\u00a0 outputIterator.remove(); \u00a0\u00a0 return; \u00a0 }\r\n      }\n8. The condition is then verified, there is a skip (the first Processor error for the second record) and one record from the remaining two (first and third) is then removed without any reason!\n\n9. At this point only 1 record is then available in outputIterator (the first record), and it will be written successfully.\n\n10. The job then ends with a non consistent state (there is a writeSkipCount element missing, the totals are wrong):\n\n    1. readCount = 3\n    2. processSkipCount = 1\n    3. writeCount = 1\n    4. writeSkipCount = 0\n    5. rollbackCount = 2\n    6. commitCount = 2\n11. Basically what happened is that removing the wrong element from the outputIterator, the system didn't catch the Write Exception and didn't execute the proper lifecycle (doOnWriteError/shouldSkip/onSkipInWrite) givinig no change to the user to know about the skipped element in the skipListener\n\n\u00a0\n\nThe same scenario is working well before the fix version, using Spring Batch version 4.0.1.RELEASE all the listeners are correctly invoked and the ending counts are correct.\n\n\n---\n\n**Affects:** 4.2.0, 4.0.3, 4.1.2\n\n**Reference URL:** https://jira.spring.io/browse/BATCH-2442\n\n**Attachments:**\n- [workspace.zip](https://jira.spring.io/secure/attachment/27490/workspace.zip) (_10.48 kB_)\n\n**Backported to:** [4.3.0.M1](https://github.com/spring-projects/spring-batch/milestone/109?closed=1), [4.2.1](https://github.com/spring-projects/spring-batch/milestone/108?closed=1), [4.1.3](https://github.com/spring-projects/spring-batch/milestone/103?closed=1), [4.0.4](https://github.com/spring-projects/spring-batch/milestone/102?closed=1)\n\n4 votes, 6 watchers\n", "url": "https://github.com/spring-projects/spring-batch/issues/775", "user": "spring-issuemaster", "labels": ["has: backports", "in: core", "type: bug"], "created": "2019-09-02 09:20:33", "closed": "2019-11-14 11:18:41", "commits": {}, "ttf": 73.00027777777778, "commitsDetails": []}, {"title": "Overridden nullable methods are not annotated as @Nullable JSR-305 [BATCH-2839]", "body": "**[mikeldpl](https://jira.spring.io/secure/ViewProfile.jspa?name=mikeldpl)** opened **[BATCH-2839](https://jira.spring.io/browse/BATCH-2839?redirect=false)** and commented\n\nI have some problems to use Kotlin with spring batch. Kotlin has strict validation on nullable vs nonnullable methods/parameters. But in spring-batch we have a lot of mistakes in JSR-305 annotations usage.\n\ne.g.\u00a0org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader#read method does not have\u00a0`@Nullable` annotation. But\u00a0org.springframework.batch.item.support package annotated as `@NonNullApi`. So \"read\" method is not nullable (but returns null).\n\n\n---\n\n**Affects:** 4.1.2\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/726, and commits https://github.com/spring-projects/spring-batch/commit/a7092a21e428cf904f210aff2682b518dc3649c5\n", "url": "https://github.com/spring-projects/spring-batch/issues/774", "user": "spring-issuemaster", "labels": ["type: bug"], "created": "2019-08-28 21:10:11", "closed": "2019-09-17 15:25:02", "commits": {}, "ttf": 19.00027777777778, "commitsDetails": []}, {"title": "Can't remove file(which was read in reader) in afterStep listener on Windows [BATCH-2842]", "body": "**[Nikolay Tkachev](https://jira.spring.io/secure/ViewProfile.jspa?name=gredwhite)** opened **[BATCH-2842](https://jira.spring.io/browse/BATCH-2842?redirect=false)** and commented\n\nWhen I run application on Windows mashine I experience following errror:\u00a0\n\n```java\n2019-09-09 12:08:13.752 WARN 4028 --- [ main] c.b.m.b.RemovingListener : Failed to remove chunk 0b9a2623-b4c3-42b2-9acf-373a2d81007c.csv java.nio.file.FileSystemException: D:\\chunk\\1.csv: The process cannot access the file because it is being used by another process. at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92) at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103) at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108) at java.base/sun.nio.fs.WindowsFileSystemProvider.implDelete(WindowsFileSystemProvider.java:270) at java.base/sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:110) at java.base/java.nio.file.Files.deleteIfExists(Files.java:1180) at my.super.project.batch.RemovingListener.afterStep(RemovingListener.java:31) at my.super.project.batch.RemovingListener$$FastClassBySpringCGLIB$$e695a1e2.invoke(<generated>) at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136) at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) at my.super.project.batch.RemovingListener$$EnhancerBySpringCGLIB$$10d47ff9.afterStep(<generated>)\n```\n\nplease take a look SO topic for more details:\u00a0https://stackoverflow.com/questions/57851429/cant-remove-file-from-batch-listener-on-windows-the-process-cannot-access-the\n\n\u00a0\n\nSource code to reproduce:\u00a0https://github.com/gredwhite/spring-batch-hello-world/tree/master/src/main/java/spring/boot/hello/process_cannot_access\n\n\u00a0\n\n\u00a0\n\nI found that it happens because of IO stream close(https://github.com/spring-projects/spring-batch/blob/4d3090ac023d1ebc9e95ef735378647b7db74f7e/spring-batch-core/src/main/java/org/springframework/batch/core/step/AbstractStep.java#L286) happens after listener invocation(https://github.com/spring-projects/spring-batch/blob/4d3090ac023d1ebc9e95ef735378647b7db74f7e/spring-batch-core/src/main/java/org/springframework/batch/core/step/AbstractStep.java#L247) so file can't be removed until the IO stream is not closed.\n\n\n---\n\n**Affects:** 4.2.0.RC1\n\n**Issue Links:**\n- [BATCH-2098](https://jira.spring.io/browse/BATCH-2098) FileItemReader should close the underlying reader before the step listener\n (_**\"duplicates\"**_)\n", "url": "https://github.com/spring-projects/spring-batch/issues/772", "user": "spring-issuemaster", "labels": ["in: core", "status: duplicate", "type: bug"], "created": "2019-09-10 13:05:58", "closed": "2019-11-08 22:04:00", "commits": {}, "ttf": 59.000277777777775, "commitsDetails": []}, {"title": "Empty String as delimiter is ignored [BATCH-2844]", "body": "**[NAGESWARA RAO CH](https://jira.spring.io/secure/ViewProfile.jspa?name=nagch)** opened **[BATCH-2844](https://jira.spring.io/browse/BATCH-2844?redirect=false)** and commented\n\nI want to use an empty String as a delimiter in my output file.\u00a0\u00a0\n\nCurrently, FlatFileItemWriterBuilder does not support it.\u00a0 An empty string as a delimiter\u00a0[is ignored](https://github.com/spring-projects/spring-batch/blob/master/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemWriterBuilder.java#L462)\u00a0and we end up having the default delimiter which is ',' . Please refer the stack overflow link for more details\n\n\u00a0Thanks\n\n\n---\n\n**Affects:** 4.1.2\n\n**Reference URL:** https://stackoverflow.com/questions/58068980/how-turn-off-delimiter-while-writing-to-a-file-using-spring-batch-itemwriter\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/62a2e65e204287196719451d1965c4fa0e2cce4a, https://github.com/spring-projects/spring-batch/commit/3f17b90438dcba87c362de014e6672d889f2fc69, https://github.com/spring-projects/spring-batch/commit/bfbaab5872893b223ceac22e2416ae4605ba3ded\n\n**Backported to:** [4.3.0.M1](https://github.com/spring-projects/spring-batch/milestone/109?closed=1), [4.2.1](https://github.com/spring-projects/spring-batch/milestone/108?closed=1), [4.1.3](https://github.com/spring-projects/spring-batch/milestone/103?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/770", "user": "spring-issuemaster", "labels": ["has: backports", "in: build", "type: bug"], "created": "2019-10-01 14:24:17", "closed": "2019-11-29 09:49:34", "commits": {}, "ttf": 58.000277777777775, "commitsDetails": []}, {"title": "Documentation: XSD specifies incorrect type for RetryPolicy [BATCH-2845]", "body": "**[abracadv8](https://jira.spring.io/secure/ViewProfile.jspa?name=abracadv8)** opened **[BATCH-2845](https://jira.spring.io/browse/BATCH-2845?redirect=false)** and commented\n\nThe spring-batch-3.0.xsd specifies the old RetryPolicy class, which was removed/refactored when the SpringRetry project was created.\n\nType:\u00a0<tool:expected-type type=\"org.springframework.batch.retry.RetryPolicy\" />\n\nI believe it should be\u00a0org.springframework.retry.RetryPolicy\n\nGit:\u00a0https://github.com/spring-projects/spring-batch/blob/master/spring-batch-core/src/main/resources/org/springframework/batch/core/configuration/xml/spring-batch-3.0.xsd#L934\u00a0\u00a0\n\n\u00a0\n\nIt's a minor issue which causes no functional issues other than my IDE (Intellij) highlights the attribute as a validation warning because type is unexpected.\n\nI could submit a quick PR if welcome.\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/4ad06b508164b787d41c8ba74e22eba82a53e5c9, https://github.com/spring-projects/spring-batch/commit/edc682a327ee33b6be3052b9e9b5f4f69666cdbd, https://github.com/spring-projects/spring-batch/commit/7860544a002c5685984fdfc29f21adeb7bc4eadf, https://github.com/spring-projects/spring-batch/commit/caa19d29c1e865339e5d522dae5a82f670efbf91\n\n**Backported to:** [4.3.0.M1](https://github.com/spring-projects/spring-batch/milestone/109?closed=1), [4.2.1](https://github.com/spring-projects/spring-batch/milestone/108?closed=1), [4.1.3](https://github.com/spring-projects/spring-batch/milestone/103?closed=1), [4.0.4](https://github.com/spring-projects/spring-batch/milestone/102?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/769", "user": "spring-issuemaster", "labels": ["has: backports", "in: documentation", "type: bug"], "created": "2019-10-01 17:32:46", "closed": "2019-11-15 14:05:00", "commits": {}, "ttf": 44.000277777777775, "commitsDetails": []}, {"title": "setScriptEvaluator method in ScriptItemProcessor removed in Spring Batch 4 [BATCH-2846]", "body": "**[David Geary](https://jira.spring.io/secure/ViewProfile.jspa?name=david_geary)** opened **[BATCH-2846](https://jira.spring.io/browse/BATCH-2846?redirect=false)** and commented\n\nThis method was added as a result of [BATCH-2270](https://jira.spring.io/browse/BATCH-2270).\n\nWe have recently upgraded to Spring Batch 4 and are getting compilation errors as this method has been removed.\n\n\n---\n\n**Affects:** 4.1.2\n", "url": "https://github.com/spring-projects/spring-batch/issues/768", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2019-10-02 16:54:19", "closed": "2020-03-13 08:52:44", "commits": {}, "ttf": 162.00027777777777, "commitsDetails": []}, {"title": "Incorrect error message when no FieldSetMapper is provided [BATCH-2848]", "body": "**[Mahmoud Ben Hassine](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenhassine)** opened **[BATCH-2848](https://jira.spring.io/browse/BATCH-2848?redirect=false)** and commented\r\n\r\nUsing the `FlatFileItemReaderBuilder`, when I provide a `LineTokenizer` but no `FieldSetMapper`, the error message I get is `No LineTokenizer implementation was provided` while it should be `No FieldSetMapper implementation was provided` instead. Here is a failing test:\r\n\r\n```java\r\n@Test\r\npublic void testErrorMessageWhenNoFieldSetMapperIsProvided() {\r\n\ttry {\r\n\t\tnew FlatFileItemReaderBuilder<Foo>()\r\n\t\t\t\t.name(\"fooReader\")\r\n\t\t\t\t.resource(getResource(\"1;2;3\"))\r\n\t\t\t\t.lineTokenizer(line -> new DefaultFieldSet(line.split(\";\")))\r\n\t\t\t\t.build();\r\n\t} catch (IllegalStateException exception) {\r\n\t\tString exceptionMessage = exception.getMessage();\r\n\t\tif (exceptionMessage.equals(\"No LineTokenizer implementation was provided.\")) {\r\n\t\t\tfail(\"Should not throw 'No LineTokenizer implementation was provided.'\" + \r\n\t\t\t\t \" exception when a LineTokenizer is provided\");\r\n\t\t}\r\n\t\tassertEquals(\"No FieldSetMapper implementation was provided.\", exceptionMessage);\r\n\t}\r\n}\r\n```\r\n\r\nThis test fails with `java.lang.IllegalStateException: No LineTokenizer implementation was provided.` which is obviously incorrect since I provided an implementation of `LineTokenizer`. In this particular case, it should rather fail with `No FieldSetMapper implementation was provided.` since I did not provide a `FieldSetMapper`.\r\n\r\n---\r\n\r\n**Affects:** 4.2.0, 4.0.3, 4.1.2\r\n", "url": "https://github.com/spring-projects/spring-batch/issues/766", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2019-10-10 14:28:36", "closed": "2020-03-17 22:45:16", "commits": {"f94446878ba7e070c95b3b7e53d1f8491f1126c5": {"commitGHEventType": "closed", "commitUser": "benas"}}, "ttf": 159.00027777777777, "commitsDetails": [{"commitHash": "f94446878ba7e070c95b3b7e53d1f8491f1126c5", "commitGHEventType": "closed", "commitUser": "benas", "commitParents": ["6ab141bb44bb86ee7aacd5d604fd37971a7344ee"], "nameRev": "f94446878ba7e070c95b3b7e53d1f8491f1126c5 tags/4.3.0-M1~52", "commitMessage": "Fix line tokenizer validation in FlatFileItemReaderBuilder\n\nResolves #766\n", "commitDateTime": "2020-03-17 23:27:47", "authoredDateTime": "2020-03-17 23:27:47", "commitGitStats": [{"filePath": "spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemReaderBuilder.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/builder/FlatFileItemReaderBuilderTests.java", "insertions": 19, "deletions": 1, "lines": 20}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FlatFileItemReaderBuilder.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.item.file.builder.FlatFileItemReaderBuilder.build()", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "FlatFileItemReaderBuilderTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.item.file.builder.FlatFileItemReaderBuilderTests.testErrorMessageWhenNoFieldSetMapperIsProvided()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f94446878ba7e070c95b3b7e53d1f8491f1126c5"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 2, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder"], "changesInPackagesSPOON": ["org.springframework.batch.item.file.builder.FlatFileItemReaderBuilder.build()"]}, {"title": "AbstractSqlPagingQueryProvider Does Not Handle Whitespace Besides the Space Character When Removing Keywords [BATCH-2849]", "body": "**[BenjaminHetzjelli](https://jira.spring.io/secure/ViewProfile.jspa?name=benjaminhetzjelli)** opened **[BATCH-2849](https://jira.spring.io/browse/BATCH-2849?redirect=false)** and commented\n\nThe current implementation of AbstractSqlPagingQueryProvider trims keywords, but only if they are followed immediately by a space character.\n\n\u00a0\n\nIn cases where the keyword is followed by a different whitespace character, the keyword is not removed and a sql syntax error is thrown upon use. Treating other whitespace characters the same as the space character will allow for more flexibility in how users can supply SQL to the query provider.\n\n\n---\nNo further details from [BATCH-2849](https://jira.spring.io/browse/BATCH-2849?redirect=false)", "url": "https://github.com/spring-projects/spring-batch/issues/765", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2019-10-17 23:54:31", "closed": "2020-03-04 10:04:26", "commits": {"7f01bf78cfce89e446f57d7f0410ccb14be4646b": {"commitGHEventType": "closed", "commitUser": "benas"}}, "ttf": 138.00027777777777, "commitsDetails": [{"commitHash": "7f01bf78cfce89e446f57d7f0410ccb14be4646b", "commitGHEventType": "closed", "commitUser": "benas", "commitParents": ["6103fe7306a8f7ed632e913de68ea08ce2716a6d"], "nameRev": "7f01bf78cfce89e446f57d7f0410ccb14be4646b tags/4.3.0-M1~58", "commitMessage": "Trim Keywords Followed By Whitespace Other Than The Character ' '\n\nModify `removeKeyWord(...)` such that the keyword is removed regardless\nof what kind of whitespace follows. This is especially useful for those\nwho read in SQL from a file which has been formatted such that keywords\nlive on their own lines.\n\nAdded unit tests for trimming whitespace.\n\nResolves #765\n", "commitDateTime": "2020-03-04 10:43:24", "authoredDateTime": "2019-10-17 23:32:12", "commitGitStats": [{"filePath": "spring-batch-infrastructure/src/main/java/org/springframework/batch/item/database/support/AbstractSqlPagingQueryProvider.java", "insertions": 5, "deletions": 4, "lines": 9}, {"filePath": "spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/support/AbstractSqlPagingQueryProviderTests.java", "insertions": 44, "deletions": 1, "lines": 45}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AbstractSqlPagingQueryProvider.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.item.database.support.AbstractSqlPagingQueryProvider.removeKeyWord(java.lang.String,java.lang.String)", "TOT": 9, "UPD": 3, "INS": 3, "MOV": 1, "DEL": 2}]}, {"spoonFilePath": "AbstractSqlPagingQueryProviderTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.batch.item.database.support.AbstractSqlPagingQueryProviderTests.testRemoveKeyWordsFollowedBySpaceChar()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.batch.item.database.support.AbstractSqlPagingQueryProviderTests.testRemoveKeyWordsFollowedByTabChar()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.batch.item.database.support.AbstractSqlPagingQueryProviderTests.testRemoveKeyWordsFollowedByNewLineChar()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["7f01bf78cfce89e446f57d7f0410ccb14be4646b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 5, "deletions": 4, "lines": 9, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 9, "UPD": 3, "INS": 3, "MOV": 1, "DEL": 2, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-batch-infrastructure/src/main/java/org/springframework/batch/item/database/support"], "changesInPackagesSPOON": ["org.springframework.batch.item.database.support.AbstractSqlPagingQueryProvider.removeKeyWord(java.lang.String,java.lang.String)"]}, {"title": "Update batch_job_execution_context resulted in DeadlockLoserDataAccessException [BATCH-2852]", "body": "**[parasightsystem](https://jira.spring.io/secure/ViewProfile.jspa?name=parasightsystem)** opened **[BATCH-2852](https://jira.spring.io/browse/BATCH-2852?redirect=false)** and commented\n\nWe run into the following exception sporadically when running the Spring Batch job.\u00a0 What may be causing the issue?\u00a0 Is there any database SQL optimization we should incorporate?\u00a0 What is the best way to handle it?\u00a0 Thanks for your help.\n\nCaused by: org.springframework.dao.DeadlockLoserDataAccessException: PreparedStatementCallback; SQL [UPDATE BATCH_JOB_EXECUTION_CONTEXT SET SHORT_CONTEXT = ?, SERIALIZED_CONTEXT = ? WHERE JOB_EXECUTION_ID = ?Deadlock found when trying to get lock; try restarting transaction; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLTransactionRollbackException: Deadlock found when trying to get lock; try restarting transaction\n\n\n---\n\n**Affects:** 4.1.2\n", "url": "https://github.com/spring-projects/spring-batch/issues/762", "user": "spring-issuemaster", "labels": ["status: declined", "type: bug"], "created": "2019-11-05 07:32:50", "closed": "2020-02-28 16:46:02", "commits": {}, "ttf": 115.00027777777778, "commitsDetails": []}, {"title": "Incorrect table name in Meta-Data Schema appendix [BATCH-2853]", "body": "**[Luigi Quitadamo](https://jira.spring.io/secure/ViewProfile.jspa?name=luigi.quitadamo@gmail.com)** opened **[BATCH-2853](https://jira.spring.io/browse/BATCH-2853?redirect=false)** and commented\r\n\r\nIndex suggested in docs (https://docs.spring.io/spring-batch/docs/current/reference/html/schema-appendix.html#recommendationsForIndexingMetaDataTables) doesn't match with tables created by spring batch.\r\n\r\n\u00a0\r\n|Default Table Name|Where Clause|Frequency|MATCH|\r\n|---|---|---|---|\r\n|BATCH_JOB_INSTANCE|JOB_NAME = ? and JOB_KEY = ?|Every time a job is launched|For SqlServer this index already exists (created by constraint)|\r\n|BATCH_JOB_EXECUTION|JOB_INSTANCE_ID = ?|Every time a job is restarted|\u00a0|\r\n|BATCH_EXECUTION_CONTEXT|EXECUTION_ID = ? and KEY_NAME = ?|On commit interval, a.k.a. chunk|This table doesn't exist|\r\n|BATCH_STEP_EXECUTION|VERSION = ?|On commit interval, a.k.a. chunk (and at start and end of step)|\u00a0|\r\n|BATCH_STEP_EXECUTION|STEP_NAME = ? and JOB_EXECUTION_ID = ?|Before each step execution|Is it correct the order for index? JOB_EXECUTION_ID is a foreign key so probably a better index should be (JOB_EXECUTION_ID,\u00a0STEP_NAME)|\r\n\r\n\u00a0\r\n\r\n\u00a0Furthermore, probably system needs index on\u00a0BATCH_JOB_EXECUTION_PARAMS.JOB_EXECUTION_ID because it has a foreign key constraint.\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\r\n---\r\n\r\n**Affects:** 3.0.10, 4.2.0, 4.1.1\r\n\r\n**Referenced from:** pull request https://github.com/spring-projects/spring-batch/pull/748\r\n", "url": "https://github.com/spring-projects/spring-batch/issues/761", "user": "spring-issuemaster", "labels": ["has: backports", "in: documentation", "type: bug"], "created": "2019-11-05 09:56:35", "closed": "2020-03-03 11:20:03", "commits": {}, "ttf": 119.00027777777778, "commitsDetails": []}, {"title": "Default value of comment prefix in FlatFileItemReaderBuilder is inconsistent with FlatFileItemReader [BATCH-2862]", "body": "**[Mahmoud Ben Hassine](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenhassine)** opened **[BATCH-2862](https://jira.spring.io/browse/BATCH-2862?redirect=false)** and commented\n\nThe default value of comment prefix is \"#\" in `FlatFileItemReader` but empty list in `FlatFileItemReaderBuilder`. This means we need to explicitly add this prefix when using the builder while it is implicit when creating the reader without the builder. Here are two tests that explain the issue:\n\n```java\n@Test\r\npublic void testDefaultCommentsWithoutBuilder() throws Exception {\r\n\tFlatFileItemReader<String> reader = new FlatFileItemReader<>();\r\n\t\t\treader.setName(\"itemReader\");\r\n\t\t\treader.setResource(getResource(\"line1\\n#line2\"));\r\n\t\t\treader.setLineMapper(new PassThroughLineMapper());\r\n\r\n\treader.open(new ExecutionContext());\r\n\tString item = reader.read();\r\n\tassertEquals(\"line1\", item);\r\n\tassertNull(reader.read()); // line \"#line2\" is ignored by default\r\n\treader.close();\r\n}\r\n\r\n@Test\r\npublic void testDefaultCommentsWithBuilder() throws Exception {\r\n\tFlatFileItemReader<String> reader = new FlatFileItemReaderBuilder<String>()\r\n\t\t\t.name(\"itemReader\")\r\n\t\t\t.resource(getResource(\"line1\\n#line2\"))\r\n\t\t\t.lineMapper(new PassThroughLineMapper())\r\n\t\t\t.build();\r\n\r\n\treader.open(new ExecutionContext());\r\n\tString item = reader.read();\r\n\tassertEquals(\"line1\", item);\r\n\tassertNull(reader.read()); // line \"#line2\" should be ignored by default, but it is not the case\r\n\treader.close();\r\n}\r\n```\n\n`testDefaultCommentsWithoutBuilder` passes while `testDefaultCommentsWithBuilder` fails. This is inconsistent, a builder should have the same defaults as the object it creates.\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/38b43e8aaf7dfd2dfb8e58831baca88f2f0185a3, https://github.com/spring-projects/spring-batch/commit/d7ff73be3bdd1942a3b548a50d4ec0b38ce2ff8b, https://github.com/spring-projects/spring-batch/commit/c2711d70b16a0599fadd15ecefce05a75e1ed005, https://github.com/spring-projects/spring-batch/commit/87f040e2349e0911053ac5ec0838f85e45f241ca\n\n**Backported to:** [4.3.0.M1](https://github.com/spring-projects/spring-batch/milestone/109?closed=1), [4.2.1](https://github.com/spring-projects/spring-batch/milestone/108?closed=1), [4.1.3](https://github.com/spring-projects/spring-batch/milestone/103?closed=1), [4.0.4](https://github.com/spring-projects/spring-batch/milestone/102?closed=1)\n", "url": "https://github.com/spring-projects/spring-batch/issues/753", "user": "spring-issuemaster", "labels": ["has: backports", "in: infrastructure", "type: bug"], "created": "2019-12-02 13:02:43", "closed": "2019-12-02 15:58:10", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}]}